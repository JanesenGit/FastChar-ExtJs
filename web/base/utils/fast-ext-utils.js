var FastExt;
(function (FastExt) {
    var Base = (function () {
        function Base() {
        }
        Base.getOS = function () {
            try {
                var sUserAgent = navigator.userAgent;
                var isWin = (navigator.platform === "Win32") || (navigator.platform === "Windows");
                var isMac = (navigator.platform === "Mac68K") || (navigator.platform === "MacPPC") || (navigator.platform === "Macintosh") || (navigator.platform === "MacIntel");
                if (isMac)
                    return "Mac";
                var isUnix = (navigator.platform === "X11") && !isWin && !isMac;
                if (isUnix)
                    return "Unix";
                var isLinux = (String(navigator.platform).indexOf("Linux") > -1);
                if (isLinux)
                    return "Linux";
                if (isWin) {
                    var isWin2K = sUserAgent.indexOf("Windows NT 5.0") > -1 || sUserAgent.indexOf("Windows 2000") > -1;
                    if (isWin2K)
                        return "Windows 2000";
                    var isWinXP = sUserAgent.indexOf("Windows NT 5.1") > -1 || sUserAgent.indexOf("Windows XP") > -1;
                    if (isWinXP)
                        return "Windows XP";
                    var isWin2003 = sUserAgent.indexOf("Windows NT 5.2") > -1 || sUserAgent.indexOf("Windows 2003") > -1;
                    if (isWin2003)
                        return "Windows 2003";
                    var isWinVista = sUserAgent.indexOf("Windows NT 6.0") > -1 || sUserAgent.indexOf("Windows Vista") > -1;
                    if (isWinVista)
                        return "Windows Vista";
                    var isWin7 = sUserAgent.indexOf("Windows NT 6.1") > -1 || sUserAgent.indexOf("Windows 7") > -1;
                    if (isWin7)
                        return "Windows 7";
                    var isWin8 = sUserAgent.indexOf("Windows NT 8.0") > -1 || sUserAgent.indexOf("Windows 8") > -1;
                    if (isWin8)
                        return "Windows 8";
                    var isWin10 = sUserAgent.indexOf("Windows NT 10.0") > -1 || sUserAgent.indexOf("Windows 10") > -1;
                    if (isWin10)
                        return "Windows 10";
                    return "Windows";
                }
            }
            catch (e) {
            }
            return "Other";
        };
        Base.deleteObjectAttr = function (attr) {
            var objects = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                objects[_i - 1] = arguments[_i];
            }
            for (var i = 0; i < objects.length; i++) {
                delete objects[i][attr];
            }
        };
        Base.toBool = function (obj, defaultValue) {
            if (Ext.isEmpty(defaultValue)) {
                defaultValue = false;
            }
            if (Ext.isEmpty(obj)) {
                return defaultValue;
            }
            if (Ext.isString(obj)) {
                if (obj === "0" || obj === "off" || obj.toLowerCase() === "false") {
                    return false;
                }
                if (obj === "1" || obj === "on" || obj.toLowerCase() === "true") {
                    return true;
                }
                return defaultValue;
            }
            if (Ext.isNumber(obj)) {
                if (obj === 0) {
                    return false;
                }
                if (obj === 1) {
                    return true;
                }
                return defaultValue;
            }
            if (Ext.isBoolean(obj)) {
                return obj;
            }
            return Boolean(obj);
        };
        Base.copyToBoard = function (content) {
            var oInput = document.createElement('input');
            oInput.value = content;
            document.body.appendChild(oInput);
            oInput.select();
            document.execCommand("Copy");
            oInput.style.display = 'none';
            $(oInput).remove();
        };
        Base.copy = function (obj) {
            var newObj = {};
            if (obj instanceof Array) {
                newObj = obj.concat();
            }
            else if (obj instanceof Function) {
                newObj = obj;
            }
            else {
                for (var key in obj) {
                    newObj[key] = obj[key];
                }
            }
            return newObj;
        };
        Base.loadFunction = function (functionStr) {
            try {
                if (functionStr.toString().trim().startsWith("function")) {
                    var functionKey = "do" + $.md5(functionStr);
                    if (Ext.isEmpty(FastExt.Cache.memory[functionKey])) {
                        var myScript = document.createElement("script");
                        myScript.type = "text/javascript";
                        var code = "let " + functionKey + "=" + functionStr;
                        try {
                            myScript.appendChild(document.createTextNode(code));
                        }
                        catch (ex) {
                            myScript.text = code;
                        }
                        document.body.appendChild(myScript);
                        FastExt.Cache.memory[functionKey] = true;
                    }
                    return eval(functionKey);
                }
            }
            catch (e) {
            }
            return function () {
            };
        };
        Base.download = function (url, fileName) {
            var name = url.split("?")[0].substring(url.lastIndexOf("/"));
            var a = document.createElement('a');
            var event = new MouseEvent('click');
            if (Ext.isEmpty(fileName)) {
                if (name.length === 0) {
                    fileName = "file" + name;
                }
                else {
                    fileName = name;
                }
            }
            a.download = fileName;
            a.href = url;
            a.dispatchEvent(event);
        };
        Base.openUrl = function (url, target) {
            if (Ext.isEmpty(target)) {
                target = FastEnum.Target._blank;
            }
            var a = document.createElement("a");
            if (!a.click) {
                window.location.href = url;
                return;
            }
            a.setAttribute("href", url);
            a.setAttribute("target", target);
            a.style.display = "none";
            $(document.body).append(a);
            a.click();
            $(a).remove();
        };
        Base.runCallBack = function (fun, param) {
            if (!Ext.isFunction(fun)) {
                return;
            }
            if (fun.callBacked) {
                return;
            }
            var callBackParams = [];
            for (var i = 1; i < arguments.length; i++) {
                callBackParams[i - 1] = arguments[i];
            }
            fun.apply(this, callBackParams);
            fun.callBacked = true;
        };
        Base.buildOnlyCode = function (prefix) {
            return prefix + $.md5(this.buildUUID8());
        };
        Base.buildOnlyNumber = function (prefix) {
            return prefix + Ext.now();
        };
        Base.getNumberValue = function (value) {
            return parseFloat(value.replace(/[^0-9]/ig, ""));
        };
        Base.prefixInteger = function (num, length) {
            return (Array(length).join('0') + num).slice(-length);
        };
        Base.getSVGIcon = function (className) {
            return '<svg class="svgIcon fileIcon" aria-hidden="true"><use xlink:href="#' + className + '"></use></svg>';
        };
        Base.getSVGClassName = function () {
            var types = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                types[_i] = arguments[_i];
            }
            for (var i = 0; i < types.length; i++) {
                var type = types[i].toString().toLowerCase();
                var fileClassName = undefined;
                if (FastExt.File.isSuffixFile(type, "doc", "docx")) {
                    fileClassName = "extFileWord";
                }
                else if (FastExt.File.isSuffixFile(type, "xls", "xlsx")) {
                    fileClassName = "extFileExcel";
                }
                else if (FastExt.File.isSuffixFile(type, "pdf")) {
                    fileClassName = "extFilePDF";
                }
                else if (FastExt.File.isSuffixFile(type, "ppt")) {
                    fileClassName = "extFilePPT";
                }
                else if (FastExt.File.isSuffixFile(type, "zip", "rar", "gzip")) {
                    fileClassName = "extFileZIP";
                }
                else if (FastExt.File.isSuffixFile(type, "apk", "aar")) {
                    fileClassName = "extFileAPK";
                }
                else if (FastExt.File.isSuffixFile(type, "jpg", "jpeg")) {
                    fileClassName = "extFileJPG";
                }
                else if (FastExt.File.isSuffixFile(type, "png")) {
                    fileClassName = "extFilePNG";
                }
                else if (FastExt.File.isSuffixFile(type, "psd")) {
                    fileClassName = "extFilePSD";
                }
                else if (FastExt.File.isSuffixFile(type, "html", "shtml")) {
                    fileClassName = "extFileHTMl";
                }
                else if (FastExt.File.isSuffixFile(type, "txt")) {
                    fileClassName = "extFileTXT";
                }
                else if (FastExt.File.isSuffixFile(type, "ipa")) {
                    fileClassName = "extFileIOS";
                }
                if (!Ext.isEmpty(fileClassName)) {
                    return fileClassName;
                }
            }
            return "extFile";
        };
        Base.guessDateFormat = function (value) {
            return FastExt.Dates.guessDateFormat(value);
        };
        Base.parseDate = function (dateValue) {
            return FastExt.Dates.parseDate(dateValue);
        };
        Base.getUrlContentType = function (url, callback) {
            if (!url || !callback) {
                return;
            }
            var onlyCode = $.md5(url.toString());
            var cacheXhr = FastExt.Cache.getCache(onlyCode);
            if (cacheXhr) {
                callback(cacheXhr);
                return;
            }
            $.ajax({
                type: 'HEAD',
                url: url,
                complete: function (xhr, data) {
                    FastExt.Cache.setCache(onlyCode, xhr.getResponseHeader("content-type"));
                    callback(xhr.getResponseHeader("content-type"));
                },
                error: function () {
                    FastExt.Cache.setCache(onlyCode, "un-know");
                    callback("un-know");
                }
            });
        };
        Base.inputFocusEnd = function (obj) {
            try {
                obj.focus();
                var len = obj.value.length;
                if (document["selection"]) {
                    var sel = obj.createTextRange();
                    sel.moveStart('character', len);
                    sel.collapse();
                    sel.select();
                }
                else if (typeof obj.selectionStart == 'number' && typeof obj.selectionEnd == 'number') {
                    obj.selectionStart = obj.selectionEnd = len;
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        Base.randomInt = function (min, max) {
            if (min === max) {
                return min;
            }
            return Math.floor(Math.random() * (max - min + 1) + min);
        };
        Base.getTargetElement = function (target) {
            return FastExt.Component.getTargetElement(target);
        };
        Base.getTargetBodyElement = function (target) {
            return FastExt.Component.getTargetBodyElement(target);
        };
        Base.isElementInViewport = function (element) {
            try {
                var rect = element.getBoundingClientRect();
                if (rect.width <= 0 && rect.height <= 0) {
                    return false;
                }
                return (rect.top >= 0 &&
                    rect.left >= 0 &&
                    rect.bottom <=
                        (window.innerHeight || document.documentElement.clientHeight) &&
                    rect.right <=
                        (window.innerWidth || document.documentElement.clientWidth));
            }
            catch (e) {
            }
            return false;
        };
        Base.loadCssCode = function (style, callBack) {
            var oHead = document.getElementsByTagName('head').item(0);
            var oStyle = document.createElement("style");
            oStyle.type = "text/css";
            if (oStyle["styleSheet"]) {
                oStyle["styleSheet"].cssText = style;
            }
            else {
                oStyle.innerHTML = style;
            }
            if (callBack != null) {
                callBack();
            }
            oHead.appendChild(oStyle);
        };
        Base.dispatchTargetEvent = function (targetDocument, targetElement, eventName) {
            if (!targetElement || !targetDocument) {
                return;
            }
            if (targetDocument.createEvent) {
                var event_1 = targetDocument.createEvent('MouseEvents');
                event_1.initEvent(eventName, true, false);
                targetElement.dispatchEvent(event_1);
            }
            else if (targetDocument.createEventObject) {
                targetElement.fireEvent('on' + eventName);
            }
        };
        Base.buildUUID4 = function () {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        };
        Base.buildUUID8 = function () {
            return (((1 + Math.random()) * 0x100000000) | 0).toString(16).substring(1);
        };
        Base.buildUUID12 = function () {
            return FastExt.Base.buildUUID4() + FastExt.Base.buildUUID8();
        };
        Base.buildUUID16 = function () {
            return FastExt.Base.buildUUID8() + FastExt.Base.buildUUID8();
        };
        Base.getUrlParams = function (url, paramName) {
            var re = new RegExp(paramName + '=([^&]*)(?:&)?');
            return url.match(re) && url.match(re)[1];
        };
        Base.toString = function (value, defaultValue) {
            if (defaultValue === undefined || defaultValue === null) {
                defaultValue = value;
            }
            if (Ext.isEmpty(value)) {
                return defaultValue;
            }
            return value.toString();
        };
        Base.toInt = function (value, defaultValue) {
            if (defaultValue === undefined || defaultValue === null) {
                defaultValue = value;
            }
            if (Ext.isEmpty(value) || isNaN(value)) {
                return defaultValue;
            }
            return parseInt(value);
        };
        Base.toMaxString = function (value, maxLength) {
            var realString = FastExt.Base.toString(value, "");
            if (realString.length > maxLength) {
                return realString.substring(0, maxLength) + "…";
            }
            return realString;
        };
        Base.toPlanParams = function (params) {
            var paramArray = [];
            for (var i = 0; i < params.length; i++) {
                var value = params[i];
                if (Ext.isString(value)) {
                    paramArray.push("\"" + value + "\"");
                }
                else {
                    paramArray.push(value);
                }
            }
            return paramArray.join(",");
        };
        Base.getEmptyPromise = function () {
            return new Ext.Promise(function (resolve, reject) {
                resolve();
            });
        };
        Base.toByteUnit = function (value, digits) {
            if (Ext.isEmpty(digits)) {
                digits = 2;
            }
            var aLong = parseInt(value);
            if (aLong === 0) {
                return "0";
            }
            var aG = 1024.0 * 1024.0 * 1024.0;
            if (aLong > aG) {
                return (aLong / aG).toFixed(digits) + "G";
            }
            var aM = 1024.0 * 1024.0;
            if (aLong > aM) {
                return (aLong / aM).toFixed(digits) + "M";
            }
            var aKb = 1024.0;
            if (aLong > aKb) {
                return (aLong / aKb).toFixed(digits) + "KB";
            }
            return aLong + "B";
        };
        return Base;
    }());
    FastExt.Base = Base;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Button = (function () {
        function Button() {
        }
        Button.buttonToMenuItem = function (button) {
            if (button.hidden || Ext.isEmpty(button.text) || button.text === "&#160;") {
                return null;
            }
            var child = {
                icon: button.icon,
                iconCls: button.iconCls,
                text: button.text,
                subtext: button.subtext,
                handler: button.handler,
                disabled: button.disabled
            };
            if (button.getMenu() != null) {
                var menus_1 = [];
                button.getMenu().items.each(function (item, index) {
                    var items = FastExt.Button.buttonToMenuItem(item);
                    if (items) {
                        menus_1.push(items);
                    }
                });
                child["menu"] = menus_1;
            }
            return child;
        };
        Button.checkGridToolbarButton = function (button) {
            var grid = button.up('grid,treepanel');
            if (grid) {
                if (!Ext.isEmpty(button.text) && FastExt.Base.toBool(button.contextMenu, true)) {
                    var buttonMenu = FastExt.Button.buttonToMenuItem(button);
                    FastExt.Grid.addGridContextMenu(grid, buttonMenu);
                }
                FastExt.Button.buttonToBind(grid, button);
            }
        };
        Button.checkButtonBind = function (array, button) {
            if (!array) {
                return false;
            }
            if (!button) {
                return false;
            }
            for (var i = 0; i < array.length; i++) {
                if (array[i].getId() === button.getId()) {
                    return true;
                }
            }
            return false;
        };
        Button.setDisabled = function (button, disabled) {
            if (button) {
                button.setDisabled(disabled);
                if (button.overflowClone) {
                    button.overflowClone.setDisabled(disabled);
                }
            }
        };
        Button.buttonToBind = function (grid, button) {
            if (!grid.selectButtons) {
                grid.selectButtons = [];
            }
            if (!grid.updateButtons) {
                grid.updateButtons = [];
            }
            if (!grid.addButtons) {
                grid.addButtons = [];
            }
            if (!grid.deleteButtons) {
                grid.deleteButtons = [];
            }
            if (!grid.bindDetailButtons) {
                grid.bindDetailButtons = [];
            }
            if (!grid.entityCodeButtons) {
                grid.entityCodeButtons = [];
            }
            var buttonHidden = button.isHidden();
            if (FastExt.Base.toBool(button.hiddenValid)) {
                buttonHidden = false;
            }
            if (button.checkSelect && !buttonHidden) {
                FastExt.Button.setDisabled(button, true);
                if (!FastExt.Button.checkButtonBind(grid.selectButtons, button)) {
                    grid.selectButtons.push(button);
                }
            }
            if ((button.checkUpdate || button.entityUpdateButton) && !buttonHidden) {
                FastExt.Button.setDisabled(button, true);
                if (!FastExt.Button.checkButtonBind(grid.updateButtons, button)) {
                    grid.updateButtons.push(button);
                }
            }
            if (button.entityAddButton && !buttonHidden) {
                if (!FastExt.Button.checkButtonBind(grid.addButtons, button)) {
                    grid.addButtons.push(button);
                }
            }
            if (button.entityDeleteButton && !buttonHidden) {
                if (!FastExt.Button.checkButtonBind(grid.deleteButtons, button)) {
                    grid.deleteButtons.push(button);
                }
            }
            if (button.bindDetail && Ext.isFunction(button.handler) && !buttonHidden) {
                if (!FastExt.Button.checkButtonBind(grid.bindDetailButtons, button)) {
                    grid.bindDetailButtons.push(button);
                }
            }
            if (button.entityCode) {
                if (!FastExt.Button.checkButtonBind(grid.entityCodeButtons, button)) {
                    grid.entityCodeButtons.push(button);
                }
            }
            if (Ext.isFunction(button.getMenu) && button.getMenu() != null) {
                button.getMenu().items.each(function (item, index) {
                    FastExt.Button.buttonToBind(grid, item);
                });
            }
            if (button.items != null) {
                button.items.each(function (item, index) {
                    FastExt.Button.buttonToBind(grid, item);
                });
            }
        };
        return Button;
    }());
    FastExt.Button = Button;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Cache = (function () {
        function Cache() {
        }
        Cache.setCache = function (key, data) {
            try {
                localStorage.setItem(key, JSON.stringify(data));
            }
            catch (e) {
            }
        };
        Cache.getCache = function (key) {
            try {
                return JSON.parse(localStorage.getItem(key));
            }
            catch (e) {
            }
            return null;
        };
        Cache.removeCache = function (key) {
            localStorage.removeItem(key);
        };
        Cache.setEnumCache = function (enumName, cacheKey, data) {
            if (!this.memory.hasOwnProperty(enumName)) {
                this.memory[enumName] = {};
            }
            if (!this.memory[enumName]) {
                this.memory[enumName] = {};
            }
            this.memory[enumName][cacheKey] = data;
        };
        Cache.getEnumCache = function (enumName, cacheKey) {
            if (!this.memory.hasOwnProperty(enumName)) {
                this.memory[enumName] = {};
            }
            if (!this.memory[enumName]) {
                this.memory[enumName] = {};
            }
            return this.memory[enumName][cacheKey];
        };
        Cache.getEnumAllCache = function (enumName) {
            if (!this.memory.hasOwnProperty(enumName)) {
                this.memory[enumName] = {};
            }
            if (!this.memory[enumName]) {
                this.memory[enumName] = {};
            }
            return this.memory[enumName];
        };
        Cache.existEnumCache = function (enumName, cacheKey) {
            if (!this.memory.hasOwnProperty(enumName)) {
                return false;
            }
            if (!this.memory[enumName]) {
                return false;
            }
            var cacheData = this.getEnumCache(enumName, cacheKey);
            return !Ext.isEmpty(cacheData);
        };
        Cache.clearEnumCache = function (enumName) {
            delete this.memory[enumName];
            this.memory[enumName] = null;
        };
        Cache.memory = {};
        return Cache;
    }());
    FastExt.Cache = Cache;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Captcha = (function () {
        function Captcha() {
        }
        Captcha.getLoginCaptchaCmp = function () {
            var loginNormal = FastExt.System.getExt("login-type").value === "normal";
            if (loginNormal) {
                return {
                    xtype: "label",
                    hidden: true,
                };
            }
            if (window["showValidCaptcha"] && Ext.isFunction(window["showValidCaptcha"])) {
                return this.getClickCaptchaCmp();
            }
            return this.getNormalCaptchaCmp();
        };
        Captcha.getNormalCaptchaCmp = function () {
            var labelWidth = FastExt.Base.getNumberValue(FastExt.System.fontSize) * 2;
            return {
                xtype: 'fieldcontainer',
                labelWidth: 0,
                anchor: "100%",
                itemId: "captcha",
                layout: {
                    type: 'hbox',
                    align: 'stretch'
                },
                refreshCode: function () {
                    try {
                        var imgCmp = this.query("#imgCode")[0];
                        var inputCmp = this.query("#validateCode")[0];
                        if (inputCmp) {
                            inputCmp.setValue(null);
                            imgCmp.setSrc("showCaptcha?t=" + Math.random());
                        }
                    }
                    catch (e) {
                        console.error(e);
                    }
                },
                items: [
                    {
                        xtype: 'textfield',
                        fieldLabel: '<svg class="svgIcon" aria-hidden="true"><use xlink:href="#extLoginCode"></use></svg>',
                        labelAlign: "right",
                        labelWidth: labelWidth,
                        labelSeparator: '',
                        labelStyle: "font-size: 20px !important;color: #888888;",
                        margin: '10 10 0 0',
                        allowBlank: false,
                        flex: 1,
                        name: 'validateCode',
                        itemId: "validateCode",
                        letterKeyboard: true,
                        emptyText: '请输入验证码',
                        blankText: '请输入验证码'
                    }, {
                        xtype: 'image',
                        margin: '10 10 0 0',
                        width: 74,
                        cls: 'validCodeImg',
                        itemId: 'imgCode',
                        height: 34,
                        listeners: {
                            click: {
                                element: 'el',
                                fn: function () {
                                    this.component.up("#captcha").refreshCode();
                                }
                            }
                        },
                    }
                ],
            };
        };
        Captcha.getClickCaptchaCmp = function () {
            var labelWidth = FastExt.Base.getNumberValue(FastExt.System.fontSize) * 2;
            var captchaKey = FastExt.Base.buildOnlyCode("CK");
            return {
                xtype: 'fieldcontainer',
                labelWidth: 0,
                anchor: "100%",
                itemId: "captcha",
                layout: {
                    type: 'hbox',
                    align: 'stretch'
                },
                refreshCode: function () {
                    var validateCodeTip = this.down("#validateCodeTip");
                    if (validateCodeTip) {
                        validateCodeTip.setValue(null);
                        validateCodeTip.removeCls("validSuccess");
                        validateCodeTip.setFieldLabel('<svg class="svgIcon" aria-hidden="true"><use xlink:href="#extPower"></use></svg>');
                    }
                },
                showValid: function () {
                    var me = this;
                    window["showValidCaptcha"](me, function (result) {
                        var validateCodeTip = me.down("#validateCodeTip");
                        if (result.success) {
                            validateCodeTip.setValue("安全验证通过！");
                            validateCodeTip.setFieldLabel('<svg class="svgIcon extRole" aria-hidden="true"><use xlink:href="#extLoginCode"></use></svg>');
                            validateCodeTip.addCls("validSuccess");
                            validateCodeTip.clearInvalid();
                        }
                        else {
                            me.refreshCode();
                        }
                    }, captchaKey);
                },
                items: [
                    {
                        xtype: "hiddenfield",
                        name: "captchaKey",
                        value: captchaKey,
                    },
                    {
                        xtype: 'textfield',
                        fieldLabel: '<svg class="svgIcon" aria-hidden="true"><use xlink:href="#extPower"></use></svg>',
                        labelAlign: "right",
                        labelWidth: labelWidth,
                        labelSeparator: '',
                        labelStyle: "font-size: 20px !important;color: #888888;",
                        margin: '10 10 0 0',
                        allowBlank: false,
                        flex: 1,
                        name: '@',
                        itemId: "validateCodeTip",
                        letterKeyboard: true,
                        emptyText: '请您完成安全验证',
                        blankText: '请您先完成安全验证',
                        triggers: {
                            openValide: {
                                cls: 'extIcon extMouseClick',
                                hideOnReadOnly: false,
                                handler: function () {
                                    if (Ext.isEmpty(this.getValue())) {
                                        this.up("#captcha").showValid();
                                    }
                                    else {
                                        FastExt.Dialog.toast("您已通过安全验证，无需再次验证！");
                                    }
                                }
                            }
                        },
                        listeners: {
                            render: function () {
                                if (Ext.isFunction(this.setReadOnlyAttr)) {
                                    this.setReadOnlyAttr(true);
                                }
                            },
                        },
                    }
                ],
            };
        };
        return Captcha;
    }());
    FastExt.Captcha = Captcha;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Color = (function () {
        function Color() {
        }
        Color.toColor = function (obj, defaultValue) {
            if (Ext.isEmpty(defaultValue)) {
                defaultValue = "#FFFFFF";
            }
            if (Ext.isEmpty(obj)) {
                return defaultValue;
            }
            if (obj.toString().startWith("#")) {
                return obj.toString();
            }
            try {
                obj = obj.toString().replaceAll(" ", "");
                var color = Ext.ux.colorpick.ColorUtils.parseColor(obj);
                return "#" + Ext.ux.colorpick.ColorUtils.formats.HEX8(color);
            }
            catch (e) {
            }
            return "#" + obj;
        };
        Color.showColorPicker = function (obj, defaultValue, onColorChange) {
            if (Ext.isEmpty(defaultValue)) {
                defaultValue = "#42445a";
            }
            return new Ext.Promise(function (resolve, reject) {
                var doShowPicker = function () {
                    FastExt.Color.loadedPickrJs = true;
                    var menu = Ext.create('Ext.menu.Menu', {
                        showSeparator: false,
                        layout: 'border',
                        padding: '0 0 0 0',
                        style: {
                            background: "#ffffff"
                        },
                        alwaysOnTop: true,
                        width: 250,
                        height: 320,
                        listeners: {
                            hide: function (obj, epts) {
                                obj.close();
                                FastExt.Base.runCallBack(resolve);
                            }
                        },
                        items: [
                            {
                                xtype: 'container',
                                region: 'center',
                                margin: '0 0 0 0',
                                border: 0,
                                listeners: {
                                    afterrender: function () {
                                        var colorPicker = new Pickr({
                                            el: FastExt.Base.getTargetBodyElement(this),
                                            theme: 'monolith',
                                            inline: true,
                                            default: defaultValue,
                                            showAlways: true,
                                            useAsButton: true,
                                            swatches: [
                                                'rgba(244, 67, 54, 1)',
                                                'rgba(233, 30, 99, 0.95)',
                                                'rgba(156, 39, 176, 0.9)',
                                                'rgba(103, 58, 183, 0.85)',
                                                'rgba(63, 81, 181, 0.8)',
                                                'rgba(33, 150, 243, 0.75)',
                                                'rgba(3, 169, 244, 0.7)',
                                                'rgba(0, 188, 212, 0.7)',
                                                'rgba(0, 150, 136, 0.75)',
                                                'rgba(76, 175, 80, 0.8)',
                                                'rgba(139, 195, 74, 0.85)',
                                                'rgba(205, 220, 57, 0.9)',
                                                'rgba(255, 235, 59, 0.95)',
                                                'rgba(255, 193, 7, 1)'
                                            ],
                                            components: {
                                                preview: true,
                                                opacity: true,
                                                hue: true,
                                                interaction: {
                                                    hex: true,
                                                    input: true,
                                                    rgba: true
                                                }
                                            }
                                        });
                                        colorPicker.on('change', function (color, source, instance) {
                                            if (Ext.isFunction(onColorChange)) {
                                                onColorChange(color, source, instance);
                                            }
                                        });
                                    },
                                }
                            }
                        ]
                    });
                    menu.showBy(obj);
                };
                if (!FastExt.Color.loadedPickrJs) {
                    FastExt.System.addScript({ src: FastExt.Color.pickrJsPath }, function () {
                        FastExt.System.addStylesheet({ href: FastExt.Color.pickrThemePath }, doShowPicker);
                    });
                }
                else {
                    doShowPicker();
                }
            });
        };
        Color.pickrJsPath = "base/colorpicker/pickr.es5.min.js";
        Color.pickrThemePath = "base/colorpicker/monolith.min.css";
        return Color;
    }());
    FastExt.Color = Color;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Component = (function () {
        function Component() {
        }
        Component.shakeComment = function (cmb, callBack, shakeCount) {
            if (!cmb) {
                return;
            }
            if (cmb.zIndexManager) {
                cmb.toFront(true);
            }
            if (!shakeCount) {
                shakeCount = 1588;
            }
            try {
                var currX_1 = cmb.getX();
                var currY_1 = cmb.getY();
                var interval_1, t_1 = 0, z_1 = 6, stopShake_1 = function () {
                    clearInterval(interval_1);
                    cmb.setX(currX_1);
                    cmb.setY(currY_1);
                    if (Ext.isFunction(callBack)) {
                        callBack();
                    }
                };
                interval_1 = setInterval(function () {
                    try {
                        var i = t_1 / 180 * Math.PI, x = Math.sin(i) * z_1, y = Math.cos(i) * z_1;
                        cmb.setX(currX_1 + x);
                        cmb.setY(currY_1 + y);
                        if ((t_1 += 90) > shakeCount) {
                            stopShake_1();
                        }
                    }
                    catch (e) {
                        stopShake_1();
                    }
                }, 30);
            }
            catch (e) {
            }
        };
        Component.isCenterByContainer = function (cmb) {
            var parentCmb = cmb.ownerCt;
            if (Ext.isEmpty(parentCmb)) {
                parentCmb = cmb.container;
            }
            if (cmb.constrain) {
                parentCmb = cmb.constrainTo;
            }
            if (parentCmb) {
                var preX = parseInt(((parentCmb.getWidth() - cmb.getWidth()) / 2).toFixed(0));
                var preY = parseInt(((parentCmb.getHeight() - cmb.getHeight()) / 2).toFixed(0));
                console.log("preX", preX, "preY", preY);
                console.log("X", cmb.x, "Y", cmb.y);
                if (preX == cmb.x && preY == cmb.y) {
                    return true;
                }
            }
            return false;
        };
        Component.isSameByContainer = function (cmb1, cmb2) {
            var parentCmb1 = cmb1.ownerCt;
            if (Ext.isEmpty(parentCmb1)) {
                parentCmb1 = cmb1.container;
            }
            if (cmb1.constrain) {
                parentCmb1 = cmb1.constrainTo;
            }
            var parentCmb2 = cmb2.ownerCt;
            if (Ext.isEmpty(parentCmb2)) {
                parentCmb2 = cmb2.container;
            }
            if (cmb2.constrain) {
                parentCmb2 = cmb2.constrainTo;
            }
            if (parentCmb1 && parentCmb2) {
                return parentCmb1.id == parentCmb2.id;
            }
            return false;
        };
        Component.futureQuery = function (selector, callback, timeout, queryOwner) {
            if (Ext.isEmpty(timeout)) {
                timeout = -1;
            }
            if (Ext.isEmpty(queryOwner)) {
                queryOwner = Ext.ComponentQuery;
            }
            var timeoutCode = "FutureQueryTimeout" + $.md5(selector);
            var doQuery = function (count, waitTime) {
                if (FastExt.Component[timeoutCode]) {
                    clearTimeout(FastExt.Component[timeoutCode]);
                }
                if (count * waitTime >= timeout && timeout > 0) {
                    callback();
                    return;
                }
                FastExt.Component[timeoutCode] = setTimeout(function () {
                    var queryCmp = queryOwner.query(selector);
                    if (queryCmp && queryCmp.length > 0) {
                        if (callback(queryCmp)) {
                            return;
                        }
                    }
                    doQuery(count + 1, waitTime + count * 10);
                }, waitTime);
            };
            doQuery(1, 0);
        };
        Component.countVisible = function (cmpArray) {
            var visibleCount = 0;
            for (var _i = 0, cmpArray_1 = cmpArray; _i < cmpArray_1.length; _i++) {
                var cmp = cmpArray_1[_i];
                if (cmp.isHidden()) {
                    continue;
                }
                visibleCount++;
            }
            return visibleCount;
        };
        Component.getMaxZIndex = function (defaultIndex) {
            var maxZIndex = defaultIndex;
            var allDialog = $("body").children();
            for (var i = 0; i < allDialog.length; i++) {
                if (!$(allDialog[i]).is(":visible")) {
                    continue;
                }
                var currIndex = parseInt(allDialog[i].style.zIndex || 0);
                if (currIndex === FastExt.Component.pageMaxZIndex) {
                    continue;
                }
                maxZIndex = Math.max(maxZIndex, currIndex);
            }
            return maxZIndex;
        };
        Component.getTargetElement = function (target) {
            if (target) {
                if (Ext.isElement(target)) {
                    return target;
                }
                if (!Ext.isEmpty(target.xtype)) {
                    if (target.getEl()) {
                        return target.getEl().dom;
                    }
                }
            }
            return null;
        };
        Component.getTargetBodyElement = function (target) {
            if (target) {
                if (!Ext.isEmpty(target.xtype) && target.body) {
                    return target.body.dom;
                }
            }
            return this.getTargetElement(target);
        };
        Component.pageMaxZIndex = 2147483647;
        return Component;
    }());
    FastExt.Component = Component;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Dates = (function () {
        function Dates() {
            Dates.initDateFormatStore();
        }
        Dates.initDateFormatStore = function () {
            Dates.dateFormatStore["[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}"] = "Y-m-d H:i:s";
            Dates.dateFormatStore["[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}"] = "Y-m-d H:i";
            Dates.dateFormatStore["[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}"] = "Y-m-d H";
            Dates.dateFormatStore["[0-9]{4}-[0-9]{2}-[0-9]{2}"] = "Y-m-d";
            Dates.dateFormatStore["[0-9]{4}/[0-9]{2}/[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}"] = "Y/m/d H:i:s";
            Dates.dateFormatStore["[0-9]{4}/[0-9]{2}/[0-9]{2} [0-9]{2}:[0-9]{2}"] = "Y/m/d H:i";
            Dates.dateFormatStore["[0-9]{4}/[0-9]{2}/[0-9]{2} [0-9]{2}"] = "Y/m/d H";
            Dates.dateFormatStore["[0-9]{4}/[0-9]{2}/[0-9]{2}"] = "Y/m/d";
            Dates.dateFormatStore["[0-9]{4}年[0-9]{2}月[0-9]{2}日 [0-9]{2}:[0-9]{2}:[0-9]{2}"] = "Y年m月d日 H:i:s";
            Dates.dateFormatStore["[0-9]{4}年[0-9]{2}月[0-9]{2}日 [0-9]{2}:[0-9]{2}"] = "Y年m月d日 H:i";
            Dates.dateFormatStore["[0-9]{4}年[0-9]{2}月[0-9]{2}日 [0-9]{2}"] = "Y年m月d日 H";
            Dates.dateFormatStore["[0-9]{4}年[0-9]{2}月[0-9]{2}日"] = "Y年m月d日";
        };
        Dates.formatMillisecond = function (millisecond, formatStr) {
            return Ext.Date.format(new Date(millisecond), formatStr);
        };
        Dates.formatDateStr = function (dateStr, formatStr) {
            return Ext.Date.format(FastExt.Dates.parseDate(dateStr), formatStr);
        };
        Dates.guessDateFormat = function (value) {
            if (!value || Ext.isDate(value)) {
                return '';
            }
            value = value.toString().trim();
            value = value.trim('/');
            value = value.trim('-');
            for (var key in Dates.dateFormatStore) {
                var regPattern = new RegExp("^" + key + "$");
                if (regPattern.test(value)) {
                    return Dates.dateFormatStore[key];
                }
            }
            return '';
        };
        Dates.parseDate = function (dateValue) {
            if (Ext.isEmpty(dateValue)) {
                return null;
            }
            var guessDateFormat = FastExt.Dates.guessDateFormat(dateValue);
            return Ext.Date.parse(dateValue, guessDateFormat);
        };
        Dates.showDatePicker = function (obj, defaultValue, dateFormat) {
            return new Ext.Promise(function (resolve, reject) {
                var token = new Date().getTime();
                if (Ext.isEmpty(dateFormat)) {
                    dateFormat = "Y-m-d H:i:s";
                }
                var hourStoreValue = [];
                for (var i = 0; i < 24; i++) {
                    var value = FastExt.Base.prefixInteger(i, 2);
                    hourStoreValue.push({
                        text: value
                    });
                }
                var secondStoreValue = [];
                for (var i = 0; i < 60; i++) {
                    var value = FastExt.Base.prefixInteger(i, 2);
                    secondStoreValue.push({
                        text: value
                    });
                }
                var defaultDate;
                if (!Ext.isEmpty(defaultValue)) {
                    defaultDate = Ext.Date.parse(defaultValue, FastExt.Dates.guessDateFormat(defaultValue));
                }
                if (!defaultDate) {
                    defaultDate = new Date();
                }
                var hour = Ext.Date.format(defaultDate, 'H');
                var minute = Ext.Date.format(defaultDate, 'i');
                var second = Ext.Date.format(defaultDate, 's');
                var countItem = 0;
                var dateShow = dateFormat.indexOf("d") !== -1;
                var hourShow = dateFormat.indexOf("H") !== -1;
                var minuteShow = dateFormat.indexOf("i") !== -1;
                var secondShow = dateFormat.indexOf("s") !== -1;
                if (hourShow) {
                    countItem++;
                }
                if (minuteShow) {
                    countItem++;
                }
                if (secondShow) {
                    countItem++;
                }
                var pickerCmp = {
                    xtype: 'datepicker',
                    id: 'dateValue' + token,
                    region: 'center',
                    showToday: false,
                    margin: '0 0 0 0',
                    border: 0,
                    value: defaultDate
                };
                if (!dateShow) {
                    pickerCmp = {
                        xtype: 'monthpicker',
                        id: 'dateValue' + token,
                        region: 'center',
                        showButtons: false,
                        margin: '0 0 0 0',
                        border: 0,
                        value: defaultDate
                    };
                }
                var menu = Ext.create('Ext.menu.Menu', {
                    showSeparator: false,
                    layout: 'border',
                    padding: '0 0 0 0',
                    style: {
                        background: "#ffffff"
                    },
                    alwaysOnTop: true,
                    width: 330,
                    height: 400,
                    listeners: {
                        hide: function (obj, epts) {
                            FastExt.Base.runCallBack(resolve);
                            obj.close();
                        }
                    },
                    items: [
                        pickerCmp,
                        {
                            xtype: 'container',
                            layout: 'column',
                            margin: '0 0 0 0',
                            region: 'south',
                            border: 0,
                            items: [
                                {
                                    xtype: 'container',
                                    columnWidth: 1,
                                    layout: 'column',
                                    border: 0,
                                    margin: '10 0 0 0',
                                    items: [
                                        {
                                            id: 'hourValue' + token,
                                            columnWidth: 1.0 / countItem,
                                            emptyText: '时',
                                            minValue: 0,
                                            margin: '0 0 0 5',
                                            maxValue: 23,
                                            displayField: 'text',
                                            valueField: 'text',
                                            editable: true,
                                            searchable: true,
                                            hidden: !hourShow,
                                            value: hour,
                                            store: Ext.create('Ext.data.Store', {
                                                autoLoad: true,
                                                data: hourStoreValue
                                            }),
                                            xtype: 'combo'
                                        }, {
                                            xtype: 'displayfield',
                                            width: 30,
                                            hidden: !hourShow,
                                            value: "<div align='center'>时</div>"
                                        }, {
                                            id: 'minuteValue' + token,
                                            columnWidth: 1.0 / countItem,
                                            emptyText: '分',
                                            minValue: 0,
                                            maxValue: 59,
                                            displayField: 'text',
                                            valueField: 'text',
                                            editable: true,
                                            searchable: true,
                                            value: minute,
                                            hidden: !minuteShow,
                                            store: Ext.create('Ext.data.Store', {
                                                autoLoad: true,
                                                data: secondStoreValue
                                            }),
                                            xtype: 'combo'
                                        }, {
                                            xtype: 'displayfield',
                                            width: 30,
                                            hidden: !minuteShow,
                                            value: "<div align='center'>分</div>"
                                        }, {
                                            id: 'secondsValue' + token,
                                            columnWidth: 1.0 / countItem,
                                            emptyText: '秒',
                                            minValue: 0,
                                            maxValue: 59,
                                            displayField: 'text',
                                            valueField: 'text',
                                            editable: true,
                                            searchable: true,
                                            value: second,
                                            hidden: !secondShow,
                                            store: Ext.create('Ext.data.Store', {
                                                autoLoad: true,
                                                data: secondStoreValue
                                            }),
                                            xtype: 'combo'
                                        }, {
                                            xtype: 'displayfield',
                                            width: 30,
                                            hidden: !secondShow,
                                            value: "<div align='center'>秒</div>"
                                        },
                                    ]
                                },
                                {
                                    xtype: 'button',
                                    columnWidth: 0.3,
                                    margin: '5 0 5 5',
                                    iconCls: "extIcon extClose",
                                    text: '取消',
                                    handler: function () {
                                        menu.hide();
                                    }
                                },
                                {
                                    xtype: 'button',
                                    columnWidth: 0.7,
                                    margin: '5 5 5 5',
                                    iconCls: "extIcon extOk",
                                    text: '确定',
                                    handler: function () {
                                        var datePicker = Ext.getCmp("dateValue" + token);
                                        var hourCombo = Ext.getCmp("hourValue" + token);
                                        var minuteCombo = Ext.getCmp("minuteValue" + token);
                                        var secondsCombo = Ext.getCmp("secondsValue" + token);
                                        var dateValue = datePicker.getValue();
                                        if (Ext.isDate(dateValue)) {
                                            dateValue.setHours(parseInt(hourCombo.getValue()));
                                            dateValue.setMinutes(parseInt(minuteCombo.getValue()));
                                            dateValue.setSeconds(parseInt(secondsCombo.getValue()));
                                            FastExt.Base.runCallBack(resolve, Ext.Date.format(dateValue, dateFormat));
                                        }
                                        else {
                                            var newDate = new Date();
                                            newDate.setMonth(dateValue[0]);
                                            newDate.setFullYear(dateValue[1]);
                                            newDate.setDate(1);
                                            FastExt.Base.runCallBack(resolve, Ext.Date.format(newDate, dateFormat));
                                        }
                                        menu.close();
                                    }
                                }
                            ]
                        }
                    ]
                });
                menu.showBy(obj);
            });
        };
        Dates.formatDateTip = function (sourceDate, dateFormat, appendWeek) {
            if (Ext.isEmpty(dateFormat)) {
                dateFormat = "Y-m-d H:i:s";
            }
            var seconds = 1000;
            var minute = seconds * 60;
            var hour = minute * 60;
            var day = hour * 24;
            var week = day * 7;
            var month = day * 30;
            var time1 = new Date().getTime();
            if (!sourceDate) {
                return null;
            }
            var time2 = sourceDate.getTime();
            var time = Math.abs(time1 - time2);
            var directionSuffix = time1 < time2 ? "后" : "前";
            var weekSuffix = "";
            var hourSuffix = Ext.Date.format(sourceDate, " H时i分");
            if (appendWeek) {
                var weekTip = ["日", "一", "二", "三", "四", "五", "六"];
                weekSuffix = "（周" + weekTip[sourceDate.getDay()] + "）";
            }
            if (time <= minute) {
                return "刚刚";
            }
            if (time / month >= 2) {
                return Ext.Date.format(sourceDate, dateFormat);
            }
            if (time / month >= 1) {
                return parseInt(String(time / month)) + "个月" + directionSuffix + weekSuffix;
            }
            if (time / week >= 1) {
                var real = parseInt(String(time / week));
                return real + "周" + directionSuffix + weekSuffix;
            }
            if (time / day >= 1) {
                var real = parseInt(String(time / day));
                if (real == 1) {
                    if (directionSuffix == "前") {
                        return "昨天" + hourSuffix + weekSuffix;
                    }
                    if (directionSuffix == "后") {
                        return "明天" + hourSuffix + weekSuffix;
                    }
                }
                return real + "天" + directionSuffix + weekSuffix;
            }
            if (time / hour >= 1) {
                return parseInt(String(time / hour)) + "小时" + directionSuffix + weekSuffix;
            }
            if (time / minute >= 1) {
                return parseInt(String(time / minute)) + "分钟" + directionSuffix + weekSuffix;
            }
            return Ext.Date.format(sourceDate, dateFormat);
        };
        Dates.dateFormatStore = {};
        return Dates;
    }());
    FastExt.Dates = Dates;
})(FastExt || (FastExt = {}));
var FastDefine;
(function (FastDefine) {
    var EnumComboBox = (function () {
        function EnumComboBox() {
            Ext.define("Fast.ext.EnumComboBox", {
                alias: ['widget.enumcombobox', 'widget.enumcombo'],
                extend: 'Ext.form.field.ComboBox',
                enumName: 'NONE',
                enumValue: 'id',
                enumText: 'text',
                exclude: [],
                include: [],
                params: {},
                firstData: null,
                lastData: null,
                editable: false,
                useCache: true,
                searchable: false,
                newable: false,
                onFastContainerShow: function () {
                    this.reloadEnum(false);
                },
                onFastInputClick: function () {
                    if (this.readOnly || this.disabled) {
                        return;
                    }
                    this.toggle();
                },
                onFastEnumFilter: function (record) {
                    if (this.exclude.exists(record.get(this.enumValue))) {
                        return false;
                    }
                    if (this.include.length > 0) {
                        return !!this.include.exists(record.get(this.enumValue));
                    }
                    return true;
                },
                reloadEnum: function (reloadData) {
                    var me = this;
                    if (Ext.isEmpty(reloadData)) {
                        reloadData = true;
                    }
                    if (me.hasListener("beforeloadenum")) {
                        if (!me.fireEvent("beforeloadenum", me)) {
                            return false;
                        }
                    }
                    FastExt.Store.getEnumDataStore(me.enumName, me.firstData, me.lastData, me.params, me.useCache, reloadData).then(function (enumStore) {
                        me.setStore(enumStore);
                        enumStore.filterBy(me.onFastEnumFilter, me);
                    });
                },
                initComponent: function () {
                    var me = this;
                    me.displayField = me.enumText;
                    me.valueField = me.enumValue;
                    me.emptyText = "请选择";
                    if (!me.exclude) {
                        me.exclude = [];
                    }
                    if (!me.include) {
                        me.include = [];
                    }
                    me.callParent(arguments);
                },
                finishRender: function () {
                    this.callParent(arguments);
                    this.inputEl.on('click', this.onFastInputClick, this);
                    var me = this;
                    var container = this.up("window");
                    if (container && !FastExt.Base.toBool(container.shown)) {
                        container.on("show", me.onFastContainerShow, this, { single: true });
                    }
                    else {
                        me.reloadEnum(false);
                    }
                }
            });
        }
        return EnumComboBox;
    }());
    FastDefine.EnumComboBox = EnumComboBox;
    var TagEnumComboBox = (function () {
        function TagEnumComboBox() {
            Ext.define("Fast.ext.TagEnumComboBox", {
                alias: ['widget.tagenumcombobox', 'widget.tagenumcombo'],
                extend: 'Ext.form.field.Tag',
                enumName: 'NONE',
                enumValue: 'id',
                enumText: 'text',
                exclude: [],
                include: [],
                params: {},
                firstData: null,
                lastData: null,
                queryMode: 'local',
                reloadEnum: function (reloadData) {
                    var me = this;
                    if (Ext.isEmpty(reloadData)) {
                        reloadData = true;
                    }
                    FastExt.Store.getEnumDataStore(me.enumName, me.firstData, me.lastData, me.params, me.useCache, reloadData).then(function (enumStore) {
                        me.setStore(enumStore);
                        me.getStore().filterBy(function (record) {
                            if (me.exclude.exists(record.get(me.enumValue))) {
                                return false;
                            }
                            if (me.include.length > 0) {
                                return !!me.include.exists(record.get(me.enumValue));
                            }
                            return true;
                        });
                    });
                },
                initComponent: function () {
                    var me = this;
                    me.displayField = me.enumText;
                    me.valueField = me.enumValue;
                    me.emptyText = "请选择";
                    if (!me.exclude) {
                        me.exclude = [];
                    }
                    if (!me.include) {
                        me.include = [];
                    }
                    me.callParent(arguments);
                },
                onFastContainerShow: function () {
                    this.reloadEnum(false);
                },
                finishRender: function () {
                    this.callParent(arguments);
                    var me = this;
                    var container = this.up("window");
                    if (container && !FastExt.Base.toBool(container.shown)) {
                        container.on("show", me.onFastContainerShow, this, { single: true });
                    }
                    else {
                        me.reloadEnum(false);
                    }
                }
            });
        }
        return TagEnumComboBox;
    }());
    FastDefine.TagEnumComboBox = TagEnumComboBox;
    var FastFileField = (function () {
        function FastFileField() {
            Ext.define("Fast.ext.FastFile", {
                extend: 'Ext.form.field.Text',
                alias: ['widget.fastfile', 'widget.fastfilefield'],
                fileModules: [],
                editable: false,
                onFileChange: function (fileObj) {
                },
                onFastInputClick: function () {
                    if (this.readOnly || this.disabled) {
                        return;
                    }
                    this.selectData();
                },
                finishRender: function () {
                    this.callParent(arguments);
                    this.inputEl.on('click', this.onFastInputClick, this);
                },
                onChange: function (newVal, oldVal) {
                    this.callParent(arguments);
                    if (Ext.isEmpty(newVal)) {
                        this.getTrigger('open').hide();
                        this.getTrigger('close').hide();
                    }
                    else {
                        this.getTrigger('open').show();
                        this.getTrigger('close').show();
                    }
                },
                initComponent: function () {
                    var me = this;
                    var errorMsg = "";
                    for (var i = 0; i < this.fileModules.length; i++) {
                        var fileModule = this.fileModules[i];
                        errorMsg = errorMsg + "或" + fileModule.tipMsg;
                    }
                    this.emptyText = '请上传' + errorMsg.substring(1);
                    this.editable = false;
                    this.callParent(arguments);
                },
                triggers: {
                    open: {
                        cls: 'extIcon extEye',
                        hidden: true,
                        handler: function () {
                            var me = this;
                            if (me.fileModules.length === 1) {
                                if (me.fileModules[0].type === 'images') {
                                    if (me.getEditorMenu()) {
                                        me.getEditorMenu().holdShow = true;
                                    }
                                    me.blur();
                                    FastExt.Dialog.showImage(me, me.getValue(), function () {
                                        if (me.getEditorMenu()) {
                                            me.getEditorMenu().holdShow = false;
                                        }
                                    }, true);
                                    return;
                                }
                                if (me.fileModules[0].type === 'videos') {
                                    FastExt.Dialog.showVideo(this, me.getValue());
                                    return;
                                }
                            }
                            if (me.fileObj) {
                                var name_1 = me.fileObj.name;
                                if (FastExt.FileModule.image().match(name_1)) {
                                    FastExt.Dialog.showImage(me, me.getValue(), null, true);
                                    return;
                                }
                                if (FastExt.FileModule.mp4().match(name_1)) {
                                    FastExt.Dialog.showVideo(this, me.getValue());
                                    return;
                                }
                                if (FastExt.FileModule.pdf().match(name_1) ||
                                    FastExt.FileModule.word().match(name_1) ||
                                    FastExt.FileModule.excel().match(name_1) ||
                                    FastExt.FileModule.ppt().match(name_1)) {
                                    FastExt.File.officeViewer(me.getValue());
                                    return;
                                }
                            }
                            location.href = me.getValue();
                        }
                    },
                    search: {
                        cls: 'extIcon extUpload',
                        handler: function () {
                            this.selectData();
                        }
                    },
                    close: {
                        cls: 'text-clear',
                        hidden: true,
                        handler: function () {
                            this.clearData();
                        }
                    }
                },
                selectData: function () {
                    var me = this;
                    if (me.getEditorMenu()) {
                        me.getEditorMenu().holdShow = true;
                    }
                    FastExt.File.uploadFile(me, me.fileModules).then(function (result) {
                        if (me.getEditorMenu()) {
                            me.getEditorMenu().holdShow = false;
                        }
                        if (result) {
                            me.fileObj = result;
                            me.setValue(result.url);
                            me.onFileChange(result);
                        }
                    });
                },
                clearData: function () {
                    var me = this;
                    me.setValue(null);
                }
            });
        }
        return FastFileField;
    }());
    FastDefine.FastFileField = FastFileField;
    var FastFilesField = (function () {
        function FastFilesField() {
            Ext.define("Fast.ext.FastFiles", {
                alias: ['widget.fastfiles', 'widget.fastfilesfield'],
                extend: 'Ext.form.field.Text',
                editable: false,
                fileModules: [],
                allowBlank: true,
                autoUpdate: false,
                showFileName: false,
                showFileLength: false,
                autoFileName: true,
                submitArray: false,
                triggers: {
                    search: {
                        cls: 'text-search',
                        handler: function () {
                            this.showWindow(this);
                        }
                    }
                },
                finishRender: function () {
                    this.callParent(arguments);
                    this.inputEl.on('click', this.onFastInputClick, this);
                },
                onFastInputClick: function () {
                    if (this.readOnly || this.disabled) {
                        return;
                    }
                    this.showWindow(this);
                },
                initComponent: function () {
                    var errorMsg = "";
                    for (var i = 0; i < this.fileModules.length; i++) {
                        var fileModule = this.fileModules[i];
                        errorMsg = errorMsg + "或" + fileModule.tipMsg;
                    }
                    this.emptyText = '请上传' + errorMsg.substring(1);
                    this.editable = false;
                    if (this.submitArray) {
                        var formPanel = this.up("form");
                        if (formPanel) {
                            formPanel.add({
                                xtype: "hiddenfield",
                                name: this.name + "@JsonArray",
                                value: true
                            });
                        }
                    }
                    this.callParent(arguments);
                },
                showWindow: function (obj, callBack, title) {
                    var me = this;
                    FastExt.File.showFiles(this, function (result) {
                        me.setValue(result);
                        if (Ext.isFunction(callBack)) {
                            callBack(me);
                        }
                    }, me.fileModules, me.getValue(), title, me.readOnly);
                }
            });
        }
        return FastFilesField;
    }());
    FastDefine.FastFilesField = FastFilesField;
    var ContentField = (function () {
        function ContentField() {
            Ext.define("Fast.ext.Content", {
                alias: ['widget.content', 'widget.contentfield'],
                extend: 'Ext.form.field.TextArea',
                height: 220,
                emptyText: '请填写……',
                allowBlank: true,
                buttons: [],
                getCode: function () {
                    return $.md5(this.getName() + this.dataIndex + this.getFieldLabel());
                },
                showWindow: function (obj, callBack, title) {
                    if (Ext.isEmpty(title)) {
                        title = "编辑内容";
                    }
                    var me = Ext.create({
                        xtype: "contentfield",
                        value: this.value,
                    });
                    me.oldValue = me.getValue();
                    me.userCls = "radiusNullField";
                    var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
                    var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
                    var winButtons = [
                        {
                            text: '清除暂存',
                            iconCls: 'extIcon extDelete whiteColor',
                            handler: function () {
                                FastExt.Dialog.showWait("正在清除中，请稍后……");
                                FastExt.Server.deleteExtConfig(me.getCode(), "TextEditorCache", function (success) {
                                    FastExt.Dialog.hideWait();
                                    if (success) {
                                        FastExt.Dialog.toast("清除成功！");
                                    }
                                });
                            }
                        },
                        '->',
                        {
                            text: '暂存',
                            iconCls: 'extIcon extSave whiteColor',
                            handler: function () {
                                FastExt.Dialog.showWait("暂存中，请稍后……");
                                FastExt.Server.saveExtConfig(me.getCode(), "TextEditorCache", me.getValue(), function (success, message) {
                                    FastExt.Dialog.hideWait();
                                    if (success) {
                                        FastExt.Dialog.toast("暂存成功！");
                                    }
                                    else {
                                        FastExt.Dialog.showAlert("系统提醒", message);
                                    }
                                });
                            }
                        },
                        {
                            text: '重置',
                            iconCls: 'extIcon extReset',
                            handler: function () {
                                me.setValue(me.oldValue);
                                FastExt.Server.deleteExtConfig(me.getCode(), "TextEditorCache");
                            }
                        },
                        {
                            text: '确定',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                FastExt.Dialog.showWait("请稍后……");
                                FastExt.Server.deleteExtConfig(me.getCode(), "TextEditorCache", function (success) {
                                    FastExt.Dialog.hideWait();
                                    if (Ext.isFunction(callBack)) {
                                        callBack(me);
                                    }
                                    me.editorWin.close();
                                });
                            }
                        }
                    ];
                    for (var _i = 0, _a = me.buttons; _i < _a.length; _i++) {
                        var button = _a[_i];
                        button.field = me;
                    }
                    me.editorWin = Ext.create('Ext.window.Window', {
                        title: title,
                        iconCls: 'extIcon extEdit',
                        resizable: true,
                        maximizable: true,
                        height: winHeight,
                        width: winWidth,
                        minHeight: 500,
                        minWidth: 600,
                        layout: 'fit',
                        animateTarget: obj,
                        items: [me],
                        modal: true,
                        unpin: true,
                        constrain: true,
                        listeners: {
                            show: function (obj) {
                                FastExt.Server.showExtConfig(me.getCode(), "TextEditorCache", function (success, value) {
                                    if (success) {
                                        me.setValue(value);
                                        FastExt.Dialog.toast("已恢复暂存的数据！");
                                    }
                                });
                            }
                        },
                        buttons: Ext.Array.insert(winButtons, 2, this.buttons),
                    });
                    me.editorWin.show();
                }
            });
        }
        return ContentField;
    }());
    FastDefine.ContentField = ContentField;
    var HtmlContentField = (function () {
        function HtmlContentField() {
            Ext.define("Fast.ext.HtmlContent", {
                alias: ['widget.htmlcontent', 'widget.htmlcontentfield'],
                extend: 'Ext.form.field.TextArea',
                buttons: [],
                initEditorConfig: function (config) {
                    return config;
                },
                height: 420,
                getCode: function () {
                    return $.md5(this.getName() + this.dataIndex + this.getFieldLabel());
                },
                getValue: function () {
                    if (this.tinyEditor) {
                        this.tinyEditor.save();
                    }
                    return this.callParent(arguments);
                },
                getRawValue: function () {
                    if (this.tinyEditor) {
                        return this.tinyEditor.getContent();
                    }
                    return this.callParent(arguments);
                },
                setValue: function (val) {
                    this.callParent(arguments);
                    if (this.tinyEditor) {
                        this.tinyEditor.setContent(val);
                    }
                    return this;
                },
                beforeDestroy: function () {
                    try {
                        this.releaseEditor();
                    }
                    finally {
                        this.callParent(arguments);
                    }
                },
                releaseEditor: function () {
                    if (this.tinyEditor) {
                        this.tinyEditor.destroy();
                        this.tinyEditor = null;
                    }
                },
                initEditor: function () {
                    var me = this;
                    var tinyConfig = {
                        selector: '#' + me.getInputId(),
                        language: 'zh-Hans',
                        menubar: 'file edit view insert format tools table tc',
                        toolbar1: 'fullscreen searchreplace undo redo ' +
                            ' bold italic underline strikethrough ' +
                            ' fontfamily fontsize blocks ' +
                            ' alignleft aligncenter alignright alignjustify ' +
                            ' outdent indent ' +
                            ' numlist bullist checklist ' +
                            ' forecolor backcolor casechange permanentpen formatpainter removeformat ' +
                            ' pagebreak charmap emoticons ' +
                            ' preview save print ' +
                            ' image media pageembed template link anchor codesample insertdatetime ' +
                            ' a11ycheck ltr rtl showcomments addcomment ',
                        toolbar_sticky: true,
                        forced_root_block: "div",
                        branding: false,
                        resize: false,
                        convert_urls: false,
                        height: "100%",
                        width: "100%",
                        autosave_ask_before_unload: false,
                        powerpaste_allow_local_images: true,
                        spellchecker_dialog: true,
                        a11y_advanced_options: true,
                        image_advtab: true,
                        font_size_formats: "8pt 9pt 10pt 11pt 12pt 13pt 14pt 15pt 16pt 17pt 18pt 19pt 20pt 21pt 22pt 23pt 24pt 36pt",
                        font_family_formats: "微软雅黑='微软雅黑';宋体='宋体';黑体='黑体';仿宋='仿宋';楷体='楷体';隶书='隶书';幼圆='幼圆';Andale Mono=andale mono,times;Arial=arial,helvetica,sans-serif;Arial Black=arial black,avant garde;Book Antiqua=book antiqua,palatino;Comic Sans MS=comic sans ms,sans-serif;Courier New=courier new,courier;Georgia=georgia,palatino;Helvetica=helvetica;Impact=impact,chicago;Symbol=symbol;Tahoma=tahoma,arial,helvetica,sans-serif;Terminal=terminal,monaco;Times New Roman=times new roman,times;Trebuchet MS=trebuchet ms,geneva;Verdana=verdana,geneva;Webdings=webdings;Wingdings=wingdings",
                        pagebreak_separator: "<div style=\"page-break-before: always;\"></div>",
                        pagebreak_split_block: true,
                        file_picker_types: 'file image media',
                        automatic_uploads: false,
                        content_style: 'tr {  page-break-inside: avoid; }',
                        file_picker_callback: function (callback, value, meta) {
                            if (meta.filetype === 'file') {
                                FastExt.File.uploadFile(null, [FastExt.FileModule.file()], false, false).then(function (result) {
                                    if (result) {
                                        callback(result.url, { text: result.name });
                                    }
                                });
                            }
                            else if (meta.filetype === 'image') {
                                FastExt.File.uploadFile(null, [FastExt.FileModule.image()], false, false).then(function (result) {
                                    if (result) {
                                        callback(result.url, { alt: result.name });
                                    }
                                });
                            }
                            else if (meta.filetype === 'media') {
                                FastExt.File.uploadFile(null, [FastExt.FileModule.mp4()], false, false).then(function (result) {
                                    if (result) {
                                        callback(result.url, { text: result.name });
                                    }
                                });
                            }
                        },
                        plugins: ['advlist',
                            'anchor',
                            'autolink',
                            'charmap',
                            'emoticons',
                            'importcss',
                            'nonbreaking',
                            'pagebreak',
                            'visualchars',
                            'codesample', 'fullscreen',
                            'image', 'lists', 'link', 'media', 'preview',
                            'searchreplace', 'table',
                            'visualblocks', 'wordcount',
                            'insertdatetime',
                            'directionality',
                            'code'],
                    };
                    tinyConfig = me.initEditorConfig(tinyConfig);
                    FastExt.Tinymce.initTinymce(tinyConfig, function (editors) {
                        me.tinyEditor = editors[0];
                        var upWindow = me.up("window");
                        if (upWindow) {
                            $(".tox-tinymce-aux").prependTo(upWindow.getEl().dom);
                        }
                        if (me.ownerCt) {
                            me.ownerCt.updateLayout();
                        }
                        if (me.needFocus) {
                            me.tinyEditor.focus(false);
                            me.needFocus = false;
                        }
                        me.fireEvent("editorrender", me, me.tinyEditor);
                    });
                },
                finishRender: function () {
                    this.callParent(arguments);
                    var container = this.up("window");
                    if (container && !FastExt.Base.toBool(container.shown)) {
                        container.on("show", this.onFastContainerShow, this, { single: true });
                    }
                    else {
                        this.initEditor();
                    }
                },
                onFastContainerShow: function () {
                    this.initEditor();
                },
                initComponent: function () {
                    var me = this;
                    me.callParent(arguments);
                },
                showWindow: function (obj, callBack, title) {
                    if (Ext.isEmpty(title)) {
                        title = "编辑内容";
                    }
                    var me = Ext.create({
                        xtype: "htmlcontentfield",
                        value: this.value,
                    });
                    me.oldValue = me.value;
                    var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
                    var winHeight = parseInt((document.body.clientHeight * 0.8).toFixed(0));
                    var winButtons = [
                        {
                            text: '清除暂存',
                            iconCls: 'extIcon extDelete whiteColor',
                            handler: function () {
                                FastExt.Dialog.showWait("正在清除中，请稍后……");
                                FastExt.Server.deleteExtConfig(me.getCode(), "HtmlEditorCache", function (success) {
                                    FastExt.Dialog.hideWait();
                                    if (success) {
                                        FastExt.Dialog.toast("清除成功！");
                                    }
                                });
                            }
                        },
                        '->',
                        {
                            text: '暂存',
                            iconCls: 'extIcon extSave whiteColor',
                            handler: function () {
                                FastExt.Dialog.showWait("暂存中，请稍后……");
                                FastExt.Server.saveExtConfig(me.getCode(), "HtmlEditorCache", me.getValue(), function (succes, message) {
                                    FastExt.Dialog.hideWait();
                                    if (succes) {
                                        FastExt.Dialog.toast("暂存成功！");
                                    }
                                    else {
                                        FastExt.Dialog.showAlert("系统提醒", message);
                                    }
                                });
                            }
                        },
                        {
                            text: '重置',
                            iconCls: 'extIcon extReset',
                            handler: function () {
                                me.setValue(me.oldValue);
                                FastExt.Server.deleteExtConfig(me.getCode(), "HtmlEditorCache");
                            }
                        },
                        {
                            text: '确定',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                FastExt.Dialog.showWait("请稍后……");
                                FastExt.Server.deleteExtConfig(me.getCode(), "HtmlEditorCache", function (success) {
                                    FastExt.Dialog.hideWait();
                                    if (Ext.isFunction(callBack)) {
                                        callBack(me);
                                    }
                                    me.editorWin.close();
                                });
                            }
                        }
                    ];
                    for (var _i = 0, _a = me.buttons; _i < _a.length; _i++) {
                        var button = _a[_i];
                        button.field = me;
                    }
                    me.editorWin = Ext.create('Ext.window.Window', {
                        title: title,
                        iconCls: 'extIcon extEdit',
                        resizable: true,
                        maximizable: true,
                        height: winHeight,
                        width: winWidth,
                        minHeight: 500,
                        minWidth: 600,
                        layout: 'fit',
                        animateTarget: obj,
                        items: [me],
                        modal: true,
                        constrain: true,
                        unpin: true,
                        listeners: {
                            show: function () {
                                FastExt.Server.showExtConfig(me.getCode(), "HtmlEditorCache", function (success, value) {
                                    if (success) {
                                        me.setValue(value);
                                        FastExt.Dialog.toast("已恢复暂存的数据！");
                                    }
                                });
                            },
                        },
                        buttons: Ext.Array.insert(winButtons, 2, me.buttons),
                    });
                    me.editorWin.show();
                },
                focus: function () {
                    this.needFocus = true;
                    return this.callParent(arguments);
                },
            });
        }
        return HtmlContentField;
    }());
    FastDefine.HtmlContentField = HtmlContentField;
    var LinkField = (function () {
        function LinkField() {
            Ext.define("Fast.ext.Link", {
                alias: ['widget.link', 'widget.linkfield'],
                extend: 'Ext.form.FieldContainer',
                entityId: null,
                entityIdDefaultValue: -1,
                entityText: null,
                entityCode: null,
                linkValue: {},
                editable: false,
                allowBlank: true,
                layout: 'fit',
                multiSelect: false,
                autoDisabled: true,
                submitValue: true,
                onBeforeSelect: null,
                onAfterSelect: null,
                onClearSelect: null,
                nullEntityCodeError: "请配置组件的entityCode属性值！",
                nullEntityIdError: "请配置组件的entityId属性值！",
                nullEntityTextError: "请配置组件的entityText属性值！",
                binds: [],
                isValid: function () {
                    var me = this;
                    var display = me.down("[name=" + me.name + "Display]");
                    display.allowBlank = me.allowBlank;
                    return display.isValid();
                },
                getName: function () {
                    return this.name;
                },
                getValue: function () {
                    var me = this;
                    if (me.submitValue) {
                        var value = me.down("[name=" + me.name + "]");
                        return value.getValue();
                    }
                    return me.getText();
                },
                getText: function () {
                    var me = this;
                    var display = me.down("[name=" + me.name + "Display]");
                    return display.getValue();
                },
                setRecordValue: function (record) {
                    var me = this;
                    if (record) {
                        if (Ext.isEmpty(me.getText()) && Ext.isEmpty(record.get(me.dataIndex))) {
                            return;
                        }
                        if (record.store) {
                            record.store.holdUpdate = true;
                        }
                        record.set(me.name, me.getValue());
                        record.set(me.dataIndex, me.getText());
                        if (me.record) {
                            for (var i = 0; i < me.binds.length; i++) {
                                var bindSet = me.binds[i];
                                var setArray = bindSet.toString().split("@");
                                if (setArray.length > 1) {
                                    var linkFieldName = setArray[0];
                                    var linkValue = me.record.get(linkFieldName);
                                    for (var j = 1; j < setArray.length; j++) {
                                        record.set(setArray[j], linkValue);
                                    }
                                }
                            }
                        }
                        if (record.store) {
                            record.store.holdUpdate = false;
                            record.store.fireEvent("endupdate");
                        }
                    }
                },
                setValue: function (val, record) {
                    var me = this;
                    var display = me.down("[name=" + me.name + "Display]");
                    if (display) {
                        display.setValue(val);
                    }
                    if (record) {
                        me.setRawValue(record.get(me.name));
                    }
                    if (!val) {
                        me.setRawValue(-1);
                        var moreFieldContainer = me.down("[name=" + me.name + "MoreFields]");
                        moreFieldContainer.removeAll(true);
                    }
                    return me;
                },
                setHtml: function (val) {
                    this.setValue(val);
                },
                setMultiValue: function (idValues, textValues) {
                    this.setRawValue(idValues[0], idValues.slice(1));
                    this.setValue(textValues.join("#"));
                    if (this.autoDisabled) {
                        var display = this.down("[name=" + this.name + "Display]");
                        display.setDisabled(true);
                    }
                },
                getMultiValue: function () {
                    var me = this;
                    var values = [];
                    var value = me.down("[name=" + me.name + "]");
                    if (value) {
                        values.push(value.getValue());
                    }
                    var moreFieldContainer = me.down("[name=" + me.name + "MoreFields]");
                    moreFieldContainer.items.each(function (field) {
                        values.push(field.getValue());
                    });
                    return values;
                },
                setRawValue: function (val, moreValues) {
                    var me = this;
                    var value = me.down("[name=" + me.name + "]");
                    if (value) {
                        value.setValue(val);
                    }
                    var moreFieldContainer = me.down("[name=" + me.name + "MoreFields]");
                    moreFieldContainer.removeAll(true);
                    if (moreValues) {
                        for (var i = 0; i < moreValues.length; i++) {
                            var newField = Ext.create({
                                xtype: 'hiddenfield',
                                name: me.name
                            });
                            newField.setValue(moreValues[i]);
                            moreFieldContainer.add(newField);
                        }
                    }
                    if (me.record) {
                        for (var i = 0; i < me.binds.length; i++) {
                            var bindSet = me.binds[i];
                            var setArray = bindSet.toString().split("@");
                            if (setArray.length > 1) {
                                var linkFieldName = setArray[0];
                                var linkValue = me.record.get(linkFieldName);
                                for (var j = 1; j < setArray.length; j++) {
                                    var newField = Ext.create({
                                        xtype: 'hiddenfield',
                                        name: setArray[j]
                                    });
                                    newField.setValue(linkValue);
                                    moreFieldContainer.add(newField);
                                }
                            }
                        }
                    }
                },
                getRawValue: function () {
                    var me = this;
                    var value = me.down("[name=" + me.name + "]");
                    if (value) {
                        return value.getValue();
                    }
                    return null;
                },
                getTriggers: function () {
                    var me = this;
                    var display = me.down("[name=" + me.name + "Display]");
                    return display.getTriggers();
                },
                selectData: function (callback) {
                    var me = this;
                    if (Ext.isFunction(me.onBeforeSelect)) {
                        if (!me.onBeforeSelect(me)) {
                            return;
                        }
                    }
                    if (me.getEditorMenu()) {
                        me.getEditorMenu().holdShow = true;
                    }
                    if (!me.entityCode) {
                        FastExt.Dialog.showAlert("系统提醒", me.nullEntityCodeError, function () {
                            if (me.getEditorMenu()) {
                                me.getEditorMenu().holdShow = false;
                            }
                        });
                        return;
                    }
                    if (!me.entityId) {
                        FastExt.Dialog.showAlert("系统提醒", me.nullEntityIdError, function () {
                            if (me.getEditorMenu()) {
                                me.getEditorMenu().holdShow = false;
                            }
                        });
                        return;
                    }
                    if (!me.entityText) {
                        FastExt.Dialog.showAlert("系统提醒", me.nullEntityTextError, function () {
                            if (me.getEditorMenu()) {
                                me.getEditorMenu().holdShow = false;
                            }
                        });
                        return;
                    }
                    var entity = FastExt.System.getEntity(me.entityCode);
                    if (!entity) {
                        FastExt.Dialog.showAlert("系统提醒", "未获取到 '" + me.entityCode + "' 实体类！", function () {
                            if (me.getEditorMenu()) {
                                me.getEditorMenu().holdShow = false;
                            }
                        });
                        return;
                    }
                    if (!entity.js) {
                        FastExt.Dialog.showAlert("系统提醒", "未获取到 '" + me.entityCode + "' JS对象！", function () {
                            if (me.getEditorMenu()) {
                                me.getEditorMenu().holdShow = false;
                            }
                        });
                        return;
                    }
                    var entityObj = eval("new " + me.entityCode + "()");
                    if (!Ext.isFunction(entityObj.showSelect)) {
                        FastExt.Dialog.showAlert("系统提醒", "'" + me.entityCode + "' JS对象不存在函数showSelect(obj,callBack)！", function () {
                            if (me.getEditorMenu()) {
                                me.getEditorMenu().holdShow = false;
                            }
                        });
                        return;
                    }
                    var display = me.down("[name=" + me.name + "Display]");
                    display.blur();
                    var selectTitle = entity.shortName;
                    if (me.fieldLabel) {
                        selectTitle = me.fieldLabel;
                    }
                    if (me.config && me.config.fieldLabel) {
                        selectTitle = me.config.fieldLabel;
                    }
                    if (me.labelTitle) {
                        selectTitle = me.labelTitle;
                    }
                    if (Ext.isEmpty(me.selectGridTitle)) {
                        me.selectGridTitle = "选择" + selectTitle;
                    }
                    var doMultiSelect = me.multiSelect;
                    if (FastExt.Base.toBool(me.fromColumn)) {
                        doMultiSelect = false;
                    }
                    FastExt.Cache.memory["GridSelectHistory" + $.md5(me.selectGridTitle)] = me.records;
                    entityObj.showSelect(this, me.selectGridTitle, me.linkValue.where, doMultiSelect).then(function (result) {
                        try {
                            if (result) {
                                if (Ext.isFunction(callback)) {
                                    callback(result);
                                    return;
                                }
                                me.records = result;
                                if (result.length === 1) {
                                    var data = result[0];
                                    me.record = data;
                                    var textValue = data.get(me.entityText);
                                    var idValue = data.get(me.entityId);
                                    if (Ext.isEmpty(textValue)) {
                                        textValue = idValue;
                                    }
                                    me.setValue(textValue);
                                    me.setRawValue(idValue);
                                }
                                else if (result.length > 1) {
                                    me.record = result[0];
                                    var newText = "";
                                    var moreValues = [];
                                    for (var i = 0; i < result.length; i++) {
                                        var textValue = result[i].get(me.entityText);
                                        var idValue = result[i].get(me.entityId);
                                        if (Ext.isEmpty(textValue)) {
                                            textValue = idValue;
                                        }
                                        newText += "#" + textValue;
                                        moreValues.push(idValue);
                                    }
                                    me.setRawValue(moreValues[0], moreValues.slice(1));
                                    me.setValue(newText.substring(1));
                                }
                                if (Ext.isFunction(me.onAfterSelect)) {
                                    me.onAfterSelect(me);
                                }
                            }
                        }
                        finally {
                            if (me.getEditorMenu()) {
                                me.getEditorMenu().holdShow = false;
                            }
                        }
                    });
                },
                clearData: function () {
                    var me = this;
                    me.setValue(null);
                    me.setRawValue(-1);
                    var moreFieldContainer = me.down("[name=" + me.name + "MoreFields]");
                    moreFieldContainer.removeAll(true);
                    me.records = null;
                    me.record = null;
                    if (Ext.isFunction(me.onClearSelect)) {
                        me.onClearSelect(me);
                    }
                },
                onFastInputClick: function () {
                    if (this.readOnly || this.disabled || this.editable) {
                        return;
                    }
                    this.selectData();
                },
                initComponent: function () {
                    var me = this;
                    if (FastExt.Listeners.onInitLinkFieldDefaultValue) {
                        var defaultLinkValue = FastExt.Listeners.onInitLinkFieldDefaultValue(me);
                        if (defaultLinkValue) {
                            if (me.linkValue) {
                                me.linkValue = FastExt.Json.mergeJson(me.linkValue, defaultLinkValue);
                            }
                            else {
                                me.linkValue = defaultLinkValue;
                            }
                        }
                    }
                    if (!me.linkValue) {
                        me.linkValue = {};
                        me.linkValue[me.entityId] = me.entityIdDefaultValue;
                        me.linkValue[me.entityText] = null;
                    }
                    if (!me.linkValue.hasOwnProperty(me.entityId)) {
                        me.linkValue[me.entityId] = me.entityIdDefaultValue;
                    }
                    if (Ext.isEmpty(me.linkValue[me.entityId])) {
                        me.linkValue[me.entityId] = me.entityIdDefaultValue;
                    }
                    if (Ext.isEmpty(me.name)) {
                        me.name = "LinkField" + Ext.now();
                    }
                    var displayValue = me.linkValue[me.entityText];
                    if (Ext.isEmpty(displayValue)) {
                        displayValue = me.value;
                    }
                    if (displayValue === this.entityIdDefaultValue) {
                        displayValue = "";
                    }
                    var moreFieldItems = [];
                    for (var i = 0; i < me.binds.length; i++) {
                        var bindSet = me.binds[i];
                        var setArray = bindSet.toString().split("@");
                        if (setArray.length > 1) {
                            var linkFieldName = setArray[0];
                            var linkValue = me.linkValue[linkFieldName];
                            for (var j = 1; j < setArray.length; j++) {
                                moreFieldItems.push({
                                    xtype: 'hiddenfield',
                                    name: setArray[j],
                                    value: linkValue
                                });
                            }
                        }
                    }
                    me.items = [
                        {
                            xtype: 'hiddenfield',
                            name: me.name,
                            value: me.linkValue[me.entityId]
                        },
                        {
                            xtype: 'fieldcontainer',
                            name: me.name + "MoreFields",
                            hidden: true,
                            items: moreFieldItems
                        },
                        {
                            xtype: 'textfield',
                            name: me.name + "Display",
                            editable: me.editable,
                            parentXtype: me.xtype,
                            value: displayValue,
                            disabled: !Ext.isEmpty(displayValue) && me.autoDisabled && !FastExt.Base.toBool(me.fromHeadSearch, false),
                            hideLabel: true,
                            fieldLabel: me.fieldLabel,
                            allowBlank: me.allowBlank,
                            emptyText: me.selectGridTitle ? me.selectGridTitle : "请选择" + FastExt.Base.toString(me.config.fieldLabel, ""),
                            listeners: {
                                afterrender: function (obj) {
                                    obj.inputEl.on('click', me.onFastInputClick, me);
                                }
                            },
                            triggers: {
                                close: {
                                    cls: 'text-clear',
                                    handler: function () {
                                        me.clearData();
                                        if (Ext.isFunction(me.onClearValue)) {
                                            me.onClearValue();
                                        }
                                    }
                                },
                                search: {
                                    cls: 'text-search',
                                    handler: function () {
                                        me.selectData();
                                        this.inputEl.blur();
                                    }
                                }
                            }
                        }
                    ];
                    me.callParent(arguments);
                }
            });
        }
        return LinkField;
    }());
    FastDefine.LinkField = LinkField;
    var TargetField = (function () {
        function TargetField() {
            Ext.define("Fast.ext.Target", {
                alias: ['widget.target', 'widget.targetfield'],
                extend: 'Ext.form.FieldContainer',
                layout: "column",
                labelWidth: null,
                targetType: null,
                targetTypeReadOnly: false,
                targetTypeEnum: null,
                targetId: null,
                targetValue: {},
                targetFunction: 'getTargetEntity',
                targetEnumValue: 'id',
                targetEnumText: 'text',
                include: [],
                exclude: [],
                onChangeTypeSelect: null,
                linkfieldConfig: {},
                enumcomboConfig: {},
                defaults: {
                    labelWidth: 84,
                    margin: '5 5 5 5',
                    labelAlign: 'right',
                    allowBlankTip: true,
                    allowBlank: false,
                    emptyText: 'default'
                },
                hideLabel: true,
                getValue: function () {
                    var me = this;
                    var targetIdCmp = me.down("[name=" + me.targetId + "]");
                    return targetIdCmp.getText();
                },
                setValue: function (val, record) {
                    var me = this;
                    var targetIdCmp = me.down("[name=" + me.targetId + "]");
                    if (targetIdCmp) {
                        targetIdCmp.setValue(val);
                    }
                    if (record) {
                        me.targetValue = {};
                        me.targetValue[me.targetType] = record.get(me.targetType);
                        me.targetValue[me.targetId] = record.get(me.targetId);
                        me.holdIdValue = me.getTargetTypeValue() != record.get(me.targetType);
                        me.setTargetIdValue(record.get(me.targetId));
                        me.setTargetTypeValue(record.get(me.targetType));
                    }
                },
                setHtml: function (val) {
                    this.setValue(val);
                },
                getSearchField: function () {
                },
                setRecordValue: function (record) {
                    var me = this;
                    if (record) {
                        if (record.store) {
                            record.store.holdUpdate = true;
                        }
                        if (me.targetId) {
                            record.set(me.targetId, me.getTargetIdValue());
                        }
                        if (me.targetType) {
                            record.set(me.targetType, me.getTargetTypeValue());
                        }
                        if (me.targetText && me.targetText != me.dataIndex) {
                            record.set(me.targetText, me.getValue());
                        }
                        record.set(me.dataIndex, me.getValue());
                        if (record.store) {
                            record.store.holdUpdate = false;
                            record.store.fireEvent("endupdate");
                        }
                    }
                },
                setTargetTypeValue: function (value) {
                    var me = this;
                    var targetTypeCmp = me.down("[name=" + me.targetType + "]");
                    if (targetTypeCmp) {
                        targetTypeCmp.setValue(value);
                    }
                },
                getTargetTypeValue: function () {
                    var me = this;
                    var targetTypeCmp = me.down("[name=" + me.targetType + "]");
                    if (targetTypeCmp) {
                        return targetTypeCmp.getValue();
                    }
                    return 0;
                },
                setTargetIdValue: function (value) {
                    var me = this;
                    var targetIdCmp = me.down("[name=" + me.targetId + "]");
                    if (targetIdCmp) {
                        targetIdCmp.setRawValue(value);
                    }
                },
                getTargetIdValue: function () {
                    var me = this;
                    var targetIdCmp = me.down("[name=" + me.targetId + "]");
                    if (targetIdCmp) {
                        return targetIdCmp.getRawValue();
                    }
                    return -1;
                },
                getTargetEntity: function (targetType) {
                    if (targetType < 0) {
                        return null;
                    }
                    if (Ext.isEmpty(targetType)) {
                        targetType = 0;
                    }
                    var me = this;
                    var targetEntity = window[me.targetFunction](targetType, me.targetType);
                    if (!targetEntity) {
                        console.error("未获取到TargetType为：" + targetType + "的实体配置！");
                        return null;
                    }
                    return targetEntity;
                },
                showWindow: function (obj, callBack, title) {
                    if (Ext.isEmpty(title)) {
                        title = "编辑目标数据";
                    }
                    var me = Ext.create({
                        xtype: "targetfield",
                        targetType: this.targetType,
                        targetTypeReadOnly: this.targetTypeReadOnly,
                        targetTypeEnum: this.targetTypeEnum,
                        targetId: this.targetId,
                        targetValue: this.targetValue,
                        targetFunction: this.targetFunction,
                        targetEnumValue: this.targetEnumValue,
                        targetEnumText: this.targetEnumText,
                        include: this.include,
                        exclude: this.exclude,
                    });
                    me.editorWin = Ext.create('Ext.window.Window', {
                        title: title,
                        height: 200,
                        width: 400,
                        layout: 'fit',
                        resizable: false,
                        modal: true,
                        constrain: true,
                        iconCls: 'extIcon extLink',
                        items: [me],
                        animateTarget: obj,
                        buttons: [
                            {
                                text: '取消',
                                iconCls: 'extIcon extClose',
                                handler: function () {
                                    me.editorWin.close();
                                }
                            },
                            {
                                text: '确定',
                                iconCls: 'extIcon extOk',
                                handler: function () {
                                    me.editorWin.close();
                                    if (Ext.isFunction(callBack)) {
                                        callBack(me);
                                    }
                                }
                            }
                        ]
                    });
                    me.editorWin.show();
                },
                initComponent: function () {
                    var me = this;
                    var configLabel = me.fieldLabel;
                    if (Ext.isEmpty(configLabel)) {
                        configLabel = "目标类型";
                    }
                    me.fieldLabel = "";
                    me.margin = '0 0 0 0';
                    var linkValue = {};
                    if (!Ext.isFunction(window[me.targetFunction])) {
                        FastExt.Dialog.showAlert("目标组件错误", "未检测到方法" + me.targetFunction + "!");
                        me.callParent(arguments);
                        return;
                    }
                    if (!me.targetValue) {
                        me.targetValue = {};
                        me.targetValue[me.targetType] = -1;
                    }
                    if (!me.targetValue[me.targetType]) {
                        me.targetValue[me.targetType] = -1;
                    }
                    if (me.targetEnum) {
                        me.targetTypeEnum = me.targetEnum;
                    }
                    if (!me.targetTypeEnum) {
                        me.targetTypeEnum = me.targetType.replace(me.targetType[0], me.targetType[0].toUpperCase()) + "Enum";
                    }
                    var targetTypeValue = me.targetValue[me.targetType];
                    var targetEntity = me.getTargetEntity(targetTypeValue);
                    var targetTypeDisplay = "";
                    if (targetEntity) {
                        targetTypeDisplay = targetEntity["entityComment"];
                        linkValue[targetEntity.entityId] = me.targetValue[me.targetId];
                        linkValue[targetEntity.entityText] = me.targetValue["targetText"];
                    }
                    if (Ext.isEmpty(targetTypeDisplay)) {
                        targetTypeDisplay = "";
                    }
                    var targetTypeCmp = {
                        name: me.targetType,
                        xtype: "enumcombo",
                        fieldLabel: configLabel,
                        columnWidth: 1,
                        value: targetTypeValue >= 0 ? targetTypeValue : null,
                        emptyText: '请选择' + configLabel,
                        enumValue: me.targetEnumValue,
                        enumText: me.targetEnumText,
                        readOnly: me.targetTypeReadOnly,
                        enumName: me.targetTypeEnum,
                        exclude: me.exclude,
                        include: me.include,
                        parentXtype: me.xtype,
                        listeners: {
                            change: function (obj, newValue, oldValue) {
                                var newEntity = me.getTargetEntity(newValue);
                                if (newEntity) {
                                    var targetIdCmp_1 = me.down("[name=" + me.targetId + "]");
                                    targetIdCmp_1.entityCode = newEntity.entityCode;
                                    targetIdCmp_1.entityId = newEntity.entityId;
                                    targetIdCmp_1.entityText = newEntity.entityText;
                                    if (me.holdIdValue) {
                                        me.holdIdValue = false;
                                        return;
                                    }
                                    var targetIdDisplay = me.down("[name=" + me.targetId + "Display]");
                                    if (targetIdDisplay) {
                                        targetIdDisplay.setEmptyText("请选择" + obj.getDisplayValue());
                                    }
                                    targetIdCmp_1.selectGridTitle = "请选择" + obj.getDisplayValue();
                                    targetIdCmp_1.clearData();
                                }
                                if (Ext.isFunction(me.onChangeTypeSelect)) {
                                    me.onChangeTypeSelect(me);
                                }
                                if (me.hasListener("change")) {
                                    me.fireEvent("change");
                                }
                            }
                        }
                    };
                    var configLabel2 = me.fieldLabel2;
                    if (Ext.isEmpty(configLabel2)) {
                        configLabel2 = "目标数据";
                    }
                    var targetIdCmp = {
                        name: me.targetId,
                        xtype: "linkfield",
                        fieldLabel: configLabel2,
                        columnWidth: 1,
                        nullEntityCodeError: '请先选择' + configLabel,
                        entityCode: targetEntity ? targetEntity.entityCode : null,
                        entityId: targetEntity ? targetEntity.entityId : null,
                        entityText: targetEntity ? targetEntity.entityText : null,
                        linkValue: linkValue,
                        selectGridTitle: "请选择" + targetTypeDisplay,
                        multiSelect: me.multiSelect,
                    };
                    me.items = [FastExt.Json.mergeJson(targetTypeCmp, me.enumcomboConfig), FastExt.Json.mergeJson(targetIdCmp, me.linkfieldConfig)];
                    me.callParent(arguments);
                }
            });
        }
        return TargetField;
    }());
    FastDefine.TargetField = TargetField;
    var MapField = (function () {
        function MapField() {
            Ext.define("Fast.ext.Map", {
                alias: ['widget.map', 'widget.mapfield'],
                extend: 'Ext.form.FieldContainer',
                lngName: 'lnt',
                latName: 'lat',
                proName: null,
                cityName: null,
                areaName: null,
                editable: false,
                allowBlank: true,
                layout: 'fit',
                submitValue: true,
                isValid: function () {
                    var me = this;
                    var value = me.down("[name=" + me.name + "]");
                    return value.isValid();
                },
                getName: function () {
                    return this.name;
                },
                getValue: function () {
                    var me = this;
                    var value = me.down("[name=" + me.name + "]");
                    return value.getValue();
                },
                setValue: function (val, record) {
                    var me = this;
                    var value = me.down("[name=" + me.name + "]");
                    if (value) {
                        value.setValue(val);
                    }
                    if (record) {
                        if (me.latName) {
                            me.setLatValue(record.get(me.latName));
                        }
                        if (me.lngName) {
                            me.setLngValue(record.get(me.lngName));
                        }
                        if (me.proName) {
                            me.setProValue(record.get(me.proName));
                        }
                        if (me.cityName) {
                            me.setCityValue(record.get(me.cityName));
                        }
                        if (me.areaName) {
                            me.setAreaValue(record.get(me.areaName));
                        }
                    }
                },
                setRecordValue: function (record) {
                    var me = this;
                    if (record) {
                        if (record.store) {
                            record.store.holdUpdate = true;
                        }
                        if (me.latName) {
                            record.set(me.latName, me.getLatValue());
                        }
                        if (me.lngName) {
                            record.set(me.lngName, me.getLngValue());
                        }
                        if (me.proName) {
                            record.set(me.proName, me.getProValue());
                        }
                        if (me.cityName) {
                            record.set(me.cityName, me.getCityValue());
                        }
                        if (me.areaName) {
                            record.set(me.areaName, me.getAreaValue());
                        }
                        record.set(me.name, me.getValue());
                        if (record.store) {
                            record.store.holdUpdate = false;
                            record.store.fireEvent("endupdate");
                        }
                    }
                },
                setLatValue: function (val) {
                    var me = this;
                    var lat = me.down("[name=" + me.latName + "]");
                    if (lat) {
                        lat.setValue(val);
                    }
                },
                setLngValue: function (val) {
                    var me = this;
                    var lng = me.down("[name=" + me.lngName + "]");
                    if (lng) {
                        lng.setValue(val);
                    }
                },
                setProValue: function (val) {
                    var me = this;
                    var pro = me.down("[name=" + me.proName + "]");
                    if (pro) {
                        pro.setValue(val);
                    }
                },
                setCityValue: function (val) {
                    var me = this;
                    var city = me.down("[name=" + me.cityName + "]");
                    if (city) {
                        city.setValue(val);
                    }
                },
                setAreaValue: function (val) {
                    var me = this;
                    var area = me.down("[name=" + me.areaName + "]");
                    if (area) {
                        area.setValue(val);
                    }
                },
                getLatValue: function () {
                    var me = this;
                    var lat = me.down("[name=" + me.latName + "]");
                    if (lat) {
                        return lat.getValue();
                    }
                    return 0;
                },
                getLngValue: function () {
                    var me = this;
                    var lng = me.down("[name=" + me.lngName + "]");
                    if (lng) {
                        return lng.getValue();
                    }
                    return 0;
                },
                getProValue: function () {
                    var me = this;
                    var pro = me.down("[name=" + me.proName + "]");
                    if (pro) {
                        return pro.getValue();
                    }
                    return null;
                },
                getCityValue: function () {
                    var me = this;
                    var city = me.down("[name=" + me.cityName + "]");
                    if (city) {
                        return city.getValue();
                    }
                    return null;
                },
                getAreaValue: function () {
                    var me = this;
                    var area = me.down("[name=" + me.areaName + "]");
                    if (area) {
                        return area.getValue();
                    }
                    return null;
                },
                selectData: function () {
                    var me = this;
                    if (me.getEditorMenu()) {
                        me.getEditorMenu().holdShow = true;
                    }
                    var value = me.down("[name=" + me.name + "]");
                    value.blur();
                    FastExt.Map.selAddressInMap(me, me.getLngValue(), me.getLatValue(), me.getValue()).then(function (result) {
                        if (result) {
                            me.setLatValue(result.lat);
                            me.setLngValue(result.lng);
                            me.setProValue(result.pro);
                            me.setAreaValue(result.area);
                            me.setCityValue(result.city);
                            me.setValue(result.addr);
                        }
                        if (me.getEditorMenu()) {
                            me.getEditorMenu().holdShow = false;
                        }
                    });
                },
                clearData: function () {
                    var me = this;
                    me.setValue(null);
                    me.setLatValue(0);
                    me.setLngValue(0);
                },
                onFastInputClick: function () {
                    if (this.readOnly || this.disabled || this.editable) {
                        return;
                    }
                    this.selectData();
                },
                initComponent: function () {
                    var me = this;
                    if (!me.name) {
                        me.name = me.dataIndex;
                    }
                    if (Ext.isEmpty(me.name)) {
                        me.name = "MapField" + Ext.now();
                    }
                    me.items = [
                        {
                            xtype: 'hiddenfield',
                            name: me.lngName,
                            value: 0
                        },
                        {
                            xtype: 'hiddenfield',
                            name: me.latName,
                            value: 0
                        },
                        {
                            xtype: 'hiddenfield',
                            name: me.proName
                        },
                        {
                            xtype: 'hiddenfield',
                            name: me.cityName
                        },
                        {
                            xtype: 'hiddenfield',
                            name: me.areaName
                        },
                        {
                            xtype: 'textfield',
                            name: me.name,
                            editable: me.editable,
                            fieldLabel: me.fieldLabel,
                            hideLabel: true,
                            allowBlank: me.allowBlank,
                            emptyText: me.emptyText,
                            parentXtype: me.xtype,
                            listeners: {
                                afterrender: function (obj) {
                                    obj.inputEl.on('click', me.onFastInputClick, me);
                                }
                            },
                            triggers: {
                                close: {
                                    cls: 'text-clear',
                                    handler: function () {
                                        me.clearData();
                                        if (Ext.isFunction(me.onClearValue)) {
                                            me.onClearValue();
                                        }
                                    }
                                },
                                search: {
                                    cls: 'text-search',
                                    handler: function () {
                                        me.selectData();
                                        this.inputEl.blur();
                                    }
                                }
                            }
                        }
                    ];
                    me.callParent(arguments);
                }
            });
        }
        return MapField;
    }());
    FastDefine.MapField = MapField;
    var DateRangeField = (function () {
        function DateRangeField() {
            Ext.define("Fast.ext.DateRange", {
                alias: ['widget.daterange', 'widget.daterangefield'],
                extend: 'Ext.form.field.Text',
                beginDate: null,
                endDate: null,
                editable: true,
                allowBlank: true,
                maxRangeDate: -1,
                maxRangeMonth: -1,
                maxRangeYear: -1,
                layout: 'column',
                format: 'Y-m-d',
                submitValue: true,
                onAfterSelect: null,
                onClearValue: null,
                selectData: function () {
                    var me = this;
                    if (me.getEditorMenu()) {
                        me.getEditorMenu().holdShow = true;
                    }
                    var time = Ext.now();
                    var dateRangeMenu = Ext.create('Ext.menu.Menu', {
                        floating: true,
                        editorMenu: true,
                        items: [{
                                xtype: 'container',
                                padding: '10 10 10 10',
                                layout: 'column',
                                style: {
                                    background: "#ffffff",
                                    borderWidth: 1,
                                    borderColor: "#ffffff",
                                    color: '#eeeee'
                                },
                                border: 0,
                                items: [
                                    {
                                        xtype: 'combo',
                                        fieldLabel: '快速选择',
                                        valueField: 'value',
                                        labelWidth: 60,
                                        margin: '5 5 5 5',
                                        editable: false,
                                        columnWidth: 1,
                                        triggers: {
                                            close: {
                                                cls: 'text-clear',
                                                handler: function () {
                                                    this.setValue(null);
                                                    me.clearData();
                                                }
                                            }
                                        },
                                        listeners: {
                                            change: function (obj, newValue, oldValue, eOpts) {
                                                if (!newValue) {
                                                    return;
                                                }
                                                me.endDate = Ext.Date.format(new Date(), me.format);
                                                if (newValue === 6) {
                                                    me.beginDate = Ext.Date.format(new Date(), me.format);
                                                }
                                                else if (newValue === 1) {
                                                    me.beginDate = Ext.Date.format(Ext.Date.add(new Date(), Ext.Date.DAY, -7), me.format);
                                                }
                                                else if (newValue === 2) {
                                                    me.beginDate = Ext.Date.format(Ext.Date.add(new Date(), Ext.Date.MONTH, -1), me.format);
                                                }
                                                else if (newValue === 3) {
                                                    me.beginDate = Ext.Date.format(Ext.Date.add(new Date(), Ext.Date.MONTH, -3), me.format);
                                                }
                                                else if (newValue === 4) {
                                                    me.beginDate = Ext.Date.format(Ext.Date.add(new Date(), Ext.Date.MONTH, -6), me.format);
                                                }
                                                else if (newValue === 5) {
                                                    me.beginDate = Ext.Date.format(Ext.Date.add(new Date(), Ext.Date.YEAR, -1), me.format);
                                                }
                                                var error = me.refreshValue();
                                                if (error) {
                                                    FastExt.Dialog.toast(error);
                                                    obj.setValue(null);
                                                    me.clearData();
                                                    FastExt.Component.shakeComment(dateRangeMenu);
                                                    return;
                                                }
                                                var beginDateTimeField = Ext.getCmp("beginDate" + time);
                                                if (beginDateTimeField) {
                                                    beginDateTimeField.setValue(me.beginDate);
                                                }
                                                var endDateTimeField = Ext.getCmp("endDate" + time);
                                                if (endDateTimeField) {
                                                    endDateTimeField.setValue(me.endDate);
                                                }
                                            }
                                        },
                                        store: Ext.create('Ext.data.Store', {
                                            data: [
                                                {
                                                    'text': '今天',
                                                    'value': 6
                                                },
                                                {
                                                    'text': '近一周',
                                                    'value': 1
                                                },
                                                {
                                                    'text': '近一个月',
                                                    "value": 2
                                                },
                                                {
                                                    'text': '近三个月',
                                                    "value": 3
                                                },
                                                {
                                                    'text': '近六个月',
                                                    "value": 4
                                                },
                                                {
                                                    'text': '近一年',
                                                    "value": 5
                                                }
                                            ]
                                        })
                                    },
                                    {
                                        fieldLabel: '开始日期',
                                        margin: '5 5 5 5',
                                        xtype: 'datefield',
                                        id: 'beginDate' + time,
                                        columnWidth: 1,
                                        labelWidth: 60,
                                        format: me.format,
                                        value: me.beginDate,
                                        emptyText: '开始日期'
                                    }, {
                                        fieldLabel: '结束日期',
                                        margin: '5 5 5 5',
                                        xtype: 'datefield',
                                        id: 'endDate' + time,
                                        columnWidth: 1,
                                        labelWidth: 60,
                                        format: me.format,
                                        value: me.endDate,
                                        emptyText: '结束日期'
                                    },
                                    {
                                        xtype: 'container',
                                        layout: 'hbox',
                                        columnWidth: 1,
                                        border: 0,
                                        items: [
                                            {
                                                xtype: 'button',
                                                text: '确定',
                                                margin: '5 5 5 5',
                                                flex: 0.42,
                                                handler: function () {
                                                    var bDate = Ext.getCmp("beginDate" + time).getValue();
                                                    var eDate = Ext.getCmp("endDate" + time).getValue();
                                                    me.beginDate = Ext.util.Format.date(bDate, me.format);
                                                    me.endDate = Ext.util.Format.date(eDate, me.format);
                                                    if (Ext.isEmpty(me.beginDate)) {
                                                        me.beginDate = Ext.Date.format(new Date(0), me.format);
                                                    }
                                                    if (Ext.isEmpty(me.endDate)) {
                                                        me.endDate = Ext.Date.format(new Date(), me.format);
                                                    }
                                                    var error = me.refreshValue();
                                                    if (error) {
                                                        FastExt.Dialog.toast(error);
                                                        FastExt.Component.shakeComment(dateRangeMenu);
                                                        return;
                                                    }
                                                    if (Ext.isFunction(me.onAfterSelect)) {
                                                        me.onAfterSelect(me);
                                                    }
                                                    dateRangeMenu.close();
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }],
                        listeners: {
                            hide: function (obj, epts) {
                                obj.close();
                            }
                        }
                    });
                    dateRangeMenu.setWidth(Math.max(this.getWidth(), 200));
                    dateRangeMenu.showBy(this, "tl-bl?");
                },
                clearData: function () {
                    var me = this;
                    me.setValue(null);
                    me.beginDate = null;
                    me.endDate = null;
                },
                refreshValue: function () {
                    var me = this;
                    me.setValue(null);
                    var bDate = Ext.Date.parse(me.beginDate, me.format);
                    var eDate = Ext.Date.parse(me.endDate, me.format);
                    if (bDate > eDate) {
                        me.clearData();
                        return "开始日期必须小于等于结束日期！";
                    }
                    if (me.maxRangeDate > 0) {
                        var maxEndDate = Ext.Date.add(bDate, Ext.Date.DAY, me.maxRangeDate);
                        if (!Ext.Date.between(eDate, bDate, maxEndDate)) {
                            me.clearData();
                            return "日期范围区间必须在" + me.maxRangeDate + "天以内！";
                        }
                    }
                    if (me.maxRangeMonth > 0) {
                        var maxEndDate = Ext.Date.add(bDate, Ext.Date.MONTH, me.maxRangeMonth);
                        if (!Ext.Date.between(eDate, bDate, maxEndDate)) {
                            me.clearData();
                            return "日期范围区间必须在" + me.maxRangeMonth + "个月以内！";
                        }
                    }
                    if (me.maxRangeYear > 0) {
                        var maxEndDate = Ext.Date.add(bDate, Ext.Date.YEAR, me.maxRangeYear);
                        if (!Ext.Date.between(eDate, bDate, maxEndDate)) {
                            me.clearData();
                            return "日期范围区间必须在" + me.maxRangeYear + "年以内！";
                        }
                    }
                    me.setValue(me.beginDate + " 至 " + me.endDate);
                    if (Ext.Date.isEqual(bDate, eDate)) {
                        me.setValue("今天");
                    }
                    return null;
                },
                triggers: {
                    close: {
                        cls: 'text-clear',
                        handler: function () {
                            this.clearData();
                            if (Ext.isFunction(this.onClearValue)) {
                                this.onClearValue();
                            }
                        }
                    },
                    search: {
                        cls: 'text-search',
                        handler: function () {
                            this.selectData();
                            this.inputEl.blur();
                        }
                    }
                },
                initComponent: function () {
                    this.editable = false;
                    this.refreshValue();
                    this.callParent(arguments);
                }
            });
        }
        return DateRangeField;
    }());
    FastDefine.DateRangeField = DateRangeField;
    var DateField = (function () {
        function DateField() {
            Ext.define("Fast.ext.Date", {
                alias: ['widget.date', 'widget.datefield'],
                extend: 'Ext.form.field.Text',
                format: 'Y-m-d H:i:s',
                strict: true,
                isValid: function () {
                    var me = this;
                    if (me.callParent(arguments)) {
                        if (!Ext.isEmpty(me.getValue()) && !FastExt.Base.toBool(me.fromHeadSearch, false)) {
                            var date = Ext.Date.parse(me.getValue(true), this.format);
                            if (!date) {
                                me.invalidText = "日期格式错误！格式必须为：" + this.format;
                                me.markInvalid(this.invalidText);
                                return false;
                            }
                        }
                        return true;
                    }
                    return false;
                },
                setValue: function (dateValue) {
                    var me = this;
                    if (me.strict) {
                        if (!Ext.isEmpty(dateValue)) {
                            var guessDateFormat = FastExt.Base.guessDateFormat(dateValue);
                            var date = Ext.Date.parse(dateValue, guessDateFormat);
                            if (date) {
                                arguments[0] = Ext.Date.format(date, me.format);
                            }
                        }
                    }
                    return me.callParent(arguments);
                },
                getValue: function (fromValid) {
                    var me = this;
                    var rawValue = me.callParent(arguments);
                    if (me.strict) {
                        if (!FastExt.Base.toBool(fromValid, false)) {
                            var guessDateFormat = FastExt.Base.guessDateFormat(rawValue);
                            if (guessDateFormat === "Y-m") {
                                return rawValue + "-01";
                            }
                            else if (guessDateFormat === "Y/m") {
                                return rawValue + "/01";
                            }
                            else if (guessDateFormat === "Y") {
                                return rawValue + "-01-01";
                            }
                        }
                    }
                    return rawValue;
                },
                selectData: function () {
                    var me = this;
                    if (me.getEditorMenu() != null) {
                        me.getEditorMenu().holdShow = true;
                    }
                    me.pickerShown = true;
                    FastExt.Dialog.showFastDatePicker(me.bodyEl, me.getValue(), this.format).then(function (dateValue) {
                        if (me.getEditorMenu() != null) {
                            me.getEditorMenu().holdShow = false;
                        }
                        me.resetPickerShowTask.delay(100);
                        if (dateValue) {
                            me.setValue(dateValue);
                        }
                    });
                },
                toggleSelectData: function () {
                    if (this.pickerShown) {
                        this.pickerShown = false;
                        return;
                    }
                    this.selectData();
                },
                endEdit: function () {
                    this.firstValue = null;
                },
                onFastInputClick: function () {
                    if (this.readOnly || this.disabled) {
                        return;
                    }
                    if (this.strict) {
                        this.toggleSelectData();
                    }
                },
                triggers: {
                    search: {
                        cls: 'extIcon extDatePicker',
                        handler: function () {
                            this.toggleSelectData();
                        }
                    }
                },
                finishRender: function () {
                    this.callParent(arguments);
                    this.inputEl.on('click', this.onFastInputClick, this);
                },
                initComponent: function () {
                    var me = this;
                    me.resetPickerShowTask = new Ext.util.DelayedTask(function () {
                        this.pickerShown = false;
                    }, me);
                    me.callParent(arguments);
                }
            });
        }
        return DateField;
    }());
    FastDefine.DateField = DateField;
    var ColorField = (function () {
        function ColorField() {
            Ext.define("Fast.ext.ColorField", {
                extend: 'Ext.form.field.Text',
                alias: ['widget.colorfield'],
                editable: false,
                beforeBodyEl: [
                    '<div class="' + Ext.baseCSSPrefix + 'colorpicker-field-swatch" style="z-index: 9;">' +
                        '<div id="{id}-swatchEl" data-ref="swatchEl" class="' + Ext.baseCSSPrefix +
                        'colorpicker-field-swatch-inner"></div>' +
                        '</div>'
                ],
                cls: Ext.baseCSSPrefix + 'colorpicker-field',
                childEls: [
                    'swatchEl'
                ],
                setValue: function (val) {
                    var me = this;
                    if (me.swatchEl) {
                        me.swatchEl.setStyle('background', val);
                    }
                    me.callParent(arguments);
                    return me;
                },
                triggers: {
                    search: {
                        cls: 'extIcon extSearch',
                        handler: function () {
                            this.toggleSelectData();
                        }
                    }
                },
                onFastInputClick: function () {
                    if (this.readOnly || this.disabled) {
                        return;
                    }
                    this.toggleSelectData();
                },
                selectData: function () {
                    var me = this;
                    if (me.getEditorMenu() != null) {
                        me.getEditorMenu().holdShow = true;
                    }
                    me.pickerShown = true;
                    FastExt.Dialog.showFastColorPicker(me.inputEl, me.getValue(), function (color) {
                        me.setValue(color.toRGBA().toString(0));
                    }).then(function (dateValue) {
                        if (me.getEditorMenu() != null) {
                            me.getEditorMenu().holdShow = false;
                        }
                        me.resetPickerShowTask.delay(100);
                    });
                },
                clearData: function () {
                    var me = this;
                    me.setValue(null);
                },
                toggleSelectData: function () {
                    if (this.pickerShown) {
                        this.pickerShown = false;
                        return;
                    }
                    this.selectData();
                },
                initComponent: function () {
                    var me = this;
                    me.resetPickerShowTask = new Ext.util.DelayedTask(function () {
                        this.pickerShown = false;
                    }, me);
                    me.callParent(arguments);
                },
                finishRender: function () {
                    this.callParent(arguments);
                    this.inputEl.on('click', this.onFastInputClick, this);
                    var toColor = FastExt.Color.toColor(this.getValue(), "#00000000");
                    this.setValue(toColor);
                }
            });
        }
        return ColorField;
    }());
    FastDefine.ColorField = ColorField;
    var SVGIcon = (function () {
        function SVGIcon() {
            Ext.define("Fast.ext.SVGIcon", {
                extend: 'Ext.Component',
                alias: ['widget.svgicon'],
                iconId: "",
                iconCls: "",
                initComponent: function () {
                    var me = this;
                    me.callParent(arguments);
                },
                finishRender: function () {
                    this.callParent(arguments);
                    this.update("<svg class=\"svgIconFill " + this.iconCls + "\" aria-hidden=\"true\"><use xlink:href=\"" + this.iconId + "\"></use></svg>");
                }
            });
        }
        return SVGIcon;
    }());
    FastDefine.SVGIcon = SVGIcon;
    var Lottie = (function () {
        function Lottie() {
            Ext.define("Fast.ext.Lottie", {
                extend: 'Ext.Component',
                alias: ['widget.lottie'],
                jsonPath: '',
                initComponent: function () {
                    var me = this;
                    me.callParent(arguments);
                },
                destroy: function () {
                    FastExt.Lottie.unloadJsonAnim(this);
                    this.callParent(arguments);
                },
                finishRender: function () {
                    this.callParent(arguments);
                    var container = this.up("window");
                    if (container && !FastExt.Base.toBool(container.shown)) {
                        container.on("show", this.onFastContainerShow, this, { single: true });
                    }
                    else {
                        this.loadJson();
                    }
                },
                onFastContainerShow: function () {
                    this.loadJson();
                },
                loadJson: function () {
                    FastExt.Lottie.loadJsonAnim(this, this.jsonPath);
                }
            });
        }
        return Lottie;
    }());
    FastDefine.Lottie = Lottie;
    var MonacoField = (function () {
        function MonacoField() {
            Ext.define("Fast.ext.FastMonaco", {
                extend: 'Ext.form.field.TextArea',
                alias: ['widget.fastmonaco', 'widget.fastmonacofield'],
                editable: false,
                language: "plaintext",
                finishRender: function () {
                    this.callParent(arguments);
                    this.inputEl.on('click', this.onFastInputClick, this);
                },
                onFastInputClick: function () {
                    if (this.readOnly || this.disabled) {
                        return;
                    }
                    this.showMonacoEditor();
                },
                initComponent: function () {
                    this.editable = false;
                    this.callParent(arguments);
                },
                showMonacoEditor: function () {
                    var me = this;
                    if (me.getEditorMenu()) {
                        me.getEditorMenu().holdShow = true;
                    }
                    FastExt.MonacoEditor.showEditor(this, me.getValue(), me.language).then(function (result) {
                        if (result) {
                            me.setValue(result);
                        }
                        if (me.getEditorMenu()) {
                            me.getEditorMenu().holdShow = false;
                        }
                    });
                },
                clearData: function () {
                    var me = this;
                    me.setValue(null);
                },
                showWindow: function (obj, callBack, title) {
                    var me = this;
                    if (me.getEditorMenu()) {
                        me.getEditorMenu().holdShow = true;
                    }
                    FastExt.MonacoEditor.showEditor(obj, me.getValue(), me.language).then(function (result) {
                        if (result) {
                            if (Ext.isFunction(callBack)) {
                                callBack(me);
                            }
                        }
                        if (me.getEditorMenu()) {
                            me.getEditorMenu().holdShow = false;
                        }
                    });
                }
            });
        }
        return MonacoField;
    }());
    FastDefine.MonacoField = MonacoField;
    for (var subClass in FastDefine) {
        FastDefine[subClass]();
    }
})(FastDefine || (FastDefine = {}));
var FastExt;
(function (FastExt) {
    var Desktop = (function () {
        function Desktop() {
        }
        Desktop.initSystem = function () {
            FastExt.Dialog.hideWait();
            var container = FastExt.System.getBodyContainer();
            container.removeAll();
            var systemBgColor = FastExt.Color.toColor(FastExt.System["theme-color"].value);
            var defaultBtnStyle = {
                background: "#ffffff",
            };
            FastExt.Desktop.desktopPanel = Ext.create('Ext.panel.Panel', {
                layout: {
                    type: 'hbox',
                    align: 'stretch'
                },
                bodyStyle: {
                    background: "transparent",
                    borderWidth: 0,
                },
                border: 0,
                region: 'center',
                anchor: '100% 100%',
                bbar: {
                    xtype: 'toolbar',
                    overflowHandler: 'menu',
                    itemId: 'DesktopToolBar',
                    items: [
                        {
                            xtype: "button",
                            overflowText: "系统菜单",
                            iconCls: 'extIcon extMore whiteColor',
                            cls: 'fast-desktop-toolbar-btn',
                            help: FastExt.System.getPlainIconMenuHtmlBySVG({ iconCls: "extMore", text: "系统菜单" }),
                            style: {
                                background: systemBgColor,
                            },
                            focusCls: 'fast-desktop-toolbar-btn-focus',
                            helpType: FastEnum.HelpEnumType.mouse_in_out,
                            helpAnchor: FastEnum.TooltipAnchorType.bottom,
                            reorderable: false,
                            handler: function () {
                                FastExt.Desktop.toggleStartMenu(this);
                            },
                        },
                        {
                            xtype: 'tbseparator',
                            reorderable: false,
                        },
                        {
                            xtype: 'tbspacer',
                            reorderable: false,
                            desktopFixedMenuAnchor: true,
                        },
                        { xtype: 'tbfill', reorderable: false, desktopMenuAnchor: true, },
                        {
                            xtype: "button",
                            iconCls: 'extIcon extTip blackColor',
                            cls: 'fast-desktop-toolbar-btn',
                            overflowText: "系统待办事项",
                            reorderable: false,
                            help: FastExt.System.getPlainIconMenuHtmlBySVG({ iconCls: "extTip", text: "系统待办事项" }),
                            style: defaultBtnStyle,
                            helpType: FastEnum.HelpEnumType.mouse_in_out,
                            helpAnchor: FastEnum.TooltipAnchorType.bottom,
                            handler: function () {
                                FastExt.Desktop.showWindowPanel(this, "系统待办事项", FastExt.System.getSystemWaitNotice(false));
                            },
                        },
                        {
                            xtype: "button",
                            iconCls: 'extIcon extLog blackColor',
                            cls: 'fast-desktop-toolbar-btn',
                            overflowText: "系统操作日志",
                            help: FastExt.System.getPlainIconMenuHtmlBySVG({ iconCls: "extLog", text: "系统操作日志" }),
                            style: defaultBtnStyle,
                            helpType: FastEnum.HelpEnumType.mouse_in_out,
                            helpAnchor: FastEnum.TooltipAnchorType.bottom,
                            reorderable: false,
                            handler: function () {
                                FastExt.Desktop.showWindowPanel(this, "系统操作日志", FastExt.System.getSystemOperate(false));
                            },
                        },
                        { xtype: 'tbseparator', reorderable: false, },
                        {
                            xtype: "button",
                            iconCls: 'extIcon extVersion blackColor',
                            cls: 'fast-desktop-toolbar-btn',
                            overflowText: "系统基本信息",
                            reorderable: false,
                            help: FastExt.System.getPlainIconMenuHtmlBySVG({
                                iconCls: "extVersion",
                                text: "系统基本信息"
                            }),
                            style: defaultBtnStyle,
                            helpType: FastEnum.HelpEnumType.mouse_in_out,
                            helpAnchor: FastEnum.TooltipAnchorType.bottom,
                            handler: function () {
                                FastExt.Desktop.showWindowPanel(this, "系统基本信息", FastExt.System.getSystemVersion(false));
                            },
                        },
                        {
                            xtype: "button",
                            iconCls: 'extIcon extMonitor blackColor',
                            cls: 'fast-desktop-toolbar-btn',
                            reorderable: false,
                            overflowText: "系统监控信息",
                            help: FastExt.System.getPlainIconMenuHtmlBySVG({
                                iconCls: "extMonitor",
                                text: "系统监控信息"
                            }),
                            style: defaultBtnStyle,
                            helpType: FastEnum.HelpEnumType.mouse_in_out,
                            helpAnchor: FastEnum.TooltipAnchorType.bottom,
                            handler: function () {
                                FastExt.Desktop.showWindowPanel(this, "系统监控信息", FastExt.System.getSystemMonitor(false));
                            },
                        },
                        {
                            xtype: "button",
                            iconCls: 'extIcon extSet blackColor',
                            cls: 'fast-desktop-toolbar-btn',
                            reorderable: false,
                            overflowText: "系统全局设置",
                            help: FastExt.System.getPlainIconMenuHtmlBySVG({ iconCls: "extSet", text: "系统全局设置" }),
                            style: defaultBtnStyle,
                            helpType: FastEnum.HelpEnumType.mouse_in_out,
                            helpAnchor: FastEnum.TooltipAnchorType.bottom,
                            handler: function () {
                                FastExt.Desktop.showWindowPanel(this, "系统全局设置", FastExt.System.getSystemConfig(false));
                            },
                        }
                    ],
                    userCls: "fast-desktop-tool-bar",
                    plugins: [{
                            ptype: 'boxreorderer',
                            listeners: {
                                StartDrag: FastExt.DesktopEvent.onFastToolbarStartDrag,
                                Drop: FastExt.DesktopEvent.onFastToolbarDrop,
                            }
                        }],
                    listeners: {
                        afterlayout: function () {
                            this.getEl().on("dblclick", function () {
                                FastExt.Desktop.hideAllDesktopWin();
                            });
                            this.getEl().on("contextmenu", function (e) {
                                e.stopEvent();
                            });
                        }
                    }
                },
                addDesktopItem: function (menu, toContainer) {
                    if (toContainer) {
                        toContainer.addDesktopItem(menu);
                    }
                    else if (FastExt.Desktop.checkMenuFolder(menu)) {
                        var container_1 = this.child("[alignRight=false]");
                        container_1.addDesktopItem(menu);
                    }
                    else {
                        var container_2 = this.child("[alignRight=true]");
                        container_2.addDesktopItem(menu);
                    }
                },
                removeDesktopItem: function (menu) {
                    var containers = this.query("[desktopItemContainer=true]");
                    for (var i = 0; i < containers.length; i++) {
                        if (FastExt.Base.toBool(containers[i].folderLocked, false)) {
                            return;
                        }
                        containers[i].removeDesktopItem(menu);
                    }
                },
                checkMuuriGridReady: function () {
                    var containers = this.query("[desktopItemContainer=true]");
                    if (containers.length > 0) {
                        for (var i = 0; i < containers.length; i++) {
                            if (!FastExt.Base.toBool(containers[i].muuriReady, false)) {
                                return false;
                            }
                        }
                        return true;
                    }
                    return false;
                },
                rebindMuuriGrid: function () {
                    var containers = this.query("[desktopItemContainer=true]");
                    if (containers.length > 0) {
                        for (var i = 0; i < containers.length; i++) {
                            containers[i].bindMuuriGrid();
                        }
                    }
                },
                resetDesktop: function (configMenus) {
                    try {
                        this.removeAll();
                        FastExt.Desktop.removeAllDesktopToolbarFixedButton();
                        this.configMenus = configMenus;
                        var allDesktopMenuInfo = FastExt.Desktop.getAllDesktopMenuInfo(configMenus);
                        var rightItems = [], leftItems = [], fixedMenus = [];
                        for (var desktopMenusKey in allDesktopMenuInfo) {
                            var menu = allDesktopMenuInfo[desktopMenusKey];
                            var needDesktop = !FastExt.Desktop.checkMenuInFolder(menu);
                            if (needDesktop) {
                                if (menu.desktop) {
                                    if (Ext.isEmpty(menu.desktop_align)) {
                                        if (FastExt.Desktop.checkMenuFolder(menu)) {
                                            leftItems.push(menu);
                                        }
                                        else {
                                            rightItems.push(menu);
                                        }
                                    }
                                    else {
                                        if (menu.desktop_align === "right") {
                                            rightItems.push(menu);
                                        }
                                        else {
                                            leftItems.push(menu);
                                        }
                                    }
                                }
                            }
                            if (menu.desktop_fixed) {
                                fixedMenus.push(menu);
                            }
                        }
                        rightItems.sort(function (a, b) {
                            return a.desktop_index - b.desktop_index;
                        });
                        leftItems.sort(function (a, b) {
                            return a.desktop_index - b.desktop_index;
                        });
                        fixedMenus.sort(function (a, b) {
                            return a.desktop_fixed_index - b.desktop_fixed_index;
                        });
                        this.add(FastExt.Desktop.buildDesktopItemPanel(leftItems, false, true, false), FastExt.Desktop.buildDesktopItemPanel(rightItems, true, true, false));
                        FastExt.Desktop.addDesktopToolbarFixedButton(fixedMenus, true);
                    }
                    finally {
                        this.rebindMuuriGrid();
                        FastExt.Dialog.hideWait();
                        var tabFromHrefMenuId = FastExt.System.getMenuIdFromLocation();
                        var hasFromHrefMenu = FastExt.Desktop.getMenu(tabFromHrefMenuId);
                        if (hasFromHrefMenu) {
                            FastExt.Desktop.showWindowMenu(null, hasFromHrefMenu, true);
                        }
                        FastExt.Desktop.desktopInitFinish = true;
                    }
                },
                reorderDesktop: function () {
                    try {
                        this.removeAll();
                        var allDesktopMenuInfo = FastExt.Desktop.getAllDesktopMenuInfo(this.configMenus);
                        var rightItems = [], leftItems = [];
                        for (var desktopMenusKey in allDesktopMenuInfo) {
                            var menu = allDesktopMenuInfo[desktopMenusKey];
                            var needDesktop = !FastExt.Desktop.checkMenuInFolder(menu);
                            if (needDesktop) {
                                if (menu.desktop) {
                                    if (FastExt.Desktop.checkMenuFolder(menu)) {
                                        leftItems.push(menu);
                                    }
                                    else {
                                        rightItems.push(menu);
                                    }
                                }
                            }
                        }
                        rightItems.sort(function (a, b) {
                            return a.desktop_index - b.desktop_index;
                        });
                        leftItems.sort(function (a, b) {
                            return a.desktop_index - b.desktop_index;
                        });
                        this.add(FastExt.Desktop.buildDesktopItemPanel(leftItems, false, true, false), FastExt.Desktop.buildDesktopItemPanel(rightItems, true, true, false));
                    }
                    finally {
                        this.rebindMuuriGrid();
                    }
                },
                listeners: {
                    afterrender: function () {
                        this.getEl().on("contextmenu", FastExt.DesktopEvent.onFastDesktopContextMenu, this);
                        FastExt.Desktop.restoreSystemDesktopMenus();
                    },
                },
            });
            var defaultDesktopBgImg = FastExt.Objects.safeObject(FastExt.System["desktop-bg-image"]).value;
            if (Ext.isEmpty(defaultDesktopBgImg)) {
                defaultDesktopBgImg = "base/desktop/desktop_bg_img_default.jpg";
            }
            FastExt.Desktop.desktopContainer = Ext.create('Ext.container.Container', {
                layout: 'border',
                border: 0,
                style: {
                    backgroundImage: "url('" + defaultDesktopBgImg + "')",
                    backgroundSize: "cover",
                },
                items: [FastExt.System.getSystemHeaderPanel(["headContainer", "fast-desktop-header-container"]), FastExt.Desktop.desktopPanel],
            });
            container.add(FastExt.Desktop.desktopContainer);
        };
        Desktop.getMenu = function (menuId) {
            if (FastExt.Desktop.desktopAllMenusInfo.hasOwnProperty(menuId)) {
                return FastExt.Desktop.desktopAllMenusInfo[menuId];
            }
            return FastExt.System.getMenu(menuId);
        };
        Desktop.getMenuByMuuriGridItem = function (item) {
            var jqueryEl = $(item.getElement());
            var dataMenuId = jqueryEl.attr("data-menu-id");
            var dataMenuType = jqueryEl.attr("data-menu-type");
            if (Ext.isEmpty(dataMenuId)) {
                return null;
            }
            return FastExt.Desktop.getMenu(dataMenuId);
        };
        Desktop.restoreSystemDesktopMenus = function () {
            if (window["indexLottie"]) {
                window["indexLottie"].destroy();
                window["indexLottie"] = null;
            }
            Ext.MessageBox.updateProgress(1, '即将完成操作，请耐心等待', '系统初始化成功！获取菜单中…');
            if (FastExt.Base.toBool(FastExt.Objects.safeObject(FastExt.System['desktop-menu-record']).value, true)) {
                FastExt.Desktop.restoreMenu().then(function (value) {
                    FastExt.Desktop.desktopPanel.resetDesktop(FastExt.Json.jsonToObject(value));
                    if (FastExt.Listeners.onFinishSystem) {
                        FastExt.Listeners.onFinishSystem();
                    }
                });
            }
            else {
                FastExt.Desktop.desktopPanel.resetDesktop({});
                if (FastExt.Listeners.onFinishSystem) {
                    FastExt.Listeners.onFinishSystem();
                }
            }
        };
        Desktop.getAllDesktopMenuInfo = function (recordMenuConfig) {
            var takeAllDesktopMenu = function (parent, menus) {
                var desktopMenus = [];
                for (var i = 0; i < menus.length; i++) {
                    var menu = menus[i];
                    var cloneMenu = Ext.clone(menu);
                    cloneMenu.parent = parent;
                    cloneMenu.desktop = FastExt.Base.toBool(cloneMenu.desktop, cloneMenu.depth === 1);
                    cloneMenu.desktop_fixed = FastExt.Base.toBool(cloneMenu.desktop_fixed);
                    if (cloneMenu.desktop || cloneMenu.desktop_fixed) {
                        if (!cloneMenu.leaf) {
                            cloneMenu.desktop_type = "folder";
                        }
                        desktopMenus.push(cloneMenu);
                    }
                    if (cloneMenu.children) {
                        var childTakes = takeAllDesktopMenu(cloneMenu, cloneMenu.children);
                        desktopMenus = desktopMenus.concat(childTakes);
                    }
                }
                return desktopMenus;
            };
            var systemMenus = takeAllDesktopMenu(null, FastExt.System.menus);
            for (var i = 0; i < systemMenus.length; i++) {
                var childMenu = systemMenus[i];
                var exitMenu = FastExt.Objects.safeObject(FastExt.Desktop.desktopAllMenusInfo[childMenu.id]);
                FastExt.Desktop.desktopAllMenusInfo[childMenu.id] = Ext.Object.merge(exitMenu, childMenu);
            }
            var configMenus = [];
            if (recordMenuConfig) {
                for (var configMenuKey in recordMenuConfig) {
                    configMenus.push(recordMenuConfig[configMenuKey]);
                }
            }
            for (var i = 0; i < configMenus.length; i++) {
                var configMenu = configMenus[i];
                var exitMenu = FastExt.Desktop.desktopAllMenusInfo[configMenu.id];
                if (!exitMenu) {
                    exitMenu = FastExt.System.getMenu(configMenu.id);
                }
                if (!exitMenu) {
                    if (FastExt.Base.toString(configMenu.desktop_from, "none") === "user") {
                        exitMenu = {};
                    }
                    else {
                        continue;
                    }
                }
                FastExt.Desktop.desktopAllMenusInfo[configMenu.id] = Ext.Object.merge(exitMenu, configMenu);
            }
            for (var desktopAllMenusInfoKey in FastExt.Desktop.desktopAllMenusInfo) {
                var realMenu = FastExt.Desktop.desktopAllMenusInfo[desktopAllMenusInfoKey];
                if (Ext.isEmpty(realMenu.desktop_folder_id)) {
                    realMenu.desktop_folder_id = "desktop";
                }
                if (Ext.isEmpty(realMenu.treeGroup)) {
                    realMenu.treeGroup = FastExt.Base.buildOnlyCode("F");
                }
            }
            return FastExt.Desktop.desktopAllMenusInfo;
        };
        Desktop.buildDesktopItemPanel = function (menus, alignRight, horizontal, scrollable) {
            var containerId = "muuri-grid-container-" + (FastExt.Desktop.muuriContainerIdIndex++);
            return {
                xtype: "container",
                layout: 'fit',
                border: 0,
                desktopItemContainer: true,
                alignRight: alignRight,
                horizontal: horizontal,
                flex: 1,
                anchor: '100% 100%',
                configMenus: menus,
                muuriReady: false,
                muuriGridContainerId: containerId,
                html: "<div id='" + containerId + "-root' style='width: 100%;height: 100%;display: flex;justify-content:" + (alignRight ? "end" : "start") + "; overflow: " + (scrollable ? "auto" : "hidden") + ";padding: 5px;'>" +
                    "<div id='" + containerId + "' style='width: 100%;height: 100%; position: relative;' ></div></div>",
                listeners: {
                    destroy: function () {
                        FastExt.MuuriTool.releaseMuuriGrid(this);
                        FastExt.Desktop.refreshMuuriGridContainers();
                    },
                },
                getMuuriGridContainerId: function () {
                    return this.muuriGridContainerId;
                },
                bindMuuriGrid: function (callBack) {
                    var me = this;
                    FastExt.MuuriTool.justBindToContainer(this, {
                        dragEnabled: !FastExt.Base.toBool(this.folderLocked, false),
                        dragContainer: document.body,
                        layout: {
                            alignRight: this.alignRight,
                            horizontal: this.horizontal,
                            fillGaps: true,
                            rounding: true,
                        },
                        dragStartPredicate: FastExt.DesktopEvent.onFastMuuriGridDragStartPredicate,
                        dragSort: FastExt.DesktopEvent.onFastMuuriGridDragSort,
                        dragSortPredicate: FastExt.DesktopEvent.onFastMuuriGridDragSortPredicate,
                    }, function (muuriGrid) {
                        if (me.configMenus) {
                            me.addDesktopItems(me.configMenus);
                        }
                        me.muuriReady = true;
                        muuriGrid.containerId = me.getId();
                        muuriGrid.on("dragReleaseEnd", FastExt.DesktopEvent.onFastMuuriGridDragEnd);
                        muuriGrid.on("add", FastExt.DesktopEvent.onFastMuuriGridChange);
                        muuriGrid.on("remove", FastExt.DesktopEvent.onFastMuuriGridChange);
                        muuriGrid.on("dragInit", FastExt.DesktopEvent.onFastMuuriGridDragInit);
                        muuriGrid.on("send", FastExt.DesktopEvent.onFastMuuriGridSend);
                        FastExt.Desktop.refreshMuuriGridContainers();
                        if (me.ownerCt) {
                            me.ownerCt.updateLayout();
                        }
                        if (callBack) {
                            callBack();
                        }
                    });
                },
                addDesktopItems: function (menus) {
                    if (!menus) {
                        return;
                    }
                    var muuriGrid = FastExt.MuuriTool.getMuuriGrid(this);
                    if (!muuriGrid) {
                        return;
                    }
                    var cmpItems = [];
                    for (var i = 0; i < menus.length; i++) {
                        var menu = menus[i];
                        if (!FastExt.Base.toBool(menu.desktop_temp, false)) {
                            menu.desktop = true;
                            FastExt.Desktop.desktopAllMenusInfo[menu.id] = menu;
                        }
                        cmpItems.push(FastExt.Desktop.buildDesktopItem(menu));
                    }
                    if (cmpItems.length > 0) {
                        muuriGrid.add(cmpItems);
                    }
                },
                addDesktopItem: function (menu) {
                    if (!menu) {
                        return;
                    }
                    if (Ext.isArray(menu)) {
                        this.addDesktopItems(menu);
                        return;
                    }
                    var muuriGrid = FastExt.MuuriTool.getMuuriGrid(this);
                    if (!muuriGrid) {
                        return;
                    }
                    if (!FastExt.Base.toBool(menu.desktop_temp, false)) {
                        menu.desktop = true;
                        FastExt.Desktop.desktopAllMenusInfo[menu.id] = menu;
                    }
                    muuriGrid.add(FastExt.Desktop.buildDesktopItem(menu));
                },
                removeDesktopItem: function (menu) {
                    if (!menu) {
                        return;
                    }
                    var muuriGrid = FastExt.MuuriTool.getMuuriGrid(this);
                    if (!muuriGrid) {
                        return;
                    }
                    var menuItems = $("#" + this.muuriGridContainerId).find("[data-menu-id=" + menu.id + "]");
                    var waitRemoves = [];
                    for (var i = 0; i < menuItems.length; i++) {
                        var el = menuItems[i];
                        var item = muuriGrid.getItem(el);
                        if (item) {
                            waitRemoves.push(item);
                        }
                    }
                    if (FastExt.Desktop.desktopAllMenusInfo.hasOwnProperty(menu.id)) {
                        FastExt.Desktop.desktopAllMenusInfo[menu.id].desktop = false;
                    }
                    muuriGrid.remove(waitRemoves, { removeElements: true });
                },
                removeAllDesktopItem: function () {
                    var muuriGrid = FastExt.MuuriTool.getMuuriGrid(this);
                    if (!muuriGrid) {
                        return;
                    }
                    var allItems = muuriGrid.getItems();
                    var waitRemoves = [];
                    for (var i = 0; i < allItems.length; i++) {
                        waitRemoves.push(allItems[i]);
                        var jqueryEl = $(allItems[i].getElement());
                        var dataMenuId = jqueryEl.attr("data-menu-id");
                        if (FastExt.Desktop.desktopAllMenusInfo.hasOwnProperty(dataMenuId)) {
                            FastExt.Desktop.desktopAllMenusInfo[dataMenuId].desktop = false;
                        }
                    }
                    muuriGrid.remove(waitRemoves, { removeElements: true });
                },
                getAllDesktopItemMenus: function () {
                    var muuriGrid = FastExt.MuuriTool.getMuuriGrid(this);
                    if (!muuriGrid) {
                        return [];
                    }
                    var allItems = muuriGrid.getItems();
                    var menus = [];
                    for (var i = 0; i < allItems.length; i++) {
                        var elem = allItems[i].getElement();
                        var jqueryEl = $(elem);
                        var dataMenuId = jqueryEl.attr("data-menu-id");
                        var dataMenuType = jqueryEl.attr("data-menu-type");
                        if (Ext.isEmpty(dataMenuId)) {
                            continue;
                        }
                        var menu = FastExt.Desktop.getMenu(dataMenuId);
                        if (!menu) {
                            continue;
                        }
                        if (FastExt.Base.toBool(this.alignRight, false)) {
                            menu.desktop_align = "right";
                        }
                        else {
                            menu.desktop_align = "left";
                        }
                        menu.desktop_type = dataMenuType;
                        menu.desktop_index = i;
                        menus.push(menu);
                    }
                    return menus;
                },
                muuriGridLayout: function () {
                    var muuriGrid = FastExt.MuuriTool.getMuuriGrid(this);
                    if (!muuriGrid) {
                        return;
                    }
                    muuriGrid.layout();
                },
            };
        };
        Desktop.buildDesktopItem = function (menu) {
            var itemWidth = FastExt.Desktop.getDesktopButtonMaxWidth();
            var itemTitleWidth = FastExt.Desktop.getDesktopButtonTitleMaxWidth();
            if (Object.keys(menu).length === 0) {
                var empty = $("<div style='width: " + itemWidth + "px;position: absolute;margin: 5px;background:transparent;pointer-events: none;'>" +
                    "<div >" +
                    " <div  " +
                    " style='height:" + itemWidth * 2 + "px;'></div>" +
                    "</div>" +
                    "</div>");
                return empty[0];
            }
            if (Ext.isEmpty(menu.desktop_type)) {
                menu.desktop_type = "item";
            }
            var bgColor = FastExt.Desktop.safeGetMenuColor(menu);
            var bgColorTop = menu.color5;
            var locked = FastExt.Base.toBool(menu.desktop_locked, false);
            var isFolder = FastExt.Desktop.checkMenuFolder(menu);
            if (Ext.isEmpty(bgColorTop)) {
                if (FastExt.Desktop.checkMenuFolder(menu)) {
                    bgColorTop = "#FFEE99";
                }
                else {
                    bgColorTop = "#f0f0f0";
                }
            }
            var icons = [menu.icon];
            if (isFolder) {
                icons = [];
                var child = FastExt.Desktop.getFolderChildMenus(menu.id);
                for (var i = 0; i < child.length; i++) {
                    icons.push(FastExt.Desktop.safeGetMenuIcon(child[i]));
                    if (icons.length === 4) {
                        break;
                    }
                }
            }
            var bgStyle = bgColor;
            if (FastExt.System.isThemeWrap()) {
                bgStyle = "linear-gradient(0deg," + bgColor + ", " + bgColorTop + ");";
            }
            var itemHtml = "<div data-desktop-menu-item='true' data-menu-id='" + menu.id + "' data-menu-type='" + menu.desktop_type + "' " +
                " style='position: absolute;background:transparent;display: flex;align-items: center;justify-content: center;'>" +
                "<div class='fast-desktop-item' style='padding: 5px;'>" +
                " <div data-menu-bg='true' class='" + (isFolder ? 'fast-desktop-item-icon-grid' : 'fast-desktop-item-icon') + "'" +
                " style='height:" + itemWidth + "px;background:" + bgStyle + ";width:" + itemWidth + "px;" +
                " box-shadow: " + (isFolder ? '0px 0px 1px 1px black;' : '0px 1px 1px black;') + "'>";
            for (var i = 0; i < icons.length; i++) {
                itemHtml += "<img data-menu-icon='true' src='" + FastExt.System.takeIcon(icons[i], "#ffffff") + "'  alt='" + menu.text + "' />";
            }
            itemHtml += (locked ? "<div style='background: black;width:5px;height:5px;position: absolute;left: 13px;top: 8px;border-radius: 5px;'></div>" : "") +
                "</div>" +
                " <div data-menu-text='true' style='width: " + itemTitleWidth + "px;' class='fast-desktop-item-title'>" + menu.text + "</div>" +
                "</div>" +
                "</div>";
            var item = $(itemHtml);
            item.on("click", FastExt.DesktopEvent.onFastDesktopItemClick);
            item.on("contextmenu", FastExt.DesktopEvent.onFastDesktopItemContextMenu);
            return item[0];
        };
        Desktop.getDesktopButtonMaxWidth = function () {
            if (Ext.isEmpty(FastExt.Desktop.desktopButtonMaxWidth)) {
                FastExt.Desktop.desktopButtonMaxWidth = parseInt((document.body.clientWidth / 36).toFixed(0));
            }
            return FastExt.Desktop.desktopButtonMaxWidth;
        };
        Desktop.getDesktopButtonTitleMaxWidth = function () {
            return FastExt.Desktop.getDesktopButtonMaxWidth() + 10;
        };
        Desktop.toggleStartMenu = function (obj) {
            if (!FastExt.Desktop.startMenu) {
                var leftTreeWidth = parseInt((document.body.clientWidth * 0.25).toFixed(0));
                var leftTreePanel = Ext.create('Ext.panel.Panel', {
                    border: 0,
                    region: 'center',
                    bodyStyle: {
                        borderWidth: 0,
                    },
                    cls: 'treelist-with-nav',
                    scrollable: "y",
                    items: [
                        {
                            xtype: 'treelist',
                            id: 'leftTreeList',
                            reference: 'treelist',
                            expanderOnly: false,
                            singleExpand: false,
                            ui: 'nav',
                            scrollable: "y",
                            expanderFirst: false,
                            selectOnExpander: true,
                            highlightPath: true,
                            store: {
                                type: 'tree',
                                root: {
                                    expanded: true,
                                    children: FastExt.System.menus
                                }
                            },
                            listeners: {
                                itemclick: function (sender, info, eOpts) {
                                    if (info.node.data.leaf) {
                                        FastExt.Desktop.showWindowMenu("button", info.node.data);
                                    }
                                },
                                itemcontextmenu: function (treeview, treeitem, e) {
                                    FastExt.DesktopEvent.onFastMenuItemContextMenu(treeview, treeitem.getNode().data, e);
                                },
                            },
                        }
                    ],
                    listeners: {
                        resize: function (obj, width, height, oldWidth, oldHeight, eOpts) {
                            var pressed = width <= 128;
                            var treelist = Ext.getCmp("leftTreeList");
                            var ct = treelist.ownerCt.ownerCt;
                            treelist.setMicro(pressed);
                            if (pressed) {
                                ct.setWidth(44);
                            }
                            else {
                                ct.setWidth(width);
                            }
                        }
                    }
                });
                var leftContainer = Ext.create('Ext.panel.Panel', {
                    layout: 'border',
                    region: 'center',
                    border: 0,
                    bodyStyle: {
                        borderWidth: 0,
                    },
                    width: leftTreeWidth,
                    minWidth: 44,
                    maxWidth: 500,
                    subtitle: '左侧菜单',
                    split: true,
                    style: {
                        background: '#32404e'
                    },
                    items: [leftTreePanel],
                });
                var winHeight = parseInt((document.body.clientHeight * 0.8).toFixed(0));
                FastExt.Desktop.startMenu = Ext.create('Ext.menu.Menu', {
                    showSeparator: false,
                    layout: 'border',
                    padding: '0 0 0 0',
                    border: 0,
                    style: {
                        background: "#32404e",
                        borderWidth: 0,
                    },
                    userCls: "desktop-start-menu",
                    width: leftTreeWidth,
                    height: winHeight,
                    items: [leftContainer],
                    listeners: {
                        hide: function (obj, epts) {
                        }
                    },
                });
            }
            FastExt.Desktop.startMenu.showBy(FastExt.Desktop.desktopPanel.down("#DesktopToolBar"));
        };
        Desktop.hideAllDesktopWin = function () {
            var windows = Ext.ComponentQuery.query("[desktopWin=true]");
            for (var i = 0; i < windows.length; i++) {
                var win = windows[i];
                if (win.hideAction && win.hideAction === "destroy") {
                    win.hide(win.animateTarget, win.destroy, win);
                }
                else {
                    win.hide();
                }
            }
        };
        Desktop.closeAllDesktopWin = function () {
            var windows = Ext.ComponentQuery.query("[desktopWin=true]");
            for (var i = 0; i < windows.length; i++) {
                var win = windows[i];
                win.close();
            }
        };
        Desktop.getInsertMenuButtonIndex = function () {
            var bottomBar = FastExt.Desktop.desktopPanel.down("#DesktopToolBar");
            var desktopMenuAnchor = bottomBar.down("[desktopMenuAnchor=true]");
            if (desktopMenuAnchor) {
                return bottomBar.items.indexOf(desktopMenuAnchor);
            }
            return 1;
        };
        Desktop.getInsertFixedButtonIndex = function () {
            var bottomBar = FastExt.Desktop.desktopPanel.down("#DesktopToolBar");
            var desktopMenuAnchor = bottomBar.down("[desktopFixedMenuAnchor=true]");
            if (desktopMenuAnchor) {
                return bottomBar.items.indexOf(desktopMenuAnchor);
            }
            return 1;
        };
        Desktop.showWindowMenu = function (animObj, menu, active) {
            if (FastExt.Desktop.muuriDragging) {
                return;
            }
            if (!menu) {
                return;
            }
            if (FastExt.Desktop.hasWindowMenu(menu)) {
                return;
            }
            if (FastExt.Desktop.checkMenuFolder(menu)) {
                FastExt.Desktop.showFolder(animObj, menu, active);
                return;
            }
            var winWidth = parseInt((document.body.clientWidth * 0.8).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.9).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                title: FastExt.Desktop.getMenuPath(menu, "#ffffff", "20px"),
                realTitle: menu.text,
                menuId: menu.id,
                menuData: menu,
                menuContainer: true,
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 800,
                layout: 'fit',
                resizable: true,
                constrainHeader: true,
                maximizable: true,
                entityWindow: true,
                desktopWin: true,
                tools: [
                    {
                        type: 'minus',
                        callback: function (owner) {
                            owner.hide();
                        }
                    },
                ],
                listeners: {
                    show: function (win) {
                        win.shown = true;
                        if (!win.methodInvoked || FastExt.System.silenceGlobalSave) {
                            FastExt.System.asyncMethod(menu.method).then(function (obj) {
                                if (obj == null) {
                                    return;
                                }
                                var entityOwner = obj.down("[entityList=true]");
                                if (entityOwner) {
                                    entityOwner.where = FastExt.Json.mergeJson({}, entityOwner.where);
                                    entityOwner.code = $.md5(menu.id);
                                    entityOwner.buildCodeText = menu.text;
                                }
                                win.add(obj);
                                win.methodInvoked = true;
                            });
                        }
                        FastExt.Desktop.refreshActiveToolbarButton();
                    },
                    destroy: FastExt.DesktopEvent.onFastWindowMenuDestroy,
                    activate: FastExt.Desktop.refreshActiveToolbarButton,
                    hide: FastExt.Desktop.refreshActiveToolbarButton,
                    close: FastExt.Desktop.refreshActiveToolbarButton,
                    drag: function () {
                        FastExt.Desktop.disabledMenuPathClick = true;
                    },
                    dragend: function (obj, e) {
                        new Ext.util.DelayedTask(function () {
                            FastExt.Desktop.disabledMenuPathClick = false;
                        }, this).delay(100);
                    },
                }
            });
            FastExt.Desktop.addDesktopToolbarButton(menu);
            if (active) {
                FastExt.Desktop.activeToolbarButton(menu.id);
            }
            if (Ext.isObject(animObj)) {
                win.animateTarget = animObj;
            }
            var bottomBar = FastExt.Desktop.desktopPanel.down("#DesktopToolBar");
            if (bottomBar) {
                var x = (document.body.clientWidth - winWidth) / 2;
                var y = (document.body.clientHeight - bottomBar.getHeight() - winHeight) / 2;
                win.showAt(x, y);
            }
            else {
                win.show();
            }
        };
        Desktop.closeToolbarMenuButton = function (button) {
            if (button && button.menuWin) {
                button.menuWin.close();
                button.menuWin = null;
            }
            else {
                var bottomBar = FastExt.Desktop.desktopPanel.down("#DesktopToolBar");
                if (bottomBar) {
                    bottomBar.remove(button, true);
                }
            }
        };
        Desktop.closeOtherToolbarMenuButton = function (anchorBtn, direction) {
            var toolBar = FastExt.Desktop.desktopPanel.down("#DesktopToolBar");
            if (toolBar) {
                var menuButtons = toolBar.query("[desktopMenuButton=true]");
                var anchorIndex = -1;
                for (var i = 0; i < menuButtons.length; i++) {
                    if (anchorBtn.getId() === menuButtons[i].getId()) {
                        anchorIndex = i;
                        continue;
                    }
                    if (direction === "all") {
                        FastExt.Desktop.closeToolbarMenuButton(menuButtons[i]);
                    }
                    else if (direction === "right" && anchorIndex >= 0) {
                        FastExt.Desktop.closeToolbarMenuButton(menuButtons[i]);
                    }
                    else if (direction === "left" && anchorIndex < 0) {
                        FastExt.Desktop.closeToolbarMenuButton(menuButtons[i]);
                    }
                }
            }
        };
        Desktop.closeAllToolbarMenuButton = function () {
            var toolBar = FastExt.Desktop.desktopPanel.down("#DesktopToolBar");
            if (toolBar) {
                var menuButtons = toolBar.query("[desktopMenuButton=true]");
                for (var i = 0; i < menuButtons.length; i++) {
                    FastExt.Desktop.closeToolbarMenuButton(menuButtons[i]);
                }
            }
        };
        Desktop.showWindowPanel = function (obj, title, panel) {
            if (!obj) {
                obj = {
                    getId: function () {
                        return new Date().getTime();
                    },
                };
            }
            if (!panel) {
                return;
            }
            var windows = Ext.ComponentQuery.query("[buttonId=" + obj.getId() + "]");
            if (windows.length > 0) {
                FastExt.Component.shakeComment(windows[0]);
                if (panel) {
                    panel.destroy();
                }
                return;
            }
            var winWidth = parseInt((document.body.clientWidth * 0.4).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                title: title,
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 800,
                iconCls: obj.iconCls,
                layout: 'fit',
                buttonId: obj.getId(),
                hideAction: 'destroy',
                desktopWin: true,
                resizable: true,
                constrainHeader: true,
                maximizable: true,
                items: [panel],
                listeners: {
                    show: FastExt.Desktop.refreshActiveToolbarButton,
                    activate: FastExt.Desktop.refreshActiveToolbarButton,
                    close: FastExt.Desktop.refreshActiveToolbarButton,
                }
            });
            win.show();
        };
        Desktop.refreshActiveToolbarButton = function () {
            if (!FastExt.Desktop.desktopInitFinish) {
                return;
            }
            var topActiveWin = FastExt.Desktop.getTopDesktopWindow();
            if (topActiveWin) {
                if (!Ext.isEmpty(FastExt.Desktop.lastActiveMenuId) && topActiveWin.menuId !== FastExt.Desktop.lastActiveMenuId) {
                    FastExt.Desktop.deactiveToolbarButton(FastExt.Desktop.lastActiveMenuId);
                }
                FastExt.Desktop.activeToolbarButton(topActiveWin.menuId);
                FastExt.System.pushLocationHistory({
                    text: topActiveWin.realTitle || topActiveWin.title,
                    id: topActiveWin.menuId,
                });
            }
            else {
                if (!Ext.isEmpty(FastExt.Desktop.lastActiveMenuId)) {
                    FastExt.Desktop.deactiveToolbarButton(FastExt.Desktop.lastActiveMenuId);
                }
                FastExt.System.pushLocationHistory({ text: "首页" });
            }
        };
        Desktop.activeToolbarButton = function (menuId) {
            var button = FastExt.Desktop.desktopPanel.down("[menuButtonId=" + menuId + "]");
            if (button) {
                button.addCls("fast-desktop-toolbar-btn-active");
            }
            FastExt.Desktop.lastActiveMenuId = menuId;
        };
        Desktop.deactiveToolbarButton = function (menuId) {
            var button = FastExt.Desktop.desktopPanel.down("[menuButtonId=" + menuId + "]");
            if (button) {
                button.removeCls("fast-desktop-toolbar-btn-active");
            }
        };
        Desktop.getTopDesktopWindow = function () {
            var windows = Ext.ComponentQuery.query("[desktopWin=true]");
            var lastWindow = null;
            for (var i = 0; i < windows.length; i++) {
                var targetWindow = windows[i];
                if (!targetWindow.isVisible()) {
                    continue;
                }
                var zIndex = targetWindow.getEl().getZIndex();
                var lastZIndex = 0;
                if (lastWindow) {
                    lastZIndex = lastWindow.getEl().getZIndex();
                }
                if (zIndex > lastZIndex) {
                    lastWindow = targetWindow;
                }
            }
            return lastWindow;
        };
        Desktop.addDesktopButton = function (menu, silence) {
            if (FastExt.Desktop.checkDesktopButton(menu)) {
                FastExt.Dialog.toast("桌面已存在！");
                return;
            }
            FastExt.Desktop.desktopPanel.addDesktopItem(menu);
            if (!silence) {
                FastExt.Dialog.toast("添加成功！");
            }
        };
        Desktop.removeDesktopButton = function (menu, silence) {
            FastExt.Desktop.desktopPanel.removeDesktopItem(menu);
            if (!silence) {
                FastExt.Dialog.toast("移除成功！");
            }
        };
        Desktop.checkDesktopButton = function (menu) {
            if (!menu) {
                return false;
            }
            return FastExt.Base.toBool(menu.desktop);
        };
        Desktop.buildToolbarButton = function (menu, fixed) {
            var button = {
                xtype: "button",
                helpType: FastEnum.HelpEnumType.mouse_in_out,
                helpAnchor: FastEnum.TooltipAnchorType.bottom,
                userCls: 'fast-desktop-toolbar-btn',
                focusCls: 'fast-desktop-toolbar-btn-focus',
                handler: FastExt.DesktopEvent.onFastToolBarMenuButtonClick,
                updateMenu: function (newMenu) {
                    if (this.desktopFixedMenuButton) {
                        this.setText(null);
                    }
                    else {
                        this.setText(newMenu.text);
                    }
                    this.setIcon(FastExt.System.takeIcon(FastExt.Desktop.safeGetMenuIcon(newMenu), "#ffffff"));
                    this.overflowText = newMenu.text;
                    this.menuData = newMenu;
                    this.help = FastExt.System.getPlainIconMenu(newMenu, " >> ");
                    this.menuButtonId = newMenu.id;
                    if (!FastExt.Base.toBool(newMenu.leaf, false)) {
                        this.menuButtonGroup = newMenu.treeGroup;
                    }
                    this.setStyle("background", FastExt.Desktop.safeGetMenuColor(newMenu));
                },
                listeners: {
                    afterrender: function () {
                        this.updateMenu(menu);
                        this.getEl().on("contextmenu", FastExt.DesktopEvent.onFastToolbarMenuButtonContextMenu, this);
                    }
                }
            };
            if (fixed) {
                button["desktopFixedMenuButton"] = true;
            }
            else {
                button["desktopMenuButton"] = true;
            }
            return button;
        };
        Desktop.removeAllDesktopToolbarFixedButton = function () {
            var bottomBar = FastExt.Desktop.desktopPanel.down("#DesktopToolBar");
            if (bottomBar) {
                var waitRemove_1 = [];
                bottomBar.items.each(function (item) {
                    if (item.desktopFixedMenuButton) {
                        waitRemove_1.push(item);
                    }
                });
                Ext.suspendLayouts();
                for (var i = 0; i < waitRemove_1.length; i++) {
                    bottomBar.remove(waitRemove_1[i]);
                }
                Ext.resumeLayouts();
            }
        };
        Desktop.addDesktopToolbarFixedButton = function (sourceMenu, silence) {
            try {
                var bottomBar = FastExt.Desktop.desktopPanel.down("#DesktopToolBar");
                if (bottomBar) {
                    var menus = [];
                    if (Ext.isArray(sourceMenu)) {
                        menus = sourceMenu;
                    }
                    else {
                        menus.push(sourceMenu);
                    }
                    var menuButtons = [];
                    for (var i = 0; i < menus.length; i++) {
                        var menu = menus[i];
                        if (!FastExt.Desktop.desktopAllMenusInfo.hasOwnProperty(menu.id)) {
                            FastExt.Desktop.desktopAllMenusInfo[menu.id] = menu;
                        }
                        FastExt.Desktop.desktopAllMenusInfo[menu.id].desktop_fixed = true;
                        var desktopToolbarButton = FastExt.Desktop.getDesktopToolbarButton(menu);
                        if (desktopToolbarButton) {
                            if (desktopToolbarButton.desktopFixedMenuButton) {
                                continue;
                            }
                            else {
                                bottomBar.remove(desktopToolbarButton);
                            }
                        }
                        menuButtons.push(FastExt.Desktop.buildToolbarButton(menu, true));
                    }
                    bottomBar.insert(FastExt.Desktop.getInsertFixedButtonIndex(), menuButtons);
                    if (!silence) {
                        FastExt.Dialog.toast("已固定到工具栏中！");
                        FastExt.Desktop.recordMenu();
                    }
                }
            }
            finally {
                FastExt.Desktop.refreshActiveToolbarButton();
            }
        };
        Desktop.removeDesktopToolbarFixedButton = function (sourceMenu) {
            try {
                var bottomBar = FastExt.Desktop.desktopPanel.down("#DesktopToolBar");
                if (bottomBar) {
                    var menus = [];
                    if (Ext.isArray(sourceMenu)) {
                        menus = sourceMenu;
                    }
                    else {
                        menus.push(sourceMenu);
                    }
                    for (var i = 0; i < menus.length; i++) {
                        var menu = menus[i];
                        if (!FastExt.Desktop.desktopAllMenusInfo.hasOwnProperty(menu.id)) {
                            FastExt.Desktop.desktopAllMenusInfo[menu.id] = menu;
                        }
                        FastExt.Desktop.desktopAllMenusInfo[menu.id].desktop_fixed = false;
                        var desktopToolbarButton = FastExt.Desktop.getDesktopToolbarButton(menu);
                        if (desktopToolbarButton && desktopToolbarButton.desktopFixedMenuButton) {
                            bottomBar.remove(desktopToolbarButton);
                        }
                        var windowMenu = FastExt.Desktop.getWindowMenu(menu);
                        if (windowMenu) {
                            FastExt.Desktop.addDesktopToolbarButton(menu);
                        }
                    }
                    FastExt.Desktop.recordMenu();
                    FastExt.Dialog.toast("已从工具栏中取消固定！");
                }
            }
            finally {
                FastExt.Desktop.refreshActiveToolbarButton();
            }
        };
        Desktop.checkDesktopToolbarFixedButton = function (menu) {
            if (!menu) {
                return false;
            }
            var desktopToolbarButton = FastExt.Desktop.getDesktopToolbarButton(menu);
            if (desktopToolbarButton) {
                return desktopToolbarButton.desktopFixedMenuButton;
            }
            return false;
        };
        Desktop.addDesktopToolbarButton = function (sourceMenu) {
            if (!sourceMenu) {
                return;
            }
            var bottomBar = FastExt.Desktop.desktopPanel.down("#DesktopToolBar");
            if (bottomBar) {
                var menus = [];
                if (Ext.isArray(sourceMenu)) {
                    menus = sourceMenu;
                }
                else {
                    menus.push(sourceMenu);
                }
                var menuButtons = [];
                for (var i = 0; i < menus.length; i++) {
                    var menu = menus[i];
                    var desktopToolbarButton = FastExt.Desktop.getDesktopToolbarButton(menu);
                    if (desktopToolbarButton) {
                        continue;
                    }
                    menuButtons.push(FastExt.Desktop.buildToolbarButton(menu, false));
                }
                if (menuButtons.length > 0) {
                    bottomBar.insert(FastExt.Desktop.getInsertMenuButtonIndex(), menuButtons);
                }
            }
        };
        Desktop.removeDesktopToolbarButton = function (sourceMenu) {
            if (!sourceMenu) {
                return;
            }
            var bottomBar = FastExt.Desktop.desktopPanel.down("#DesktopToolBar");
            if (bottomBar) {
                var menus = [];
                if (Ext.isArray(sourceMenu)) {
                    menus = sourceMenu;
                }
                else {
                    menus.push(sourceMenu);
                }
                for (var i = 0; i < menus.length; i++) {
                    var menu = menus[i];
                    var desktopToolbarButton = FastExt.Desktop.getDesktopToolbarButton(menu);
                    if (!FastExt.Base.toBool(desktopToolbarButton.desktopFixedMenuButton)) {
                        bottomBar.remove(desktopToolbarButton);
                    }
                }
            }
        };
        Desktop.getDesktopToolbarButton = function (sourceMenu) {
            if (!sourceMenu) {
                return;
            }
            var bottomBar = FastExt.Desktop.desktopPanel.down("#DesktopToolBar");
            if (bottomBar) {
                return bottomBar.down("[menuButtonId=" + sourceMenu.id + "]");
            }
            return null;
        };
        Desktop.getDesktopToolbarButtonByGroup = function (sourceMenu) {
            if (!sourceMenu) {
                return;
            }
            var bottomBar = FastExt.Desktop.desktopPanel.down("#DesktopToolBar");
            if (bottomBar) {
                return bottomBar.down("[menuButtonGroup=" + sourceMenu.treeGroup + "]");
            }
            return null;
        };
        Desktop.outDesktopMenuFolder = function (sourceMenu) {
            if (!sourceMenu) {
                return;
            }
            FastExt.Desktop.disabledRecordMenu = true;
            if (FastExt.Desktop.desktopAllMenusInfo.hasOwnProperty(sourceMenu.id)) {
                FastExt.Desktop.desktopAllMenusInfo[sourceMenu.id].desktop_folder_id = "desktop";
            }
            FastExt.Desktop.removeDesktopButton(sourceMenu, true);
            FastExt.Desktop.disabledRecordMenu = false;
            FastExt.Desktop.addDesktopButton(sourceMenu, true);
            FastExt.Dialog.toast("已移出文件夹！");
        };
        Desktop.recordMenu = function () {
            if (FastExt.Desktop.disabledRecordMenu) {
                return;
            }
            FastExt.Desktop.refreshMuuriGridMenuIndex();
            try {
                var menuInfo = {};
                for (var desktopAllMenusInfoKey in FastExt.Desktop.desktopAllMenusInfo) {
                    var sourceMenu = FastExt.Desktop.desktopAllMenusInfo[desktopAllMenusInfoKey];
                    if (FastExt.Base.toBool(sourceMenu.desktop_temp, false)) {
                        continue;
                    }
                    if (!menuInfo.hasOwnProperty(sourceMenu.id)) {
                        menuInfo[sourceMenu.id] = {
                            id: sourceMenu.id,
                            text: sourceMenu.text,
                        };
                    }
                    var recordMenu = menuInfo[sourceMenu.id];
                    recordMenu["desktop"] = sourceMenu.desktop;
                    recordMenu["desktop_align"] = sourceMenu.desktop_align;
                    recordMenu["desktop_index"] = sourceMenu.desktop_index;
                    recordMenu["desktop_type"] = sourceMenu.desktop_type;
                    recordMenu["desktop_folder_id"] = sourceMenu.desktop_folder_id;
                    recordMenu["desktop_fixed"] = sourceMenu.desktop_fixed;
                    recordMenu["desktop_fixed_index"] = sourceMenu.desktop_fixed_index;
                    recordMenu["desktop_from"] = sourceMenu.desktop_from;
                    recordMenu["desktop_locked"] = sourceMenu.desktop_locked;
                }
                FastExt.Server.setSilence(true);
                FastExt.Server.saveExtConfig($.md5("SystemDesktopMenus"), "DesktopMenu", FastExt.Json.objectToJson(menuInfo), function (success, message) {
                    FastExt.Server.setSilence(false);
                });
            }
            catch (e) {
            }
        };
        Desktop.restoreMenu = function () {
            return new Ext.Promise(function (resolve, reject) {
                try {
                    FastExt.Server.showExtConfig($.md5("SystemDesktopMenus"), "DesktopMenu", function (success, value) {
                        resolve(value);
                    });
                }
                catch (e) {
                    reject(e);
                }
            });
        };
        Desktop.showDesktopBackgroundImages = function (obj) {
            var desktopBgImages = FastExt.System.getExt("desktopBgImages");
            if (desktopBgImages) {
                if (!obj) {
                    obj = {
                        getId: function () {
                            return new Date().getTime();
                        },
                    };
                }
                var windows = Ext.ComponentQuery.query("[buttonId=" + obj.getId() + "]");
                if (windows.length > 0) {
                    FastExt.Component.shakeComment(windows[0]);
                    return;
                }
                var images = FastExt.Json.jsonToObject(desktopBgImages.value);
                var imagesCmp = [];
                var imageMargin = 5;
                var windowWidth = (100 + imageMargin * 2) * 5 + imageMargin + 10;
                for (var i = 0; i < images.length; i++) {
                    imagesCmp.push({
                        xtype: "image",
                        src: images[i],
                        height: 100,
                        margin: imageMargin,
                        width: 100,
                        style: {
                            objectFit: "cover",
                        },
                        listeners: {
                            afterrender: function (obj) {
                                obj.getEl().on("click", FastExt.DesktopEvent.onFastDesktopImageClick, obj);
                            },
                        }
                    });
                }
                var winHeight = parseInt((document.body.clientHeight * 0.6).toFixed(0));
                var win = Ext.create('Ext.window.Window', {
                    title: "选择桌面背景图片",
                    height: winHeight,
                    width: windowWidth,
                    iconCls: obj.iconCls,
                    layout: 'fit',
                    buttonId: obj.getId(),
                    hideAction: 'destroy',
                    desktopWin: true,
                    resizable: false,
                    constrain: true,
                    maximizable: false,
                    items: [
                        {
                            xtype: "container",
                            layout: "column",
                            scrollable: true,
                            margin: imageMargin,
                            items: imagesCmp,
                        }
                    ],
                    listeners: {
                        show: function (win) {
                            FastExt.Desktop.refreshActiveToolbarButton();
                        },
                    }
                });
                win.show();
            }
            else {
                FastExt.Dialog.toast("暂无可用图片选择！");
            }
        };
        Desktop.showFolderByMenuId = function (obj, menuId) {
            var menu = FastExt.Desktop.getMenu(menuId);
            if (menu) {
                FastExt.Desktop.showFolder(obj, menu);
            }
        };
        Desktop.showFolder = function (obj, menu, active) {
            if (FastExt.Desktop.hasWindowMenu(menu)) {
                return;
            }
            var menuGroupWindows = Ext.ComponentQuery.query("[menuWindowGroup=" + menu.treeGroup + "]");
            if (menuGroupWindows.length > 0) {
                menuGroupWindows[0].updateFolderMenu(menu, false);
                menuGroupWindows[0].show();
                return;
            }
            var winHeight = parseInt((document.body.clientHeight * 0.4).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                layout: 'fit',
                title: "文件夹",
                height: winHeight,
                width: (FastExt.Desktop.getDesktopButtonTitleMaxWidth() + 10) * 6 + 10,
                minHeight: 100,
                minWidth: 100,
                menuData: menu,
                desktopWin: true,
                resizable: true,
                constrainHeader: true,
                maximizable: true,
                userCls: "fast-ext-folder-window",
                items: [
                    FastExt.Desktop.buildDesktopItemPanel([], false, false, true)
                ],
                tools: [
                    {
                        itemId: 'edit',
                        iconCls: 'extIcon extEdit whiteColor',
                        hidden: !FastExt.Desktop.checkMenuByUserFolder(menu),
                        callback: function (owner) {
                            FastExt.Desktop.showEditFolderName(owner.menuData);
                        }
                    },
                ],
                listeners: {
                    afterrender: function () {
                        if (!FastExt.Desktop.checkSystemLockedFolderMenu(this.menuData)) {
                            this.getEl().on("contextmenu", FastExt.DesktopEvent.onFastDesktopFolderContextMenu, this);
                        }
                    },
                    show: function (win) {
                        var muuriGridPanel = this.getMuuriGridContainer();
                        if (muuriGridPanel) {
                            muuriGridPanel.folder = true;
                            muuriGridPanel.folderId = this.menuData.id;
                            muuriGridPanel.folderLocked = FastExt.Desktop.checkSystemLockedFolderMenu(this.menuData);
                            muuriGridPanel.bindMuuriGrid(function () {
                                win.updateFolderMenu(win.menuData, false);
                            });
                        }
                        FastExt.Desktop.refreshActiveToolbarButton();
                    },
                    resize: function () {
                        var muuriGridPanel = this.getMuuriGridContainer();
                        if (muuriGridPanel) {
                            muuriGridPanel.muuriGridLayout();
                        }
                    },
                    beforedestroy: FastExt.Desktop.recordMenu,
                    destroy: FastExt.DesktopEvent.onFastWindowMenuDestroy,
                    activate: FastExt.Desktop.refreshActiveToolbarButton,
                    hide: FastExt.Desktop.refreshActiveToolbarButton,
                    close: FastExt.Desktop.refreshActiveToolbarButton,
                },
                bbar: {
                    xtype: "container",
                    border: 0,
                    padding: '5 5 5 5',
                    itemId: "menuPathContainer",
                    style: {
                        background: "#f0f0f0",
                    },
                },
                setFolderTitle: function (folderMenu) {
                    this.setTitle(FastExt.Desktop.checkSystemLockedFolderMenu(folderMenu) ? folderMenu.text + "<span style='font-size: xx-small'>【已锁定】</span>" : folderMenu.text);
                    this.realTitle = folderMenu.text;
                },
                getMuuriGridContainer: function () {
                    return this.down("[desktopItemContainer=true]");
                },
                updateFolderMenu: function (folderMenu, justInfo) {
                    if (!justInfo) {
                        var muuriGridContainer = this.getMuuriGridContainer();
                        muuriGridContainer.removeAllDesktopItem();
                        muuriGridContainer.addDesktopItems(FastExt.Desktop.getFolderChildMenus(folderMenu.id));
                    }
                    var menuPathContainer = this.down("#menuPathContainer");
                    if (menuPathContainer) {
                        menuPathContainer.update(FastExt.Desktop.getMenuPath(folderMenu, null, "16px"));
                    }
                    this.setFolderTitle(folderMenu);
                    this.setIcon(FastExt.System.takeIcon(FastExt.Desktop.safeGetMenuIcon(folderMenu), "#ffffff"));
                    this.menuData = folderMenu;
                    this.menuId = folderMenu.id;
                    this.menuWindowGroup = folderMenu.treeGroup;
                    var desktopToolbarButton = FastExt.Desktop.getDesktopToolbarButtonByGroup(folderMenu);
                    if (desktopToolbarButton) {
                        desktopToolbarButton.updateMenu(folderMenu);
                    }
                    FastExt.Desktop.refreshActiveToolbarButton();
                },
            });
            FastExt.Desktop.addDesktopToolbarButton(menu);
            if (active) {
                FastExt.Desktop.activeToolbarButton(menu.id);
            }
            FastExt.Desktop.desktopPanel.add(win);
            win.show();
        };
        Desktop.getFolderChildMenus = function (folderId) {
            var systemMenu = FastExt.System.getMenuData(folderId);
            if (FastExt.Desktop.checkSystemLockedFolderMenu(systemMenu)) {
                for (var i = 0; i < systemMenu.children.length; i++) {
                    var child = systemMenu.children[i];
                    child.desktop_temp = true;
                    if (!FastExt.Base.toBool(child.leaf, true)) {
                        child.desktop_type = "folder";
                    }
                }
                return systemMenu.children;
            }
            var desktopMenus = [];
            for (var desktopMenusKey in FastExt.Desktop.desktopAllMenusInfo) {
                var menu = FastExt.Desktop.desktopAllMenusInfo[desktopMenusKey];
                if (menu.desktop_folder_id !== folderId) {
                    continue;
                }
                if (!FastExt.Base.toBool(menu.desktop, true)) {
                    continue;
                }
                desktopMenus.push(menu);
            }
            desktopMenus.sort(function (a, b) {
                return a.desktop_index - b.desktop_index;
            });
            return desktopMenus;
        };
        Desktop.checkMuuriGridContainer = function (x, y) {
            for (var i = 0; i < FastExt.Desktop.muuriGridContainers.length; i++) {
                var container = FastExt.Desktop.muuriGridContainers[i];
                if (FastExt.Base.toBool(container.folderLocked, false)) {
                    continue;
                }
                var region = container.getRegion(false, false);
                if (!region.isOutOfBound({ x: x, y: y })) {
                    return container;
                }
            }
            return null;
        };
        Desktop.buildFolderMenu = function (menuText) {
            if (Ext.isEmpty(menuText)) {
                return null;
            }
            var menuTexts = FastExt.Objects.safeSplit(menuText, "@");
            var menuId = $.md5("Folder" + menuText);
            FastExt.Desktop.desktopAllMenusInfo[menuId] = {
                id: menuId,
                text: menuTexts[menuTexts.length - 1],
                icon: FastExt.Desktop.folderIcon,
                color: FastExt.Desktop.folderColor,
                desktop_type: "folder",
                desktop_from: "user",
                treeGroup: FastExt.Base.buildOnlyCode("F"),
            };
            return FastExt.Desktop.desktopAllMenusInfo[menuId];
        };
        Desktop.refreshMuuriGridContainers = function () {
            FastExt.Desktop.muuriGridContainers = FastExt.Desktop.desktopPanel.query("[desktopItemContainer=true]");
            FastExt.Desktop.muuriGridContainers.sort(function (a, b) {
                var aUpWindow = a.up("window");
                if (!aUpWindow) {
                    aUpWindow = a;
                }
                var bUpWindow = b.up("window");
                if (!bUpWindow) {
                    bUpWindow = b;
                }
                var aZIndex = FastExt.Base.toInt(aUpWindow.getEl().getZIndex(), 0);
                var bZIndex = FastExt.Base.toInt(bUpWindow.getEl().getZIndex(), 0);
                return bZIndex - aZIndex;
            });
        };
        Desktop.refreshMuuriGridMenuIndex = function () {
            var fixedMenus = FastExt.Desktop.desktopPanel.query("[desktopFixedMenuButton=true]");
            for (var i = 0; i < fixedMenus.length; i++) {
                var menuButton = fixedMenus[i];
                if (menuButton.menuData) {
                    menuButton.menuData.desktop_fixed = true;
                    menuButton.menuData.desktop_fixed_index = i;
                }
            }
            for (var i = 0; i < FastExt.Desktop.muuriGridContainers.length; i++) {
                var container = FastExt.Desktop.muuriGridContainers[i];
                container.getAllDesktopItemMenus();
            }
        };
        Desktop.checkMenuInFolder = function (menu) {
            if (!menu) {
                return false;
            }
            if (!Ext.isEmpty(menu.desktop_folder_id) && menu.desktop_folder_id !== "desktop") {
                var folderMenu = FastExt.Desktop.getMenu(menu.desktop_folder_id);
                if (folderMenu) {
                    if (FastExt.Desktop.checkSystemLockedFolderMenu(folderMenu)) {
                        return false;
                    }
                    return FastExt.Base.toBool(folderMenu.desktop);
                }
            }
            return false;
        };
        Desktop.checkMenuByUserFolder = function (menu) {
            return FastExt.Base.toString(menu.desktop_from, "system") === "user" && menu.desktop_type === "folder";
        };
        Desktop.checkMenuFolder = function (menu) {
            if (!menu) {
                return false;
            }
            if (menu.desktop_type === "folder") {
                return true;
            }
            if (FastExt.Desktop.checkSystemLockedFolderMenu(menu)) {
                return true;
            }
            return false;
        };
        Desktop.checkMenuLocked = function (menu) {
            return FastExt.Base.toBool(menu.desktop_locked, false);
        };
        Desktop.updateDesktopMenuButton = function (menu) {
            if (!menu) {
                return;
            }
            var isFolder = FastExt.Desktop.checkMenuFolder(menu);
            var icons = [menu.icon];
            if (isFolder) {
                icons = [];
                var child = FastExt.Desktop.getFolderChildMenus(menu.id);
                for (var i = 0; i < child.length; i++) {
                    icons.push(FastExt.Desktop.safeGetMenuIcon(child[i]));
                    if (icons.length === 4) {
                        break;
                    }
                }
            }
            var iconHtml = "";
            for (var i = 0; i < icons.length; i++) {
                iconHtml += "<img data-menu-icon='true' src='" + FastExt.System.takeIcon(icons[i], "#ffffff") + "'  alt='" + menu.text + "' />";
            }
            var $dataMenus = $("[data-menu-id=" + menu.id + "]");
            $dataMenus.find("[data-menu-text]").text(menu.text);
            $dataMenus.find("[data-menu-bg]").html(iconHtml);
        };
        Desktop.updateMenuInfo = function (menu) {
            FastExt.Desktop.updateDesktopMenuButton(menu);
            var windowMenu = FastExt.Desktop.getWindowMenu(menu);
            if (windowMenu) {
                windowMenu.updateFolderMenu(menu, true);
            }
        };
        Desktop.showEditFolderName = function (menu) {
            FastExt.Dialog.showPrompt("重命名文件夹", "请输入新的文件夹名", function (btn, text) {
                if (btn === "ok") {
                    menu.text = text;
                    FastExt.Desktop.updateMenuInfo(menu);
                    FastExt.Desktop.recordMenu();
                }
            }, false, menu.text);
        };
        Desktop.checkSystemLockedFolderMenu = function (menu) {
            if (!menu) {
                return false;
            }
            return menu.webMenu && menu.children && !FastExt.Base.toBool(menu.leaf, true);
        };
        Desktop.updateFolderGridMenu = function (muuriGrid) {
            if (!muuriGrid) {
                return;
            }
            var muuriGridContainer = Ext.getCmp(muuriGrid.containerId);
            if (muuriGridContainer && muuriGridContainer.folder) {
                FastExt.Desktop.updateDesktopMenuButton(FastExt.Desktop.getMenu(muuriGridContainer.folderId));
            }
        };
        Desktop.switchMuuriGrid = function (muuriGrid, item, dragEnd) {
            var muuriGridContainer = Ext.getCmp(muuriGrid.containerId);
            if (muuriGridContainer) {
                var elem = item.getElement();
                var jqueryEl = $(elem);
                var dataMenuId = jqueryEl.attr("data-menu-id");
                var dataMenuType = jqueryEl.attr("data-menu-type");
                var menu = FastExt.Desktop.getMenu(dataMenuId);
                if (menu) {
                    if (muuriGridContainer.folder) {
                        menu.desktop_folder_id = muuriGridContainer.folderId;
                    }
                    else {
                        menu.desktop_folder_id = "desktop";
                    }
                    if (FastExt.Base.toBool(muuriGridContainer.alignRight, false)) {
                        menu.desktop_align = "right";
                    }
                    else {
                        menu.desktop_align = "left";
                    }
                    menu.desktop_type = dataMenuType;
                }
            }
        };
        Desktop.safeGetMenuIcon = function (menu) {
            if (!menu) {
                return null;
            }
            var icon = menu.icon;
            if (Ext.isEmpty(icon)) {
                if (FastExt.Desktop.checkMenuFolder(menu)) {
                    icon = FastExt.Desktop.folderIcon;
                }
                else {
                    icon = "icons/icon_function.svg";
                }
                menu.icon = icon;
            }
            return icon;
        };
        Desktop.safeGetMenuColor = function (menu) {
            var color = menu.color;
            if (Ext.isEmpty(color)) {
                if (FastExt.Desktop.checkMenuFolder(menu)) {
                    color = FastExt.Desktop.folderColor;
                }
                else {
                    color = FastExt.Color.toColor(FastExt.System["theme-color"].value);
                }
            }
            return color;
        };
        Desktop.showDeleteFolder = function () {
            var windows = Ext.ComponentQuery.query("[deleteFolderWin=true]");
            if (windows.length > 0) {
                return;
            }
            var win = Ext.create('Ext.window.Window', {
                height: 120,
                width: 120,
                layout: 'absolute',
                deleteFolderWin: true,
                frame: true,
                header: false,
                shadow: false,
                animateDisable: true,
                style: {
                    background: "transparent",
                },
                bodyStyle: {
                    background: "transparent",
                },
                items: [
                    FastExt.Desktop.buildDesktopItemPanel([], false, false, false),
                    {
                        xtype: "container",
                        anchor: '100% 100%',
                        html: "<div style='width: 100%;height: 100%;display: flex;" +
                            "align-items: center;justify-content: center;font-size: xxx-large;'>" +
                            "<span class='extIcon extDelete' style='font-size: 80px;text-shadow: 0px 0px 20px red;color: #ff3200;'></span>" +
                            "</div>",
                    }
                ],
                listeners: {
                    show: function (win) {
                        var muuriGridPanel = this.getMuuriGridContainer();
                        if (muuriGridPanel) {
                            muuriGridPanel.deleteFolder = true;
                            muuriGridPanel.bindMuuriGrid();
                        }
                    },
                },
                getMuuriGridContainer: function () {
                    return this.down("[desktopItemContainer=true]");
                }
            });
            FastExt.Desktop.desktopPanel.add(win);
            win.show();
        };
        Desktop.hideDeleteFolder = function () {
            var windows = Ext.ComponentQuery.query("[deleteFolderWin=true]");
            for (var i = 0; i < windows.length; i++) {
                var deleteWindow = windows[i];
                deleteWindow.getMuuriGridContainer().removeAllDesktopItem();
                deleteWindow.close();
            }
            FastExt.Desktop.recordMenu();
        };
        Desktop.getMenuPath = function (menu, iconColor, iconSize) {
            var menuArray = FastExt.System.getPathMenu(menu);
            var menuIconHtml = "<div style=\"display: flex;align-items: center;\" >";
            for (var i = 0; i < menuArray.length; i++) {
                var targetMenu = menuArray[i];
                var parentMenuFunctionStr = "FastExt.DesktopEvent.onFastWindowMenuClick(this)";
                var itemHtml = "<div data-menu-id='" + targetMenu.id + "' onclick=\"" + (i !== menuArray.length - 1 ? parentMenuFunctionStr : "") + "\" " +
                    " style=\"display: flex;align-items: center;\" class='" + (i !== menuArray.length - 1 ? "fast-desktop-menu-path-click" : "") + "'>" +
                    " <img src=\"" + FastExt.System.takeIcon(targetMenu.icon, iconColor) + "\" " +
                    " width='" + iconSize + "' height='" + iconSize + "' />" +
                    "<span style=\"margin-left: 5px;\">" + targetMenu.text + "</span> </div>";
                if (i != 0) {
                    itemHtml = "<span style='font-size: 12px;margin: 0 5px;color: #cbcbcb;' class='extIcon extArrowRight2'></span>" + itemHtml;
                }
                menuIconHtml += itemHtml;
            }
            menuIconHtml += "</div>";
            return menuIconHtml;
        };
        Desktop.getWindowMenu = function (menu) {
            var windows = Ext.ComponentQuery.query("[menuId=" + menu.id + "]");
            if (windows.length > 0) {
                return windows[0];
            }
            return null;
        };
        Desktop.hasWindowMenu = function (menu) {
            var windowMenu = FastExt.Desktop.getWindowMenu(menu);
            if (windowMenu) {
                var desktopToolbarButton = FastExt.Desktop.getDesktopToolbarButton(menu);
                if (desktopToolbarButton) {
                    windowMenu.animateTarget = desktopToolbarButton;
                }
                if (windowMenu.isVisible()) {
                    FastExt.Component.shakeComment(windowMenu);
                }
                else {
                    windowMenu.show();
                }
                return true;
            }
            return false;
        };
        Desktop.resetWindowMenuAnimTarget = function (menu, target) {
            var windowMenu = FastExt.Desktop.getWindowMenu(menu);
            if (windowMenu) {
                windowMenu.animateTarget = target;
            }
        };
        Desktop.muuriContainerIdIndex = 1;
        Desktop.lastActiveMenuId = null;
        Desktop.lastSelectDesktopImageId = null;
        Desktop.muuriGridContainers = null;
        Desktop.folderIcon = "icons/icon_system_file.svg";
        Desktop.folderColor = "#FFBB00";
        Desktop.desktopAllMenusInfo = {};
        Desktop.disabledRecordMenu = false;
        Desktop.disabledMenuPathClick = false;
        return Desktop;
    }());
    FastExt.Desktop = Desktop;
    var DesktopEvent = (function () {
        function DesktopEvent() {
        }
        DesktopEvent.onFastWindowMenuDestroy = function () {
            var menuWindow = this;
            FastExt.Desktop.removeDesktopToolbarButton(menuWindow.menuData);
            menuWindow.menuData = null;
        };
        DesktopEvent.onFastToolBarMenuButtonClick = function () {
            var btn = this;
            var menu = btn.menuData;
            if (menu) {
                var menuWindow = FastExt.Desktop.getWindowMenu(menu);
                if (menuWindow) {
                    menuWindow.animateTarget = this;
                    if (menuWindow.isVisible()) {
                        var topActiveWin = FastExt.Desktop.getTopDesktopWindow();
                        if (topActiveWin && topActiveWin.getId() !== menuWindow.getId()) {
                            Ext.WindowManager.bringToFront(menuWindow, true);
                            return;
                        }
                        menuWindow.hide();
                    }
                    else {
                        menuWindow.show();
                    }
                    return;
                }
                FastExt.Desktop.showWindowMenu(this, menu);
            }
        };
        DesktopEvent.onFastToolbarMenuButtonContextMenu = function (event) {
            var btn = this;
            var desktopMenuButtonExist = FastExt.Desktop.checkDesktopButton(btn.menuData);
            var desktopFixedMenuButtonExist = FastExt.Desktop.checkDesktopToolbarFixedButton(btn.menuData);
            var menu = Ext.create('Ext.menu.Menu', {
                items: [
                    {
                        text: '关闭当前',
                        iconCls: 'extIcon extClose',
                        handler: function () {
                            FastExt.Desktop.closeToolbarMenuButton(btn);
                        },
                    },
                    '-',
                    {
                        text: "关闭所有",
                        iconCls: 'extIcon extCloseAll',
                        handler: function () {
                            FastExt.Desktop.closeAllToolbarMenuButton();
                        },
                    },
                    {
                        text: '关闭左侧',
                        iconCls: 'extIcon extCloseOther',
                        handler: function () {
                            FastExt.Desktop.closeOtherToolbarMenuButton(btn, "left");
                        },
                    },
                    {
                        text: '关闭其他',
                        iconCls: 'extIcon extCloseOther',
                        handler: function () {
                            FastExt.Desktop.closeOtherToolbarMenuButton(btn, "all");
                        },
                    },
                    {
                        text: '关闭右侧',
                        iconCls: 'extIcon extCloseOther',
                        handler: function () {
                            FastExt.Desktop.closeOtherToolbarMenuButton(btn, "right");
                        },
                    },
                    '-',
                    {
                        text: '添加快捷方式',
                        iconCls: 'extIcon extLinks editColor',
                        hidden: desktopMenuButtonExist,
                        handler: function () {
                            FastExt.Desktop.addDesktopButton(btn.menuData);
                        },
                    },
                    {
                        text: '移除快捷方式',
                        iconCls: 'extIcon extLinks redColor',
                        hidden: !desktopMenuButtonExist,
                        handler: function () {
                            FastExt.Desktop.removeDesktopButton(btn.menuData);
                        },
                    },
                    '-',
                    {
                        text: '固定到工具栏',
                        iconCls: 'extIcon extTags editColor',
                        hidden: desktopFixedMenuButtonExist,
                        handler: function () {
                            FastExt.Desktop.addDesktopToolbarFixedButton(btn.menuData);
                        },
                    },
                    {
                        text: '取消工具栏固定',
                        iconCls: 'extIcon extTags redColor',
                        hidden: !desktopFixedMenuButtonExist,
                        handler: function () {
                            FastExt.Desktop.removeDesktopToolbarFixedButton(btn.menuData);
                        },
                    },
                ],
                listeners: {
                    hide: function () {
                        this.delayClose(100);
                    },
                }
            });
            menu.showBy(btn);
        };
        DesktopEvent.onFastDesktopItemClick = function (e) {
            e.preventDefault();
            e.stopPropagation();
            var jqueryObj = $(this);
            var dataMenuId = jqueryObj.attr("data-menu-id");
            FastExt.Desktop.showWindowMenu(jqueryObj[0], FastExt.Desktop.getMenu(dataMenuId));
        };
        DesktopEvent.onFastMenuItemContextMenu = function (treeView, menuData, event) {
            var parentMenu = treeView.up("menu");
            if (parentMenu) {
                parentMenu.holdShow = true;
            }
            var isLeaf = menuData.leaf;
            var readMenu = FastExt.Desktop.getMenu(menuData.id);
            if (!isLeaf) {
                readMenu.desktop_type = "folder";
            }
            var desktopMenuButtonExist = FastExt.Desktop.checkDesktopButton(readMenu);
            var desktopFixedMenuButtonExist = FastExt.Desktop.checkDesktopToolbarFixedButton(readMenu);
            var inFolder = FastExt.Desktop.checkMenuInFolder(readMenu);
            var locked = FastExt.Desktop.checkMenuLocked(menuData);
            var menu = Ext.create('Ext.menu.Menu', {
                items: [
                    {
                        text: '打开功能',
                        iconCls: 'extIcon extMouseClick searchColor',
                        handler: function () {
                            FastExt.Desktop.showWindowMenu(this, readMenu);
                        },
                    },
                    '-',
                    {
                        text: '添加快捷方式',
                        iconCls: 'extIcon extLinks editColor',
                        hidden: locked || desktopMenuButtonExist,
                        handler: function () {
                            FastExt.Desktop.addDesktopButton(readMenu);
                        },
                    },
                    {
                        text: '移除快捷方式',
                        iconCls: 'extIcon extLinks redColor',
                        hidden: locked || inFolder || !desktopMenuButtonExist,
                        handler: function () {
                            FastExt.Desktop.removeDesktopButton(readMenu);
                        },
                    },
                    {
                        text: '移出文件夹',
                        iconCls: 'extIcon extFolder redColor',
                        hidden: locked || !inFolder,
                        handler: function () {
                            FastExt.Desktop.outDesktopMenuFolder(readMenu);
                        },
                    },
                    '-',
                    {
                        text: '固定到工具栏',
                        iconCls: 'extIcon extTags editColor',
                        hidden: locked || desktopFixedMenuButtonExist,
                        handler: function () {
                            FastExt.Desktop.addDesktopToolbarFixedButton(readMenu);
                        },
                    },
                    {
                        text: '取消工具栏固定',
                        iconCls: 'extIcon extTags redColor',
                        hidden: locked || !desktopFixedMenuButtonExist,
                        handler: function () {
                            FastExt.Desktop.removeDesktopToolbarFixedButton(readMenu);
                        },
                    },
                ],
                listeners: {
                    hide: function () {
                        if (parentMenu) {
                            parentMenu.holdShow = false;
                        }
                        this.delayClose(100);
                    },
                }
            });
            FastExt.Menu.refreshItem(menu);
            menu.showAt(event.getXY());
        };
        DesktopEvent.onFastDesktopContextMenu = function (event) {
            var menu = Ext.create('Ext.menu.Menu', {
                items: [
                    {
                        text: '新建文件夹',
                        iconCls: 'extIcon extFolder color38',
                        handler: function () {
                            FastExt.Dialog.showPrompt("新建文件夹", "请输入文件夹名称", function (btn, text) {
                                if (btn === "ok") {
                                    FastExt.Desktop.desktopPanel.addDesktopItem(FastExt.Desktop.buildFolderMenu(text), FastExt.Desktop.checkMuuriGridContainer(event.clientX, event.clientY));
                                }
                            });
                        },
                    },
                    '-',
                    {
                        text: '设置桌面背景',
                        iconCls: 'extIcon extImages greenColor',
                        handler: function () {
                            FastExt.Desktop.showDesktopBackgroundImages(this);
                        },
                    },
                    {
                        text: '自动整理桌面',
                        iconCls: 'extIcon extTable color9',
                        handler: function () {
                            FastExt.Desktop.desktopPanel.reorderDesktop();
                            FastExt.Desktop.recordMenu();
                            FastExt.Dialog.toast("整理成功！");
                        },
                    },
                    '-',
                    {
                        text: '服务器CPU监控',
                        iconCls: 'extIcon extCPU color129',
                        handler: function () {
                            FastExt.System.showMonitorChart("服务器CPU监控【实时监控中】", 0);
                        },
                    },
                    {
                        text: '服务器内存监控',
                        iconCls: 'extIcon extMemory color61',
                        handler: function () {
                            FastExt.System.showMonitorChart("服务器内存监控【实时监控中】", 1);
                        },
                    },
                    {
                        text: '系统JVM监控',
                        iconCls: 'extIcon extJVM color144',
                        handler: function () {
                            FastExt.System.showMonitorChart("系统JVM监控【实时监控中】", 2);
                        },
                    },
                    {
                        text: '服务器更多监控',
                        iconCls: 'extIcon extMonitor color25',
                        handler: function () {
                            FastExt.Desktop.showWindowPanel(this, "系统监控信息", FastExt.System.getSystemMonitor(false));
                        },
                    },
                    '-',
                    {
                        text: '系统全局设置',
                        iconCls: 'extIcon extSet color12',
                        handler: function () {
                            FastExt.Desktop.showWindowPanel(this, "系统全局设置", FastExt.System.getSystemConfig(false));
                        },
                    },
                ],
                listeners: {
                    hide: function () {
                        this.delayClose(100);
                    },
                }
            });
            menu.showAt(event.getXY());
        };
        DesktopEvent.onFastDesktopItemContextMenu = function (event) {
            event.stopPropagation();
            var jqueryObj = $(this);
            var dataMenuId = jqueryObj.attr("data-menu-id");
            var menuData = FastExt.Desktop.getMenu(dataMenuId);
            var inFolder = FastExt.Desktop.checkMenuInFolder(menuData);
            var desktopMenuButtonExist = FastExt.Desktop.checkDesktopButton(menuData);
            var desktopFixedMenuButtonExist = FastExt.Desktop.checkDesktopToolbarFixedButton(menuData);
            var userMenu = FastExt.Desktop.checkMenuByUserFolder(menuData);
            var locked = FastExt.Desktop.checkMenuLocked(menuData);
            var menu = Ext.create('Ext.menu.Menu', {
                items: [
                    {
                        text: '打开功能',
                        iconCls: 'extIcon extMouseClick searchColor',
                        handler: function () {
                            FastExt.Desktop.showWindowMenu(jqueryObj[0], menuData);
                        },
                    },
                    {
                        text: '重命名文件夹',
                        iconCls: 'extIcon extEdit color68',
                        hidden: !userMenu,
                        handler: function () {
                            FastExt.Desktop.showEditFolderName(menuData);
                        },
                    },
                    '-',
                    {
                        text: '添加快捷方式',
                        iconCls: 'extIcon extLinks editColor',
                        hidden: locked || desktopMenuButtonExist,
                        handler: function () {
                            FastExt.Desktop.addDesktopButton(menuData);
                        },
                    },
                    {
                        text: '移除快捷方式',
                        iconCls: 'extIcon extLinks redColor',
                        hidden: locked || inFolder || !desktopMenuButtonExist,
                        handler: function () {
                            FastExt.Desktop.removeDesktopButton(menuData);
                        },
                    },
                    {
                        text: '移出文件夹',
                        iconCls: 'extIcon extFolder redColor',
                        hidden: locked || !inFolder,
                        handler: function () {
                            FastExt.Desktop.outDesktopMenuFolder(menuData);
                        },
                    },
                    '-',
                    {
                        text: '固定到工具栏',
                        iconCls: 'extIcon extTags editColor',
                        hidden: locked || desktopFixedMenuButtonExist,
                        handler: function () {
                            FastExt.Desktop.addDesktopToolbarFixedButton(menuData);
                        },
                    },
                    {
                        text: '取消工具栏固定',
                        iconCls: 'extIcon extTags redColor',
                        hidden: locked || !desktopFixedMenuButtonExist,
                        handler: function () {
                            FastExt.Desktop.removeDesktopToolbarFixedButton(menuData);
                        },
                    },
                ],
                listeners: {
                    hide: function () {
                        this.delayClose(100);
                    },
                }
            });
            FastExt.Menu.refreshItem(menu);
            menu.showAt(event.clientX, event.clientY);
            return false;
        };
        DesktopEvent.onFastMuuriGridSend = function (data) {
            FastExt.Desktop.switchMuuriGrid(data.toGrid, data.item, false);
            FastExt.Desktop.updateFolderGridMenu(data.toGrid);
            FastExt.Desktop.updateFolderGridMenu(data.fromGrid);
        };
        DesktopEvent.onFastMuuriGridDragInit = function () {
            FastExt.Desktop.showDeleteFolder();
            FastExt.Desktop.refreshMuuriGridContainers();
        };
        DesktopEvent.onFastMuuriGridDragSort = function () {
            var muuriGrid = [];
            for (var i = 0; i < FastExt.Desktop.muuriGridContainers.length; i++) {
                var container = FastExt.Desktop.muuriGridContainers[i];
                if (container.folderLocked) {
                    continue;
                }
                muuriGrid.push(FastExt.MuuriTool.getMuuriGrid(container));
            }
            return muuriGrid;
        };
        DesktopEvent.onFastMuuriGridDragStartPredicate = function (item, event) {
            var menu = FastExt.Desktop.getMenuByMuuriGridItem(item);
            if (menu && FastExt.Base.toBool(menu.desktop_locked, false)) {
                return false;
            }
            return Muuri.ItemDrag.defaultStartPredicate(item, event, {
                distance: 10,
                delay: 50
            });
        };
        DesktopEvent.onFastMuuriGridDragSortPredicate = function (item, event) {
            var inContainer = FastExt.Desktop.checkMuuriGridContainer(event.clientX, event.clientY);
            if (inContainer) {
                var muuriGrid = FastExt.MuuriTool.getMuuriGrid(inContainer);
                var currGrid = item.getGrid();
                if (muuriGrid && currGrid && currGrid._id !== muuriGrid._id) {
                    return {
                        grid: muuriGrid,
                        index: -1,
                        action: "move",
                    };
                }
            }
            var result = Muuri.ItemDrag.defaultSortPredicate(item, {
                threshold: 50,
                action: 'move',
                migrateAction: 'move'
            });
            if (result) {
                var menu = FastExt.Desktop.getMenuByMuuriGridItem(result.grid.getItem(result.index));
                if (menu && FastExt.Base.toBool(menu.desktop_locked, false)) {
                    return false;
                }
            }
            return result;
        };
        DesktopEvent.onFastMuuriGridDragEnd = function (items) {
            FastExt.DesktopEvent.onFastMuuriGridChange(items);
            FastExt.Desktop.hideDeleteFolder();
        };
        DesktopEvent.onFastMuuriGridChange = function (items) {
            var allItems = [];
            if (Ext.isArray(items)) {
                allItems = items;
            }
            else {
                allItems.push(items);
            }
            FastExt.Desktop.refreshMuuriGridMenuIndex();
            for (var i = 0; i < allItems.length; i++) {
                var item = allItems[i];
                var grid = item.getGrid();
                if (grid && grid.containerId) {
                    FastExt.Desktop.switchMuuriGrid(grid, item, false);
                    FastExt.Desktop.updateFolderGridMenu(grid);
                }
            }
            FastExt.Desktop.recordMenu();
        };
        DesktopEvent.onFastToolbarStartDrag = function (obj, container, dragCmp, idx, eOpts) {
            var bottomBar = FastExt.Desktop.desktopPanel.down("#DesktopToolBar");
            if (bottomBar) {
                var desktopFixedMenuButton = FastExt.Base.toBool(dragCmp.desktopFixedMenuButton, false);
                var desktopMenuButtons = bottomBar.query("[desktopMenuButton=true]");
                for (var i = 0; i < desktopMenuButtons.length; i++) {
                    desktopMenuButtons[i].reorderable = !desktopFixedMenuButton;
                }
                var desktopFixedMenuButtons = bottomBar.query("[desktopFixedMenuButton=true]");
                for (var i = 0; i < desktopFixedMenuButtons.length; i++) {
                    desktopFixedMenuButtons[i].reorderable = desktopFixedMenuButton;
                }
            }
        };
        DesktopEvent.onFastToolbarDrop = function () {
            var bottomBar = FastExt.Desktop.desktopPanel.down("#DesktopToolBar");
            if (bottomBar) {
                var desktopMenuButtons = bottomBar.query("[desktopMenuButton=true]");
                for (var i = 0; i < desktopMenuButtons.length; i++) {
                    desktopMenuButtons[i].reorderable = true;
                }
                var desktopFixedMenuButtons = bottomBar.query("[desktopFixedMenuButton=true]");
                for (var i = 0; i < desktopFixedMenuButtons.length; i++) {
                    desktopFixedMenuButtons[i].reorderable = true;
                }
            }
            FastExt.Desktop.recordMenu();
        };
        DesktopEvent.onFastDesktopImageClick = function () {
            if (FastExt.Desktop.lastSelectDesktopImageId) {
                var lastImage = Ext.getCmp(FastExt.Desktop.lastSelectDesktopImageId);
                if (lastImage) {
                    lastImage.setStyle("border", "0");
                }
            }
            var img = this;
            img.setStyle("border", "2px solid red");
            FastExt.Desktop.lastSelectDesktopImageId = img.getId();
            FastExt.Desktop.desktopContainer.setStyle({
                backgroundImage: "url('" + img.getSrc() + "')",
                backgroundSize: "cover",
            });
            FastExt.System["desktop-bg-image"].value = img.getSrc();
            FastExt.Server.saveSystemConfig("desktop-bg-image", img.getSrc());
        };
        DesktopEvent.onFastDesktopFolderContextMenu = function (event) {
            var menu = Ext.create('Ext.menu.Menu', {
                items: [
                    {
                        text: '新建文件夹',
                        iconCls: 'extIcon extFolder color38',
                        handler: function () {
                            FastExt.Dialog.showPrompt("系统提醒", "请输入文件夹名称", function (btn, text) {
                                if (btn === "ok") {
                                    FastExt.Desktop.desktopPanel.addDesktopItem(FastExt.Desktop.buildFolderMenu(text), FastExt.Desktop.checkMuuriGridContainer(event.clientX, event.clientY));
                                }
                            });
                        },
                    },
                ],
                listeners: {
                    hide: function () {
                        this.delayClose(100);
                    },
                }
            });
            menu.showAt(event.getXY());
        };
        DesktopEvent.onFastWindowMenuClick = function (obj) {
            if (FastExt.Desktop.disabledMenuPathClick) {
                return;
            }
            FastExt.Desktop.showFolderByMenuId(obj, $(obj).attr("data-menu-id"));
        };
        return DesktopEvent;
    }());
    FastExt.DesktopEvent = DesktopEvent;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Dialog = (function () {
        function Dialog() {
        }
        Dialog.showWait = function (message) {
            Ext.MessageBox.show({
                modal: true,
                title: '系统提醒',
                msg: message,
                iconCls: "extIcon extTimer",
                progressText: '请耐心等待，即将完成操作',
                progress: true,
                closable: false,
            });
            var i = 0;
            var max = 100;
            var fn = function () {
                if (Ext.MessageBox.isHidden())
                    return;
                i = i + 0.5;
                if (i === max + 30) {
                    i = 0;
                }
                var val = i / max;
                Ext.MessageBox.updateProgress(val, '请耐心等待，即将完成操作');
                Ext.MessageBox.timeoutProcess = setTimeout(fn, 5);
            };
            if (Ext.MessageBox.timeoutProcess) {
                clearTimeout(Ext.MessageBox.timeoutProcess);
            }
            Ext.MessageBox.timeoutProcess = setTimeout(fn, 5);
        };
        Dialog.hideWait = function () {
            if (Ext.MessageBox.isVisible()) {
                Ext.MessageBox.close();
            }
        };
        Dialog.toast = function (message) {
            var maxWidth = parseInt((document.body.clientWidth * 0.7).toFixed(0));
            var defaultAutoCloseDelay = 2000;
            var textLength = $("<div>" + message + "</div>").text().length;
            if (textLength > 8) {
                defaultAutoCloseDelay = 3000;
            }
            if (textLength > 50) {
                defaultAutoCloseDelay = 5000;
            }
            if (textLength > 80) {
                defaultAutoCloseDelay = 8000;
            }
            Ext.toast({
                html: message,
                closable: true,
                align: 't',
                slideInDuration: 200,
                slideBackDuration: 200,
                minWidth: 180,
                autoCloseDelay: defaultAutoCloseDelay,
                maxWidth: maxWidth,
                justTop: true,
                unpin: false,
                slideBackAnimation: 'easeOut',
                iconCls: 'extIcon extInfo',
                title: '消息提示'
            });
        };
        Dialog.showHtml = function (obj, title, content, modal) {
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            if (Ext.isEmpty(modal)) {
                modal = true;
            }
            var win = Ext.create('Ext.window.Window', {
                title: title,
                layout: 'fit',
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 600,
                constrain: true,
                resizable: true,
                maximizable: true,
                modal: modal,
                maximized: false,
                iconCls: 'extIcon extSee',
                draggable: true,
                scrollable: true,
                html: content,
                toFrontOnShow: true
            });
            win.show();
        };
        Dialog.showLink = function (obj, title, url, config, loadDoneCallBack) {
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var iframeName = "iFrameLink" + new Date().getTime();
            var loadFunName = "iFrameLoadDone" + new Date().getTime();
            var iframePanel = Ext.create('Ext.container.Container', {
                layout: 'border',
                region: 'center',
                border: 0,
                iframePanel: true
            });
            window[loadFunName] = function () {
                iframePanel.setLoading(false);
                if (Ext.isFunction(loadDoneCallBack)) {
                    loadDoneCallBack(iframeName);
                }
                window[loadFunName] = null;
            };
            var defaultConfig = {
                title: title,
                layout: 'fit',
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 600,
                resizable: true,
                maximizable: true,
                modal: true,
                constrain: true,
                maximized: false,
                iconCls: 'extIcon extSee',
                draggable: true,
                scrollable: false,
                toFrontOnShow: true,
                items: [iframePanel],
                listeners: {
                    show: function () {
                        iframePanel.setLoading("正在努力加载中，请稍后……");
                        var html = "<iframe name='" + iframeName + "' onload='" + loadFunName + "()' src='" + url + "'  width='100%' height='100%' frameborder='0'>";
                        iframePanel.update(html);
                    },
                    close: function () {
                        window[loadFunName] = null;
                    }
                }
            };
            var win = Ext.create('Ext.window.Window', FastExt.Json.mergeJson(defaultConfig, config));
            win.show();
        };
        Dialog.showEditorHtml = function (obj, title, content, config) {
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.8).toFixed(0));
            var iframeName = "ShowEditorFrame" + new Date().getTime();
            var iframePanel = Ext.create('Ext.container.Container', {
                layout: 'border',
                region: 'center',
                border: 0,
                iframePanel: true,
            });
            var win = Ext.create('Ext.window.Window', {
                title: title,
                layout: 'fit',
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 600,
                resizable: true,
                maximizable: true,
                modal: true,
                constrain: true,
                maximized: false,
                iconCls: 'extIcon extSee',
                draggable: true,
                scrollable: false,
                toFrontOnShow: true,
                items: [iframePanel],
                listeners: {
                    show: function (obj, eOpts) {
                        var url = FastExt.System.formatUrlVersion("base/editor/show.html");
                        window[iframeName + "ShowEditorDone"] = function () {
                            window[iframeName].window.showContent(content);
                        };
                        var html = "<iframe name='" + iframeName + "' src='" + url + "'  width='100%' height='100%' frameborder='0'>";
                        iframePanel.update(html);
                    },
                    destroy: function () {
                        window[iframeName] = null;
                        window[iframeName + "ShowEditorDone"] = null;
                    },
                },
                buttons: [
                    {
                        text: '打印',
                        iconCls: 'extIcon extPrint',
                        handler: function () {
                            window[iframeName].window.print();
                        }
                    }
                ]
            });
            win.show();
        };
        Dialog.showContent = function (obj, title, text, modal) {
            this.showText(obj, null, title, text, modal);
        };
        Dialog.showText = function (obj, icon, title, text, modal) {
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            if (Ext.isEmpty(icon)) {
                icon = 'extIcon extSee';
            }
            if (Ext.isEmpty(modal)) {
                modal = true;
            }
            var win = Ext.create('Ext.window.Window', {
                title: title,
                icon: icon,
                iconCls: icon,
                maximizable: true,
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 600,
                resizable: true,
                layout: 'fit',
                animateTarget: obj,
                items: [
                    {
                        xtype: 'textarea',
                        value: text
                    }
                ],
                modal: modal,
                constrain: true,
            });
            win.show();
        };
        Dialog.showCode = function (obj, value, linenumber, lang) {
            try {
                if (obj && Ext.isFunction(obj.blur)) {
                    obj.blur();
                }
                if (Ext.isEmpty(lang)) {
                    lang = "";
                }
                var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
                var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
                var win = Ext.create('Ext.window.Window', {
                    title: "查看内容",
                    height: winHeight,
                    width: winWidth,
                    minHeight: 500,
                    minWidth: 600,
                    animateTarget: obj,
                    resizable: true,
                    layout: 'fit',
                    maximizable: true,
                    iconCls: 'extIcon extSee',
                    autoScroll: true,
                    modal: true,
                    constrain: true,
                    bodyStyle: {
                        background: "#000000"
                    },
                    listeners: {
                        show: function (obj) {
                            PR.prettyPrint();
                        }
                    },
                });
                if (linenumber) {
                    win.update("<pre class='prettyprint " + lang + " linenums windowpre'>" + value + "</pre>");
                }
                else {
                    win.update("<pre class='prettyprint " + lang + " windowpre'>" + value + "</pre>");
                }
                win.show();
            }
            catch (e) {
                FastExt.Dialog.showText(obj, null, "查看内容", value);
            }
        };
        Dialog.showSql = function (obj, value) {
            try {
                value = sqlFormatter.format(value);
                FastExt.Dialog.showCode(obj, value, false, "lang-sql");
            }
            catch (e) {
                FastExt.Dialog.showText(obj, null, "查看内容", value);
            }
        };
        Dialog.showException = function (e, from) {
            if (!e)
                return;
            FastExt.Dialog.hideWait();
            var isDebug = FastExt.Base.toBool(FastExt.System.getExt("debug").value, false);
            if (isDebug) {
                var message_1 = e;
                if (e instanceof Error) {
                    message_1 = e.stack;
                    message_1 = message_1.replace(/\n/g, "<br/>")
                        .replace(/\t/g, "&nbsp;&nbsp;&nbsp;&nbsp;")
                        .replace(/ /g, "&nbsp;&nbsp;");
                }
                if (from != null) {
                    from += "，来自" + from;
                }
                else {
                    from = "";
                }
                var win_1 = Ext.create('Ext.window.Window', {
                    title: '系统异常',
                    height: 180,
                    width: 270,
                    layout: 'fit',
                    resizable: false,
                    maximizable: false,
                    constrain: true,
                    fixed: true,
                    modal: true,
                    draggable: false,
                    iconCls: 'extIcon extError',
                    html: "<div  style='padding:15px;background: #fff;' align='center'>【" + from + "】系统发生异常，请及时告知系统管理员！</div>",
                    buttons: [
                        {
                            text: '下次再说',
                            flex: 1,
                            iconCls: 'extIcon extClose whiteColor',
                            handler: function () {
                                win_1.close();
                            }
                        }, {
                            text: '查看错误',
                            flex: 1,
                            iconCls: 'extIcon extException whiteColor',
                            handler: function () {
                                FastExt.Dialog.showCode(this, message_1, true);
                            }
                        }
                    ]
                });
                win_1.show();
            }
            if (FastExt.Base.toString(from, "").indexOf("请求异常") >= 0) {
                return;
            }
            console.error(e);
        };
        Dialog.showAlert = function (title, message, callback, modal, animateDisable) {
            if (Ext.isEmpty(modal)) {
                modal = true;
            }
            FastExt.Dialog.hideWait();
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                defaults: {
                    margin: '5 5 5 5'
                },
                border: 0,
                items: [
                    {
                        xtype: "label",
                        maxWidth: 380,
                        html: message,
                    }
                ],
            });
            var alertWindow = Ext.create('Ext.window.Window', {
                title: title,
                iconCls: 'extIcon extInfo2',
                maxWidth: 500,
                maxHeight: 800,
                minWidth: 220,
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                constrain: true,
                resizable: false,
                unpin: false,
                items: [formPanel],
                modal: modal,
                animateDisable: animateDisable,
                listeners: {
                    show: function (obj) {
                        obj.focus();
                    },
                    render: function (obj, eOpts) {
                        new Ext.util.KeyMap({
                            target: obj.getEl(),
                            key: 13,
                            fn: function (keyCode, e) {
                                alertWindow.close();
                                if (Ext.isFunction(callback)) {
                                    callback("ok");
                                }
                            },
                            scope: this
                        });
                    }
                },
                buttons: [
                    '->',
                    {
                        text: "确定",
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            var parentWindow = this.up("window");
                            if (parentWindow) {
                                parentWindow.close();
                            }
                            if (Ext.isFunction(callback)) {
                                callback("ok");
                            }
                        }
                    },
                    '->'
                ],
            });
            alertWindow.show();
        };
        Dialog.showImage = function (obj, url, callBack, modal) {
            if (FastExt.Cache.memory.hasOwnProperty(url)) {
                url = FastExt.Cache.memory[url];
            }
            FastExt.Image.showImage(obj, url, callBack, modal);
        };
        Dialog.showVideo = function (obj, videoUrl) {
            if (obj && Ext.isFunction(obj.blur)) {
                obj.blur();
            }
            var win = Ext.create('Ext.window.Window', {
                title: '播放视频',
                layout: 'fit',
                height: 620,
                width: 700,
                resizable: false,
                constrain: true,
                maximizable: false,
                modal: true,
                maximized: false,
                iconCls: 'extIcon extSee',
                draggable: true,
                scrollable: false,
                toFrontOnShow: true,
                listeners: {
                    show: function () {
                        var url = FastExt.System.formatUrlVersion("base/video/player.html");
                        window["getVideoUrl"] = function () {
                            return videoUrl;
                        };
                        var html = "<iframe allowfullscreen='allowfullscreen' mozallowfullscreen='mozallowfullscreen' msallowfullscreen='msallowfullscreen' oallowfullscreen='oallowfullscreen' webkitallowfullscreen='webkitallowfullscreen' style='background-color: black;' name='showVideoFrame' src='" + url + "'  width='100%' height='100%' frameborder='0' scrolling='no' >";
                        this.update(html);
                    }
                }
            });
            win.show();
        };
        Dialog.showEditor = function (obj, title, callBack, defaultValue) {
            if (obj && Ext.isFunction(obj.blur)) {
                obj.blur();
            }
            var time = new Date().getTime();
            var areaId = "PublicTextArea" + time;
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var editorWin = Ext.create('Ext.window.Window', {
                title: title,
                iconCls: 'extIcon extEdit',
                resizable: true,
                maximizable: true,
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 600,
                layout: 'fit',
                animateTarget: obj,
                items: [{
                        id: areaId,
                        emptyText: '请输入内容……',
                        value: defaultValue,
                        xtype: 'textarea'
                    }],
                modal: true,
                constrain: true,
                unpin: true,
                listeners: {
                    show: function (obj) {
                        FastExt.Server.showExtConfig("PublicEditor", "TextEditorCache", function (success, value) {
                            var areaField = Ext.getCmp(areaId);
                            if (areaField) {
                                if (success) {
                                    areaField.setValue(value);
                                }
                                areaField.focus();
                            }
                        });
                    }
                },
                buttons: [
                    {
                        text: '暂存',
                        iconCls: 'extIcon extSave whiteColor',
                        handler: function () {
                            FastExt.Dialog.showWait("暂存中，请稍后……");
                            FastExt.Server.saveExtConfig("PublicEditor", "TextEditorCache", Ext.getCmp(areaId).getValue(), function (success, message) {
                                FastExt.Dialog.hideWait();
                                if (success) {
                                    FastExt.Dialog.toast("暂存成功！");
                                }
                                else {
                                    FastExt.Dialog.showAlert("系统提醒", message);
                                }
                            });
                        }
                    },
                    {
                        text: '重置',
                        iconCls: 'extIcon extReset',
                        handler: function () {
                            var areaField = Ext.getCmp(areaId);
                            if (areaField) {
                                areaField.setValue(null);
                            }
                            FastExt.Server.deleteExtConfig("PublicEditor", "TextEditorCache");
                        }
                    },
                    {
                        text: '确定',
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            FastExt.Dialog.showWait("请稍后……");
                            FastExt.Server.deleteExtConfig("PublicEditor", "TextEditorCache", function (success) {
                                FastExt.Dialog.hideWait();
                                if (Ext.isFunction(callBack)) {
                                    callBack(Ext.getCmp(areaId).getValue());
                                }
                                editorWin.close();
                            });
                        }
                    }
                ]
            });
            editorWin.show();
        };
        Dialog.showJson = function (obj, title, value) {
            FastExt.Json.showFormatJson(obj, value, title);
        };
        Dialog.showFormatJson = function (obj, value) {
            FastExt.Json.showFormatJson(obj, value);
        };
        Dialog.showLottie = function (obj, jsonPath) {
            FastExt.Lottie.showLottie(obj, jsonPath);
        };
        Dialog.showFastDatePicker = function (obj, defaultValue, dateFormat) {
            return FastExt.Dates.showDatePicker(obj, defaultValue, dateFormat);
        };
        Dialog.showFastColorPicker = function (obj, defaultValue, onColorChange) {
            return FastExt.Color.showColorPicker(obj, defaultValue, onColorChange);
        };
        Dialog.showMusic = function (obj, musicUrl) {
            if (obj && Ext.isFunction(obj.blur)) {
                obj.blur();
            }
            var idPrefix = new Date().getTime();
            var win = Ext.create('Ext.window.Window', {
                title: '播放音频',
                layout: 'fit',
                height: 230,
                width: 700,
                resizable: false,
                constrain: true,
                maximizable: false,
                modal: true,
                maximized: false,
                iconCls: 'extIcon extSee',
                draggable: true,
                scrollable: false,
                toFrontOnShow: true,
                items: [
                    {
                        xtype: 'container',
                        layout: 'border',
                        iframePanel: true,
                        itemId: "playerPanel"
                    }
                ],
                listeners: {
                    show: function (winObj) {
                        var playerPanel = this.down("#playerPanel");
                        playerPanel.setLoading("加载音频文件中，请稍后……");
                        var url = FastExt.System.formatUrlVersion("base/music/player.html");
                        var html = "<iframe allowfullscreen='allowfullscreen' mozallowfullscreen='mozallowfullscreen' msallowfullscreen='msallowfullscreen' oallowfullscreen='oallowfullscreen' webkitallowfullscreen='webkitallowfullscreen' style='background-color: black;' name='showMusicFrame' src='" + url + "'  width='100%' height='100%' frameborder='0' scrolling='no' >";
                        playerPanel.update(html);
                        window["getMusicUrl"] = function () {
                            return musicUrl;
                        };
                        window["onMusicChange"] = function (state, obj) {
                            if (state === "ready") {
                                winObj.getComponent("playerPanel").setLoading(false);
                                obj.play();
                            }
                            else if (state === "play") {
                                Ext.getCmp("btnPlay" + idPrefix).setIconCls("extIcon extPause");
                            }
                            else if (state === "pause") {
                                Ext.getCmp("btnPlay" + idPrefix).setIconCls("extIcon extPlay");
                            }
                            else if (state === "finish") {
                                obj.seekTo(0);
                            }
                            else if (state === "mute") {
                                if (obj.getMute()) {
                                    Ext.getCmp("btnMute" + idPrefix).setIconCls("extIcon extMute");
                                }
                                else {
                                    Ext.getCmp("btnMute" + idPrefix).setIconCls("extIcon extUnmute");
                                }
                            }
                            else if (state === "loading") {
                                winObj.getComponent("playerPanel").setLoading("加载音频文件中，请稍后……");
                            }
                            else if (state === "audioprocess" || state === "seek") {
                                var currPlayStr = FastExt.Dates.formatMillisecond(obj.getCurrentTime() * 1000, 'i:s');
                                var totalPlayStr = FastExt.Dates.formatMillisecond(obj.getDuration() * 1000, 'i:s');
                                winObj.setTitle("播放音乐  " + currPlayStr + " / " + totalPlayStr);
                            }
                        };
                    }
                },
                bbar: {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    layout: {
                        type: 'hbox',
                        align: 'middle',
                        pack: 'center'
                    },
                    items: [
                        {
                            xtype: 'button',
                            id: "btnPlay" + idPrefix,
                            iconCls: 'extIcon extPlay',
                            action: "play",
                            handler: function () {
                                window["showMusicFrame"].window.switchPlay();
                            }
                        },
                        {
                            xtype: 'button',
                            id: "btnStop" + idPrefix,
                            iconCls: 'extIcon extStop',
                            handler: function () {
                                window["showMusicFrame"].window.stop();
                            }
                        },
                        {
                            xtype: 'button',
                            id: "btnMute" + idPrefix,
                            iconCls: 'extIcon extUnmute',
                            handler: function () {
                                window["showMusicFrame"].window.switchMute();
                            }
                        }
                    ]
                }
            });
            win.show();
        };
        Dialog.showDeleteDataAlert = function (title, message, confirmCallBack, confirmButtonText) {
            if (Ext.isEmpty(confirmButtonText)) {
                confirmButtonText = "删除";
            }
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                defaults: {
                    margin: '5 5 5 5'
                },
                border: 0,
                items: [
                    {
                        xtype: "lottie",
                        width: 150,
                        height: 120,
                        jsonPath: 'base/lottie/amazed.json',
                    },
                    {
                        xtype: "label",
                        maxWidth: 250,
                        text: message,
                    },
                    {
                        xtype: "checkboxfield",
                        boxLabel: "我已了解此操作是永久性且无法撤销",
                        listeners: {
                            change: function (obj, newValue) {
                                deleteConfirmWindow.down("#deleteBtn").setDisabled(!newValue);
                            },
                        }
                    }
                ]
            });
            var deleteConfirmWindow = Ext.create('Ext.window.Window', {
                title: title,
                iconCls: 'extIcon extDelete',
                width: 280,
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                constrain: true,
                resizable: false,
                unpin: false,
                items: [formPanel],
                modal: true,
                buttons: [
                    '->',
                    {
                        text: '取消',
                        iconCls: 'extIcon extClose',
                        handler: function () {
                            deleteConfirmWindow.close();
                        }
                    },
                    {
                        text: confirmButtonText,
                        itemId: "deleteBtn",
                        disabled: true,
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            deleteConfirmWindow.close();
                            if (Ext.isFunction(confirmCallBack)) {
                                confirmCallBack();
                            }
                        }
                    },
                    '->'
                ],
            });
            deleteConfirmWindow.show();
        };
        Dialog.showConfirm = function (title, message, callback) {
            FastExt.Dialog.hideWait();
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                defaults: {
                    margin: '5 5 5 5'
                },
                border: 0,
                items: [
                    {
                        xtype: "lottie",
                        width: 150,
                        height: 120,
                        jsonPath: 'base/lottie/question.json',
                    },
                    {
                        xtype: "label",
                        maxWidth: 300,
                        margin: '5 5 10 5',
                        html: message,
                    }
                ],
            });
            var confirmWindow = Ext.create('Ext.window.Window', {
                title: title,
                iconCls: 'extIcon extQuestion2',
                width: 320,
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                constrain: true,
                resizable: false,
                items: [formPanel],
                modal: true,
                unpin: false,
                buttons: [
                    '->',
                    {
                        text: '取消',
                        iconCls: 'extIcon extClose',
                        handler: function () {
                            confirmWindow.close();
                            if (Ext.isFunction(callback)) {
                                callback("no");
                            }
                        }
                    },
                    {
                        text: "确定",
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            confirmWindow.close();
                            if (Ext.isFunction(callback)) {
                                callback("yes");
                            }
                        }
                    },
                    '->'
                ],
            });
            confirmWindow.show();
        };
        Dialog.showPrompt = function (title, message, callback, multiline, value) {
            FastExt.Dialog.hideWait();
            var inputContent = {
                xtype: "textfield",
                itemId: "inputContent",
                value: value,
            };
            if (multiline) {
                inputContent["xtype"] = "textareafield";
                inputContent["grow"] = true;
                inputContent["growMax"] = 320;
            }
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'stretch'
                },
                defaults: {
                    margin: '5 5 5 5'
                },
                border: 0,
                items: [
                    {
                        xtype: "label",
                        html: message,
                    },
                    inputContent
                ],
            });
            var promptWindow = Ext.create('Ext.window.Window', {
                title: title,
                iconCls: 'extIcon extEdit',
                width: 280,
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'stretch'
                },
                constrain: true,
                resizable: false,
                items: [formPanel],
                modal: true,
                listeners: {
                    show: function (winObj) {
                        setTimeout(function () {
                            winObj.query("#inputContent")[0].focus();
                        }, 200);
                    },
                },
                buttons: [
                    '->',
                    {
                        text: '取消',
                        iconCls: 'extIcon extClose',
                        handler: function () {
                            promptWindow.close();
                            if (Ext.isFunction(callback)) {
                                callback("no");
                            }
                        }
                    },
                    {
                        text: "确定",
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            promptWindow.close();
                            if (Ext.isFunction(callback)) {
                                callback("ok", promptWindow.query("#inputContent")[0].getValue());
                            }
                        }
                    },
                    '->'
                ],
            });
            promptWindow.show();
        };
        return Dialog;
    }());
    FastExt.Dialog = Dialog;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var ECharts = (function () {
        function ECharts() {
        }
        ECharts.loadECharts = function (cmb, option) {
            var doLoad = function () {
                if (cmb.echarts) {
                    cmb.echarts.hideLoading();
                    cmb.echarts.setOption(option);
                    return;
                }
                var bodyElement = FastExt.Base.getTargetBodyElement(cmb);
                if (bodyElement) {
                    var themeName = "";
                    if (Ext.isEmpty(FastExt.ECharts.echartsThemeFile)) {
                        var beginSub = FastExt.ECharts.echartsThemeFile.lastIndexOf("/");
                        var endSub = FastExt.ECharts.echartsThemeFile.lastIndexOf(".");
                        themeName = FastExt.ECharts.echartsThemeFile.substring(beginSub + 1, endSub);
                    }
                    cmb.echarts = echarts.init(bodyElement, themeName);
                    cmb.echarts.setOption(option);
                    cmb.on("destroy", function (obj) {
                        if (FastExt.ECharts.getECharts(obj)) {
                            FastExt.ECharts.getECharts(obj).dispose();
                            obj.echarts = null;
                        }
                    });
                    cmb.on("resize", function (obj) {
                        if (FastExt.ECharts.getECharts(obj)) {
                            FastExt.ECharts.getECharts(obj).resize({
                                animation: {
                                    duration: 1000
                                }
                            });
                        }
                    });
                }
                else {
                    console.error("加载ECharts失败！无法获取目标控件的BodyElement！");
                }
            };
            if (!this.loadedEChartsJs) {
                FastExt.System.addScript({ src: FastExt.ECharts.echartsJsFile }, function () {
                    if (Ext.isEmpty(FastExt.ECharts.echartsThemeFile)) {
                        doLoad();
                    }
                    else {
                        FastExt.System.addScript({ src: FastExt.ECharts.echartsThemeFile }, doLoad);
                    }
                });
            }
            else {
                doLoad();
            }
        };
        ECharts.getECharts = function (cmb) {
            if (cmb.echarts) {
                return cmb.echarts;
            }
            console.error("获取ECharts失败！目标控件未加载echarts！");
            return null;
        };
        ECharts.hasECharts = function (cmb) {
            return !!cmb.echarts;
        };
        ECharts.showECharts = function (title, options, modal) {
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                title: title,
                iconCls: "extIcon extReport whiteColor",
                height: winHeight,
                width: winWidth,
                layout: 'border',
                resizable: true,
                maximizable: true,
                constrain: true,
                modal: modal,
                padding: "10 10 10 10",
                bodyStyle: {
                    background: "#ffffff"
                },
                listeners: {
                    show: function (obj) {
                        FastExt.ECharts.loadECharts(obj, options);
                    }
                }
            });
            win.show();
        };
        ECharts.echartsJsFile = "base/echarts/echarts.min.js";
        ECharts.echartsThemeFile = "";
        return ECharts;
    }());
    FastExt.ECharts = ECharts;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var MonacoEditor = (function () {
        function MonacoEditor() {
        }
        MonacoEditor.showEditor = function (obj, content, language) {
            return new Ext.Promise(function (resolve, reject) {
                var editorPanel = Ext.create('Ext.container.Container', {
                    layout: 'border',
                    region: 'center',
                    iframePanel: true,
                    border: 0,
                    iframeName: "MonacoEditorFrame" + new Date().getTime(),
                    loadEditor: function () {
                        var me = this;
                        me.setLoading("加载编辑器中，请稍后……");
                        window[this.iframeName + "LoadDone"] = function () {
                            me.loadExtLib();
                            me.setValue(content, language);
                            me.setLoading(false);
                        };
                        var url = FastExt.System.formatUrlVersion('base/monaco-editor/index.html', {});
                        this.update("<iframe name='" + this.iframeName + "'  src='" + url + "' width='100%' height='100%' frameborder='0' scrolling='no' />");
                    },
                    setValue: function (content, language) {
                        window[this.iframeName].window["createEditor"]({
                            value: content,
                            language: language,
                            automaticLayout: true,
                            accessibilitySupport: 'on',
                            autoClosingBrackets: 'always',
                            autoClosingDelete: 'always',
                            autoClosingOvertype: 'always',
                            autoClosingQuotes: 'always',
                            renderLineHighlight: 'gutter',
                            scrollBeyondLastLine: false,
                        });
                    },
                    getValue: function () {
                        return window[this.iframeName].window["getValue"]();
                    },
                    loadExtLib: function () {
                    },
                });
                var winWidth = parseInt((document.body.clientWidth * 0.7).toFixed(0));
                var winHeight = parseInt((document.body.clientHeight * 0.9).toFixed(0));
                var win = Ext.create('Ext.window.Window', {
                    title: '编辑内容',
                    height: winHeight,
                    width: winWidth,
                    minHeight: 500,
                    minWidth: 600,
                    iconCls: 'extIcon extConvertCode',
                    layout: 'fit',
                    resizable: true,
                    maximizable: true,
                    animateTarget: obj,
                    constrain: true,
                    items: [editorPanel],
                    modal: true,
                    unpin: true,
                    listeners: {
                        show: function () {
                            editorPanel.loadEditor();
                        },
                        close: function (val) {
                            FastExt.Base.runCallBack(resolve);
                            window[editorPanel.iframeName] = null;
                            window[editorPanel.iframeName + "LoadDone"] = null;
                        }
                    },
                    buttons: [
                        {
                            text: '取消',
                            iconCls: 'extIcon extClose',
                            handler: function () {
                                win.close();
                            }
                        },
                        {
                            text: '保存',
                            iconCls: 'extIcon extSave whiteColor',
                            handler: function () {
                                FastExt.Base.runCallBack(resolve, editorPanel.getValue());
                                win.close();
                            }
                        }
                    ]
                });
                win.show();
            });
        };
        MonacoEditor.showDiffEditor = function (obj, content1, content2, language, subtitle) {
            if (Ext.isEmpty(subtitle)) {
                subtitle = "";
            }
            return new Ext.Promise(function (resolve, reject) {
                var editorPanel = Ext.create('Ext.container.Container', {
                    layout: 'border',
                    region: 'center',
                    iframePanel: true,
                    border: 0,
                    iframeName: "MonacoEditorFrame" + new Date().getTime(),
                    loadEditor: function () {
                        var me = this;
                        me.setLoading("加载编辑器中，请稍后……");
                        window[this.iframeName + "LoadDone"] = function () {
                            me.loadExtLib();
                            me.setValue(content1, content2, language);
                            me.setLoading(false);
                        };
                        var url = FastExt.System.formatUrlVersion('base/monaco-editor/index.html', {});
                        this.update("<iframe name='" + this.iframeName + "'  src='" + url + "' width='100%' height='100%' frameborder='0' scrolling='no' />");
                    },
                    setValue: function (content1, content2, language) {
                        window[this.iframeName].window["createDiffEditor"](content1, content2, language);
                    },
                    getValue: function () {
                        return window[this.iframeName].window["getValue"]();
                    },
                    loadExtLib: function () {
                    },
                });
                var winWidth = parseInt((document.body.clientWidth * 0.7).toFixed(0));
                var winHeight = parseInt((document.body.clientHeight * 0.9).toFixed(0));
                var win = Ext.create('Ext.window.Window', {
                    title: '编辑内容' + subtitle,
                    height: winHeight,
                    width: winWidth,
                    minHeight: 500,
                    minWidth: 600,
                    iconCls: 'extIcon extConvertCode',
                    layout: 'fit',
                    resizable: true,
                    maximizable: true,
                    animateTarget: obj,
                    constrain: true,
                    items: [editorPanel],
                    modal: true,
                    unpin: true,
                    listeners: {
                        show: function () {
                            editorPanel.loadEditor();
                        },
                        close: function (val) {
                            FastExt.Base.runCallBack(resolve);
                            window[editorPanel.iframeName] = null;
                            window[editorPanel.iframeName + "LoadDone"] = null;
                        }
                    },
                    buttons: [
                        {
                            text: '取消',
                            iconCls: 'extIcon extClose',
                            handler: function () {
                                win.close();
                            }
                        },
                        {
                            text: '保存',
                            iconCls: 'extIcon extSave whiteColor',
                            handler: function () {
                                FastExt.Base.runCallBack(resolve, editorPanel.getValue());
                                win.close();
                            }
                        }
                    ]
                });
                win.show();
            });
        };
        return MonacoEditor;
    }());
    FastExt.MonacoEditor = MonacoEditor;
    var MonacoEditorEntity = (function () {
        function MonacoEditorEntity() {
        }
        MonacoEditorEntity.showEditor = function (obj, entityCode) {
            FastExt.Dialog.showWait("获取源码中，请稍后……");
            FastExt.Server.loadSource(entityCode, function (success, message, data) {
                FastExt.Dialog.hideWait();
                if (success) {
                    FastExt.MonacoEditor.showEditor(obj, data, MonacoEditorLanguage.JavaScript).then(function (result) {
                        FastExt.Dialog.showWait("保存源码中，请稍后……");
                        FastExt.Server.saveSource(entityCode, result, function (suc, msg) {
                            FastExt.Dialog.hideWait();
                            if (suc) {
                                FastExt.Dialog.toast(msg);
                            }
                            else {
                                FastExt.Dialog.showAlert("系统提醒", msg);
                            }
                        });
                    });
                }
                else {
                    FastExt.Dialog.showAlert("系统提醒", message);
                }
            });
        };
        return MonacoEditorEntity;
    }());
    FastExt.MonacoEditorEntity = MonacoEditorEntity;
    var MonacoEditorLanguage;
    (function (MonacoEditorLanguage) {
        MonacoEditorLanguage["TypeScript"] = "typescript";
        MonacoEditorLanguage["JavaScript"] = "javascript";
        MonacoEditorLanguage["CSS"] = "css";
        MonacoEditorLanguage["LESS"] = "less";
        MonacoEditorLanguage["SCSS"] = "scss";
        MonacoEditorLanguage["JSON"] = "json";
        MonacoEditorLanguage["HTML"] = "html";
        MonacoEditorLanguage["JAVA"] = "java";
        MonacoEditorLanguage["SQL"] = "sql";
        MonacoEditorLanguage["MySql"] = "mysql";
        MonacoEditorLanguage["XML"] = "xml";
        MonacoEditorLanguage["INI"] = "ini";
        MonacoEditorLanguage["Text"] = "plaintext";
        MonacoEditorLanguage["MarkDown"] = "markdown";
    })(MonacoEditorLanguage = FastExt.MonacoEditorLanguage || (FastExt.MonacoEditorLanguage = {}));
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Tinymce = (function () {
        function Tinymce() {
        }
        Tinymce.loadTinymceJs = function (callBack) {
            if (!FastExt.Tinymce.loadedTinymce) {
                FastExt.System.addScript({ src: FastExt.Tinymce.tinymceJsPath }, function () {
                    FastExt.Tinymce.loadedTinymce = true;
                    callBack();
                });
            }
            else {
                callBack();
            }
        };
        Tinymce.initTinymce = function (config, callback) {
            FastExt.Tinymce.loadTinymceJs(function () {
                tinymce.init(config).then(function (editors) {
                    callback(editors);
                });
            });
        };
        Tinymce.tinymceJsPath = "base/tinymce/tinymce.min.js";
        Tinymce.loadedTinymce = false;
        return Tinymce;
    }());
    FastExt.Tinymce = Tinymce;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Entity = (function () {
        function Entity() {
        }
        Entity.getEntity = function (entityCode) {
            for (var i = 0; i < FastExt.System.entities.length; i++) {
                var entity = FastExt.System.entities[i];
                if (entity.entityCode === entityCode) {
                    return entity;
                }
            }
            return null;
        };
        Entity.isFulltextColumn = function (entityCode, columnName) {
            var entity = FastExt.Entity.getEntity(entityCode);
            if (entity) {
                var fulltextColumns = entity.fulltextColumns;
                if (fulltextColumns) {
                    for (var _i = 0, fulltextColumns_1 = fulltextColumns; _i < fulltextColumns_1.length; _i++) {
                        var fulltextColumn = fulltextColumns_1[_i];
                        if (fulltextColumn.name === columnName) {
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        Entity.wrapConfigs = function (entity) {
            var sourceConfigs = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                sourceConfigs[_i - 1] = arguments[_i];
            }
            var configs = [];
            for (var _a = 0, _b = sourceConfigs; _a < _b.length; _a++) {
                var config = _b[_a];
                configs.push(FastExt.Entity.wrapConfig(entity, config));
            }
            return configs;
        };
        Entity.wrapConfig = function (entity, config) {
            if (Ext.isEmpty(entity)) {
                return null;
            }
            if (Ext.isEmpty(config)) {
                return null;
            }
            if (!Ext.isObject(config)) {
                return config;
            }
            if (config.hasOwnProperty("fieldLabel")) {
                var columnName = FastExt.Entity.getRealAttr(config);
                if (Ext.isEmpty(columnName)) {
                    return config;
                }
                var field = FastExt.Entity.getEditorField(entity, columnName);
                if (!field) {
                    return config;
                }
                if (config.hasOwnProperty("xtype")) {
                    if (config.xtype !== field.xtype) {
                        return config;
                    }
                }
                config = Ext.Object.merge(field, config);
            }
            else if (config.hasOwnProperty("dataIndex")) {
                var columnName = FastExt.Entity.getRealAttr(config);
                if (Ext.isEmpty(columnName)) {
                    return config;
                }
                var field = FastExt.Entity.getEditorField(entity, columnName);
                if (!field) {
                    return config;
                }
                field["name"] = columnName;
                if (Ext.isEmpty(config.field)) {
                    config.field = {};
                }
                if (Ext.isString(config.field)) {
                    config.field = {
                        xtype: config.field
                    };
                }
                var needMerge = true;
                if (config.field.hasOwnProperty("xtype")) {
                    if (config.field.xtype !== field.xtype) {
                        needMerge = false;
                    }
                }
                if (Ext.isObject(config.field) && needMerge) {
                    config.field = Ext.Object.merge(field, config.field);
                }
                if (Ext.isEmpty(config.renderer)) {
                    config.renderer = FastExt.Entity.getColumnRender(entity, columnName);
                }
                config.configField = config.field;
            }
            return config;
        };
        ;
        Entity.getEditorField = function (entity, attrName) {
            if (Ext.isEmpty(entity)) {
                return null;
            }
            if (Ext.isFunction(entity.getEditorField)) {
                return entity.getEditorField(attrName);
            }
            return null;
        };
        Entity.getEditorFieldObject = function (entity, attrName) {
            var editorField = FastExt.Entity.getEditorField(entity, attrName);
            if (editorField) {
                return Ext.create(editorField);
            }
            return null;
        };
        Entity.getColumnRender = function (entity, attrName) {
            if (Ext.isEmpty(entity)) {
                return null;
            }
            if (Ext.isFunction(entity.getColumnRender)) {
                return entity.getColumnRender(attrName);
            }
            return null;
        };
        Entity.getRealAttr = function (target) {
            if (!target) {
                return null;
            }
            if (Ext.isObject(target.field) && target.field.hasOwnProperty("name")) {
                return target.field.name;
            }
            if (target.hasOwnProperty("columnName")) {
                return target.columnName;
            }
            if (target.hasOwnProperty("dataIndex")) {
                return target.dataIndex;
            }
            return FastExt.Base.toString(target.name, "").replace("data.", "");
        };
        Entity.getEditorFieldByColumn = function (entity, column) {
            if (Ext.isEmpty(entity)) {
                if (Ext.isObject(column.field)) {
                    return column.field;
                }
                return { xtype: column.field };
            }
            if (Ext.isFunction(entity.getEditorField)) {
                return entity.getEditorField(FastExt.Entity.getRealAttr(column));
            }
            return null;
        };
        return Entity;
    }());
    FastExt.Entity = Entity;
})(FastExt || (FastExt = {}));
var FastEnum;
(function (FastEnum) {
    var Target;
    (function (Target) {
        Target["_blank"] = "_blank";
        Target["_self"] = "_self";
        Target["_parent"] = "_parent";
        Target["_top"] = "_top";
        Target["framename"] = "framename";
    })(Target = FastEnum.Target || (FastEnum.Target = {}));
    var AppendPosition;
    (function (AppendPosition) {
        AppendPosition["left"] = "left";
        AppendPosition["right"] = "right";
    })(AppendPosition = FastEnum.AppendPosition || (FastEnum.AppendPosition = {}));
    var ComputeType;
    (function (ComputeType) {
        ComputeType["sum"] = "sum";
        ComputeType["avg"] = "avg";
        ComputeType["min"] = "min";
        ComputeType["max"] = "max";
    })(ComputeType = FastEnum.ComputeType || (FastEnum.ComputeType = {}));
    var HelpEnumType;
    (function (HelpEnumType) {
        HelpEnumType[HelpEnumType["mouse_right_click"] = 0] = "mouse_right_click";
        HelpEnumType[HelpEnumType["mouse_in_out"] = 1] = "mouse_in_out";
    })(HelpEnumType = FastEnum.HelpEnumType || (FastEnum.HelpEnumType = {}));
    var TooltipAnchorType;
    (function (TooltipAnchorType) {
        TooltipAnchorType["left"] = "left";
        TooltipAnchorType["top"] = "top";
        TooltipAnchorType["right"] = "right";
        TooltipAnchorType["bottom"] = "bottom";
    })(TooltipAnchorType = FastEnum.TooltipAnchorType || (FastEnum.TooltipAnchorType = {}));
    var PowerType;
    (function (PowerType) {
        PowerType["gridcolumn"] = "gridcolumn";
        PowerType["button"] = "button";
        PowerType["menuitem"] = "menuitem";
    })(PowerType = FastEnum.PowerType || (FastEnum.PowerType = {}));
})(FastEnum || (FastEnum = {}));
var FastExt;
(function (FastExt) {
    var ErrorHandler = (function () {
        function ErrorHandler() {
            ErrorHandler.initErrorHandler();
        }
        ErrorHandler.geErrorInfo = function (event) {
            if (event) {
                if (event.error && event.error.stack) {
                    return event.error.stack;
                }
                else if (event.stack) {
                    return event.stack;
                }
                else if (event.message) {
                    return event.message;
                }
                else if (event.reason) {
                    return event.reason;
                }
                return event.toString();
            }
            return "";
        };
        ErrorHandler.initErrorHandler = function () {
            window.addEventListener("error", function (event) {
                try {
                    console.error(event);
                }
                catch (e) {
                    console.error(e);
                }
            });
            window.addEventListener("unhandledrejection", function (event) {
                try {
                    console.error(event);
                }
                catch (e) {
                    console.error(e);
                }
            });
            var oldErrorConsole = console.error;
            console.error = function (e) {
                FastExt.Server.reportException(FastExt.ErrorHandler.geErrorInfo(e));
                oldErrorConsole.apply(this, arguments);
            };
        };
        return ErrorHandler;
    }());
    FastExt.ErrorHandler = ErrorHandler;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Eval = (function () {
        function Eval() {
        }
        Eval.runObject = function (object, content) {
            if (Ext.isEmpty(content)) {
                return content;
            }
            var reg = new RegExp("\\${([^{}]*)}", 'g');
            var matched = [];
            var matchKeys = [];
            while (matched = reg.exec(content)) {
                matchKeys.push(matched[1]);
            }
            window["RunObject"] = object;
            for (var _i = 0, matchKeys_1 = matchKeys; _i < matchKeys_1.length; _i++) {
                var matchKey = matchKeys_1[_i];
                var value = eval("RunObject." + matchKey);
                content = content.replace(new RegExp("\\${" + matchKey + "}", 'g'), value);
            }
            return content;
        };
        return Eval;
    }());
    FastExt.Eval = Eval;
})(FastExt || (FastExt = {}));
var FastExtend;
(function (FastExtend) {
    var StringExtend = (function () {
        function StringExtend() {
            String.prototype.endWith = function (suffix) {
                if (!suffix || suffix === "" || this.length === 0 || suffix.length > this.length)
                    return false;
                return this.substring(this.length - suffix.length) === suffix;
            };
            String.prototype.startWith = function (prefix) {
                if (!prefix || prefix === "" || this.length === 0 || prefix.length > this.length)
                    return false;
                return this.substr(0, prefix.length) === prefix;
            };
            String.prototype.trim = function (char, type) {
                if (char) {
                    if (type === 'left' || type === 'l') {
                        return this.replace(new RegExp('^\\' + char + '+', 'g'), '');
                    }
                    else if (type === 'right' || type === 'r') {
                        return this.replace(new RegExp('\\' + char + '+$', 'g'), '');
                    }
                    return this.replace(new RegExp('^\\' + char + '+|\\' + char + '+$', 'g'), '');
                }
                return this.replace(/^\s+|\s+$/g, '');
            };
            String.prototype.firstUpperCase = function () {
                return this.replace(/^\S/, function (s) {
                    return s.toUpperCase();
                });
            };
            String.prototype.truthLength = function () {
                return this.replace(/[\u0391-\uFFE5]/g, "aa").length;
            };
            String.prototype.trimAllSymbol = function () {
                return this.replace(/[\ |\~|\`|\!|\@|\#|\$|\%|\^|\&|\*|\(|\)|\-|\_|\+|\=|\||\\|\[|\]|\{|\}|\;|\:|\"|\'|\,|\<|\.|\>|\/|\?/\，/\。/\；/\：/\“/\”/\》/\《/\|/\{/\}/\、/\!/\~/\`]/g, "");
            };
            String.prototype.replaceAll = function (oldStr, newStr) {
                return this.replace(new RegExp(oldStr, 'g'), newStr);
            };
        }
        return StringExtend;
    }());
    FastExtend.StringExtend = StringExtend;
    var ArrayExtend = (function () {
        function ArrayExtend() {
            Array.prototype.exists = function (val) {
                for (var i = 0; i < this.length; i++) {
                    if (this[i] === val) {
                        return true;
                    }
                }
                return false;
            };
        }
        return ArrayExtend;
    }());
    FastExtend.ArrayExtend = ArrayExtend;
    var ComponentExtend = (function () {
        function ComponentExtend() {
            this.iframePanel = false;
            this.helpAnchorOffset = -1;
            Ext.Component.prototype.getEditorMenu = function () {
                try {
                    return this.up("menu[editorMenu=true]");
                }
                catch (e) {
                    console.error(e);
                }
            };
        }
        return ComponentExtend;
    }());
    FastExtend.ComponentExtend = ComponentExtend;
    var ButtonExtend = (function () {
        function ButtonExtend() {
            this.contextMenu = true;
            this.bindDetail = false;
            this.entityUpdateButton = false;
            this.entityDeleteButton = false;
            this.entityAddButton = false;
        }
        return ButtonExtend;
    }());
    FastExtend.ButtonExtend = ButtonExtend;
    var GridExtend = (function () {
        function GridExtend() {
            this.menuPanelList = false;
            this.firstLoadedData = false;
            this.defaultToolBar = true;
            this.defaultToolBarLink = true;
            this.defaultToolBarMore = true;
            this.showUpdateButton = true;
        }
        return GridExtend;
    }());
    FastExtend.GridExtend = GridExtend;
    var FormPanelExtend = (function () {
        function FormPanelExtend() {
            Ext.form.FormPanel.prototype.setFieldValue = function (fieldName, value) {
                var field = this.getForm().findField(fieldName);
                if (field) {
                    field.setValue(value);
                }
            };
            Ext.form.FormPanel.prototype.getFieldValue = function (fieldName) {
                var field = this.getForm().findField(fieldName);
                if (field) {
                    return field.getValue();
                }
                return null;
            };
            Ext.form.FormPanel.prototype.getField = function (fieldName) {
                return this.getForm().findField(fieldName);
            };
            Ext.form.FormPanel.prototype.submitForm = function (entity, extraParams, waitMsg, successAlert, failAlert) {
                var me = this;
                if (!extraParams) {
                    extraParams = {};
                }
                if (!waitMsg) {
                    waitMsg = "正在提交中……";
                }
                if (Ext.isEmpty(successAlert)) {
                    successAlert = "toast";
                }
                if (Ext.isEmpty(failAlert)) {
                    failAlert = true;
                }
                if (me.submiting) {
                    return new Ext.Promise(function (resolve, reject) {
                        reject({ "success": false, "message": "数据正在提交中，不可重复提交！" });
                    });
                }
                return new Ext.Promise(function (resolve, reject) {
                    var submitConfig = {
                        submitEmptyText: false,
                        params: extraParams,
                        success: function (form, action) {
                            me.submiting = false;
                            FastExt.Dialog.hideWait();
                            if (successAlert === "alert") {
                                Ext.Msg.alert('系统提醒', action.result.message, function (btn) {
                                    if (btn === "ok") {
                                        resolve(action.result);
                                    }
                                });
                            }
                            else if (successAlert === "toast") {
                                FastExt.Dialog.toast(action.result.message);
                                resolve(action.result);
                            }
                            else {
                                resolve(action.result);
                            }
                        },
                        failure: function (form, action) {
                            me.submiting = false;
                            FastExt.Dialog.hideWait();
                            if (failAlert && action.result) {
                                Ext.Msg.alert('系统提醒', action.result.message);
                            }
                        }
                    };
                    if (entity) {
                        submitConfig.params["entityCode"] = entity.entityCode;
                        if (entity.menu) {
                            submitConfig.params["menu"] = FastExt.Store.getStoreMenuText({ entity: entity });
                        }
                    }
                    var form = me.getForm();
                    if (form.isValid()) {
                        me.submiting = true;
                        FastExt.Dialog.showWait(waitMsg);
                        form.submit(submitConfig);
                    }
                    else {
                        me.submiting = false;
                    }
                });
            };
            Ext.form.FormPanel.prototype.saveCache = function (key) {
                if (Ext.isEmpty(key)) {
                    key = this.cacheKey;
                }
                var data = {};
                this.getForm().getFields().each(function (field, index) {
                    if (Ext.isDate(field.getValue())) {
                        data[field.getName()] = Ext.Date.format(field.getValue(), field.format);
                    }
                    else {
                        data[field.getName()] = field.getValue();
                    }
                });
                var params = {
                    "configKey": key,
                    "configType": "FormPanelCache",
                    "configValue": Ext.encode(data)
                };
                FastExt.Dialog.showWait("暂存数据中……");
                $.post("ext/config/saveExtConfig", params, function (result) {
                    FastExt.Dialog.hideWait();
                    if (result.success) {
                        FastExt.Dialog.toast("暂存成功！");
                    }
                    else {
                        FastExt.Dialog.showAlert("系统提醒", result.message);
                    }
                });
            };
            Ext.form.FormPanel.prototype.restoreCache = function (key) {
                if (Ext.isEmpty(key)) {
                    key = this.cacheKey;
                }
                var me = this;
                var params = {
                    "configKey": key,
                    "configType": "FormPanelCache"
                };
                $.post("ext/config/showExtConfig", params, function (result) {
                    if (result.success) {
                        var data_1 = Ext.decode(result.data.configValue);
                        me.getForm().getFields().each(function (field, index) {
                            if (data_1.hasOwnProperty(field.getName())) {
                                field.setValue(data_1[field.getName()]);
                            }
                        });
                    }
                });
            };
            Ext.form.FormPanel.prototype.deleteCache = function (key) {
                if (Ext.isEmpty(key)) {
                    key = this.cacheKey;
                }
                var params = {
                    "configKey": key,
                    "configType": "FormPanelCache"
                };
                $.post("ext/config/deleteExtConfig", params, function (result) {
                });
            };
        }
        return FormPanelExtend;
    }());
    FastExtend.FormPanelExtend = FormPanelExtend;
    var FileFieldExtend = (function () {
        function FileFieldExtend() {
            this.multiple = false;
        }
        return FileFieldExtend;
    }());
    FastExtend.FileFieldExtend = FileFieldExtend;
    var FieldExtend = (function () {
        function FieldExtend() {
            this.fromHeadSearch = false;
            Ext.form.field.Base.prototype.blur = function () {
                try {
                    if (this.inputEl) {
                        this.inputEl.blur();
                    }
                }
                catch (e) {
                    console.error(e);
                }
            };
            Ext.form.field.Base.prototype.addTriggers = function (triggers) {
                try {
                    if (Ext.isFunction(this.getTriggers) && Ext.isFunction(this.setTriggers)) {
                        var oldTriggers = this.getTriggers();
                        if (oldTriggers) {
                            this.setTriggers(FastExt.Json.mergeJson(oldTriggers, triggers));
                        }
                        else {
                            this.setTriggers(triggers);
                        }
                    }
                }
                catch (e) {
                    console.error(e);
                }
            };
        }
        return FieldExtend;
    }());
    FastExtend.FieldExtend = FieldExtend;
    var TextFieldExtend = (function () {
        function TextFieldExtend() {
            this.useHistory = false;
        }
        return TextFieldExtend;
    }());
    FastExtend.TextFieldExtend = TextFieldExtend;
    var ComboBoxFieldExtend = (function () {
        function ComboBoxFieldExtend() {
            this.searchable = false;
        }
        return ComboBoxFieldExtend;
    }());
    FastExtend.ComboBoxFieldExtend = ComboBoxFieldExtend;
    var ColumnExtend = (function () {
        function ColumnExtend() {
            this.search = true;
            this.excelOutHeader = true;
            this.excelHeader = true;
        }
        return ColumnExtend;
    }());
    FastExtend.ColumnExtend = ColumnExtend;
    var MenuExtend = (function () {
        function MenuExtend() {
            this.holdShow = false;
        }
        return MenuExtend;
    }());
    FastExtend.MenuExtend = MenuExtend;
    var EntityExtend = (function () {
        function EntityExtend() {
            this.actionDeleteAll = true;
            this.actionCopy = true;
            this.actionTimer = true;
        }
        return EntityExtend;
    }());
    FastExtend.EntityExtend = EntityExtend;
    for (var subClass in FastExtend) {
        if (Ext.isFunction(FastExtend[subClass])) {
            FastExtend[subClass]();
        }
    }
})(FastExtend || (FastExtend = {}));
var FastExt;
(function (FastExt) {
    var File = (function () {
        function File() {
        }
        File.formatLength = function (length) {
            if (length < 1024) {
                return length + "B";
            }
            if (length < 1024 * 1024) {
                return (length / 1024).toFixed(2) + "KB";
            }
            return (length / 1024 / 1024).toFixed(2) + "M";
        };
        File.isSuffixFile = function (fileName) {
            var suffix = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                suffix[_i - 1] = arguments[_i];
            }
            var realName = fileName.substring(fileName.lastIndexOf("/") + 1).toString().toLowerCase();
            for (var i = 0; i < suffix.length; i++) {
                var realValue = suffix[i].replace(".", "").toLowerCase();
                if (realName.endWith("." + realValue) || realName.startWith(realValue + "-")) {
                    return true;
                }
            }
            return false;
        };
        File.officeViewer = function (url, newWindow) {
            if (newWindow) {
                var buildForm = FastExt.Form.buildForm("officeViewer", { url: url }, FastEnum.Target._blank);
                buildForm.submit();
                $(buildForm).remove();
            }
            else {
                var winWidth = parseInt((document.body.clientWidth * 0.8).toFixed(0));
                var winHeight = parseInt((document.body.clientHeight * 0.9).toFixed(0));
                var loadFunName_1 = "officeViewerLoadDone" + new Date().getTime();
                var iframePanel_1 = Ext.create('Ext.container.Container', {
                    layout: 'border',
                    region: 'center',
                    border: 0,
                    iframePanel: true,
                    listeners: {
                        afterrender: function (obj, eOpts) {
                            this.setLoading("正在读取文档中，请稍后……");
                            var me = this;
                            FastExt.Server.saveCache(url, function (success, message, data) {
                                if (success) {
                                    var html = "<iframe onload='" + loadFunName_1 + "()' src='officeViewer?cache=" + data + "'  width='100%' height='100%' frameborder='0'>";
                                    me.update(html);
                                }
                                else {
                                    FastExt.Dialog.hideWait();
                                    FastExt.Dialog.showAlert("系统提醒", message);
                                }
                            });
                        }
                    }
                });
                window[loadFunName_1] = function () {
                    iframePanel_1.setLoading(false);
                };
                var win = Ext.create('Ext.window.Window', {
                    title: "预览文档",
                    iconCls: "extIcon extSee",
                    maximizable: true,
                    height: winHeight,
                    width: winWidth,
                    minHeight: 500,
                    minWidth: 600,
                    resizable: true,
                    layout: 'fit',
                    items: [iframePanel_1],
                    constrain: true,
                    justTop: true,
                    listeners: {
                        close: function () {
                            window[loadFunName_1] = null;
                        }
                    },
                });
                win.show();
            }
        };
        File.uploadFile = function (obj, fileModules, multiple, useEditUrl) {
            return new Ext.Promise(function (resolve, reject) {
                var title = "上传文件", type = "files", width = -1, height = -1, name = "file";
                if (!FastExt.FileModule.validate(fileModules, "fileModules")) {
                    return;
                }
                if (fileModules.length === 1) {
                    title = "上传" + fileModules[0].tipMsg;
                    type = fileModules[0].type;
                    width = fileModules[0].width;
                    height = fileModules[0].height;
                }
                if (Ext.isEmpty(useEditUrl)) {
                    useEditUrl = true;
                }
                if (obj) {
                    if (obj.name) {
                        name = obj.name;
                    }
                    if (obj.dataIndex) {
                        name = obj.dataIndex;
                    }
                }
                var formPanel = Ext.create('Ext.form.FormPanel', {
                    url: 'upload',
                    method: 'POST',
                    margin: '5',
                    fileUpload: true,
                    width: 400,
                    callBacked: false,
                    border: 0,
                    layout: 'column',
                    items: [
                        {
                            xtype: 'filefield',
                            fieldLabel: title,
                            labelWidth: 60,
                            labelAlign: 'right',
                            buttonText: '选择文件',
                            allowBlank: false,
                            name: name,
                            multiple: multiple,
                            columnWidth: 1,
                            listeners: {
                                change: function (obj, value, eOpts) {
                                    if (value != null && value.length !== 0) {
                                        var errorMsg = "";
                                        for (var i = 0; i < fileModules.length; i++) {
                                            var fileModule = fileModules[i];
                                            if (fileModule.match(value)) {
                                                formPanel.doSubmit();
                                                return;
                                            }
                                            errorMsg = errorMsg + "或" + fileModule.tipMsg;
                                        }
                                        if (formPanel.form) {
                                            formPanel.form.reset();
                                        }
                                        Ext.Msg.alert('系统提醒', "请上传有效的" + errorMsg.substring(1));
                                    }
                                }
                            }
                        },
                        {
                            xtype: 'hiddenfield',
                            name: 'type',
                            value: type
                        },
                        {
                            xtype: 'hiddenfield',
                            name: 'file.width',
                            value: width
                        },
                        {
                            xtype: 'hiddenfield',
                            name: 'file.height',
                            value: height
                        }
                    ],
                    doSubmit: function () {
                        var form = formPanel.form;
                        if (form.isValid()) {
                            var myMask_1 = new Ext.LoadMask({
                                msg: '正在上传附件中…',
                                target: uploadWin
                            });
                            myMask_1.show();
                            var formSubmitRun_1 = function () {
                                form.submit({
                                    success: function (form, action) {
                                        FastExt.Dialog.toast("文件上传成功！");
                                        if (!resolve.called) {
                                            resolve.called = true;
                                            resolve(action.result.data);
                                        }
                                        uploadWin.close();
                                    },
                                    failure: function (form, action) {
                                        myMask_1.destroy();
                                        if (action.result) {
                                            Ext.Msg.alert('系统提醒', "上传失败！" + action.result.message);
                                        }
                                    }
                                });
                            };
                            var onFileSelectRun_1 = function (i) {
                                if (i >= fileModules.length) {
                                    formSubmitRun_1();
                                    return;
                                }
                                var fileModel = fileModules[i];
                                if (Ext.isFunction(fileModel.onFileSelect)) {
                                    fileModel.onFileSelect(formPanel.getForm().findField(name)).then(function (error) {
                                        if (Ext.isEmpty(error)) {
                                            onFileSelectRun_1(i + 1);
                                        }
                                        else {
                                            myMask_1.destroy();
                                            if (formPanel.form) {
                                                formPanel.form.reset();
                                            }
                                            Ext.Msg.alert('系统提醒', error);
                                        }
                                    });
                                }
                                else {
                                    onFileSelectRun_1(i + 1);
                                }
                            };
                            onFileSelectRun_1(0);
                        }
                    },
                    listeners: {
                        'render': function (obj) {
                            try {
                                new Ext.util.KeyMap({
                                    target: obj.getEl(),
                                    key: 13,
                                    fn: formPanel.doSubmit,
                                    scope: Ext.getBody()
                                });
                            }
                            catch (e) {
                                console.error(e);
                            }
                        }
                    }
                });
                var btnSubmitId = "btnSubmit" + new Date().getTime();
                var uploadWin = Ext.create('Ext.window.Window', {
                    title: title,
                    layout: 'fit',
                    resizable: false,
                    scrollable: false,
                    width: 500,
                    items: formPanel,
                    modal: true,
                    iconCls: 'extIcon extUpload',
                    animateTarget: obj,
                    constrain: true,
                    toFrontOnShow: true,
                    buttons: [
                        {
                            text: '使用地址',
                            iconCls: 'extIcon extEdit',
                            hidden: !useEditUrl,
                            handler: function () {
                                Ext.Msg.prompt('使用自定义的文件地址', '填写自定义的文件路径（http）：', function (btn, text) {
                                    if (btn === 'ok') {
                                        if (!Ext.isEmpty(text)) {
                                            if (!resolve.called) {
                                                resolve.called = true;
                                                resolve({ "url": text });
                                            }
                                            uploadWin.close();
                                        }
                                    }
                                });
                            }
                        },
                        {
                            text: '网络同步',
                            iconCls: 'extIcon extLink',
                            handler: function () {
                                Ext.Msg.prompt('从网络中下载文件', '填写网络文件路径（http）：', function (btn, text) {
                                    if (btn === 'ok') {
                                        FastExt.Dialog.showWait("正在同步中，请稍后……");
                                        var params = { "url": text, "__accept": "application/json" };
                                        $.post("upload", params, function (result) {
                                            FastExt.Dialog.hideWait();
                                            if (result.success) {
                                                FastExt.Dialog.toast("文件上传成功！");
                                                if (!resolve.called) {
                                                    resolve.called = true;
                                                    resolve(result.data);
                                                }
                                                uploadWin.close();
                                            }
                                            else {
                                                Ext.Msg.alert('系统提醒', "上传失败！" + result.message);
                                            }
                                        });
                                    }
                                });
                            }
                        },
                        '->',
                        {
                            text: '重置',
                            width: 88,
                            iconCls: 'extIcon extReset',
                            handler: function () {
                                if (formPanel.form) {
                                    formPanel.form.reset();
                                }
                            }
                        },
                        {
                            text: '上传',
                            width: 88,
                            id: btnSubmitId,
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                formPanel.doSubmit();
                            }
                        }
                    ],
                    listeners: {
                        show: function (winObj, eOpts) {
                            formPanel.getForm().findField(name).fileInputEl.dom.click();
                            Ext.getCmp(btnSubmitId).focus();
                        },
                        close: function (winObj, eOpts) {
                            if (!resolve.called) {
                                resolve.called = true;
                                resolve();
                            }
                        }
                    }
                });
                uploadWin.show();
            });
        };
        File.showFiles = function (obj, callBack, fileModules, defaultFiles, title, readOnly, showFileName, showFileLength) {
            if (!FastExt.FileModule.validate(fileModules, "fileModules")) {
                return;
            }
            var autoFileName = true;
            if (obj && Ext.isFunction(obj.blur)) {
                obj.blur();
                autoFileName = FastExt.Base.toBool(obj.autoFileName, true);
            }
            var datas = [], renderer = FastExt.Renders.file();
            if (fileModules.length === 1) {
                renderer = eval(fileModules[0].renderer);
                if (!title) {
                    title = fileModules[0].tipMsg + readOnly ? "查看" : "管理";
                }
            }
            else if (!title) {
                title = "附件管理";
            }
            if (!Ext.isEmpty(defaultFiles)) {
                var fileArray = defaultFiles;
                if (Ext.isString(defaultFiles)) {
                    fileArray = Ext.JSON.decode(defaultFiles);
                }
                for (var i = 0; i < fileArray.length; i++) {
                    var source = fileArray[i];
                    var arrayInfo = source.split("@");
                    var url = arrayInfo[0];
                    var name_2 = url.substring(url.lastIndexOf("/") + 1);
                    var length_1 = -1;
                    if (arrayInfo.length > 1) {
                        name_2 = arrayInfo[1];
                    }
                    if (arrayInfo.length > 2) {
                        length_1 = arrayInfo[2];
                    }
                    datas.push({ url: url, name: name_2, length: length_1 });
                }
            }
            var columns = [];
            columns.push({
                header: '文件',
                dataIndex: 'url',
                flex: 1,
                align: 'center',
                renderer: renderer
            });
            if (obj.showFileName || showFileName) {
                columns.push({
                    header: '文件名',
                    dataIndex: 'name',
                    width: 150,
                    align: 'center',
                    field: readOnly ? null : {
                        xtype: 'textfield',
                        listeners: {
                            change: function () {
                                fileStore.modify = true;
                            }
                        }
                    },
                    renderer: FastExt.Renders.normal()
                });
                if (obj.showFileLength || showFileLength) {
                    columns.push({
                        header: '大小',
                        dataIndex: 'length',
                        width: 100,
                        align: 'center',
                        field: readOnly ? null : {
                            xtype: 'numberfield',
                            listeners: {
                                change: function () {
                                    fileStore.modify = true;
                                }
                            }
                        },
                        renderer: FastExt.Renders.fileSize()
                    });
                }
            }
            var currTime = Ext.now();
            var fileStore = Ext.create('Ext.data.Store', {
                autoLoad: true,
                data: datas
            });
            var dataGridFiles = Ext.create('Ext.grid.Panel', {
                selModel: FastExt.Grid.getGridSelModel(),
                store: fileStore,
                columnLines: true,
                cellTip: true,
                columns: columns,
                plugins: [Ext.create('Ext.grid.plugin.CellEditing', {
                        clicksToEdit: 2
                    })],
                selType: 'cellmodel',
                tbar: readOnly ? null : [
                    {
                        xtype: 'button',
                        border: 1,
                        text: '删除',
                        id: 'btnDeleteFile' + currTime,
                        iconCls: 'extIcon extDelete',
                        disabled: true,
                        handler: function () {
                            var data = dataGridFiles.getSelectionModel().getSelection();
                            if (data.length === 0) {
                                FastExt.Dialog.toast("请您选择需要删除的文件！");
                            }
                            else {
                                Ext.Msg.confirm("系统提醒", "您确定立即删除选中的附件吗？", function (button, text) {
                                    if (button === "yes") {
                                        var params_1 = {};
                                        Ext.Array.each(data, function (record, index) {
                                            params_1["path[" + index + "]"] = record.get("url");
                                        });
                                        FastExt.Dialog.showWait("正在删除中……");
                                        FastExt.Server.deleteAttach(params_1, function (success, message) {
                                            FastExt.Dialog.hideWait();
                                            if (success) {
                                                dataGridFiles.getSelectionModel().deselectAll();
                                                FastExt.Dialog.toast("删除成功！");
                                                Ext.Array.each(data, function (record, index) {
                                                    fileStore.remove(record);
                                                    fileStore.modify = true;
                                                });
                                            }
                                            else {
                                                FastExt.Dialog.showAlert("系统提醒", message);
                                            }
                                        });
                                    }
                                });
                            }
                        }
                    },
                    {
                        xtype: 'button',
                        border: 1,
                        text: '上传',
                        iconCls: 'extIcon extUpload',
                        handler: function () {
                            FastExt.File.uploadFile(this, fileModules, true).then(function (result) {
                                if (result) {
                                    if (Ext.isArray(result)) {
                                        for (var i = 0; i < result.length; i++) {
                                            if (!autoFileName) {
                                                result[i].name = "";
                                            }
                                            fileStore.add(result[i]);
                                        }
                                    }
                                    else {
                                        if (!autoFileName) {
                                            result.name = "";
                                        }
                                        fileStore.add(result);
                                    }
                                    fileStore.modify = true;
                                }
                            });
                        }
                    }
                ],
                listeners: {
                    selectionchange: function () {
                        var data = this.getSelectionModel().getSelection();
                        var btnDelete = Ext.getCmp("btnDeleteFile" + currTime);
                        if (btnDelete) {
                            btnDelete.setDisabled(!(data.length > 0));
                        }
                    }
                }
            });
            var win = Ext.create('Ext.window.Window', {
                title: title,
                height: 400,
                width: 500,
                minWidth: 400,
                minHeight: 300,
                layout: 'fit',
                resizable: true,
                modal: true,
                constrain: true,
                iconCls: 'extIcon extFolder',
                animateTarget: obj,
                items: [dataGridFiles],
                buttons: readOnly ? null : [{
                        text: '确定',
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            var data = [];
                            var stop = false;
                            fileStore.each(function (record, index) {
                                var url = record.get("url");
                                if (obj.showFileName) {
                                    url = url + "@" + record.get("name");
                                    if (Ext.isEmpty(record.get("name"))) {
                                        FastExt.Dialog.toast("第" + (index + 1) + "条附件，请编辑文件名！");
                                        stop = true;
                                        FastExt.Component.shakeComment(win);
                                        return false;
                                    }
                                    if (obj.showFileLength) {
                                        url = url + "@" + record.get("length");
                                        if (Ext.isEmpty(record.get("length"))) {
                                            FastExt.Dialog.toast("第" + (index + 1) + "条附件，请编辑文件大小！");
                                            stop = true;
                                            FastExt.Component.shakeComment(win);
                                            return false;
                                        }
                                    }
                                }
                                data.push(url);
                            });
                            if (stop) {
                                return;
                            }
                            if (callBack != null) {
                                callBack(Ext.encode(data));
                            }
                            win.close();
                        }
                    }],
                listeners: {
                    close: function () {
                        if (fileStore.modify) {
                        }
                    }
                }
            });
            win.show();
        };
        return File;
    }());
    FastExt.File = File;
    var FileModule = (function () {
        function FileModule() {
        }
        FileModule.validate = function (modules, name) {
            if (Ext.isEmpty(modules)) {
                FastExt.Dialog.showAlert("系统提醒", "参数" + name + "必传！");
                return false;
            }
            if (!Ext.isArray(modules)) {
                FastExt.Dialog.showAlert("系统提醒", "参数" + name + "必需Array格式！");
                return false;
            }
            if (modules === 0) {
                FastExt.Dialog.showAlert("系统提醒", "参数" + name + "集合不可为空！");
                return false;
            }
            return true;
        };
        FileModule.file = function () {
            return {
                tipMsg: '文件',
                type: 'file',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (new RegExp(/\.*$/i).test(names[i])) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.image = function (width, height) {
            if (Ext.isEmpty(width)) {
                width = -1;
            }
            if (Ext.isEmpty(height)) {
                height = -1;
            }
            return {
                width: width,
                height: height,
                tipMsg: '图片',
                type: 'images',
                renderer: "FastExt.Renders.image(24)",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "jpg", "png", "gif", "jpeg", "svg", "bmp", "webp")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.mp4 = function (maxDuration) {
            return {
                tipMsg: 'mp4',
                type: 'videos',
                maxDuration: maxDuration,
                onFileSelect: function (filefield) {
                    var me = this;
                    if (Ext.isEmpty(filefield.extra)) {
                        filefield.extra = {};
                    }
                    return new Ext.Promise(function (resolve, reject) {
                        if (Ext.isEmpty(me.maxDuration)) {
                            resolve();
                            return;
                        }
                        var video = filefield.fileInputEl.dom.files[0];
                        var url = URL.createObjectURL(video);
                        var audio = new Audio(url);
                        audio.addEventListener("loadedmetadata", function (e) {
                            filefield.extra["duration"] = audio.duration;
                            if (audio.duration * 1000 > parseInt(me.maxDuration)) {
                                resolve("视频最大时长不得超过" + me.maxDuration / 1000 + "秒！");
                            }
                            else {
                                resolve();
                            }
                        });
                    });
                },
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "mp4")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.mp3 = function () {
            return {
                tipMsg: 'mp3',
                type: 'music',
                renderer: "FastExt.Renders.file()",
                onFileSelect: function (filefield) {
                    if (Ext.isEmpty(filefield.extra)) {
                        filefield.extra = {};
                    }
                    return new Ext.Promise(function (resolve, reject) {
                        var video = filefield.fileInputEl.dom.files[0];
                        var url = URL.createObjectURL(video);
                        var audio = new Audio(url);
                        audio.addEventListener("loadedmetadata", function (e) {
                            filefield.extra["duration"] = audio.duration;
                            resolve();
                        });
                    });
                },
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "mp3")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.word = function () {
            return {
                tipMsg: 'word文档',
                type: 'words',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "doc", "docx")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.excel = function () {
            return {
                tipMsg: 'excel文档',
                type: 'excels',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "xls", "xlsx")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.ppt = function () {
            return {
                tipMsg: 'ppt文档',
                type: 'ppt',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "ppt", "pptx")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.pdf = function () {
            return {
                tipMsg: 'pdf文档',
                type: 'pdf',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "pdf")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.zip = function () {
            return {
                tipMsg: 'zip压缩包',
                type: 'zip',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "zip", "rar")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.text = function () {
            return {
                tipMsg: 'txt文档',
                type: 'txt',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "txt")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.data = function () {
            return {
                tipMsg: '数据文件',
                type: 'data',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "data")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.json = function () {
            return {
                tipMsg: 'JSON文件',
                type: 'json',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "json")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.apk = function () {
            return {
                tipMsg: '安卓安装包（APK）',
                type: 'apk',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "apk")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.ipa = function () {
            return {
                tipMsg: '苹果安装包（IPA）',
                type: 'ipa',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "ipa")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        return FileModule;
    }());
    FastExt.FileModule = FileModule;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Form = (function () {
        function Form() {
        }
        Form.getFieldMinHeight = function (showHeight) {
            if (Ext.isEmpty(showHeight)) {
                showHeight = false;
            }
            if (showHeight) {
                return 32 + 2;
            }
            return 32;
        };
        Form.buildForm = function (url, paramsJson, target) {
            if (Ext.isEmpty(target)) {
                target = FastEnum.Target._self;
            }
            var form = $('<form></form>');
            form.attr('action', url);
            form.attr('method', 'post');
            form.attr('target', target);
            for (var n in paramsJson) {
                var my_input = $("<input type='text' name='" + n + "' />");
                my_input.attr('value', paramsJson[n]);
                form.append(my_input);
            }
            $(document.body).append(form);
            return form;
        };
        Form.isDateField = function (field) {
            if (!field)
                return false;
            return field === "datefield" || field.xtype === "datefield";
        };
        Form.isNumberField = function (field) {
            if (!field)
                return false;
            return field === "numberfield" || field.xtype === "numberfield";
        };
        Form.isTextField = function (field) {
            if (!field)
                return false;
            return field === "textfield" || field.xtype === "textfield";
        };
        Form.isComboField = function (field) {
            if (!field)
                return false;
            return field === "combobox" || field.xtype === "combo";
        };
        Form.isFileField = function (field) {
            if (!field)
                return false;
            return field === "fastfile" || field.xtype === "fastfile" || field === "fastfilefield" || field.xtype === "fastfilefield";
        };
        Form.isFilesField = function (field) {
            if (!field)
                return false;
            return field === "fastfiles" || field.xtype === "fastfiles" || field === "fastfilesfield" || field.xtype === "fastfilesfield";
        };
        Form.isEnumField = function (field) {
            if (!field)
                return false;
            return field === "enumcombo" || field === "enumcombobox" || field.xtype === "enumcombo" || field.xtype === "enumcombobox";
        };
        Form.isContentField = function (field) {
            if (!field)
                return false;
            return field === "contentfield" || field === "content" || field.xtype === "contentfield" || field.xtype === "content";
        };
        Form.isHtmlContentField = function (field) {
            if (!field)
                return false;
            return field === "htmlcontentfield" || field === "htmlcontent" || field.xtype === "htmlcontentfield" || field.xtype === "htmlcontent";
        };
        Form.isMonacoEditorField = function (field) {
            if (!field)
                return false;
            return field === "fastmonacofield" || field === "fastmonaco" || field.xtype === "fastmonacofield" || field.xtype === "fastmonaco";
        };
        Form.isLinkField = function (field) {
            if (!field)
                return false;
            return field === "linkfield" || field === "link" || field.xtype === "linkfield" || field.xtype === "link";
        };
        Form.isTargetField = function (field) {
            if (!field)
                return false;
            return field === "targetfield" || field === "target" || field.xtype === "targetfield" || field.xtype === "target";
        };
        Form.isPCAField = function (field) {
            if (!field)
                return false;
            return field === "pcafield" || field === "pca" || field.xtype === "pcafield" || field.xtype === "pca";
        };
        Form.isMapField = function (field) {
            if (!field)
                return false;
            return field === "mapfield" || field === "map" || field.xtype === "mapfield" || field.xtype === "map";
        };
        Form.getFieldError = function (fieldObj) {
            var currError = fieldObj.getErrors();
            if (currError.length === 0) {
                currError = [fieldObj.invalidText];
            }
            if (Ext.isEmpty(currError[0])) {
                currError[0] = "数据错误！";
            }
            return currError;
        };
        Form.showJsonForm = function (obj, title, jsonFieldConfig, jsonFieldDefaultConfig, modal) {
            if (Ext.isEmpty(modal)) {
                modal = true;
            }
            if (Ext.isString(jsonFieldConfig)) {
                jsonFieldConfig = FastExt.Json.jsonToObject(jsonFieldConfig);
            }
            if (Ext.isEmpty(jsonFieldDefaultConfig)) {
                jsonFieldDefaultConfig = "[]";
            }
            if (Ext.isString(jsonFieldDefaultConfig)) {
                jsonFieldDefaultConfig = FastExt.Json.jsonToObject(jsonFieldDefaultConfig);
            }
            return new Ext.Promise(function (resolve, reject) {
                var formItems = [];
                for (var _i = 0, jsonFieldConfig_1 = jsonFieldConfig; _i < jsonFieldConfig_1.length; _i++) {
                    var itemObj = jsonFieldConfig_1[_i];
                    var defaultConfig = {
                        xtype: "textfield",
                        columnWidth: 1,
                        allowBlank: false
                    };
                    for (var _a = 0, jsonFieldDefaultConfig_1 = jsonFieldDefaultConfig; _a < jsonFieldDefaultConfig_1.length; _a++) {
                        var defaultJson = jsonFieldDefaultConfig_1[_a];
                        if (defaultJson["name"] === itemObj["name"]) {
                            itemObj = FastExt.Json.mergeJson(itemObj, defaultJson);
                        }
                    }
                    var fieldConfig = FastExt.Json.mergeJson(defaultConfig, itemObj);
                    fieldConfig["source"] = itemObj;
                    formItems.push(fieldConfig);
                }
                var formPanel = Ext.create('Ext.form.FormPanel', {
                    bodyPadding: 5,
                    cacheKey: $.md5(title),
                    region: 'center',
                    border: 0,
                    autoScroll: true,
                    defaults: {
                        labelWidth: 100,
                        margin: '5 5 5 5',
                        labelAlign: 'right',
                        emptyText: '请填写',
                        flex: 1,
                    },
                    layout: {
                        type: 'vbox',
                        pack: 'start',
                        align: 'stretch'
                    },
                    doReturn: function () {
                        if (this.getForm().isValid()) {
                            var values_1 = [];
                            this.getForm().getFields().each(function (field) {
                                var source = field.source;
                                source["value"] = field.getValue();
                                values_1.push(source);
                            });
                            resolve(values_1);
                            return true;
                        }
                        return false;
                    },
                    listeners: {
                        render: function (obj, eOpts) {
                            new Ext.util.KeyMap({
                                target: obj.getEl(),
                                key: 13,
                                fn: function (keyCode, e) {
                                    if (formPanel.doReturn()) {
                                        formPanel.deleteCache();
                                        formWin.close();
                                    }
                                },
                                scope: this
                            });
                        }
                    },
                    items: formItems,
                });
                var formWin = Ext.create('Ext.window.Window', {
                    title: title,
                    icon: obj.icon,
                    iconCls: obj.iconCls,
                    animateTarget: obj,
                    width: 550,
                    minWidth: 200,
                    autoScroll: true,
                    layout: {
                        type: 'vbox',
                        pack: 'start',
                        align: 'stretch'
                    },
                    resizable: true,
                    maximizable: true,
                    constrain: true,
                    items: [formPanel],
                    modal: modal,
                    listeners: {
                        show: function (obj) {
                            formPanel.restoreCache();
                            obj.focus();
                        }
                    },
                    buttons: [
                        {
                            text: '暂存',
                            iconCls: 'extIcon extSave whiteColor',
                            handler: function () {
                                formPanel.saveCache();
                            }
                        },
                        {
                            text: '重置',
                            iconCls: 'extIcon extReset',
                            handler: function () {
                                if (formPanel.form) {
                                    formPanel.form.reset();
                                }
                                formPanel.deleteCache();
                            }
                        },
                        {
                            text: '确定',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                if (formPanel.doReturn()) {
                                    formPanel.deleteCache();
                                    formWin.close();
                                }
                            }
                        }
                    ]
                });
                formWin.show();
            });
        };
        return Form;
    }());
    FastExt.Form = Form;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var GridEvent = (function () {
        function GridEvent() {
        }
        GridEvent.onFastAfterTabActive = function () {
            try {
                var grid = this;
                if (grid.operate.refreshData || FastExt.System.gridRefreshData) {
                    grid.getStore().reload();
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        GridEvent.onFastViewRead = function (view, eOpts) {
            view.getHeaderContainer().sortOnClick = false;
        };
        GridEvent.onFastBeforeDestroy = function () {
            var grid = this;
            if (FastExt.Base.toBool(grid.destroySaveUI, true)) {
                grid.saveUIConfig(false);
            }
            grid.hideEmptyTip();
        };
        GridEvent.onFastColumnMove = function (ct, column, fromIdx, toIdx, eOpts) {
            var grid = this;
            if (column.isSubHeader) {
                column.groupHeaderText = column.ownerCt.text;
            }
            else {
                column.groupHeaderText = null;
            }
            grid.saveUIConfig(true);
        };
        GridEvent.onFastColumnResize = function (ct, column, width, eOpts) {
            var grid = this;
            grid.sortOnClick = false;
            grid.saveUIConfig(true);
        };
        GridEvent.onFastColumnsChanged = function (ct, eOpts) {
            ct.sortOnClick = false;
            var grid = this;
            grid.saveUIConfig(true);
        };
        GridEvent.onFastHeaderTriggerClick = function (ct, column, e, t, eOpts) {
            var grid = this;
            if (Ext.isEmpty(column.dataIndex) || grid.fromRecycle)
                return;
            ct.sortOnClick = false;
            ct.triggerColumn = column;
        };
        GridEvent.onFastHeaderContextMenu = function (ct, column, e, t, eOpts) {
            var grid = this;
            if (Ext.isEmpty(column.dataIndex) || grid.fromRecycle)
                return;
            ct.sortOnClick = false;
            ct.onHeaderTriggerClick(column, e, column.triggerEl);
        };
        GridEvent.onFastHeaderMenuCreate = function (ct, menu, headerCt, eOpts) {
            var grid = this;
            grid.columnHeadMenu = menu;
            FastExt.Grid.configGridHeadMenu(grid);
        };
        GridEvent.onFastHeaderClick = function (ct, column, e, t, eOpts) {
            if (Ext.isEmpty(column.dataIndex))
                return;
            ct.sortOnClick = false;
            if (!FastExt.Grid.showColumnSearchMenu(column)) {
                ct.onHeaderTriggerClick(column, e, column.triggerEl);
            }
        };
        GridEvent.onFastSortChange = function (ct, column, direction, eOpts) {
            if (Ext.isEmpty(column.dataIndex))
                return;
            column.sortDirection = direction;
            var grid = this;
            FastExt.Grid.refreshColumnStyle(column);
            grid.saveUIConfig(true);
        };
        GridEvent.onFastCellContextMenu = function (obj, td, cellIndex, record, tr, rowIndex, e, eOpts) {
            var grid = this;
            if (Ext.isEmpty(e.position.column.dataIndex) || grid.fromRecycle) {
                return;
            }
            if (Ext.isObject(grid.contextMenu)) {
                if (grid.contextMenu.items.length > 0) {
                    grid.contextMenu.cellIndex = cellIndex;
                    grid.contextMenu.record = record;
                    grid.contextMenu.rowIndex = rowIndex;
                    grid.contextMenu.cellTd = td;
                    grid.contextMenu.tr = tr;
                    grid.contextMenu.cellContext = e.position;
                    obj.getSelectionModel().select(record);
                    obj.fireEvent("selectionchange", obj, record, eOpts);
                    FastExt.Menu.fireMenuEvent(grid.contextMenu, "onBeforeShow");
                    FastExt.Menu.refreshItem(grid.contextMenu);
                    grid.contextMenu.showAt(e.getXY());
                }
            }
        };
        GridEvent.onFastCellDblclick = function () {
            var grid = this;
            grid.doEdit = true;
        };
        GridEvent.onFastBeforeEdit = function (editor, context, eOpts) {
            var grid = this;
            if (!grid.checkEditor()) {
                FastExt.Dialog.toast("无编辑权限（E-1）！");
                return false;
            }
            if (!FastExt.Base.toBool(grid.doEdit, true)) {
                return false;
            }
            grid.doEdit = false;
            if (!FastExt.Base.toBool(context.column.editable, true)) {
                FastExt.Dialog.toast("无编辑权限（E-2）！");
                return false;
            }
            if (context.column.hasListener("beforeedit")) {
                if (!context.column.fireEvent("beforeedit", context)) {
                    return false;
                }
            }
            var editorField = context.column.field;
            if (!editorField) {
                FastExt.Dialog.toast("无编辑权限（E-3）！");
                return false;
            }
            var cell = Ext.get(context.cell);
            editorField.labelTitle = context.column.text;
            editorField.record = context.record;
            editorField.fromColumn = true;
            if (editorField.hasListener("beforeedit")) {
                if (!editorField.fireEvent("beforeedit", editorField)) {
                    return false;
                }
            }
            if (FastExt.Listeners.onBeforeEditorField) {
                if (!FastExt.Listeners.onBeforeEditorField(editorField, context.record)) {
                    return false;
                }
            }
            if (Ext.isFunction(editorField.setValue) && !FastExt.Base.toBool(context.column.password, false)) {
                if (Ext.isObject(context.value) || Ext.isArray(context.value)) {
                    editorField.setValue(JSON.stringify(context.value), context.record);
                }
                else {
                    editorField.setValue(context.value, context.record);
                }
            }
            if (Ext.isFunction(editorField.startEdit)) {
                editorField.startEdit();
            }
            if (Ext.isFunction(editorField.showWindow)) {
                editorField.showWindow(cell, function (result) {
                    if (Ext.isEmpty(context.value) && Ext.isEmpty(result.getValue())) {
                        return;
                    }
                    FastExt.Store.setRecordValue(context.record, context.field, result);
                });
                return false;
            }
            if (!context.column.editMenu) {
                context.column.editMenu = Ext.create('Ext.menu.Menu', {
                    modal: true,
                    layout: 'fit',
                    showSeparator: false,
                    shadow: false,
                    editorMenu: true,
                    items: [
                        {
                            xtype: 'container',
                            layout: 'fit',
                            width: cell.getWidth(),
                            style: {
                                background: "#ffffff",
                                borderWidth: 1,
                                borderColor: "#ffffff",
                                color: '#eeeee'
                            },
                            border: 0,
                            items: [editorField]
                        }
                    ],
                    listeners: {
                        show: function (obj, epts) {
                            var fieldObj = obj.items.get(0).items.get(0);
                            fieldObj.focus();
                            try {
                                new Ext.util.KeyMap({
                                    target: obj.getEl(),
                                    key: 13,
                                    fn: function (keyCode, e) {
                                        obj.hide();
                                    },
                                    scope: this
                                });
                            }
                            catch (e) {
                                console.error(e);
                            }
                        },
                        beforehide: function (obj, epts) {
                            var fieldObj = obj.items.get(0).items.get(0);
                            if (!fieldObj.isValid()) {
                                var currError = FastExt.Form.getFieldError(fieldObj);
                                FastExt.Dialog.toast(currError[0]);
                                FastExt.Component.shakeComment(obj, function () {
                                    obj.holdShow = false;
                                });
                                obj.holdShow = true;
                                return false;
                            }
                            return true;
                        },
                        hide: function (obj, epts) {
                            if (!obj.context) {
                                return;
                            }
                            var fieldObj = obj.items.get(0).items.get(0);
                            if (!fieldObj) {
                                return;
                            }
                            if ((Ext.isEmpty(obj.context.value) || FastExt.Base.toBool(obj.context.column.password, false)) && Ext.isEmpty(fieldObj.getValue())) {
                                if (Ext.isFunction(fieldObj.endEdit)) {
                                    fieldObj.endEdit();
                                }
                                return;
                            }
                            FastExt.Store.setRecordValue(obj.context.record, obj.context.field, fieldObj);
                            if (Ext.isFunction(fieldObj.endEdit)) {
                                fieldObj.endEdit();
                            }
                            fieldObj.setValue(null);
                        }
                    }
                });
                context.column.editMenu.addCls("edit-menu");
            }
            var triggersCount = 0;
            if (Ext.isFunction(editorField.getTriggers)) {
                triggersCount = editorField.getTriggers() ? Object.keys(editorField.getTriggers()).length : 0;
            }
            context.column.editMenu.setWidth(Math.max(context.column.getWidth(), 120 + triggersCount * 30));
            context.column.editMenu.context = context;
            context.column.editMenu.showBy(cell, "tl");
            return false;
        };
        GridEvent.onFastSelectionChange = function (obj, selected, eOpts) {
            try {
                var grid = this;
                if (selected && !grid.fromStoreChange) {
                    grid.recordSelect();
                }
                grid.refreshSelect();
                grid.refreshDetailsPanel();
            }
            catch (e) {
                FastExt.Dialog.showException(e, "按钮选中检测！[selectionchange]");
            }
        };
        GridEvent.onFastStoreEndUpdate = function () {
            try {
                var grid_1 = this;
                if (!grid_1.getStore()) {
                    return true;
                }
                if (grid_1.getStore().holdUpdate) {
                    return true;
                }
                var records_1 = grid_1.getStore().getUpdatedRecords();
                Ext.each(grid_1.updateButtons, function (item, index) {
                    item.setDisabled(records_1.length === 0);
                });
                if (grid_1.operate && grid_1.operate.autoUpdate) {
                    grid_1.setLoading("提交数据中……");
                    FastExt.Store.commitStoreUpdate(grid_1.getStore()).then(function () {
                        grid_1.setLoading(false);
                    });
                }
            }
            catch (e) {
                FastExt.Dialog.showException(e, "endupdate");
            }
        };
        GridEvent.onFastStoreDataChanged = function () {
            var grid = this;
            if (grid.fireLoadResotreSelect) {
                grid.restoreSelect();
            }
            grid.showEmptyTip();
        };
        GridEvent.onFastStoreLoad = function () {
            var grid = this;
            if (!grid.fireLoadResotreSelect) {
                grid.fireLoadResotreSelect = true;
                grid.restoreSelect();
            }
        };
        GridEvent.onFastStoreBeforeLoad = function () {
            var grid = this;
            grid.hideEmptyTip();
        };
        GridEvent.onFastHeadMenuBeforeShow = function (obj) {
            var grid = this;
            var menu = obj;
            if (!FastExt.Grid.hasColumnField(menu.activeHeader)) {
                menu.activeHeader.batchUpdate = false;
                menu.activeHeader.operation = false;
                menu.activeHeader.searchLink = false;
                menu.activeHeader.batchRandom = false;
            }
            if (FastExt.Grid.isFilesColumn(menu.activeHeader)
                || FastExt.Grid.isFileColumn(menu.activeHeader)
                || FastExt.Grid.isLinkColumn(menu.activeHeader)
                || FastExt.Grid.isMapColumn(menu.activeHeader)
                || FastExt.Grid.isTargetColumn(menu.activeHeader)
                || FastExt.Grid.isPCAColumn(menu.activeHeader)) {
                menu.activeHeader.batchRandom = false;
            }
            if (FastExt.Grid.isContentColumn(menu.activeHeader)) {
                menu.activeHeader.searchLink = false;
            }
            if (!menu.configHeadMenu) {
                menu.configHeadMenu = true;
                var menus = [];
                menus.push({
                    text: '查看说明',
                    iconCls: 'extIcon extConvertCode',
                    onBeforeShow: function () {
                        if (Ext.isEmpty(menu.activeHeader.comment)) {
                            this.hide();
                        }
                        else {
                            this.show();
                        }
                    },
                    handler: function () {
                        FastExt.Dialog.showHtml(this, "查看【" + menu.activeHeader.text + "】的说明", menu.activeHeader.comment, false);
                    }
                });
                if (FastExt.Base.toBool(grid.columnMenu.lookField, true) && FastExt.System.isSuperRole()) {
                    menus.push({
                        text: '查看列信息',
                        iconCls: 'extIcon extField',
                        onBeforeShow: function () {
                            if (FastExt.Base.toBool(menu.activeHeader.lookField, true)) {
                                this.show();
                            }
                            else {
                                this.hide();
                            }
                        },
                        handler: function () {
                            var info = {
                                name: menu.activeHeader.dataIndex,
                                text: menu.activeHeader.text,
                                width: menu.activeHeader.getWidth()
                            };
                            var result = new JSONFormat(FastExt.Json.objectToJson(info), 4).toString();
                            FastExt.Dialog.showAlert("查看列信息", result);
                        }
                    });
                }
                if (FastExt.System.isSuperRole() && FastExt.System.isDebug() && !FastExt.Base.toBool(grid.entitySelect, false)) {
                    menus.push({
                        text: '查看列编辑器',
                        iconCls: 'extIcon extField',
                        handler: function () {
                            var result = new JSONFormat(FastExt.Json.objectToJson(menu.activeHeader.configField), 4).toString();
                            FastExt.Dialog.showAlert("查看列编辑器", result);
                        }
                    });
                }
                if (!FastExt.Menu.isSplitLineLast(menus)) {
                    menus.push("-");
                }
                if (FastExt.Base.toBool(menu.activeHeader.batchClear, true)) {
                    menus.push({
                        text: '清除无效数据',
                        iconCls: 'extIcon extClear grayColor',
                        onBeforeShow: function () {
                            var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                            if (!columnGrid.checkDelete()) {
                                this.hide();
                                return;
                            }
                            if (FastExt.Base.toBool(menu.activeHeader.batchClear, true)) {
                                this.show();
                            }
                            else {
                                this.hide();
                            }
                        },
                        handler: function () {
                            FastExt.Dialog.showDeleteDataAlert("清除无效数据", "将清除属性【" + menu.activeHeader.configText + "】在【当前当前条件】下为空的所有无效数据！请您确定操作！", function () {
                                FastExt.Dialog.showWait("正在清除数据中……");
                                var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                                var params = {
                                    "entityCode": columnGrid.getStore().entity.entityCode,
                                    "field": menu.activeHeader.dataIndex,
                                    "menu": FastExt.Store.getStoreMenuText(columnGrid.getStore()),
                                    "storeId": columnGrid.getStore().getId(),
                                };
                                FastExt.Server.clearEntity(params, function (success, message) {
                                    FastExt.Dialog.hideWait();
                                    if (success) {
                                        FastExt.Grid.getColumnGrid(menu.activeHeader).getStore().loadPage(1);
                                    }
                                    FastExt.Dialog.showAlert("清理结果", message);
                                });
                            }, "清除");
                        }
                    });
                }
                if (FastExt.Base.toBool(menu.activeHeader.batchClearRepeat, true)) {
                    menus.push({
                        text: '清除重复数据-保留最新',
                        iconCls: 'extIcon extDelRepeat grayColor',
                        onBeforeShow: function () {
                            var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                            if (!columnGrid.checkDelete()) {
                                this.hide();
                                return;
                            }
                            if (FastExt.Base.toBool(menu.activeHeader.batchClearRepeat, true)) {
                                this.show();
                            }
                            else {
                                this.hide();
                            }
                        },
                        handler: function () {
                            FastExt.Dialog.showDeleteDataAlert("清除重复数据-保留最新", "将清除属性【" + menu.activeHeader.configText + "】在【当前当前条件】下重复的数据，并保留最新的一条数据！请您确定操作！", function () {
                                FastExt.Dialog.showWait("正在清除数据中……");
                                var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                                var params = {
                                    "entityCode": columnGrid.getStore().entity.entityCode,
                                    "field": menu.activeHeader.dataIndex,
                                    "type": 1,
                                    "menu": FastExt.Store.getStoreMenuText(columnGrid.getStore()),
                                    "storeId": columnGrid.getStore().getId()
                                };
                                FastExt.Server.clearRepeatEntity(params, function (success, message) {
                                    FastExt.Dialog.hideWait();
                                    if (success) {
                                        FastExt.Grid.getColumnGrid(menu.activeHeader).getStore().loadPage(1);
                                    }
                                    FastExt.Dialog.showAlert("清理结果", message);
                                });
                            }, "清除");
                        }
                    });
                    menus.push({
                        text: '清除重复数据-保留最早',
                        iconCls: 'extIcon extDelRepeat grayColor',
                        onBeforeShow: function () {
                            var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                            if (!columnGrid.checkDelete()) {
                                this.hide();
                                return;
                            }
                            if (FastExt.Base.toBool(menu.activeHeader.batchClearRepeat, true)) {
                                this.show();
                            }
                            else {
                                this.hide();
                            }
                        },
                        handler: function () {
                            FastExt.Dialog.showDeleteDataAlert("清除重复数据-保留最早", "将清除属性【" + menu.activeHeader.configText + "】在【当前当前条件】下重复的数据，并保留最早的一条数据！请您确定操作！", function () {
                                FastExt.Dialog.showWait("正在清除数据中……");
                                var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                                var params = {
                                    "entityCode": columnGrid.getStore().entity.entityCode,
                                    "field": menu.activeHeader.dataIndex,
                                    "type": 0,
                                    "menu": FastExt.Store.getStoreMenuText(columnGrid.getStore()),
                                    "storeId": columnGrid.getStore().getId()
                                };
                                FastExt.Server.clearRepeatEntity(params, function (success, message) {
                                    FastExt.Dialog.hideWait();
                                    if (success) {
                                        FastExt.Grid.getColumnGrid(menu.activeHeader).getStore().loadPage(1);
                                    }
                                    FastExt.Dialog.showAlert("清理结果", message);
                                });
                            }, "清除");
                        }
                    });
                }
                if (!FastExt.Menu.isSplitLineLast(menus)) {
                    menus.push("-");
                }
                menus.push({
                    text: '数据左对齐',
                    iconCls: 'extIcon extAlignLeft grayColor',
                    handler: function () {
                        menu.activeHeader.setAlignContent("left");
                    }
                });
                menus.push({
                    text: '数据居中对齐',
                    iconCls: 'extIcon extAlignCenter grayColor',
                    handler: function () {
                        menu.activeHeader.setAlignContent("center");
                    }
                });
                menus.push({
                    text: '数据右对齐',
                    iconCls: 'extIcon extAlignRight grayColor',
                    handler: function () {
                        menu.activeHeader.setAlignContent("right");
                    }
                });
                if (!FastExt.Menu.isSplitLineLast(menus)) {
                    menus.push("-");
                }
                if (grid.getStore().entity) {
                    if (FastExt.Base.toBool(grid.columnMenu.searchLink, true)) {
                        menus.push({
                            text: '配置搜索链',
                            iconCls: 'extIcon extLink',
                            onBeforeShow: function () {
                                var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                                if (columnGrid.fromRecycle) {
                                    this.hide();
                                    return;
                                }
                                if (FastExt.Base.toBool(menu.activeHeader.searchLink, true)) {
                                    this.show();
                                }
                                else {
                                    this.hide();
                                }
                            },
                            handler: function () {
                                FastExt.Grid.configColumnSearchLink(menu.activeHeader);
                            }
                        });
                    }
                    if (FastExt.Base.toBool(grid.columnMenu.operation, true)) {
                        menus.push({
                            text: '计算数据',
                            iconCls: 'extIcon extMath',
                            onBeforeShow: function () {
                                var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                                if (columnGrid.fromRecycle) {
                                    this.hide();
                                    return;
                                }
                                if (FastExt.Base.toBool(menu.activeHeader.operation, false)) {
                                    this.show();
                                }
                                else {
                                    this.hide();
                                }
                            },
                            menu: [
                                {
                                    text: '计算总和',
                                    iconCls: 'extIcon extMath',
                                    handler: function () {
                                        FastExt.Grid.showColumnCompute(grid, menu.activeHeader, FastEnum.ComputeType.sum);
                                    }
                                },
                                {
                                    text: '计算平均值',
                                    iconCls: 'extIcon extMath',
                                    handler: function () {
                                        FastExt.Grid.showColumnCompute(grid, menu.activeHeader, FastEnum.ComputeType.avg);
                                    }
                                },
                                {
                                    text: '计算最大值',
                                    iconCls: 'extIcon extMath',
                                    handler: function () {
                                        FastExt.Grid.showColumnCompute(grid, menu.activeHeader, FastEnum.ComputeType.max);
                                    }
                                },
                                {
                                    text: '计算最小值',
                                    iconCls: 'extIcon extMath',
                                    handler: function () {
                                        FastExt.Grid.showColumnCompute(grid, menu.activeHeader, FastEnum.ComputeType.min);
                                    }
                                }
                            ]
                        });
                    }
                }
                if (!FastExt.Menu.isSplitLineLast(menus)) {
                    menus.push("-");
                }
                if (FastExt.Base.toBool(grid.columnMenu.batchUpdate, true)) {
                    menus.push({
                        text: '批量修改数据',
                        iconCls: 'extIcon extEdit',
                        onBeforeShow: function () {
                            var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                            if (!columnGrid.checkEditor()) {
                                this.hide();
                                return;
                            }
                            if (!FastExt.Base.toBool(menu.activeHeader.editable, true)) {
                                this.hide();
                                return;
                            }
                            if (FastExt.Base.toBool(menu.activeHeader.batchUpdate, true)) {
                                this.show();
                            }
                            else {
                                this.hide();
                            }
                        },
                        handler: function () {
                            FastExt.Grid.showBatchEditColumn(menu.activeHeader);
                        }
                    });
                }
                if (FastExt.Base.toBool(grid.columnMenu.batchUpdateDB, true)) {
                    menus.push({
                        text: '批量更新数据',
                        iconCls: 'extIcon extEdit',
                        onBeforeShow: function () {
                            var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                            if (!columnGrid.checkEditor()) {
                                this.hide();
                                return;
                            }
                            if (!FastExt.Base.toBool(menu.activeHeader.editable, true)) {
                                this.hide();
                                return;
                            }
                            if (FastExt.Base.toBool(menu.activeHeader.batchUpdateDB, true)) {
                                this.show();
                            }
                            else {
                                this.hide();
                            }
                        },
                        handler: function () {
                            FastExt.Grid.showBatchUpdateColumn(menu.activeHeader);
                        }
                    });
                }
                if (FastExt.Base.toBool(grid.columnMenu.batchReplaceDB, true)) {
                    menus.push({
                        text: '批量替换数据',
                        iconCls: 'extIcon extEdit',
                        onBeforeShow: function () {
                            var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                            if (!columnGrid.checkEditor()) {
                                this.hide();
                                return;
                            }
                            if (!FastExt.Base.toBool(menu.activeHeader.editable, true)) {
                                this.hide();
                                return;
                            }
                            if (FastExt.Base.toBool(menu.activeHeader.batchReplaceDB, true)) {
                                this.show();
                            }
                            else {
                                this.hide();
                            }
                        },
                        handler: function () {
                            FastExt.Grid.showBatchReplaceColumn(menu.activeHeader);
                        }
                    });
                }
                if (!FastExt.Menu.isSplitLineLast(menus)) {
                    menus.push("-");
                }
                if (FastExt.Base.toBool(grid.columnMenu.batchRandom, true)) {
                    menus.push({
                        text: '生成随机数据',
                        iconCls: 'extIcon extRandom',
                        onBeforeShow: function () {
                            var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                            if (!columnGrid.checkEditor()) {
                                this.hide();
                                return;
                            }
                            if (!FastExt.Base.toBool(menu.activeHeader.editable, true)) {
                                this.hide();
                                return;
                            }
                            if (FastExt.Base.toBool(menu.activeHeader.batchRandom, true)) {
                                this.show();
                            }
                            else {
                                this.hide();
                            }
                        },
                        handler: function () {
                            FastExt.Grid.showBatchEditColumnRandom(menu.activeHeader);
                        }
                    });
                }
                if (FastExt.Base.toBool(grid.columnMenu.cancelSort, true)) {
                    menus.push({
                        text: '取消排序',
                        iconCls: 'extIcon extCancelOrder',
                        onBeforeShow: function () {
                            var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                            if (columnGrid.fromRecycle) {
                                this.hide();
                                return;
                            }
                            if (FastExt.Base.toBool(menu.activeHeader.cancelSort, true)) {
                                this.show();
                            }
                            else {
                                this.hide();
                            }
                        },
                        handler: function () {
                            try {
                                var sortCollection = grid.getStore().getSorters();
                                if (sortCollection.count() === 0) {
                                    return;
                                }
                                sortCollection.removeByKey(menu.activeHeader.dataIndex);
                                grid.getStore().loadPage(1);
                                menu.activeHeader.sortDirection = null;
                                FastExt.Grid.refreshColumnStyle(menu.activeHeader);
                                grid.saveUIConfig(true);
                            }
                            catch (e) {
                                FastExt.Dialog.showException(e);
                            }
                        }
                    });
                }
                menu.insert(0, menus);
            }
            FastExt.Menu.fireMenuEvent(menu, "onBeforeShow");
            FastExt.Menu.refreshItem(menu);
        };
        return GridEvent;
    }());
    FastExt.GridEvent = GridEvent;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var GridMethod = (function () {
        function GridMethod() {
        }
        GridMethod.doRefreshPowerEnable = function () {
            try {
                var grid = this;
                if (Ext.isEmpty(grid.updateButtons) || grid.updateButtons.length === 0) {
                    grid.updateEnable = false;
                }
                else {
                    grid.updateEnable = FastExt.Component.countVisible(grid.updateButtons) > 0;
                }
                if (Ext.isEmpty(grid.addButtons) || grid.addButtons.length === 0) {
                    grid.addEnable = false;
                }
                else {
                    grid.addEnable = FastExt.Component.countVisible(grid.addButtons) > 0;
                }
                if (Ext.isEmpty(grid.deleteButtons) || grid.deleteButtons.length === 0) {
                    grid.deleteEnable = false;
                }
                else {
                    grid.deleteEnable = FastExt.Component.countVisible(grid.deleteButtons) > 0;
                }
                if (!grid.addEnable) {
                    var checkAdds = grid.query("[checkAddPower=true]");
                    for (var i = 0; i < checkAdds.length; i++) {
                        checkAdds[i].setHidden(true);
                        checkAdds[i].setDisabled(true);
                    }
                }
                if (!grid.deleteEnable) {
                    var checkDeletes = grid.query("[checkDeletePower=true]");
                    for (var i = 0; i < checkDeletes.length; i++) {
                        checkDeletes[i].setHidden(true);
                        checkDeletes[i].setDisabled(true);
                    }
                }
                if (!grid.updateEnable) {
                    var checkUpdates = grid.query("[checkUpdatePower=true]");
                    for (var i = 0; i < checkUpdates.length; i++) {
                        checkUpdates[i].setHidden(true);
                        checkUpdates[i].setDisabled(true);
                    }
                }
                if (!grid.operate.deleteAllData) {
                    var checkDeleteAllPower = grid.query("[checkDeleteAllPower=true]");
                    for (var i = 0; i < checkDeleteAllPower.length; i++) {
                        checkDeleteAllPower[i].setHidden(true);
                        checkDeleteAllPower[i].setDisabled(true);
                    }
                }
                if (!grid.operate.copyData) {
                    var checkCopyPower = grid.query("[checkCopyPower=true]");
                    for (var i = 0; i < checkCopyPower.length; i++) {
                        checkCopyPower[i].setHidden(true);
                        checkCopyPower[i].setDisabled(true);
                    }
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doRefreshSelect = function () {
            try {
                var grid_2 = this;
                if (grid_2.selectButtons) {
                    Ext.each(grid_2.selectButtons, function (item, index) {
                        if (item) {
                            var selectSize = grid_2.getSelection().length;
                            if (grid_2.selectCount) {
                                selectSize = grid_2.selectCount;
                            }
                            var checkSelect = item.checkSelect;
                            var disabled = false;
                            if (checkSelect === "multiple" || checkSelect === "m" || checkSelect > 1) {
                                disabled = !(selectSize > 0);
                            }
                            else if (checkSelect === "radio" || checkSelect === "r" || checkSelect === "single" || checkSelect === "s" || checkSelect === 1) {
                                disabled = !(selectSize === 1);
                            }
                            FastExt.Button.setDisabled(item, disabled);
                        }
                    });
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doRecordSelect = function () {
            try {
                var grid = this;
                if (FastExt.Base.toBool(FastExt.Cache.memory["holdGridRecordSelectHistory"], false)) {
                    grid.restoreSelect();
                    return;
                }
                if (grid.selectRecordHistoryShowing) {
                    for (var i = 0; i < grid.selectRecordHistoryShowing.length; i++) {
                        var record = grid.selectRecordHistoryShowing[i];
                        grid.removeRecordHistory(record);
                    }
                }
                grid.selectRecordHistoryShowing = [];
                var currSelection = grid.getSelectionModel().getSelection(true);
                for (var i = 0; i < currSelection.length; i++) {
                    var record = currSelection[i];
                    if (grid.hasRecordHistory(record)) {
                        continue;
                    }
                    grid.getSelectRecordHistory().push(record);
                    grid.selectRecordHistoryShowing.push(record);
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doHasRecordHistory = function (record) {
            try {
                var grid = this;
                var entity = grid.getStore().entity;
                if (entity) {
                    for (var i = 0; i < grid.getSelectRecordHistory().length; i++) {
                        var currRecord = grid.getSelectRecordHistory()[i];
                        if (FastExt.Store.isSameRecordByEntity(entity, currRecord, record)) {
                            return true;
                        }
                    }
                }
            }
            catch (e) {
                console.error(e);
            }
            return false;
        };
        GridMethod.doRemoveRecordHistory = function (record) {
            try {
                var grid = this;
                var entity = grid.getStore().entity;
                if (entity) {
                    var waitRemoveIndex = [];
                    for (var i = 0; i < grid.getSelectRecordHistory().length; i++) {
                        var currRecord = grid.getSelectRecordHistory()[i];
                        if (FastExt.Store.isSameRecordByEntity(entity, currRecord, record)) {
                            waitRemoveIndex.push(i);
                        }
                    }
                    for (var i = 0; i < waitRemoveIndex.length; i++) {
                        grid.getSelectRecordHistory().splice(waitRemoveIndex[i], 1);
                    }
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doRestoreSelect = function () {
            var grid = this;
            try {
                if (grid.selectHistoryConfig) {
                    if (parseInt(grid.selectHistoryConfig.state) === 0 && !FastExt.Base.toBool(grid.closeSelectHistoryLoad, false)) {
                        grid.clearSelectRecordHistory();
                        return;
                    }
                }
                grid.selectRecordHistoryShowing = [];
                var entity_1 = grid.getStore().entity;
                if (entity_1) {
                    var _loop_1 = function (i) {
                        var dataRecord = grid.getSelectRecordHistory()[i];
                        grid.getStore().each(function (record, index) {
                            if (FastExt.Store.isSameRecordByEntity(entity_1, dataRecord, record)) {
                                grid.selectRecordHistoryShowing.push(record);
                            }
                        });
                    };
                    for (var i = 0; i < grid.getSelectRecordHistory().length; i++) {
                        _loop_1(i);
                    }
                }
                if (grid.selectRecordHistoryShowing.length > 0) {
                    grid.getSelectionModel().select(grid.selectRecordHistoryShowing);
                    grid.refreshSelect();
                }
            }
            finally {
                grid.closeSelectHistoryLoad = false;
            }
        };
        GridMethod.doGetSelectRecordHistory = function () {
            try {
                var grid = this;
                if (!grid.selectRecordHistory) {
                    grid.selectRecordHistory = [];
                    var memoryCache = FastExt.Cache.memory["GridSelectHistory" + grid.code];
                    if (memoryCache && Ext.isArray(memoryCache)) {
                        grid.selectRecordHistory = Ext.Array.clone(memoryCache);
                    }
                }
                return grid.selectRecordHistory;
            }
            catch (e) {
                console.error(e);
            }
            return [];
        };
        GridMethod.doClearSelectRecordHistory = function () {
            try {
                var grid = this;
                grid.selectRecordHistory = [];
                if (Ext.isFunction(grid.refreshSelectHistoryCount)) {
                    grid.refreshSelectHistoryCount();
                }
                FastExt.Cache.memory["GridSelectHistory" + grid.code] = null;
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doRefreshSelectHistoryCount = function () {
            try {
                var grid = this;
                if (grid.ownerCt) {
                    var countField = grid.ownerCt.query("[selectHistoryCount=true]");
                    for (var i = 0; i < countField.length; i++) {
                        if (Ext.isFunction(countField[i].setValue)) {
                            countField[i].setValue(grid.getSelectRecordHistory().length);
                        }
                    }
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doRefreshDetailsPanel = function () {
            var grid = this;
            if (FastExt.Base.toBool(grid.refreshingDetailsPanel, false)) {
                return;
            }
            try {
                grid.refreshingDetailsPanel = true;
                if (!grid.detailsPanels || grid.detailsPanels.length === 0) {
                    return;
                }
                for (var i = 0; i < grid.detailsPanels.length; i++) {
                    var detailsPanel = grid.detailsPanels[i];
                    if (!detailsPanel) {
                        continue;
                    }
                    if (detailsPanel.fromWindow) {
                        if (Ext.isFunction(detailsPanel.setRecord)) {
                            detailsPanel.setRecord(grid);
                        }
                    }
                    else {
                        if (grid.operate && grid.operate.autoDetails) {
                            if (Ext.isFunction(detailsPanel.setRecord)) {
                                detailsPanel.setRecord(grid);
                            }
                        }
                        else {
                            detailsPanel.close();
                        }
                    }
                }
            }
            finally {
                grid.refreshingDetailsPanel = false;
            }
        };
        GridMethod.doSaveUIConfig = function (silence) {
            try {
                var grid_3 = this;
                if (!FastExt.Base.toBool(grid_3.firstLoadedData, false)) {
                    return;
                }
                if (silence) {
                    FastExt.Server.setSilence(true);
                }
                var entity_2 = grid_3.getStore().entity;
                FastExt.Grid.saveGridColumn(grid_3).then(function () {
                    FastExt.Grid.saveGridButton(grid_3, entity_2).then(function () {
                        FastExt.Server.setSilence(false);
                    });
                });
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doHideEmptyTip = function () {
            var grid = this;
            FastExt.Lottie.unloadJsonAnimById(grid.getId() + "-empty-anim");
            $("#" + grid.getId() + "-empty-tip").remove();
        };
        GridMethod.doShowEmptyTip = function () {
            try {
                var grid = this;
                if (!grid.body) {
                    return;
                }
                grid.hideEmptyTip();
                if (grid.getStore() && grid.getStore().getCount() > 0) {
                    return;
                }
                if (Ext.isEmpty(grid.emptyConfig)) {
                    grid.emptyConfig = {
                        lottie: "base/lottie/empty_data.json",
                        width: "40%",
                        height: "40%",
                        opacity: 0.8,
                        filter: "",
                    };
                }
                var emptyHtml = "<div id='" + grid.getId() + "-empty-tip' style='" +
                    "pointer-events: none;" +
                    "position: absolute;" +
                    "top: 0;left: 0;right: 0;bottom: 0;" +
                    "z-index: 9;" +
                    "display: flex;" +
                    "align-items: center;" +
                    "justify-content: center;" +
                    "flex-direction: column;'>" +
                    "<div id='" + grid.getId() + "-empty-anim' style='width:" + grid.emptyConfig.width + ";height:" + grid.emptyConfig.height + ";filter: " + grid.emptyConfig.filter + ";opacity: " + grid.emptyConfig.opacity + ";'>" +
                    "</div>" +
                    "</div>";
                $("#" + grid.body.el.id).append($(emptyHtml));
                FastExt.Lottie.loadJsonAnimByEl($("#" + grid.getId() + "-empty-anim")[0], grid.emptyConfig.lottie);
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doCheckEditor = function () {
            var grid = this;
            if (!FastExt.Base.toBool(grid.updateEnable, true)) {
                return false;
            }
            if (FastExt.Base.toBool(grid.fromRecycle, false)) {
                return false;
            }
            return true;
        };
        GridMethod.doCheckAdd = function () {
            var grid = this;
            if (FastExt.System.isSuperRole()) {
                return true;
            }
            return grid.addEnable;
        };
        GridMethod.doCheckDelete = function () {
            var grid = this;
            if (FastExt.System.isSuperRole()) {
                return true;
            }
            return grid.deleteEnable;
        };
        GridMethod.doCheckRefreshTimer = function (toast) {
            try {
                var grid = this;
                if (!grid.timerConfig) {
                    return;
                }
                if (parseInt(grid.timerConfig["state"]) === 0) {
                    grid.stopRefreshTimer();
                    if (toast) {
                        FastExt.Dialog.toast("已关闭定时器！");
                    }
                }
                else {
                    grid.startRefreshTimer();
                    if (toast) {
                        FastExt.Dialog.toast("已启动定时器！");
                    }
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doStartRefreshTimer = function () {
            try {
                var grid_4 = this;
                if (grid_4.timerTimeout) {
                    clearTimeout(grid_4.timerTimeout);
                }
                if (!grid_4.timerConfig) {
                    return;
                }
                var pagingToolBar = grid_4.child('#pagingToolBar');
                if (pagingToolBar) {
                    var timerBtn = pagingToolBar.down("button[toolType=timerBtn]");
                    if (timerBtn) {
                        if (parseInt(grid_4.timerConfig["state"]) === 1) {
                            timerBtn.setIconCls(timerBtn.baseIconCls + " redColor");
                            timerBtn.setUserCls("redBorder");
                        }
                        else {
                            timerBtn.setIconCls(timerBtn.baseIconCls + " grayColor");
                            timerBtn.setUserCls("");
                        }
                    }
                }
                if (parseInt(grid_4.timerConfig["state"]) === 0) {
                    return;
                }
                grid_4.timerTimeout = setTimeout(function () {
                    if (!grid_4) {
                        return;
                    }
                    if (!grid_4.timerConfig) {
                        return;
                    }
                    grid_4.disabledLoadMaskOnce = parseInt(grid_4.timerConfig["silence"]) === 1;
                    if (grid_4.getStore()) {
                        grid_4.getStore().reload();
                        grid_4.startRefreshTimer();
                    }
                }, parseInt(grid_4.timerConfig["value"]) * 1000);
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doStopRefreshTimer = function () {
            var grid = this;
            try {
                if (grid.timerTimeout) {
                    clearTimeout(grid.timerTimeout);
                }
                if (grid.timerConfig) {
                    grid.timerConfig.state = 0;
                }
                var pagingToolBar = grid.child('#pagingToolBar');
                if (pagingToolBar) {
                    var timerBtn = pagingToolBar.down("button[toolType=timerBtn]");
                    if (timerBtn) {
                        if (parseInt(grid.timerConfig["state"]) === 1) {
                            timerBtn.setIconCls(timerBtn.baseIconCls + " redColor");
                            timerBtn.setUserCls("redBorder");
                        }
                        else {
                            timerBtn.setIconCls(timerBtn.baseIconCls + " grayColor");
                            timerBtn.setUserCls("");
                        }
                    }
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        return GridMethod;
    }());
    FastExt.GridMethod = GridMethod;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Grid = (function () {
        function Grid() {
        }
        Grid.onGridInitComponent = function (grid) {
            if (FastExt.Base.toBool(grid.fastGridInited, false)) {
                return;
            }
            grid.fastGridInited = true;
            grid.bufferedRenderer = true;
            grid.firstLoadedData = false;
            if (grid.entityList) {
                if (grid.getStore()) {
                    grid.getStore().grid = grid;
                    if (grid.getStore().where) {
                        grid.fromRecycle = grid.getStore().where['^fromRecycle'];
                    }
                }
                FastExt.Grid.configGridDefault(grid);
                FastExt.Grid.configGridMethod(grid);
                FastExt.Grid.configGridContextMenu(grid);
                FastExt.Grid.configGridListeners(grid);
                FastExt.Grid.configNormalGridListeners(grid);
            }
            if (grid.dataList) {
                FastExt.Grid.configGridMethod(grid);
                FastExt.Grid.configNormalGridListeners(grid);
            }
        };
        Grid.onGridAfterRender = function (grid) {
            if (FastExt.Base.toBool(grid.fastGridAfterRendered, false)) {
                return;
            }
            grid.fastGridAfterRendered = true;
            if (grid.entityList) {
                FastExt.Grid.configGridHistory(grid);
                var menuContainer = grid.up("[menuContainer=true]");
                if (menuContainer) {
                    grid.menuPanelList = true;
                }
                var windowContainer = grid.up("window");
                if (windowContainer && !FastExt.Base.toBool(windowContainer.shown, false)) {
                    windowContainer.on("show", FastExt.Grid.startLoadData, grid, { single: true });
                }
                else {
                    FastExt.Grid.startLoadData.apply(grid);
                }
            }
        };
        Grid.startLoadData = function () {
            var grid = this;
            FastExt.Grid.configGridLayout(grid).then(function () {
                if (!FastExt.System.silenceGlobalSave) {
                    if (Ext.isFunction(grid.refreshPowerEnable)) {
                        grid.refreshPowerEnable();
                    }
                    FastExt.Grid.configGridTip(grid);
                    FastExt.Grid.configDefaultToolBar(grid);
                    FastExt.Grid.refreshGridNumberColumn(grid);
                }
                grid.setLoading(false);
                grid.getStore().grid = grid;
                if (FastExt.System.silenceGlobalSave) {
                    grid.firstLoadedData = true;
                    grid.getStore().loadData([FastExt.Grid.buildNullData(grid)]);
                    var menuContainer = grid.up("[menuContainer=true]");
                    if (menuContainer) {
                        menuContainer.close();
                    }
                    FastExt.System.doNextSilenceMenu();
                }
                else if (FastExt.Power.isPower()) {
                    grid.firstLoadedData = true;
                    grid.getStore().loadData([FastExt.Grid.buildTempData(grid)]);
                }
                else {
                    grid.firstLoadedData = true;
                    if (!grid.getStore().isLoaded()) {
                        grid.getStore().loadPage(1);
                        grid.checkRefreshTimer(false);
                    }
                }
            });
        };
        Grid.getGridView = function (grid) {
            var view = grid.getView();
            if (view) {
                if (view.$className === "Ext.grid.locking.View") {
                    return view.normalView;
                }
                return view;
            }
            return null;
        };
        Grid.getRowMinHeight = function () {
            return 36;
        };
        Grid.buildNullData = function (grid) {
            var data = {};
            if (!grid) {
                return data;
            }
            Ext.each(grid.getColumns(), function (column, index) {
                if (!Ext.isEmpty(column.dataIndex)) {
                    data[column.dataIndex] = null;
                }
            });
            return data;
        };
        Grid.buildTempData = function (grid) {
            var data = {};
            if (!grid) {
                return data;
            }
            Ext.each(grid.getColumns(), function (column, index) {
                if (!Ext.isEmpty(column.dataIndex)) {
                    data[column.dataIndex] = "模拟数据";
                    if (FastExt.Grid.isDateColumn(column)) {
                        data[column.dataIndex] = Ext.Date.format(new Date(), "Y-m-d H:i:s");
                    }
                    else if (FastExt.Grid.isFilesColumn(column)) {
                        data[column.dataIndex] = "[]";
                    }
                }
            });
            return data;
        };
        Grid.addGridContextMenu = function (grid, target, index) {
            if (grid.contextMenu && target) {
                if (!Ext.isFunction(grid.contextMenu.getXType)) {
                    var menu = Ext.create('Ext.menu.Menu', {
                        scrollToHidden: true,
                        items: []
                    });
                    if (Ext.isArray(grid.contextMenu)) {
                        menu.add(grid.contextMenu);
                    }
                    grid.contextMenu = menu;
                }
                if (!Ext.isEmpty(index)) {
                    grid.contextMenu.insert(index, target);
                }
                else {
                    grid.contextMenu.add(target);
                }
            }
        };
        Grid.configGridDefault = function (grid) {
            if (!grid.selectButtons) {
                grid.selectButtons = [];
            }
        };
        Grid.configGridHistory = function (grid) {
            if (!grid.selectHistoryConfig) {
                grid.selectHistoryConfig = {
                    "state": 0,
                    "cache": 0,
                    "count": 0,
                };
                if (FastExt.Base.toBool(grid.entitySelect, false)) {
                    grid.selectHistoryConfig["state"] = 1;
                    grid.selectHistoryConfig["cache"] = 1;
                }
                FastExt.Grid.checkHistoryConfig(grid);
            }
        };
        Grid.configGridContextMenu = function (grid) {
            var index = 0;
            var formatText = function (text, width) {
                return "&nbsp;<div style='" +
                    "background: #e3e3e3;" +
                    "border-radius: 3px;" +
                    "display:inline-flex;" +
                    "line-height:20px;" +
                    "'>&nbsp;<div style='" +
                    "color: black;" +
                    "overflow: hidden;" +
                    "white-space: nowrap;" +
                    "text-overflow: ellipsis;" +
                    "font-size:smaller;" +
                    "max-width:" + width + "px;" +
                    "'>" + text + "</div>&nbsp;</div>&nbsp;";
            };
            if (grid.getStore().entity && grid.getStore().entity.menu) {
                FastExt.Grid.addGridContextMenu(grid, {
                    iconCls: 'extIcon extDetails editColor',
                    text: "查看详情",
                    handler: function (obj, event) {
                        FastExt.Grid.showGridSelectDetailsWindow(obj, grid);
                    }
                }, index++);
            }
            FastExt.Grid.addGridContextMenu(grid, "-", index++);
            if (FastExt.System.isSuperRole()) {
                FastExt.Grid.addGridContextMenu(grid, {
                    iconCls: 'extIcon extSee editColor',
                    text: "查看数据结构",
                    handler: function (obj, event) {
                        var menu = grid.contextMenu;
                        var record = menu.record;
                        FastExt.Dialog.showJson(this, "查看原始数据结构", FastExt.Json.objectToJson(record.data));
                    }
                }, index++);
            }
            FastExt.Grid.addGridContextMenu(grid, {
                iconCls: 'extIcon extCopy2',
                text: "复制数据",
                menu: [
                    {
                        text: '复制单元格数据',
                        iconCls: 'extIcon extCopy2',
                        onBeforeShow: function () {
                            var menu = grid.contextMenu;
                            var record = menu.record;
                            var fieldName = menu.cellContext.column.dataIndex;
                            if (FastExt.Grid.isFileColumn(menu.cellContext.column)
                                || FastExt.Grid.isFilesColumn(menu.cellContext.column)
                                || FastExt.Grid.isContentColumn(menu.cellContext.column)
                                || Ext.isEmpty(record.get(fieldName))) {
                                this.hide();
                                this.setText("复制数据");
                                return;
                            }
                            this.setText("复制" + formatText($(menu.cellTd).text(), $(menu.cellTd).outerWidth(true)));
                            this.show();
                        },
                        handler: function () {
                            var menu = grid.contextMenu;
                            FastExt.Base.copyToBoard($(menu.cellTd).text().trim());
                            FastExt.Dialog.toast("复制成功！");
                        }
                    },
                    {
                        text: '复制整行数据',
                        iconCls: 'extIcon extCopy2',
                        handler: function () {
                            var menu = grid.contextMenu;
                            var content = "";
                            $(menu.tr).find("td").each(function () {
                                content += $(this).text() + "\t";
                            });
                            FastExt.Base.copyToBoard(content);
                            FastExt.Dialog.toast("复制成功！");
                        }
                    },
                    {
                        text: '复制单元格实际数据',
                        iconCls: 'extIcon extCopy2',
                        handler: function () {
                            var menu = grid.contextMenu;
                            var record = menu.record;
                            var fieldName = menu.cellContext.column.dataIndex;
                            var fieldValue = record.get(fieldName);
                            if (Ext.isEmpty(fieldValue)) {
                                FastExt.Dialog.showAlert("系统提醒", "复制失败，暂无实际数据！");
                                return;
                            }
                            if (Ext.isArray(record.get(fieldName))) {
                                FastExt.Base.copyToBoard(Ext.encode(record.get(fieldName)));
                            }
                            else {
                                FastExt.Base.copyToBoard(record.get(fieldName));
                            }
                            FastExt.Dialog.toast("复制成功！");
                        }
                    }
                ]
            }, index++);
            FastExt.Grid.addGridContextMenu(grid, "-", index++);
            FastExt.Grid.addGridContextMenu(grid, {
                iconCls: 'extIcon extEdit editColor',
                text: "编辑单元格数据",
                onBeforeShow: function () {
                    var menu = this.ownerCt;
                    var record = menu.record;
                    var fieldName = menu.cellContext.column.dataIndex;
                    if (Ext.isEmpty(fieldName) || grid.getSelection().length !== 1 || !grid.checkEditor()) {
                        this.hide();
                        return;
                    }
                    if (!FastExt.Base.toBool(menu.cellContext.column.editable, true)) {
                        this.hide();
                        return;
                    }
                    if (!menu.cellContext.column.field) {
                        if (!menu.cellContext.column.hasListener("dblclick")) {
                            this.hide();
                        }
                    }
                    this.show();
                    if (!FastExt.Grid.isContentColumn(menu.cellContext.column)) {
                        if (!Ext.isEmpty(record.get(fieldName)) && $(menu.cellTd).text().length > 0) {
                            this.setText("编辑" + formatText($(menu.cellTd).text(), $(menu.cellTd).outerWidth(true)));
                            return;
                        }
                    }
                    this.setText("编辑单元格数据");
                },
                handler: function () {
                    var menu = this.ownerCt;
                    if (menu.cellContext.column.field) {
                        grid.doEdit = true;
                        grid.findPlugin('cellediting').startEditByPosition(menu.cellContext);
                    }
                    else {
                        menu.cellContext.column.fireEvent("dblclick", grid, this, menu.rowIndex);
                    }
                }
            }, index++);
            if (grid.getStore().entity) {
                FastExt.Grid.addGridContextMenu(grid, {
                    iconCls: 'extIcon extLink',
                    text: "单元格搜索链",
                    onBeforeShow: function () {
                        this.show();
                        var menu = this.ownerCt;
                        if (!Ext.isObject(menu.cellContext.column.searchLink) || grid.getSelection().length !== 1) {
                            this.hide();
                        }
                        else {
                            var linkMenu = Ext.create('Ext.menu.Menu', {
                                items: []
                            });
                            var record = menu.record;
                            var fieldName = menu.cellContext.column.dataIndex;
                            var columns = menu.cellContext.column.searchLink.columns;
                            for (var i = 0; i < columns.length; i++) {
                                var column = columns[i];
                                var child = {
                                    icon: column.parent.icon,
                                    text: column.parent.text + "【" + column.text + "】",
                                    column: column,
                                    value: record.get(fieldName),
                                    handler: function () {
                                        var where = {};
                                        where[this.column.dataIndex] = this.value;
                                        FastExt.System.showTab(this.column.parent.method, $.md5(this.column.id + this.value), "搜索：" + this.text, this.icon, true, false, where);
                                    }
                                };
                                linkMenu.add(child);
                            }
                            this.setMenu(linkMenu);
                        }
                    },
                    menu: []
                }, index++);
                FastExt.Grid.addGridContextMenu(grid, {
                    iconCls: 'extIcon extSearch searchColor',
                    text: "查找单元格数据",
                    onBeforeShow: function () {
                        var menu = this.ownerCt;
                        var record = menu.record;
                        var fieldName = menu.cellContext.column.dataIndex;
                        if (Ext.isEmpty(fieldName)
                            || !FastExt.Grid.canColumnSearch(menu.cellContext.column)
                            || FastExt.Grid.isContentColumn(menu.cellContext.column)
                            || grid.getSelection().length !== 1) {
                            this.hide();
                        }
                        else {
                            this.show();
                            if (!Ext.isEmpty(record.get(fieldName))) {
                                this.setText("查找" + formatText($(menu.cellTd).text(), $(menu.cellTd).outerWidth(true)));
                            }
                            else {
                                this.setText("查找单元格数据");
                            }
                        }
                    },
                    handler: function () {
                        var menu = this.ownerCt;
                        var record = menu.record;
                        var fieldName = menu.cellContext.column.dataIndex;
                        menu.cellContext.column.searchValue(record.get(fieldName));
                    }
                }, index++);
                FastExt.Grid.addGridContextMenu(grid, {
                    iconCls: 'extIcon extClear',
                    text: "清空单元格数据",
                    onBeforeShow: function () {
                        var menu = this.ownerCt;
                        var record = menu.record;
                        var fieldName = menu.cellContext.column.dataIndex;
                        if (Ext.isEmpty(fieldName) || grid.getSelection().length !== 1 || !grid.checkEditor()) {
                            this.hide();
                        }
                        else {
                            this.show();
                            if (!FastExt.Grid.isContentColumn(menu.cellContext.column)) {
                                if (!Ext.isEmpty(record.get(fieldName)) && $(menu.cellTd).text().length > 0) {
                                    this.setText("清空" + formatText($(menu.cellTd).text(), $(menu.cellTd).outerWidth(true)));
                                    return;
                                }
                            }
                            this.setText("清空单元格数据");
                        }
                    },
                    handler: function () {
                        var me = this;
                        var menu = me.ownerCt;
                        if (!grid.getStore().entity) {
                            FastExt.Dialog.toast("当前列表不支持此功能！");
                            return;
                        }
                        if (!grid.getStore().entity.idProperty) {
                            FastExt.Dialog.toast("当前列表不支持此功能！");
                            return;
                        }
                        Ext.Msg.confirm("系统提醒", "您确定" + me.text + "吗？", function (button, text) {
                            if (button === "yes") {
                                var record = menu.record;
                                var fieldName = menu.cellContext.column.dataIndex;
                                if (Ext.isObject(menu.cellContext.column.field)) {
                                    if (!Ext.isEmpty(menu.cellContext.column.field.name)) {
                                        fieldName = menu.cellContext.column.field.name;
                                    }
                                }
                                var params = { "entityCode": grid.getStore().entity.entityCode };
                                for (var j = 0; j < grid.getStore().entity.idProperty.length; j++) {
                                    var idName = grid.getStore().entity.idProperty[j];
                                    params['data.' + idName] = record.get(idName);
                                }
                                if (grid.getStore().entity.menu) {
                                    params["menu"] = FastExt.Store.getStoreMenuText(grid.getStore());
                                }
                                params['data.' + fieldName] = "<null>";
                                FastExt.Dialog.showWait("正在清空中……");
                                FastExt.Server.updateEntity(params, function (success, message) {
                                    FastExt.Dialog.hideWait();
                                    if (success) {
                                        FastExt.Dialog.toast("清除成功！");
                                        grid.getStore().reload();
                                    }
                                    else {
                                        Ext.Msg.alert('系统提醒', message);
                                    }
                                });
                            }
                        });
                    }
                }, index++);
            }
            FastExt.Grid.addGridContextMenu(grid, "-", index++);
        };
        Grid.configGridHeadMenu = function (grid) {
            if (!FastExt.Base.toBool(grid.columnContextMenu, true)) {
                return;
            }
            if (!grid.columnHeadMenu) {
                return;
            }
            if (!grid.columnMenu) {
                grid.columnMenu = new FastExt.GridColumnMenu();
            }
            if (!grid.columnMenu) {
                return;
            }
            var menu = grid.columnHeadMenu;
            menu.scrollToHidden = true;
            menu.on("beforeshow", FastExt.GridEvent.onFastHeadMenuBeforeShow, grid);
        };
        Grid.configDefaultToolBar = function (grid) {
            if (!grid) {
                return;
            }
            var toolbar = grid.down("toolbar[dock='top']");
            try {
                if (toolbar) {
                    if (!FastExt.Power.isPower()) {
                        var addIndex = 0;
                        if (grid.getStore().entity) {
                            if (FastExt.Base.toBool(grid.showDetailsButton, true)
                                && FastExt.Base.toBool(grid.operate.showDetailsButton, true)) {
                                toolbar.insert(addIndex++, {
                                    xtype: 'button',
                                    text: '查看详情',
                                    checkSelect: 1,
                                    contextMenu: false,
                                    iconCls: 'extIcon extDetails searchColor',
                                    handler: function () {
                                        FastExt.Grid.showGridSelectDetailsWindow(this, grid);
                                    }
                                });
                            }
                            if (FastExt.Base.toBool(grid.showUpdateButton, true)
                                && FastExt.Base.toBool(grid.operate.showUpdateButton, true)) {
                                toolbar.insert(addIndex++, {
                                    xtype: 'button',
                                    text: '修改数据',
                                    checkSelect: 1,
                                    checkUpdatePower: true,
                                    contextMenu: false,
                                    iconCls: 'extIcon extEdit editColor',
                                    handler: function () {
                                        FastExt.Grid.showDataEditorWin(this, grid);
                                    }
                                });
                            }
                            if (addIndex > 0) {
                                toolbar.insert(addIndex, "-");
                            }
                        }
                    }
                    if (FastExt.Base.toBool(grid.fromRecycle, false)) {
                        toolbar.setHidden(true);
                        return;
                    }
                    if (!grid.operate) {
                        return;
                    }
                    if (!FastExt.Base.toBool(grid.defaultToolBar, true)) {
                        return;
                    }
                    var moreBtn = {
                        xtype: 'button',
                        text: '更多操作',
                        iconCls: 'extIcon extMore grayColor',
                        menu: []
                    };
                    if (FastExt.Base.toBool(grid.operate.globalSearch, true) && grid.getStore().entity
                        && FastExt.System.isSuperRole()) {
                        moreBtn.menu.push({
                            iconCls: 'extIcon extSearch searchColor',
                            text: '全列搜索',
                            handler: function () {
                                FastExt.System.showGlobalSearch(this, [grid.getStore().entity.entityCode], grid.ownerCt);
                            }
                        });
                    }
                    if (FastExt.Base.toBool(grid.operate.excelOut, true)) {
                        if (!FastExt.Menu.isSplitLineLast(moreBtn.menu)) {
                            moreBtn.menu.push("-");
                        }
                        moreBtn.menu.push({
                            text: '导出Excel',
                            iconCls: 'extIcon extExcel',
                            handler: function () {
                                FastExt.Grid.exportGrid(grid);
                            }
                        });
                    }
                    if (FastExt.Base.toBool(grid.operate.excelIn, true) && grid.checkAdd()) {
                        moreBtn.menu.push({
                            text: '导入Excel',
                            iconCls: 'extIcon extExcel',
                            menu: [
                                {
                                    text: '下载模板',
                                    iconCls: 'extIcon extExcelModule searchColor',
                                    handler: function () {
                                        FastExt.Grid.downExcelModel(grid);
                                    }
                                },
                                {
                                    text: '导入数据',
                                    iconCls: 'extIcon extExcelImport searchColor',
                                    handler: function () {
                                        var params = { entityCode: grid.getStore().entity.entityCode };
                                        FastExt.Grid.importExcel(this, params, grid.importExcelItems).then(function (data) {
                                            if (data) {
                                                grid.getStore().loadPage(1);
                                            }
                                        });
                                    }
                                }
                            ]
                        });
                        moreBtn.menu.push("-");
                    }
                    if (FastExt.System.isSuperRole()) {
                        if (!FastExt.Menu.isSplitLineLast(moreBtn.menu)) {
                            moreBtn.menu.push("-");
                        }
                        if (FastExt.Base.toBool(grid.operate.downloadData, true)) {
                            moreBtn.menu.push({
                                iconCls: 'extIcon extDownload searchColor',
                                text: '下载数据',
                                handler: function () {
                                    FastExt.Grid.downDataGrid(grid);
                                }
                            });
                        }
                        if (FastExt.Base.toBool(grid.operate.uploadData, true)) {
                            moreBtn.menu.push({
                                iconCls: 'extIcon extUpload searchColor',
                                text: '上传数据',
                                handler: function () {
                                    var params = { entityCode: grid.getStore().entity.entityCode };
                                    FastExt.Grid.loadDataGrid(this, params).then(function (data) {
                                        if (data) {
                                            grid.getStore().loadPage(1);
                                        }
                                    });
                                }
                            });
                        }
                        moreBtn.menu.push("-");
                        if (grid.getStore().entity) {
                            moreBtn.menu.push({
                                iconCls: 'extIcon extSee searchColor',
                                text: '查看实体',
                                handler: function () {
                                    FastExt.Dialog.showJson(this, "查看实体信息", JSON.stringify(Object.getPrototypeOf(grid.getStore().entity)));
                                }
                            });
                        }
                        if (grid.getStore().entity) {
                            moreBtn.menu.push({
                                iconCls: 'extIcon extColumn searchColor',
                                text: '查看列信息',
                                handler: function () {
                                    if (!grid) {
                                        FastExt.Dialog.toast("容器无效！");
                                        return;
                                    }
                                    var columns = grid.getColumns();
                                    var colObjects = [];
                                    for (var i = 0; i < columns.length; i++) {
                                        var column = columns[i];
                                        if (Ext.isEmpty(column.dataIndex)) {
                                            continue;
                                        }
                                        colObjects.push({
                                            name: column.dataIndex,
                                            text: $("<div>" + column.configText + "</div>").text(),
                                        });
                                    }
                                    FastExt.Dialog.showJson(this, "查看列信息", JSON.stringify(colObjects));
                                }
                            });
                        }
                        moreBtn.menu.push("-");
                        if (grid.getStore().entity && FastExt.Base.toBool(grid.getStore().entity.layer, false)) {
                            moreBtn.menu.push({
                                iconCls: 'extIcon extPower redColor',
                                text: '更新权限值',
                                handler: function () {
                                    Ext.Msg.confirm("系统提醒", "确定更新表格的数据权限值吗？确定后将同时更新与当前表格有关联的所有表格的权限值！如果数据库数据量达到千万级别时，更新时间会较长，请谨慎操作！", function (button, text) {
                                        if (button == "yes") {
                                            var params_2 = { entityCode: grid.getStore().entity.entityCode };
                                            FastExt.System.validOperate("更新表格的数据权限层级值", function () {
                                                FastExt.Dialog.showWait("正在更新中，请稍后……");
                                                FastExt.Server.updateLayer(params_2, function (success, message) {
                                                    FastExt.Dialog.hideWait();
                                                    FastExt.Dialog.showAlert("系统提醒", message);
                                                });
                                            }, 30);
                                        }
                                    });
                                }
                            });
                        }
                        if (grid.getStore().entity) {
                            moreBtn.menu.push({
                                iconCls: 'extIcon extCopy2 redColor',
                                text: '更新同列值',
                                handler: function () {
                                    Ext.Msg.confirm("系统提醒", "确定更新表格的数据绑定值吗？确定后将同时更新与当前表格有关联的所有表格的相同列的值！请您谨慎操作！", function (button, text) {
                                        if (button == "yes") {
                                            var params_3 = { entityCode: grid.getStore().entity.entityCode };
                                            FastExt.System.validOperate("更新表格的相同列的值", function () {
                                                FastExt.Dialog.showWait("正在更新中，请稍后……");
                                                FastExt.Server.updateSame(params_3, function (success, message) {
                                                    FastExt.Dialog.hideWait();
                                                    FastExt.Dialog.showAlert("系统提醒", message);
                                                });
                                            }, 30);
                                        }
                                    });
                                }
                            });
                        }
                        moreBtn.menu.push("-");
                    }
                    if (!FastExt.Menu.isSplitLineLast(moreBtn.menu)) {
                        moreBtn.menu.push("-");
                    }
                    moreBtn.menu.push({
                        iconCls: 'extIcon extSet',
                        text: '操作设置',
                        handler: function () {
                            FastExt.Grid.setGrid(this, grid);
                        }
                    });
                    var linkBtns = {
                        xtype: 'button',
                        text: '相关查询',
                        checkSelect: 1,
                        iconCls: 'extIcon extIntersect grayColor',
                        menu: []
                    };
                    if (grid.linkMenu) {
                        linkBtns.menu = grid.linkMenu;
                    }
                    if (grid.getStore() && grid.getStore().entity && grid.getStore().entity.linkTables) {
                        var findButtons = grid.query("button[entityCode]");
                        var _loop_2 = function (i) {
                            var linkTable = grid.getStore().entity.linkTables[i];
                            if (linkTable.linkColumns) {
                                var breakThis = false;
                                for (var _i = 0, findButtons_1 = findButtons; _i < findButtons_1.length; _i++) {
                                    var entityCodeButton = findButtons_1[_i];
                                    if (entityCodeButton.entityCode === linkTable.entityCode) {
                                        breakThis = true;
                                        break;
                                    }
                                }
                                if (breakThis) {
                                    return "continue";
                                }
                                var linkBtn = {
                                    text: linkTable.comment
                                };
                                if (linkTable.menu) {
                                    linkBtn["icon"] = FastExt.Server.getIcon(linkTable.menu.iconName, linkTable.menu.color);
                                    if (!FastExt.System.existMenu(linkTable.menu.id)) {
                                        return "continue";
                                    }
                                }
                                else {
                                    linkBtn["iconCls"] = "extIcon extSearch searchColor";
                                    if (!FastExt.System.isSuperRole()) {
                                        return "continue";
                                    }
                                }
                                if (linkTable.linkColumns.length == 1) {
                                    var linkColumn_1 = linkTable.linkColumns[0];
                                    linkBtn["text"] = FastExt.Base.toString(linkColumn_1["link_menu_text"], linkTable.comment);
                                    linkBtn["handler"] = function () {
                                        var where = {};
                                        where['t.' + linkColumn_1.name] = grid.getSelection()[0].get(linkColumn_1.linkKey);
                                        where['^' + linkColumn_1.linkText[0]] = grid.getSelection()[0].get(linkColumn_1.linkText[0]);
                                        var entityJsObj = eval("new " + linkTable.entityCode + "()");
                                        entityJsObj.showWinList(this, linkTable.comment + "【" + linkColumn_1.comment + "】", where, true);
                                    };
                                    if (FastExt.Base.toBool(linkColumn_1["to_link_menu"], true)) {
                                        linkBtns.menu.push(linkBtn);
                                    }
                                }
                                else if (linkTable.linkColumns.length > 1) {
                                    linkBtn["menu"] = [];
                                    var _loop_3 = function (j) {
                                        var linkColumn = linkTable.linkColumns[j];
                                        var linkChildBtn = {
                                            icon: FastExt.Server.getIcon("icon_column.svg"),
                                            text: FastExt.Base.toString(linkColumn["link_menu_text"], "匹配" + linkColumn.comment),
                                            handler: function () {
                                                var where = {};
                                                where['t.' + linkColumn.name] = grid.getSelection()[0].get(linkColumn.linkKey);
                                                where['^' + linkColumn.linkText[0]] = grid.getSelection()[0].get(linkColumn.linkText[0]);
                                                var entityJsObj = eval("new " + linkTable.entityCode + "()");
                                                entityJsObj.showWinList(this, linkTable.comment + "【" + linkColumn.comment + "】", where, true);
                                            }
                                        };
                                        if (FastExt.Base.toBool(linkColumn["to_link_menu"], true)) {
                                            linkBtn.menu.push(linkChildBtn);
                                        }
                                    };
                                    for (var j = 0; j < linkTable.linkColumns.length; j++) {
                                        _loop_3(j);
                                    }
                                    if (linkBtn.menu.length > 0) {
                                        if (linkBtn.menu.length === 1) {
                                            linkBtn = linkBtn.menu[0];
                                        }
                                        linkBtns.menu.push(linkBtn);
                                    }
                                }
                            }
                        };
                        for (var i = 0; i < grid.getStore().entity.linkTables.length; i++) {
                            _loop_2(i);
                        }
                    }
                    toolbar.add("->");
                    if (FastExt.System.gridDefaultLinkButton && FastExt.System.isSuperRole()) {
                        if (FastExt.Base.toBool(grid.defaultToolBarLink, true)) {
                            if (linkBtns.menu.length > 0) {
                                toolbar.add(linkBtns);
                            }
                        }
                    }
                    if (FastExt.Base.toBool(grid.defaultToolBarMore, true)) {
                        toolbar.add(moreBtn);
                    }
                }
            }
            finally {
                if (toolbar && toolbar.items.length === 0) {
                    toolbar.setHidden(true);
                }
            }
        };
        Grid.configGridTip = function (grid) {
            if (!grid) {
                return;
            }
            var view = FastExt.Grid.getGridView(grid);
            if (!view) {
                return;
            }
            grid.tip = new Ext.ToolTip({
                target: view.el,
                delegate: '.x-grid-cell-inner',
                trackMouse: true,
                renderTo: Ext.getBody(),
                listeners: {
                    beforeshow: function (tip) {
                        if (grid.operate && !grid.operate.hoverTip) {
                            return false;
                        }
                        var innerHTML = $(tip.triggerElement).text();
                        if (Ext.isEmpty(innerHTML) || innerHTML === "无" || innerHTML === "&nbsp;" || innerHTML === " " || innerHTML === " ") {
                            return false;
                        }
                        var tipHtml = innerHTML;
                        var detailsIdEl = $(tip.triggerElement).find("[data-details-id]");
                        if (detailsIdEl.length > 0) {
                            var detailsInfo = window[$(detailsIdEl).attr("data-details-id")];
                            if (detailsInfo) {
                                tip.update(detailsInfo);
                                return true;
                            }
                        }
                        tip.update(tipHtml);
                    }
                }
            });
        };
        Grid.configGridMethod = function (grid) {
            if (!grid || grid.configGridMethod) {
                return;
            }
            grid.configGridMethod = true;
            grid.refreshPowerEnable = FastExt.GridMethod.doRefreshPowerEnable;
            grid.refreshSelect = FastExt.GridMethod.doRefreshSelect;
            grid.recordSelect = FastExt.GridMethod.doRecordSelect;
            grid.hasRecordHistory = FastExt.GridMethod.doHasRecordHistory;
            grid.removeRecordHistory = FastExt.GridMethod.doRemoveRecordHistory;
            grid.restoreSelect = FastExt.GridMethod.doRestoreSelect;
            grid.getSelectRecordHistory = FastExt.GridMethod.doGetSelectRecordHistory;
            grid.clearSelectRecordHistory = FastExt.GridMethod.doClearSelectRecordHistory;
            grid.refreshSelectHistoryCount = FastExt.GridMethod.doRefreshSelectHistoryCount;
            grid.refreshDetailsPanel = FastExt.GridMethod.doRefreshDetailsPanel;
            grid.saveUIConfig = FastExt.GridMethod.doSaveUIConfig;
            grid.showEmptyTip = FastExt.GridMethod.doShowEmptyTip;
            grid.hideEmptyTip = FastExt.GridMethod.doHideEmptyTip;
            grid.checkEditor = FastExt.GridMethod.doCheckEditor;
            grid.checkAdd = FastExt.GridMethod.doCheckAdd;
            grid.checkDelete = FastExt.GridMethod.doCheckDelete;
            grid.checkRefreshTimer = FastExt.GridMethod.doCheckRefreshTimer;
            grid.startRefreshTimer = FastExt.GridMethod.doStartRefreshTimer;
            grid.stopRefreshTimer = FastExt.GridMethod.doStopRefreshTimer;
        };
        Grid.configGridListeners = function (grid) {
            if (!grid || grid.configListener) {
                return;
            }
            grid.configListener = true;
            grid.on('aftertabactive', FastExt.GridEvent.onFastAfterTabActive, grid);
            grid.on('viewready', FastExt.GridEvent.onFastViewRead, grid);
            grid.on('beforedestroy', FastExt.GridEvent.onFastBeforeDestroy, grid);
            grid.on('columnmove', FastExt.GridEvent.onFastColumnMove, grid);
            grid.on('columnresize', FastExt.GridEvent.onFastColumnResize, grid);
            grid.on('columnschanged', FastExt.GridEvent.onFastColumnsChanged, grid);
            grid.on('headertriggerclick', FastExt.GridEvent.onFastHeaderTriggerClick, grid);
            grid.on('headercontextmenu', FastExt.GridEvent.onFastHeaderContextMenu, grid);
            grid.on('headermenucreate', FastExt.GridEvent.onFastHeaderMenuCreate, grid);
            grid.on('headerclick', FastExt.GridEvent.onFastHeaderClick, grid);
            grid.on('sortchange', FastExt.GridEvent.onFastSortChange, grid);
            grid.on('cellcontextmenu', FastExt.GridEvent.onFastCellContextMenu, grid);
            grid.getStore().on('endupdate', FastExt.GridEvent.onFastStoreEndUpdate, grid);
            grid.on("celldblclick", FastExt.GridEvent.onFastCellDblclick, grid);
            grid.on('beforeedit', FastExt.GridEvent.onFastBeforeEdit, grid);
            grid.on('selectionchange', FastExt.GridEvent.onFastSelectionChange, grid);
            grid.getStore().on('datachanged', FastExt.GridEvent.onFastStoreDataChanged, grid);
            grid.getStore().on('load', FastExt.GridEvent.onFastStoreLoad, grid);
        };
        Grid.configNormalGridListeners = function (grid) {
            if (!grid || grid.configNormalGridListeners) {
                return;
            }
            grid.configNormalGridListeners = true;
            grid.getStore().on('datachanged', FastExt.GridEvent.onFastStoreDataChanged, grid);
            grid.getStore().on('beforeload', FastExt.GridEvent.onFastStoreBeforeLoad, grid);
        };
        Grid.configGridLayout = function (grid) {
            return new Ext.Promise(function (resolve, reject) {
                if (!grid) {
                    resolve(true);
                    return;
                }
                if (!FastExt.System.silenceGlobalSave) {
                    FastExt.Grid.getGridView(grid).setLoading("初始化配置中……");
                }
                FastExt.Grid.restoreGridOperate(grid).then(function () {
                    FastExt.Grid.restoreGridColumn(grid).then(function () {
                        FastExt.Grid.getGridView(grid).setLoading(false);
                        resolve(true);
                    });
                });
            });
        };
        Grid.getGridInWindowSize = function (grid) {
            var winWidth = parseInt((grid.getWidth() * 0.4).toFixed(0));
            var winHeight = parseInt((grid.getHeight() * 0.4).toFixed(0));
            return {
                width: winWidth,
                height: winHeight
            };
        };
        Grid.showGridSelectDetailsWindow = function (obj, grid) {
            var subtitle = "";
            if (grid.getStore().entity && grid.getStore().entity.menu) {
                subtitle = "【" + grid.getStore().entity.menu.text + "】";
            }
            var winWidth = parseInt((document.body.clientWidth * 0.4).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                title: "查看详情" + subtitle,
                subtitle: subtitle,
                height: winHeight,
                width: winWidth,
                minHeight: 450,
                minWidth: 400,
                iconCls: 'extIcon extDetails',
                layout: 'border',
                resizable: true,
                collapsible: true,
                constrain: true,
                maximizable: true,
                animateTarget: obj,
                record: grid.getSelectionModel().getSelection()[0],
                tools: [
                    {
                        type: 'help',
                        callback: function (panel, tool, event) {
                            FastExt.Dialog.showJson(this, "查看原始数据结构", FastExt.Json.objectToJson(panel.record.data));
                        }
                    }
                ],
                listeners: {
                    show: function (obj) {
                        obj.focus();
                    }
                },
                items: [FastExt.Grid.getDetailsPanel(grid, true)]
            });
            win.show();
        };
        Grid.getDetailsPanel = function (grid, fromWindow) {
            var subtitle = "";
            if (grid.getStore().entity.menu) {
                subtitle = grid.getStore().entity.menu.text;
            }
            if (!grid.detailsPanels) {
                grid.detailsPanels = [];
            }
            var detailsConfig = {
                subtitle: subtitle,
                layout: 'border',
                border: 0,
                autoScroll: false,
                scrollable: false,
                closeAction: 'hide',
                dataId: -1,
                currIsClosed: false,
                closeTimer: null,
                detailsPanel: true,
                isWindow: fromWindow,
                setRecord: function (grid) {
                    try {
                        var me_1 = this;
                        if (!me_1.items) {
                            return false;
                        }
                        if (me_1.closeTimer) {
                            window.clearTimeout(me_1.closeTimer);
                        }
                        if (grid != null) {
                            var data = grid.getSelectionModel().getSelection();
                            if (data.length === 1) {
                                if (me_1.isWindow && me_1.record) {
                                    if (!FastExt.Store.isSameRecord(me_1.record, data[0])) {
                                        return false;
                                    }
                                }
                                me_1.record = data[0];
                                me_1.items.get(0).setRecord(grid, data[0]);
                                me_1.show();
                            }
                            else {
                                if (me_1.isVisible() && !this.isWindow) {
                                    me_1.closeTimer = setTimeout(function () {
                                        me_1.close();
                                    }, 88);
                                }
                            }
                        }
                        else {
                            me_1.close();
                        }
                    }
                    catch (e) {
                        FastExt.Dialog.showException(e);
                    }
                    return true;
                },
                listeners: {
                    afterrender: function () {
                        if (this.isWindow) {
                            this.setRecord(grid);
                        }
                    },
                    collapse: function (p, eOpts) {
                        this.down("#close").hide();
                    },
                    beforeexpand: function (p, eOpts) {
                        this.down("#close").show();
                    },
                    destroy: function (obj) {
                        grid.detailsPanels = Ext.Array.remove(grid.detailsPanels, obj);
                    },
                },
                items: [FastExt.Grid.builderDetailsGrid(fromWindow)]
            };
            if (fromWindow) {
                detailsConfig.region = "center";
            }
            else {
                detailsConfig.title = '数据详情';
                detailsConfig.iconCls = 'extIcon extDetails';
                detailsConfig.collapsed = true;
                detailsConfig.split = true;
                detailsConfig.hidden = true;
                detailsConfig.region = "east";
                detailsConfig.maxWidth = parseInt((document.body.clientWidth / 2).toFixed(0));
                detailsConfig.width = parseInt((document.body.clientWidth * 0.3).toFixed(0));
                detailsConfig.minWidth = 200;
                detailsConfig.tools = [
                    {
                        type: 'gear',
                        callback: function () {
                            FastExt.Grid.setGrid(this, grid);
                        }
                    }, {
                        type: 'close',
                        itemId: 'close',
                        callback: function () {
                            detailsPanel.collapse();
                        }
                    }
                ];
            }
            var detailsPanel = Ext.create('Ext.panel.Panel', detailsConfig);
            detailsPanel.fromWindow = fromWindow;
            grid.detailsPanels.push(detailsPanel);
            return detailsPanel;
        };
        Grid.builderDetailsGrid = function (fromWindow) {
            if (Ext.isEmpty(fromWindow)) {
                fromWindow = false;
            }
            return Ext.create('Ext.grid.Panel', {
                border: 0,
                scrollable: 'y',
                region: 'center',
                store: Ext.create('Ext.data.Store', {
                    groupField: 'groupHeaderText',
                    autoLoad: false,
                    fields: []
                }),
                hideHeaders: true,
                deferRowRender: false,
                superGrid: null,
                features: [{
                        ftype: 'grouping',
                        collapsible: false,
                        hideGroupedHeader: true,
                        expandTip: null,
                        collapseTip: null,
                        groupHeaderTpl: [
                            '<b>{name:this.formatName}</b>', {
                                formatName: function (name) {
                                    if (name.toString().startsWith("BASE")) {
                                        return "基本属性";
                                    }
                                    return name;
                                }
                            }
                        ]
                    }],
                setRecord: function (grid, record) {
                    try {
                        if (!grid) {
                            return;
                        }
                        if (!record) {
                            return;
                        }
                        this.recordId = record.getId();
                        this.superGrid = grid;
                        record.store = grid.getStore();
                        var columns = grid.getColumns();
                        var data = [];
                        var lastGroupNon = "BASE-" + new Date().getTime();
                        for (var i = 0; i < columns.length; i++) {
                            var column = columns[i];
                            if (Ext.isEmpty(column.dataIndex)) {
                                continue;
                            }
                            if (!FastExt.Base.toBool(column.hideable, true)) {
                                if (!FastExt.Grid.isTreeColumn(column)) {
                                    continue;
                                }
                            }
                            var item = {
                                text: column.configText,
                                value: record.get(column.dataIndex),
                                dataIndex: column.dataIndex,
                                columnName: column.columnName,
                                groupHeaderText: column.groupHeaderText,
                                renderer: column.renderer,
                                index: column.getIndex(),
                                record: record,
                                linkColumn: column,
                                entity: grid.getStore().entity,
                                configEditor: FastExt.Base.toBool(column.editable, true),
                                editor: false
                            };
                            if (Ext.isEmpty(column.field)) {
                                item.configEditor = false;
                            }
                            if (!grid.checkEditor()) {
                                item.configEditor = false;
                            }
                            if (!item.groupHeaderText) {
                                item.groupHeaderText = lastGroupNon;
                            }
                            else {
                                lastGroupNon = "BASE-" + i + "-" + new Date().getTime();
                            }
                            data.push(item);
                        }
                        data.sort(function (a, b) {
                            return a.index - b.index;
                        });
                        this.getStore().loadData(data);
                    }
                    catch (e) {
                    }
                },
                columns: [
                    {
                        header: '名称',
                        dataIndex: 'text',
                        align: 'right',
                        flex: 0.3,
                        tdCls: 'tdVTop',
                        renderer: function (val, m, r) {
                            if (Ext.isEmpty(val)) {
                                return "";
                            }
                            m.style = 'color:#000000;overflow:auto;padding: 3px 6px;text-overflow: ellipsis;white-space:normal !important;word-break:break-word;line-height: 30px; ';
                            return "<b>" + val + "：</b>";
                        }
                    },
                    {
                        header: '值',
                        dataIndex: 'value',
                        flex: 0.7,
                        align: 'left',
                        renderer: function (val, m, r, rowIndex, colIndex, store, view) {
                            try {
                                m.style = 'overflow:auto;padding: 3px 6px;text-overflow: ellipsis;white-space:normal !important;word-break:break-word;line-height: 30px;';
                                var fun = r.get("renderer");
                                if (Ext.isFunction(fun)) {
                                    var value = fun(val, m, r.get("record"), rowIndex, colIndex, store, view, true);
                                    if (Ext.isEmpty(value)) {
                                        return "<font color='#ccc'>无</font>";
                                    }
                                    return value;
                                }
                                return val;
                            }
                            catch (e) {
                                return val;
                            }
                        }
                    },
                    {
                        xtype: 'actioncolumn',
                        width: 80,
                        sortable: false,
                        menuDisabled: true,
                        items: [
                            {
                                iconCls: 'extIcon extEdit editColor marginRight5 textBlackShadowWhite',
                                tooltip: '编辑数据',
                                align: 'center',
                                isDisabled: function (view, rowIndex, colIndex, item, record) {
                                    return !FastExt.Base.toBool(record.get("editor"), false);
                                },
                                getClass: function (v, metadata, record) {
                                    if (FastExt.Base.toBool(record.get("editor"), false)) {
                                        return "extIcon extEdit editColor marginRight5 textBlackShadowWhite";
                                    }
                                    return "";
                                },
                                handler: FastExt.Grid.showDetailsEditMenu
                            },
                            {
                                iconCls: 'extIcon extCopy2 searchColor textBlackShadowWhite',
                                tooltip: '复制数据',
                                align: 'center',
                                isDisabled: function (view, rowIndex, colIndex, item, record) {
                                    return !FastExt.Base.toBool(record.get("doCopy"), false);
                                },
                                getClass: function (v, metadata, record) {
                                    if (FastExt.Base.toBool(record.get("doCopy"), false)) {
                                        return "extIcon extCopy2 searchColor textBlackShadowWhite";
                                    }
                                    return "";
                                },
                                handler: FastExt.Grid.copyDetailsValue
                            }
                        ]
                    }
                ],
                tbar: {
                    flex: 1,
                    emptyText: '查找属性（轻敲回车键）',
                    margin: '5',
                    xtype: 'textfield',
                    doSearch: function () {
                        var grid = this.ownerCt;
                        var store = grid.getStore();
                        var currIndex = 0;
                        var dataIndex = store.getAt(0).get("dataIndex");
                        var text = null;
                        var searchKey = this.getValue();
                        var currRecord = null;
                        if (!Ext.isEmpty(searchKey)) {
                            store.each(function (record, index) {
                                var fieldName = record.get("text").toString();
                                var fieldValue = record.get("value");
                                if (fieldName.indexOf(searchKey) >= 0) {
                                    currIndex = index;
                                    dataIndex = record.get("dataIndex");
                                    text = fieldName;
                                    currRecord = record;
                                    return;
                                }
                                if (!Ext.isEmpty(fieldValue) && fieldValue.toString().indexOf(searchKey) >= 0) {
                                    currIndex = index;
                                    dataIndex = record.get("dataIndex");
                                    text = fieldName;
                                    currRecord = record;
                                    return false;
                                }
                            });
                        }
                        FastExt.Grid.scrollToColumn(grid.superGrid, dataIndex, text);
                        grid.getSelectionModel().select(currIndex);
                        FastExt.Grid.getGridView(grid).focusRow(currIndex);
                    },
                    triggers: {
                        search: {
                            cls: 'text-search',
                            handler: function () {
                                this.doSearch();
                            }
                        }
                    },
                    listeners: {
                        render: function (obj, eOpts) {
                            try {
                                new Ext.util.KeyMap({
                                    target: obj.getEl(),
                                    key: 13,
                                    fn: function (keyCode, e) {
                                        this.doSearch();
                                    },
                                    scope: this
                                });
                            }
                            catch (e) {
                                console.error(e);
                            }
                        }
                    }
                },
                bbar: {
                    xtype: 'label',
                    style: {
                        background: "#ffffff"
                    },
                    text: '小技巧：双击属性可快速定位左侧表格对应的列！',
                    padding: '10'
                },
                viewConfig: {
                    enableTextSelection: true
                },
                toggleActionColumn: function (record) {
                    if (this.lasClickRecord) {
                        if (this.lasClickRecord.getId() === record.getId()) {
                            return;
                        }
                        this.lasClickRecord.set("editor", false);
                        this.lasClickRecord.set("doCopy", false);
                    }
                    record.set("doCopy", true);
                    record.set("editor", record.get("configEditor"));
                    this.lasClickRecord = record;
                },
                listeners: {
                    itemclick: function (obj, record, item, index, e, eOpts) {
                        this.toggleActionColumn(record);
                    },
                    select: function (obj, record) {
                        this.toggleActionColumn(record);
                    },
                    itemdblclick: function () {
                        try {
                            var data = this.getSelectionModel().getSelection();
                            if (data.length == 0) {
                                return;
                            }
                            FastExt.Grid.scrollToColumn(this.superGrid, data[0].get("dataIndex"), data[0].get("text"));
                        }
                        catch (e) {
                            FastExt.Dialog.showException(e, "details:itemdblclick");
                        }
                    }
                }
            });
        };
        Grid.hasSearchColumn = function (grid) {
            var search = false;
            if (!grid) {
                return false;
            }
            Ext.each(grid.getColumns(), function (item, index) {
                if (!Ext.isEmpty(item.dataIndex)) {
                    if (item.where && item.where.length > 0) {
                        search = true;
                        return false;
                    }
                }
            });
            return search;
        };
        Grid.getColumn = function (grid, dataIndex, text) {
            if (!grid) {
                return null;
            }
            var columns = grid.getColumns();
            for (var i = 0; i < columns.length; i++) {
                var column = columns[i];
                if (column.dataIndex === dataIndex) {
                    if (text && (column.text === text || column.configText === text)) {
                        return column;
                    }
                    return column;
                }
            }
            return null;
        };
        Grid.checkColumnSearch = function (grid) {
            try {
                if (!grid) {
                    return false;
                }
                var hasSearch_1 = false;
                Ext.each(grid.getColumns(), function (item) {
                    if (item.where) {
                        if (item.where.length > 0) {
                            hasSearch_1 = true;
                            return false;
                        }
                    }
                });
                var pagingToolBar = grid.child('#pagingToolBar');
                if (pagingToolBar) {
                    var searchBtn = pagingToolBar.down("button[toolType=searchBtn]");
                    if (searchBtn) {
                        if (hasSearch_1) {
                            searchBtn.setIconCls("extIcon extSearch redColor");
                            searchBtn.setUserCls("redBorder");
                        }
                        else {
                            searchBtn.setIconCls("extIcon extSearch grayColor");
                            searchBtn.setUserCls("");
                        }
                    }
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        Grid.hasColumnField = function (column) {
            try {
                if (Ext.isObject(column.field)) {
                    return true;
                }
                if (!Ext.isEmpty(column.field)) {
                    return true;
                }
                return false;
            }
            catch (e) {
                console.error(e);
            }
            return false;
        };
        Grid.isColumnType = function (target) {
            return target === "gridcolumn" || target.xtype === "gridcolumn";
        };
        Grid.isTreeColumn = function (column) {
            if (!column) {
                return false;
            }
            return column.xtype === "treecolumn";
        };
        Grid.isIdPropertyColumn = function (column) {
            var grid = FastExt.Grid.getColumnGrid(column);
            if (grid) {
                var store = grid.getStore();
                if (store && store.entity && store.entity.idProperty) {
                    for (var j = 0; j < store.entity.idProperty.length; j++) {
                        var idName = store.entity.idProperty[j];
                        if (FastExt.Base.toString(column.dataIndex, "") === idName) {
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        Grid.isDateColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isDateField(column.field);
        };
        Grid.isNumberColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isNumberField(column.field);
        };
        Grid.isComboColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isComboField(column.field);
        };
        Grid.isFileColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isFileField(column.field);
        };
        Grid.isContentColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isHtmlContentField(column.field) || FastExt.Form.isContentField(column.field) || FastExt.Form.isMonacoEditorField(column.field);
        };
        Grid.isHtmlContentColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isHtmlContentField(column.field);
        };
        Grid.isFilesColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isFilesField(column.field);
        };
        Grid.isEnumColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isEnumField(column.field);
        };
        Grid.isLinkColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isLinkField(column.field);
        };
        Grid.isMapColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isMapField(column.field);
        };
        Grid.isPCAColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isPCAField(column.field);
        };
        Grid.isTargetColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isTargetField(column.field);
        };
        Grid.getGridSelModel = function (showRowNumber) {
            var rowNumberWidth = 0;
            if (FastExt.System.gridRowNumber) {
                rowNumberWidth = 46;
            }
            if (!Ext.isEmpty(showRowNumber)) {
                if (showRowNumber) {
                    rowNumberWidth = 46;
                }
                else {
                    rowNumberWidth = 0;
                }
            }
            return Ext.create('Ext.grid.selection.SpreadsheetModel', {
                pruneRemoved: false,
                checkboxSelect: true,
                hasLockedHeader: true,
                cellSelect: false,
                rowNumbererHeaderWidth: rowNumberWidth,
                listeners: {
                    focuschange: function (obj, oldFocused, newFocused, eOpts) {
                    }
                }
            });
        };
        Grid.refreshGridNumberColumn = function (grid) {
            if (grid.operate) {
                var selectionModel = grid.getSelectionModel();
                if (selectionModel && selectionModel.numbererColumn) {
                    if (FastExt.Base.toBool(grid.operate.showRowNumber)) {
                        selectionModel.numbererColumn.setWidth(Math.max(selectionModel.numbererColumn.getWidth(), 52));
                    }
                    else {
                        selectionModel.numbererColumn.setWidth(0);
                    }
                }
            }
        };
        Grid.checkConfigGridNumberColumn = function (grid) {
            try {
                if (!grid) {
                    return false;
                }
                var selectionModel = grid.getSelectionModel();
                if (selectionModel && selectionModel.numbererColumn) {
                    return selectionModel.numbererColumn.configWidth > 0;
                }
            }
            catch (e) {
            }
            return false;
        };
        Grid.blinkColumn = function (column) {
            if (column.blinking)
                return;
            column.blinking = true;
            var currColor = column.getEl().getStyle("color");
            var currBGColor = column.getEl().getStyle("background");
            var changeBg = "#e41f00";
            if (currBGColor.indexOf("linear-gradient") > 0) {
                changeBg = "linear-gradient(0deg, #e41f00, #fefefe)";
            }
            column.setStyle({
                color: 'white',
                background: changeBg
            });
            setTimeout(function () {
                column.setStyle({
                    color: currColor,
                    background: currBGColor
                });
                column.blinking = false;
            }, 1000);
        };
        Grid.scrollToColumn = function (grid, dataIndex, text) {
            if (!grid) {
                return;
            }
            var column = FastExt.Grid.getColumn(grid, dataIndex, text);
            FastExt.Grid.blinkColumn(column);
            var x = column.getLocalX();
            if (column.isSubHeader) {
                x += column.ownerCt.getLocalX();
            }
            grid.scrollTo(x, 0, true);
        };
        Grid.setGrid = function (obj, grid) {
            var setPanel = Ext.create('Ext.form.Panel', {
                bodyPadding: 5,
                region: 'center',
                autoScroll: true,
                viewModel: {
                    data: grid.operate
                },
                defaults: {
                    labelWidth: FastExt.Base.getNumberValue(FastExt.System.fontSize) * 6 + 8
                },
                items: [
                    {
                        xtype: 'checkboxfield',
                        fieldLabel: '显示序号',
                        labelAlign: 'right',
                        columnWidth: 1,
                        name: 'showRowNumber',
                        bind: "{showRowNumber}",
                        uncheckedValue: false,
                        boxLabel: '自然序号，在列表中的显示出自然序号！',
                    },
                    {
                        xtype: 'checkboxfield',
                        fieldLabel: '删除提醒',
                        labelAlign: 'right',
                        name: 'alertDelete',
                        columnWidth: 1,
                        bind: "{alertDelete}",
                        uncheckedValue: false,
                        hidden: !grid.deleteEnable,
                        boxLabel: '删除数据时，系统会弹出确认删除框，避免误操作删除！'
                    },
                    {
                        xtype: 'checkboxfield',
                        fieldLabel: '修改提醒',
                        labelAlign: 'right',
                        columnWidth: 1,
                        name: 'alertUpdate',
                        bind: "{alertUpdate}",
                        hidden: !grid.updateEnable,
                        uncheckedValue: false,
                        boxLabel: '修改数据时，系统会弹出确认修改框，避免误操作修改！'
                    },
                    {
                        xtype: 'checkboxfield',
                        fieldLabel: '自动提交',
                        labelAlign: 'right',
                        columnWidth: 1,
                        name: 'autoUpdate',
                        bind: "{autoUpdate}",
                        hidden: !grid.updateEnable,
                        uncheckedValue: false,
                        boxLabel: '双击编辑修改数据后，系统自动提交被修改的数据！'
                    },
                    {
                        xtype: 'checkboxfield',
                        fieldLabel: '弹出详情',
                        labelAlign: 'right',
                        columnWidth: 1,
                        name: 'autoDetails',
                        bind: "{autoDetails}",
                        uncheckedValue: false,
                        boxLabel: '点击数据时，右侧自动弹出此数据的详情窗体！'
                    },
                    {
                        xtype: 'checkboxfield',
                        fieldLabel: '悬浮阅览',
                        labelAlign: 'right',
                        columnWidth: 1,
                        name: 'hoverTip',
                        bind: "{hoverTip}",
                        uncheckedValue: false,
                        boxLabel: '当鼠标悬浮在数据超过2秒后，会在鼠标右下方弹出此数据的阅览！'
                    },
                    {
                        xtype: 'checkboxfield',
                        fieldLabel: '数据刷新',
                        labelAlign: 'right',
                        columnWidth: 1,
                        name: 'refreshData',
                        bind: "{refreshData}",
                        uncheckedValue: false,
                        boxLabel: '离开此标签页后，再次返回此标签页时将刷新当前标签页的列表数据！'
                    }
                ]
            });
            var winTitle = "操作设置";
            if (grid.getStore().entity && grid.getStore().entity.menu) {
                winTitle = FastExt.Store.getStoreMenuText(grid.getStore()) + "-" + winTitle;
            }
            var winWidth = parseInt((document.body.clientWidth * 0.3).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                title: winTitle,
                iconCls: 'extIcon extSet',
                height: 460,
                width: winWidth,
                minHeight: 400,
                minWidth: 300,
                layout: 'border',
                resizable: false,
                animateTarget: obj,
                items: [setPanel],
                modal: true,
                constrain: true,
                buttons: [
                    "->", {
                        text: '保存配置',
                        iconCls: 'extIcon extSave whiteColor',
                        handler: function () {
                            FastExt.Dialog.showWait("正在保存中…");
                            FastExt.Server.saveExtConfig(grid.code, "GridOperate", Ext.encode(setPanel.getForm().getValues()), function (success, message) {
                                FastExt.Dialog.hideWait();
                                if (success) {
                                    grid.operate = setPanel.getForm().getValues();
                                    FastExt.Dialog.toast("操作设置成功！");
                                    FastExt.Grid.refreshGridNumberColumn(grid);
                                    win.close();
                                }
                                else {
                                    Ext.Msg.alert('系统提醒', message);
                                }
                            });
                        }
                    },
                    {
                        text: '取消',
                        iconCls: 'extIcon extClose',
                        handler: function () {
                            win.close();
                        }
                    }
                ]
            });
            win.show();
        };
        Grid.getColumnEnumName = function (column) {
            if (FastExt.Grid.isEnumColumn(column)) {
                if (Ext.isObject(column.field)) {
                    return column.field.enumName;
                }
            }
            return null;
        };
        Grid.getColumnFieldType = function (column) {
            if (Ext.isObject(column.field)) {
                return column.field.xtype;
            }
            return column.field;
        };
        Grid.exportGrid = function (grid) {
            if (!grid.getStore().entity) {
                Ext.Msg.alert('系统提醒', '导出失败！Grid的DataStore未绑定Entity!');
                return;
            }
            var message = "您确定导出当前条件下的所有数据吗？";
            var data = grid.getSelection();
            if (data.length > 0) {
                message = "您确定导出选中的" + data.length + "条数据吗？";
            }
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                defaults: {
                    margin: '5 5 5 5'
                },
                items: [
                    {
                        xtype: "lottie",
                        width: 150,
                        height: 120,
                        jsonPath: 'base/lottie/question.json',
                    },
                    {
                        xtype: "label",
                        text: message,
                    },
                    {
                        xtype: "checkboxfield",
                        boxLabel: "导出时自动生成数据序号",
                        uncheckedValue: false,
                        name: "exportIndex"
                    }
                ]
            });
            var doExport = function (params) {
                if (!grid) {
                    return;
                }
                if (!grid.getStore().entity) {
                    FastExt.Dialog.toast("当前列表不支持此功能！");
                    return;
                }
                if (grid.getStore().entity.menu) {
                    params.title = grid.getStore().entity.menu.text;
                }
                if (data.length > 0) {
                    if (!grid.getStore().entity.idProperty) {
                        FastExt.Dialog.toast("当前列表不支持选中导出功能！");
                        return;
                    }
                    for (var i = 0; i < data.length; i++) {
                        var record = data[i];
                        for (var j = 0; j < grid.getStore().entity.idProperty.length; j++) {
                            var idName = grid.getStore().entity.idProperty[j];
                            var key = "where['" + idName + "#']";
                            if (!params[key]) {
                                params[key] = [];
                            }
                            params[key].push(record.get(idName));
                        }
                    }
                }
                Ext.each(grid.getColumns(), function (item, index) {
                    if (item.isHidden() || !FastExt.Base.toBool(item.excelOutHeader, true)) {
                        return;
                    }
                    if (!Ext.isEmpty(item.dataIndex)) {
                        params["column[" + index + "].width"] = item.width;
                        params["column[" + index + "].text"] = item.configText;
                        params["column[" + index + "].groupHeaderText"] = item.groupHeaderText;
                        params["column[" + index + "].enum"] = FastExt.Grid.getColumnEnumName(item);
                        params["column[" + index + "].dataIndex"] = FastExt.Entity.getRealAttr(item);
                        params["column[" + index + "].valueIndex"] = item.dataIndex;
                        params["column[" + index + "].file"] = FastExt.Grid.isFileColumn(item);
                        params["column[" + index + "].files"] = FastExt.Grid.isFilesColumn(item);
                        params["column[" + index + "].type"] = FastExt.Grid.getColumnFieldType(item);
                        params["column[" + index + "].comment"] = item.excelComment || item.comment;
                        if (FastExt.Grid.isDateColumn(item)) {
                            params["column[" + index + "].format"] = item.field.format;
                        }
                    }
                });
                FastExt.Dialog.showWait("正在导出中……");
                FastExt.Server.exportExcel(FastExt.Store.mergeStoreParamBySelect(grid.getStore(), params), function (success, data, message) {
                    FastExt.Dialog.hideWait();
                    if (success) {
                        FastExt.Dialog.toast(message);
                        exportConfirmWindow.close();
                        location.href = "attach/" + data;
                    }
                    else {
                        Ext.Msg.alert('系统提醒', "导出失败！" + message);
                    }
                });
            };
            var exportConfirmWindow = Ext.create('Ext.window.Window', {
                title: "导出Excel",
                height: 330,
                iconCls: 'extIcon extExcel',
                width: 300,
                layout: 'border',
                constrain: true,
                resizable: false,
                items: [formPanel],
                modal: true,
                buttons: [
                    '->',
                    {
                        text: '取消',
                        iconCls: 'extIcon extClose',
                        handler: function () {
                            exportConfirmWindow.close();
                        }
                    },
                    {
                        text: '确定',
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            doExport(formPanel.getForm().getValues());
                        }
                    }, '->'
                ],
            });
            exportConfirmWindow.show();
        };
        Grid.downExcelModel = function (grid) {
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                defaults: {
                    margin: '5 5 5 5'
                },
                items: [
                    {
                        xtype: "lottie",
                        width: 150,
                        height: 120,
                        jsonPath: 'base/lottie/question.json',
                    },
                    {
                        xtype: "label",
                        text: "确定下载导入数据的Excel模板吗？",
                    },
                    {
                        xtype: "checkboxfield",
                        boxLabel: "包含已隐藏的列",
                        uncheckedValue: false,
                        name: "exportHidden"
                    }
                ]
            });
            var doRequest = function (formParams) {
                if (!grid) {
                    return;
                }
                FastExt.Dialog.showWait("正在生成中……");
                var params = { entityCode: grid.getStore().entity.entityCode };
                if (grid.getStore().entity.menu) {
                    params.title = grid.getStore().entity.menu.text;
                }
                Ext.each(grid.getColumns(), function (item, index) {
                    if (FastExt.Grid.isFileColumn(item)
                        || FastExt.Grid.isFilesColumn(item)
                        || !FastExt.Base.toBool(item.excelHeader, true)) {
                        return;
                    }
                    if (!FastExt.Base.toBool(formParams["exportHidden"], false)) {
                        if (item.isHidden()) {
                            return;
                        }
                    }
                    if (!Ext.isEmpty(item.dataIndex)) {
                        var indexStr = index;
                        if (index < 10) {
                            indexStr = "0" + index;
                        }
                        params["column[" + indexStr + "].width"] = item.width;
                        params["column[" + indexStr + "].text"] = item.configText;
                        params["column[" + indexStr + "].groupHeaderText"] = item.groupHeaderText;
                        params["column[" + indexStr + "].enum"] = FastExt.Grid.getColumnEnumName(item);
                        params["column[" + indexStr + "].type"] = FastExt.Grid.getColumnFieldType(item);
                        params["column[" + indexStr + "].comment"] = item.excelComment || item.comment;
                        params["column[" + indexStr + "].dataIndex"] = FastExt.Entity.getRealAttr(item);
                        params["column[" + indexStr + "].excelHeaderText"] = item.excelHeaderText;
                        if (FastExt.Grid.isDateColumn(item)) {
                            params["column[" + indexStr + "].format"] = item.field.format;
                        }
                    }
                });
                FastExt.Server.excelModule(params, function (success, data, message) {
                    FastExt.Dialog.hideWait();
                    if (success) {
                        exportConfirmWindow.close();
                        FastExt.Dialog.toast("模板生成成功！");
                        location.href = "attach/" + data;
                    }
                    else {
                        Ext.Msg.alert('系统提醒', "生成失败！" + message);
                    }
                });
            };
            var exportConfirmWindow = Ext.create('Ext.window.Window', {
                title: "下载模板",
                height: 320,
                iconCls: 'extIcon extExcel',
                width: 280,
                layout: 'border',
                constrain: true,
                resizable: false,
                items: [formPanel],
                modal: true,
                buttons: [
                    '->',
                    {
                        text: '取消',
                        iconCls: 'extIcon extClose',
                        handler: function () {
                            exportConfirmWindow.close();
                        }
                    },
                    {
                        text: '确定',
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            doRequest(formPanel.getForm().getValues());
                        }
                    }, '->'
                ],
            });
            exportConfirmWindow.show();
        };
        Grid.importExcel = function (obj, params, formItems, serverUrl) {
            return new Ext.Promise(function (resolve, reject) {
                if (!formItems) {
                    formItems = [];
                }
                else {
                    formItems = Ext.Array.clone(formItems);
                }
                if (!serverUrl) {
                    serverUrl = FastExt.Server.importEntityExcelUrl();
                }
                formItems.push({
                    xtype: 'filefield',
                    fieldLabel: 'Excel文件',
                    buttonText: '选择文件',
                    allowBlank: false,
                    name: 'file',
                    columnWidth: 1,
                    listeners: {
                        change: function (obj, value, eOpts) {
                            if (value != null && value.length != 0) {
                                if (!FastExt.FileModule.excel().match(value)) {
                                    if (formPanel.form) {
                                        formPanel.form.reset();
                                    }
                                    Ext.Msg.alert('系统提醒', "请上传有效的Excel文档！");
                                }
                            }
                        }
                    }
                });
                var formPanel = Ext.create('Ext.form.FormPanel', {
                    url: serverUrl,
                    method: 'POST',
                    margin: '5',
                    fileUpload: true,
                    width: 400,
                    callBacked: false,
                    border: 0,
                    layout: 'column',
                    defaults: {
                        labelWidth: 80,
                        margin: '5 5 5 5',
                        labelAlign: 'right',
                        emptyText: '请填写'
                    },
                    items: formItems,
                    doSubmit: function () {
                        var form = formPanel.form;
                        if (form.isValid()) {
                            var myMask_2 = new Ext.LoadMask({
                                msg: '正在导入中…',
                                target: uploadWin
                            });
                            myMask_2.show();
                            form.submit({
                                params: params,
                                success: function (form, action) {
                                    myMask_2.destroy();
                                    Ext.Msg.alert('系统提醒', action.result.message, function () {
                                        FastExt.Base.runCallBack(resolve, action.result);
                                        uploadWin.close();
                                    });
                                },
                                failure: function (form, action) {
                                    myMask_2.destroy();
                                    if (action.result) {
                                        Ext.Msg.alert('系统提醒', "导入失败！" + action.result.message);
                                    }
                                }
                            });
                        }
                    },
                    listeners: {
                        'render': function (obj) {
                            try {
                                new Ext.util.KeyMap({
                                    target: obj.getEl(),
                                    key: 13,
                                    fn: formPanel.doSubmit,
                                    scope: Ext.getBody()
                                });
                            }
                            catch (e) {
                                console.error(e);
                            }
                        }
                    }
                });
                var btnSubmitId = "btnSubmit" + new Date().getTime();
                var uploadWin = Ext.create('Ext.window.Window', {
                    title: "导入Excel数据",
                    layout: 'fit',
                    resizable: false,
                    scrollable: false,
                    items: [formPanel],
                    modal: true,
                    iconCls: 'extIcon extUpload',
                    animateTarget: obj,
                    constrain: true,
                    buttons: [
                        {
                            text: '重置',
                            width: 88,
                            iconCls: 'extIcon extReset',
                            handler: function () {
                                if (formPanel.form) {
                                    formPanel.form.reset();
                                }
                            }
                        },
                        {
                            text: '上传',
                            width: 88,
                            id: btnSubmitId,
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                formPanel.doSubmit();
                            }
                        }
                    ],
                    listeners: {
                        show: function (winObj, eOpts) {
                            if (formItems.length === 1) {
                                formPanel.getForm().findField('file').fileInputEl.dom.click();
                                Ext.getCmp(btnSubmitId).focus();
                            }
                        }
                    }
                });
                uploadWin.show();
            });
        };
        Grid.downDataGrid = function (grid) {
            if (!grid.getStore().entity) {
                Ext.Msg.alert('系统提醒', '下载失败！Grid的DataStore未绑定Entity!');
                return;
            }
            var message = "您确定下载当前条件下的所有数据吗？";
            var data = grid.getSelection();
            if (data.length > 0) {
                message = "您确定下载选中的" + data.length + "条数据吗？";
            }
            if (!grid.getStore().entity) {
                FastExt.Dialog.toast("当前列表不支持此功能！");
                return;
            }
            Ext.Msg.confirm("系统提醒", message, function (button, text) {
                if (button === "yes") {
                    var params = {};
                    if (grid.getStore().entity.menu) {
                        params.title = grid.getStore().entity.menu.text;
                    }
                    if (data.length > 0) {
                        if (!grid.getStore().entity.idProperty) {
                            FastExt.Dialog.toast("当前列表不支持下载选中数据功能！");
                            return;
                        }
                        for (var i = 0; i < data.length; i++) {
                            var record = data[i];
                            for (var j = 0; j < grid.getStore().entity.idProperty.length; j++) {
                                var idName = grid.getStore().entity.idProperty[j];
                                var key = "where['" + idName + "#']";
                                if (!params[key]) {
                                    params[key] = [];
                                }
                                params[key].push(record.get(idName));
                            }
                        }
                    }
                    FastExt.Dialog.showWait("正在下载中……");
                    FastExt.Server.downData(FastExt.Store.mergeStoreParamBySelect(grid.getStore(), params), function (success, message, data) {
                        FastExt.Dialog.hideWait();
                        if (success) {
                            FastExt.Dialog.toast(message);
                            location.href = "attach/" + data;
                        }
                        else {
                            Ext.Msg.alert('系统提醒', message);
                        }
                    });
                }
            });
        };
        Grid.loadDataGrid = function (obj, params) {
            return new Ext.Promise(function (resolve, reject) {
                var formPanel = Ext.create('Ext.form.FormPanel', {
                    url: FastExt.Server.loadEntityDataUrl(),
                    method: 'POST',
                    margin: '5',
                    fileUpload: true,
                    width: 400,
                    callBacked: false,
                    border: 0,
                    layout: 'column',
                    defaults: {
                        labelWidth: 80,
                        margin: '5 5 5 5',
                        labelAlign: 'right',
                        emptyText: '请填写'
                    },
                    items: [{
                            xtype: 'filefield',
                            fieldLabel: '数据文件',
                            buttonText: '选择文件',
                            allowBlank: false,
                            name: 'file',
                            columnWidth: 1,
                            listeners: {
                                change: function (obj, value, eOpts) {
                                    if (value != null && value.length != 0) {
                                        if (!FastExt.FileModule.data().match(value)) {
                                            if (formPanel.form) {
                                                formPanel.form.reset();
                                            }
                                            Ext.Msg.alert('系统提醒', "请上传有效的数据文件！");
                                        }
                                    }
                                }
                            }
                        }],
                    doSubmit: function () {
                        var form = formPanel.form;
                        if (form.isValid()) {
                            var myMask_3 = new Ext.LoadMask({
                                msg: '正在上传中…',
                                target: uploadWin
                            });
                            myMask_3.show();
                            form.submit({
                                params: params,
                                success: function (form, action) {
                                    myMask_3.destroy();
                                    Ext.Msg.alert('系统提醒', action.result.message, function () {
                                        FastExt.Base.runCallBack(resolve, action.result);
                                        uploadWin.close();
                                    });
                                },
                                failure: function (form, action) {
                                    myMask_3.destroy();
                                    if (action.result) {
                                        Ext.Msg.alert('系统提醒', "上传失败！" + action.result.message);
                                    }
                                }
                            });
                        }
                    },
                    listeners: {
                        'render': function (obj) {
                            try {
                                new Ext.util.KeyMap({
                                    target: obj.getEl(),
                                    key: 13,
                                    fn: formPanel.doSubmit,
                                    scope: Ext.getBody()
                                });
                            }
                            catch (e) {
                                console.error(e);
                            }
                        }
                    }
                });
                var btnSubmitId = "btnSubmit" + new Date().getTime();
                var uploadWin = Ext.create('Ext.window.Window', {
                    title: "上传实体数据",
                    layout: 'fit',
                    resizable: false,
                    scrollable: false,
                    items: [formPanel],
                    modal: true,
                    iconCls: 'extIcon extUpload',
                    animateTarget: obj,
                    constrain: true,
                    buttons: [
                        {
                            text: '重置',
                            width: 88,
                            iconCls: 'extIcon extReset',
                            handler: function () {
                                if (formPanel.form) {
                                    formPanel.form.reset();
                                }
                            }
                        },
                        {
                            text: '上传',
                            width: 88,
                            id: btnSubmitId,
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                formPanel.doSubmit();
                            }
                        }
                    ],
                    listeners: {
                        show: function (winObj, eOpts) {
                            formPanel.getForm().findField('file').fileInputEl.dom.click();
                            Ext.getCmp(btnSubmitId).focus();
                        }
                    }
                });
                uploadWin.show();
            });
        };
        Grid.saveGridColumn = function (grid) {
            if (Ext.isEmpty(grid.code)) {
                return FastExt.Base.getEmptyPromise();
            }
            if (!grid) {
                return;
            }
            return new Ext.Promise(function (resolve, reject) {
                try {
                    var params = {
                        "noneManager": true,
                    };
                    var hasGetColumnRender_1 = false, hasGetEditorField_1 = false;
                    if (grid.getStore() && grid.getStore().entity) {
                        hasGetColumnRender_1 = Ext.isFunction(grid.getStore().entity.getColumnRender);
                        hasGetEditorField_1 = Ext.isFunction(grid.getStore().entity.getEditorField);
                        if (grid.getStore().entity.menu) {
                            params["menuId"] = grid.getStore().entity.menu.id;
                            if (FastExt.Base.toBool(grid.menuPanelList, false)) {
                                params["entityCode"] = grid.getStore().entity.entityCode;
                            }
                        }
                        if (FastExt.System.silenceGlobalSave) {
                            params["entityCode"] = grid.getStore().entity.entityCode;
                        }
                        if (!FastExt.Base.toBool(grid.mainEntityList, true)) {
                            delete params["entityCode"];
                        }
                        if (grid.columnEntityCode) {
                            params["entityCode"] = grid.columnEntityCode;
                        }
                    }
                    var columnInfos_1 = {};
                    Ext.each(grid.getColumns(), function (column, index) {
                        if (Ext.isEmpty(column.dataIndex)) {
                            if (column.xtype === "rownumberer") {
                                var columnInfo_1 = {};
                                columnInfo_1["width"] = column.width;
                                columnInfo_1["text"] = column.configText;
                                columnInfos_1["rownumberer"] = columnInfo_1;
                            }
                            return;
                        }
                        if (!FastExt.System.isSuperRole()) {
                            if (!column.hideable && column.hidden) {
                                return;
                            }
                        }
                        var columnInfo = { column: true };
                        columnInfo["width"] = column.width;
                        columnInfo["hidden"] = column.isHidden();
                        columnInfo["locked"] = column.isLocked();
                        columnInfo["text"] = column.configText;
                        columnInfo["dataIndex"] = column.dataIndex;
                        columnInfo["columnName"] = column.columnName;
                        columnInfo["align"] = column.align;
                        columnInfo["groupHeaderText"] = column.groupHeaderText;
                        columnInfo["detailsable"] = column.detailsable;
                        if (column.groupHeaderText && column.ownerCt.componentCls === "x-column-header") {
                            if (column.ownerCt.isHidden()) {
                                columnInfo["hidden"] = true;
                            }
                        }
                        if (grid.getStore().entity) {
                            columnInfo["entityCode"] = grid.getStore().entityCode;
                        }
                        var sortConfig = grid.getStore().getSorters().getByKey(column.dataIndex);
                        if (sortConfig) {
                            columnInfo["sortDirection"] = sortConfig.getDirection();
                        }
                        columnInfo["searchLink"] = column.searchLink;
                        columnInfo["searchExclude"] = column.searchExclude;
                        columnInfo["index"] = column.getIndex();
                        columnInfo["canEdit"] = grid.checkEditor() && FastExt.Base.toBool(column.editable, true);
                        columnInfo["version"] = FastExt.Base.toString(grid.columnsVersion, "1");
                        if (!hasGetColumnRender_1) {
                            columnInfo["rendererFunction"] = column.rendererFunction;
                            var cacheRender = FastExt.Renders.getRenderFunStr(column);
                            if (cacheRender && Ext.isEmpty(columnInfo["rendererFunction"])) {
                                columnInfo["rendererFunction"] = cacheRender;
                            }
                        }
                        if (!hasGetEditorField_1) {
                            if (grid.checkEditor() && FastExt.Base.toBool(column.editable, true)) {
                                columnInfo["editorField"] = FastExt.Grid.getColumnSimpleEditorJson(column);
                            }
                            else {
                                columnInfo["editorField"] = "";
                            }
                        }
                        columnInfos_1[column.code] = columnInfo;
                    });
                    columnInfos_1["PageTool"] = {
                        pageSize: grid.getStore().pageSize,
                        column: false
                    };
                    FastExt.Server.saveExtConfig(grid.code, "GridColumn", Ext.encode(columnInfos_1), function (success, message) {
                        resolve(success);
                    }, params);
                }
                catch (e) {
                    reject(e);
                }
            });
        };
        Grid.saveGridButton = function (grid, entity) {
            if (Ext.isEmpty(grid.code)) {
                return FastExt.Base.getEmptyPromise();
            }
            if (Ext.isEmpty(entity)) {
                return FastExt.Base.getEmptyPromise();
            }
            if (!FastExt.Base.toBool(grid.menuPanelList, false)) {
                return FastExt.Base.getEmptyPromise();
            }
            return new Ext.Promise(function (resolve, reject) {
                try {
                    var buttonInfos_1 = [];
                    Ext.each(grid.bindDetailButtons, function (button, index) {
                        var buttonInfo = {};
                        buttonInfo["text"] = button.text;
                        buttonInfo["iconCls"] = button.iconCls;
                        buttonInfo["icon"] = button.icon;
                        buttonInfo["handler"] = button.handler.toString();
                        buttonInfos_1.push(buttonInfo);
                    });
                    var params = {};
                    FastExt.Server.saveExtConfig(entity.entityCode, "GridButton", Ext.encode(buttonInfos_1), function (success, message) {
                        resolve(success);
                    }, params);
                }
                catch (e) {
                    reject(e);
                }
            });
        };
        Grid.restoreGridButton = function (entityCode) {
            return new Ext.Promise(function (resolve, reject) {
                try {
                    FastExt.Server.showExtConfig(entityCode, "GridButton", function (success, value) {
                        var buttonInfos = [];
                        if (success) {
                            buttonInfos = Ext.decode(value);
                        }
                        resolve(buttonInfos);
                    });
                }
                catch (e) {
                    reject(e);
                }
            });
        };
        Grid.restoreGridColumn = function (grid) {
            return new Ext.Promise(function (resolve, reject) {
                try {
                    if (Ext.isEmpty(grid.code)) {
                        reject("Grid编号[code]不可为空！");
                        return;
                    }
                    if (!grid) {
                        return;
                    }
                    FastExt.Server.showExtConfig(grid.code, "GridColumn", function (success, value) {
                        if (!grid) {
                            return;
                        }
                        var columnInfos = {};
                        if (success) {
                            columnInfos = Ext.decode(value);
                        }
                        var rownumberer = columnInfos["rownumberer"];
                        var newColumns = [];
                        var newGroupColumns = {};
                        var sorts = [];
                        var configColumns = grid.getColumns();
                        var idProperties = [];
                        if (grid.getStore() !== null && grid.getStore().entity) {
                            idProperties = grid.getStore().entity.idProperty;
                        }
                        for (var i = 0; i < configColumns.length; i++) {
                            var column = configColumns[i];
                            if (rownumberer && column.xtype === "rownumberer") {
                                if (parseInt(column["width"]) > 0) {
                                    column["width"] = rownumberer.width;
                                }
                                continue;
                            }
                            if (!Ext.isEmpty(column.dataIndex)) {
                                if (FastExt.Base.toBool(grid.power, true)) {
                                    if (!column.hideable && column.hidden) {
                                        continue;
                                    }
                                }
                                var newColumn = column.cloneConfig();
                                newColumn["restoreConfig"] = true;
                                newColumn["groupHeaderText"] = column.groupHeaderText;
                                newColumn["index"] = i;
                                if (FastExt.System.gridColumnRestore) {
                                    if (columnInfos.hasOwnProperty(column.code)) {
                                        var info = columnInfos[column.code];
                                        for (var key in info) {
                                            if (key === "renderer" || key === "rendererFunction") {
                                                continue;
                                            }
                                            newColumn[key] = info[key];
                                        }
                                    }
                                }
                                if (!Ext.isEmpty(newColumn.sortDirection)) {
                                    sorts.push({
                                        property: newColumn.dataIndex,
                                        direction: newColumn.sortDirection.toUpperCase(),
                                    });
                                }
                                if (!Ext.isEmpty(newColumn["groupHeaderText"])) {
                                    var groupHeaderText = newColumn["groupHeaderText"];
                                    if (!newGroupColumns.hasOwnProperty(groupHeaderText)) {
                                        newGroupColumns[groupHeaderText] = [];
                                    }
                                    newGroupColumns[groupHeaderText].push(newColumns.length);
                                }
                                if (FastExt.System.gridIDColumnHidden && idProperties) {
                                    for (var j = 0; j < idProperties.length; j++) {
                                        var idName = idProperties[j];
                                        if (newColumn.dataIndex === idName) {
                                            newColumn["hidden"] = true;
                                        }
                                    }
                                }
                                if (FastExt.Base.toString(newColumn.version, "1") !== FastExt.Base.toString(grid.columnsVersion, "1")) {
                                    newColumn["index"] = i;
                                }
                                newColumns.push(newColumn);
                            }
                        }
                        var waitRemove = [];
                        for (var key in newGroupColumns) {
                            var indexArray = newGroupColumns[key];
                            if (indexArray.length < 2) {
                                continue;
                            }
                            var minIndex = 999999;
                            var columns = [];
                            for (var i = 0; i < indexArray.length; i++) {
                                var indexValue = indexArray[i];
                                minIndex = Math.min(minIndex, indexValue);
                                var columnInfo = newColumns[indexValue];
                                columns.push(columnInfo);
                            }
                            columns.sort(function (a, b) {
                                return a.index - b.index;
                            });
                            newColumns[minIndex] = {
                                index: minIndex,
                                text: key,
                                menuDisabled: true,
                                columns: columns
                            };
                            waitRemove = waitRemove.concat(columns);
                        }
                        for (var i = 0; i < waitRemove.length; i++) {
                            newColumns = Ext.Array.remove(newColumns, waitRemove[i]);
                        }
                        newColumns.sort(function (a, b) {
                            return a.index - b.index;
                        });
                        if (columnInfos.hasOwnProperty("PageTool")) {
                            var pageTool = columnInfos["PageTool"];
                            grid.getStore().pageSize = Math.min(pageTool.pageSize, FastExt.Store.maxPageSize);
                            var comboPage = grid.down("combo[pageTool=true]");
                            if (comboPage) {
                                comboPage.setValue(Math.min(pageTool.pageSize, FastExt.Store.maxPageSize));
                            }
                        }
                        if (!FastExt.System.silenceGlobalSave) {
                            grid.getStore().sort(sorts);
                        }
                        grid.reconfigure(newColumns);
                        resolve();
                    });
                }
                catch (e) {
                    reject(e);
                }
            });
        };
        Grid.restoreGridOperate = function (grid) {
            return new Ext.Promise(function (resolve, reject) {
                try {
                    if (Ext.isEmpty(grid.code)) {
                        reject("Grid编号[code]不可为空！");
                        return;
                    }
                    FastExt.Server.showExtConfig(grid.code, "GridOperate", function (success, value) {
                        var cacheOperate = {};
                        if (success) {
                            cacheOperate = Ext.decode(value);
                        }
                        if (!grid) {
                            return;
                        }
                        if (!cacheOperate.hasOwnProperty("showRowNumber") && FastExt.Grid.checkConfigGridNumberColumn(grid)) {
                            cacheOperate["showRowNumber"] = true;
                        }
                        if (!grid.operate) {
                            grid.operate = new GridOperate();
                        }
                        grid.operate = FastExt.Json.mergeJson(new GridOperate(), grid.operate);
                        grid.operate = FastExt.Json.mergeJson(grid.operate, cacheOperate);
                        resolve();
                    });
                }
                catch (e) {
                    reject(e);
                }
            });
        };
        Grid.getColumnGrid = function (column) {
            if (!column.grid) {
                column.grid = column.up("treepanel,grid");
            }
            if (column.grid.ownerGrid) {
                return column.grid.ownerGrid;
            }
            return column.grid;
        };
        Grid.getHeaderContainerGrid = function (ct) {
            if (!ct.grid) {
                ct.grid = ct.up("treepanel,grid");
            }
            if (ct.grid.ownerGrid) {
                return ct.grid.ownerGrid;
            }
            return null;
        };
        Grid.showColumnCompute = function (grid, column, type) {
            try {
                if (!column) {
                    Ext.Msg.alert('系统提醒', '计算失败!计算列无效！');
                    return;
                }
                if (!grid.getStore().entity) {
                    Ext.Msg.alert('系统提醒', '计算失败！Grid的DataStore未绑定Entity!');
                    return;
                }
                var selection = grid.getSelection();
                if (selection.length > 0) {
                    var value = null;
                    var title = "";
                    for (var i = 0; i < selection.length; i++) {
                        var record = selection[i];
                        var columnValue = parseFloat(record.get(column.dataIndex));
                        if (type === 'sum') {
                            title = column.configText + "总和：";
                            if (!value) {
                                value = 0;
                            }
                            value += columnValue;
                        }
                        else if (type === 'avg') {
                            title = column.configText + "平均值：";
                            if (!value) {
                                value = 0;
                            }
                            value += columnValue;
                        }
                        else if (type === 'min') {
                            title = column.configText + "最小值：";
                            if (!value) {
                                value = columnValue;
                            }
                            value = Math.min(columnValue, value);
                        }
                        else if (type === 'max') {
                            title = column.configText + "最大值：";
                            if (!value) {
                                value = columnValue;
                            }
                            value = Math.max(columnValue, value);
                        }
                    }
                    if (type === 'avg') {
                        value = value / selection.length;
                    }
                    try {
                        if (Ext.isFunction(column.renderer)) {
                            Ext.Msg.alert('系统提醒', "当前选中的数据，" + title + column.renderer(value));
                        }
                        else {
                            Ext.Msg.alert('系统提醒', "当前选中的数据，" + title + value);
                        }
                    }
                    catch (e) {
                        Ext.Msg.alert('系统提醒', "当前选中的数据，" + title + value);
                    }
                    return;
                }
                var params = {
                    "entityCode": grid.getStore().entity.entityCode,
                    "field": column.dataIndex,
                    "type": type,
                    "storeId": grid.getStore().getId()
                };
                FastExt.Dialog.showWait("正在计算中……");
                $.post("entity/compute", params, function (result) {
                    FastExt.Dialog.hideWait();
                    var msg = "";
                    if (type === 'sum') {
                        msg = column.configText + "总和：";
                    }
                    else if (type === 'avg') {
                        msg = column.configText + "平均值：";
                    }
                    else if (type === 'min') {
                        msg = column.configText + "最小值：";
                    }
                    else if (type === 'max') {
                        msg = column.configText + "最大值：";
                    }
                    try {
                        if (Ext.isFunction(column.renderer)) {
                            Ext.Msg.alert('系统提醒', msg + column.renderer(result.data));
                        }
                        else {
                            Ext.Msg.alert('系统提醒', msg + result.data);
                        }
                    }
                    catch (e) {
                        Ext.Msg.alert('系统提醒', msg + result.data);
                    }
                });
            }
            catch (e) {
                console.error(e);
            }
        };
        Grid.getColumnSimpleEditor = function (column, search) {
            try {
                var editor = {};
                if (Ext.isObject(column.field)) {
                    editor.xtype = column.field.xtype;
                }
                else if (Ext.isString(column.field)) {
                    editor.xtype = column.field;
                }
                else {
                    editor.xtype = "textfield";
                }
                if (Ext.isObject(column.config.field)) {
                    if (search) {
                        editor = FastExt.Base.copy(column.config.field);
                    }
                    else {
                        editor = column.config.field;
                    }
                }
                if (search) {
                    if (FastExt.Form.isContentField(column.field)
                        || FastExt.Form.isHtmlContentField(column.field)
                        || FastExt.Form.isTargetField(column.field)
                        || FastExt.Form.isFileField(column.field)
                        || FastExt.Form.isFilesField(column.field)
                        || FastExt.Form.isMonacoEditorField(column.field)) {
                        editor.xtype = "textfield";
                    }
                    if (FastExt.Form.isPCAField(column.field)) {
                        editor.selectType = 1;
                        if (column.text.indexOf("省") >= 0) {
                            editor.level = 1;
                        }
                        if (column.text.indexOf("市") >= 0) {
                            editor.level = 2;
                        }
                        if (column.text.indexOf("区") >= 0) {
                            editor.level = 3;
                        }
                    }
                }
                if (Ext.isEmpty(editor.xtype)) {
                    editor.xtype = "textfield";
                }
                editor.dataIndex = column.dataIndex;
                if (search) {
                    editor.columnSearchField = true;
                }
                return editor;
            }
            catch (e) {
                console.error(e);
            }
            return null;
        };
        Grid.getColumnSimpleEditorJson = function (column, search) {
            var columnSimpleEditor = FastExt.Grid.getColumnSimpleEditor(column, search);
            if (columnSimpleEditor) {
                return FastExt.Json.objectToJsonUnsafe(columnSimpleEditor);
            }
            return null;
        };
        Grid.showBatchEditColumn = function (column) {
            var editorField = column.batchField;
            if (!editorField) {
                if (Ext.isEmpty(column.configField)) {
                    return;
                }
                if (Ext.isObject(column.configField)) {
                    if (Ext.isEmpty(column.configField.xtype)) {
                        return;
                    }
                }
                editorField = Ext.create(column.configField);
                if (!editorField)
                    return;
                editorField.flex = 1;
                editorField.emptyText = "请输入";
                column.batchField = editorField;
            }
            var putRecord = function (fieldObj) {
                if (!Ext.isEmpty(fieldObj.getValue())) {
                    var columnGrid = FastExt.Grid.getColumnGrid(column);
                    var store = columnGrid.getStore();
                    if (!store) {
                        return;
                    }
                    store.holdUpdate = true;
                    var selectData = columnGrid.getSelectionModel().getSelection();
                    if (selectData.length > 0) {
                        Ext.each(selectData, function (record, index) {
                            FastExt.Store.setRecordValue(record, column.dataIndex, fieldObj);
                        });
                    }
                    else {
                        store.each(function (record, index) {
                            FastExt.Store.setRecordValue(record, column.dataIndex, fieldObj);
                        });
                    }
                    store.holdUpdate = false;
                    store.fireEvent("endupdate");
                }
            };
            var placeholder = "批量修改当前页的【" + column.configText + "】数据";
            if (FastExt.Grid.getColumnGrid(column).getSelection().length > 0) {
                placeholder = "批量修改选择的" + FastExt.Grid.getColumnGrid(column).getSelection().length + "条【" + column.configText + "】数据";
            }
            if (Ext.isFunction(editorField.setEmptyText)) {
                editorField.setEmptyText(placeholder);
            }
            editorField.editable = true;
            if (Ext.isFunction(editorField.showWindow)) {
                editorField.showWindow(column, function (result) {
                    putRecord(result);
                }, placeholder);
                return;
            }
            if (!column.batchEditMenu) {
                column.batchEditMenu = Ext.create('Ext.menu.Menu', {
                    showSeparator: false,
                    scrollToHidden: true,
                    layout: 'fit',
                    shadow: false,
                    editorMenu: true,
                    modal: true,
                    doUpdate: function () {
                        var me = this;
                        var fieldObj = me.items.get(0).items.get(0);
                        if (!fieldObj) {
                            return;
                        }
                        if (!fieldObj.isValid()) {
                            FastExt.Component.shakeComment(me);
                            FastExt.Dialog.toast(FastExt.Form.getFieldError(fieldObj)[0]);
                            return;
                        }
                        var btn = this.down("button[name='confirm']");
                        btn.setText("稍等");
                        btn.setDisabled(true);
                        new Ext.Promise(function (resolve, reject) {
                            putRecord(fieldObj);
                            fieldObj.setValue(null);
                            resolve();
                        }).then(function () {
                            btn.setText("确定");
                            btn.setDisabled(false);
                            me.hide();
                        });
                    },
                    items: [
                        {
                            xtype: 'container',
                            layout: {
                                type: 'hbox',
                                align: 'stretch'
                            },
                            style: {
                                background: "#ffffff",
                                borderWidth: 1,
                                borderColor: "#ffffff",
                                color: '#eeeee'
                            },
                            border: 0,
                            items: [editorField,
                                {
                                    xtype: 'button',
                                    text: '确定',
                                    name: 'confirm',
                                    iconCls: "extIcon extOk",
                                    margin: '0 0 0 2',
                                    height: FastExt.Form.getFieldMinHeight(false),
                                    handler: function () {
                                        column.batchEditMenu.doUpdate();
                                    }
                                }
                            ]
                        }
                    ],
                    listeners: {
                        show: function (obj, epts) {
                            var fieldObj = obj.items.get(0).items.get(0);
                            fieldObj.focus();
                        }
                    }
                });
                column.batchEditMenu.addCls("edit-menu");
                column.batchEditMenu.addCls("edit-details-menu");
            }
            column.batchEditMenu.setWidth(Math.max(column.getWidth(), 225));
            column.batchEditMenu.showBy(column, "tl");
        };
        Grid.showBatchUpdateColumn = function (column) {
            var editorField = column.batchUpdateField;
            if (!editorField) {
                editorField = Ext.create(column.configField);
                if (!editorField)
                    return;
                editorField.flex = 1;
                editorField.emptyText = "请输入";
                column.batchUpdateField = editorField;
            }
            editorField.editable = true;
            var grid = FastExt.Grid.getColumnGrid(column);
            var store = grid.getStore();
            var message = "批量更新【" + column.configText + "】，当前条件下共" + store.getTotalCount() + "条数据";
            var doUpdate = function (win, fieldName, fieldValue) {
                FastExt.Dialog.showWait("正在更新中，请稍后……");
                var params = { "entityCode": store.entity.entityCode, "storeId": store.getId() };
                if (store.entity.menu) {
                    params["menu"] = FastExt.Store.getStoreMenuText(store);
                }
                params["field"] = fieldName;
                params["fieldValue"] = fieldValue;
                FastExt.Server.updateDBEntity(params, function (success, message) {
                    FastExt.Dialog.hideWait();
                    if (success) {
                        FastExt.Dialog.toast(message);
                        store.reload();
                        if (win) {
                            win.close();
                        }
                    }
                    else {
                        FastExt.Dialog.showAlert("系统提醒", message);
                    }
                });
            };
            if (Ext.isFunction(editorField.showWindow)) {
                editorField.showWindow(column, function (result) {
                    FastExt.Dialog.showConfirm("系统提醒", "将批量更新数据，此更新是永久性且无法撤销！请您确认！", function (button) {
                        if (button === "yes") {
                            doUpdate(null, FastExt.Entity.getRealAttr(column), result.getValue());
                        }
                    });
                }, message);
                return;
            }
            editorField.columnWidth = 1;
            editorField.dataField = true;
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                region: 'center',
                autoScroll: true,
                border: 0,
                defaults: {
                    margin: '5 5 5 5'
                },
                layout: "column",
                items: [
                    editorField,
                    {
                        xtype: "checkboxfield",
                        columnWidth: 1,
                        boxLabel: message + "，我已了解此更新是永久性且无法撤销",
                        listeners: {
                            change: function (obj, newValue) {
                                batchEditWin.down("#updateBtn").setDisabled(!newValue);
                            }
                        }
                    }
                ]
            });
            var batchEditWin = Ext.create('Ext.window.Window', {
                title: "批量更新数据",
                subtitle: "v3",
                iconCls: 'extIcon extEdit',
                height: 250,
                width: 450,
                layout: "border",
                items: [formPanel],
                modal: true,
                constrain: true,
                buttons: [
                    "->",
                    {
                        text: '取消',
                        iconCls: 'extIcon extClose',
                        handler: function () {
                            batchEditWin.close();
                        }
                    },
                    {
                        text: '立即更新',
                        itemId: 'updateBtn',
                        disabled: true,
                        iconCls: 'extIcon extOk whiteColor',
                        handler: function () {
                            var fieldName = FastExt.Entity.getRealAttr(column);
                            var dataField = formPanel.down("[dataField=true]");
                            if (dataField) {
                                doUpdate(batchEditWin, fieldName, dataField.getValue());
                            }
                        }
                    }
                ]
            });
            batchEditWin.show();
        };
        Grid.showBatchReplaceColumn = function (column) {
            var grid = FastExt.Grid.getColumnGrid(column);
            var store = grid.getStore();
            var message = "批量替换【" + column.configText + "】，当前条件下共" + store.getTotalCount() + "条数据";
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                region: 'center',
                autoScroll: true,
                defaults: {
                    margin: '5 5 5 5',
                    labelWidth: 80,
                    labelAlign: 'right',
                },
                layout: "column",
                items: [
                    {
                        name: "replace",
                        xtype: "textfield",
                        fieldLabel: "替换的字符",
                        columnWidth: 1,
                        allowBlank: false
                    },
                    {
                        name: "toValue",
                        xtype: "textfield",
                        fieldLabel: "新的字符",
                        columnWidth: 1,
                        allowBlank: false
                    },
                    {
                        xtype: "checkboxfield",
                        columnWidth: 1,
                        boxLabel: message + "，我已了解此更新是永久性且无法撤销",
                        listeners: {
                            change: function (obj, newValue) {
                                batchReplaceWin.down("#updateBtn").setDisabled(!newValue);
                            },
                        }
                    }
                ]
            });
            var batchReplaceWin = Ext.create('Ext.window.Window', {
                title: "批量替换数据",
                iconCls: 'extIcon extEdit',
                width: 450,
                height: 260,
                layout: "border",
                items: [formPanel],
                modal: true,
                constrain: true,
                doUpdate: function (params) {
                    var me = this;
                    FastExt.Dialog.showWait("正在替换中，请稍后……");
                    params["entityCode"] = store.entity.entityCode;
                    params["storeId"] = store.getId();
                    if (store.entity.menu) {
                        params["menu"] = FastExt.Store.getStoreMenuText(store);
                    }
                    params["field"] = FastExt.Entity.getRealAttr(column);
                    FastExt.Server.replaceDBEntity(params, function (success, message) {
                        FastExt.Dialog.hideWait();
                        if (success) {
                            FastExt.Dialog.toast(message);
                            store.reload();
                            me.close();
                        }
                        else {
                            FastExt.Dialog.showAlert("系统提醒", message);
                        }
                    });
                },
                buttons: [
                    "->",
                    {
                        text: '取消',
                        iconCls: 'extIcon extClose',
                        handler: function () {
                            batchReplaceWin.close();
                        }
                    },
                    {
                        text: '立即替换',
                        itemId: 'updateBtn',
                        disabled: true,
                        iconCls: 'extIcon extOk whiteColor',
                        handler: function () {
                            batchReplaceWin.doUpdate(formPanel.getValues());
                        }
                    }
                ]
            });
            batchReplaceWin.show();
        };
        Grid.showBatchEditColumnRandom = function (column) {
            if (Ext.isFunction(window["showRandomData"])) {
                window["showRandomData"](column);
                return;
            }
            var idCode = "Random" + Ext.now();
            var autoType = 1;
            var selectReadOnly = false;
            var defaultValue;
            var dateFormat = 'Y-m-d H:i:s';
            var dataLength = FastExt.Grid.getColumnGrid(column).getStore().getTotalCount();
            var title = "批量随机生成当前页的【" + column.configText + "】列数据";
            if (FastExt.Grid.getColumnGrid(column).getSelection().length > 0) {
                title = "批量随机生成选择的" + FastExt.Grid.getColumnGrid(column).getSelection().length + "条【" + column.configText + "】列数据";
                dataLength = FastExt.Grid.getColumnGrid(column).getSelection().length;
            }
            if (FastExt.Grid.isNumberColumn(column)) {
                autoType = 2;
                selectReadOnly = true;
            }
            else if (FastExt.Grid.isDateColumn(column)) {
                autoType = 3;
                if (Ext.isObject(column.field)) {
                    dateFormat = column.field.format;
                }
                selectReadOnly = true;
            }
            else if (FastExt.Grid.isEnumColumn(column) || FastExt.Grid.isComboColumn(column)) {
                autoType = 5;
                selectReadOnly = true;
                var intArray_1 = [];
                var fieldObj_1 = Ext.create(column.field);
                fieldObj_1.getStore().each(function (record, index) {
                    intArray_1.push(record.get(fieldObj_1.valueField));
                });
                defaultValue = intArray_1.join(",");
            }
            else if (FastExt.Grid.isContentColumn(column)) {
                autoType = 4;
            }
            var textField = {
                xtype: 'fieldcontainer',
                layout: 'column',
                columnWidth: 1,
                id: idCode + "_1",
                defaults: {
                    labelWidth: 60,
                    margin: '5 5 5 5',
                    labelAlign: 'right',
                    columnWidth: 1,
                    emptyText: '请填写'
                },
                random: function () {
                    var valueArray = [];
                    var textPrefix = Ext.getCmp(idCode + "_textPrefix").getValue();
                    var textStartNumber = Ext.getCmp(idCode + "_textStartNumber").getValue();
                    for (var i = parseInt(textStartNumber); i < Number.MAX_VALUE; i++) {
                        valueArray.push(textPrefix + i);
                        if (valueArray.length === dataLength) {
                            break;
                        }
                    }
                    return valueArray;
                },
                items: [
                    {
                        xtype: 'fieldset',
                        columnWidth: 1,
                        layout: 'column',
                        defaults: {
                            labelWidth: 60,
                            margin: '5 5 5 5',
                            labelAlign: 'right',
                            columnWidth: 1,
                            emptyText: '请填写'
                        },
                        title: '文字设置',
                        items: [
                            {
                                fieldLabel: '文字前缀',
                                id: idCode + '_textPrefix',
                                allowBlank: false,
                                xtype: 'textfield',
                            },
                            {
                                fieldLabel: '开始序数',
                                id: idCode + '_textStartNumber',
                                value: 1,
                                allowBlank: false,
                                xtype: 'numberfield',
                            }
                        ]
                    }
                ]
            };
            var numberField = {
                xtype: 'fieldcontainer',
                layout: 'column',
                columnWidth: 1,
                id: idCode + "_2",
                hidden: true,
                disabled: true,
                defaults: {
                    labelWidth: 60,
                    margin: '5 5 5 5',
                    labelAlign: 'right',
                    columnWidth: 1,
                    emptyText: '请填写'
                },
                random: function () {
                    var valueArray = [];
                    var dotNumber = Ext.getCmp(idCode + "_dotNumber").getValue();
                    var minNumber = Ext.getCmp(idCode + "_minNumber").getValue();
                    var maxNumber = Ext.getCmp(idCode + "_maxNumber").getValue();
                    if (minNumber > maxNumber) {
                        FastExt.Dialog.showAlert("系统提醒", "最大数字必须大于最小数字！");
                        return;
                    }
                    for (var i = 0; i < Number.MAX_VALUE; i++) {
                        var numberValue = Math.random() * (maxNumber - minNumber) + minNumber;
                        valueArray.push(numberValue.toFixed(dotNumber));
                        if (valueArray.length === dataLength) {
                            break;
                        }
                    }
                    return valueArray;
                },
                items: [
                    {
                        xtype: 'fieldset',
                        columnWidth: 1,
                        layout: 'column',
                        defaults: {
                            labelWidth: 60,
                            margin: '5 5 5 5',
                            labelAlign: 'right',
                            columnWidth: 1,
                            emptyText: '请填写'
                        },
                        title: '数字设置',
                        items: [
                            {
                                fieldLabel: '保留位数',
                                id: idCode + '_dotNumber',
                                value: 0,
                                allowBlank: false,
                                xtype: 'numberfield',
                            },
                            {
                                fieldLabel: '最小数字',
                                id: idCode + '_minNumber',
                                value: 0,
                                allowBlank: false,
                                xtype: 'numberfield',
                            },
                            {
                                fieldLabel: '最大数字',
                                id: idCode + '_maxNumber',
                                allowBlank: false,
                                xtype: 'numberfield',
                            }
                        ]
                    }
                ]
            };
            var dateField = {
                xtype: 'fieldcontainer',
                layout: 'column',
                columnWidth: 1,
                id: idCode + "_3",
                hidden: true,
                disabled: true,
                defaults: {
                    labelWidth: 60,
                    margin: '5 5 5 5',
                    labelAlign: 'right',
                    columnWidth: 1,
                    emptyText: '请填写'
                },
                random: function () {
                    var valueArray = [];
                    var minDateStr = Ext.getCmp(idCode + "_minDate").getValue();
                    var minDate = Ext.Date.parse(minDateStr, FastExt.Base.guessDateFormat(minDateStr));
                    var maxDateStr = Ext.getCmp(idCode + "_maxDate").getValue();
                    var maxDate = Ext.Date.parse(maxDateStr, FastExt.Base.guessDateFormat(maxDateStr));
                    if (minDate.getTime() > maxDate.getTime()) {
                        FastExt.Dialog.showAlert("系统提醒", "最大日期必须大于最小日期！");
                        return;
                    }
                    for (var i = 0; i < Number.MAX_VALUE; i++) {
                        var sub = maxDate.getTime() - minDate.getTime();
                        var numberValue = Math.random() * sub + minDate.getTime();
                        var randDate = new Date(numberValue);
                        valueArray.push(Ext.Date.format(randDate, Ext.getCmp(idCode + "_minDate").format));
                        if (valueArray.length === dataLength) {
                            break;
                        }
                    }
                    return valueArray;
                },
                items: [
                    {
                        xtype: 'fieldset',
                        columnWidth: 1,
                        layout: 'column',
                        defaults: {
                            labelWidth: 60,
                            margin: '5 5 5 5',
                            labelAlign: 'right',
                            columnWidth: 1,
                            emptyText: '请填写'
                        },
                        title: '日期设置',
                        items: [
                            {
                                fieldLabel: '最小日期',
                                xtype: 'datefield',
                                id: idCode + '_minDate',
                                allowBlank: false,
                                format: dateFormat
                            },
                            {
                                fieldLabel: '最大日期',
                                xtype: 'datefield',
                                id: idCode + '_maxDate',
                                allowBlank: false,
                                format: dateFormat
                            }
                        ]
                    }
                ]
            };
            var longTextField = {
                xtype: 'fieldcontainer',
                layout: 'column',
                columnWidth: 1,
                id: idCode + "_4",
                hidden: true,
                disabled: true,
                defaults: {
                    labelWidth: 60,
                    margin: '5 5 5 5',
                    labelAlign: 'right',
                    columnWidth: 1,
                    emptyText: '请填写'
                },
                random: function () {
                    var valueArray = [];
                    var minNumber = Ext.getCmp(idCode + "_minLength").getValue();
                    var maxNumber = Ext.getCmp(idCode + "_maxLength").getValue();
                    var longTextList = Ext.getCmp(idCode + "_longTextList").getValue();
                    if (minNumber > maxNumber) {
                        FastExt.Dialog.showAlert("系统提醒", "最大长度必须大于最小长度！");
                        return;
                    }
                    var charArray = longTextList.toString().trimAllSymbol().split("");
                    for (var i = 0; i < Number.MAX_VALUE; i++) {
                        var numberValue = FastExt.Base.randomInt(minNumber, maxNumber);
                        var stringArray = [];
                        for (var j = 0; j < Number.MAX_VALUE; j++) {
                            var indexValue = FastExt.Base.randomInt(0, charArray.length - 1);
                            var charStr = charArray[indexValue];
                            stringArray.push(charStr);
                            if (stringArray.length === numberValue) {
                                break;
                            }
                        }
                        valueArray.push(stringArray.join(""));
                        if (valueArray.length === dataLength) {
                            break;
                        }
                    }
                    return valueArray;
                },
                items: [
                    {
                        xtype: 'fieldset',
                        columnWidth: 1,
                        layout: 'column',
                        defaults: {
                            labelWidth: 60,
                            margin: '5 5 5 5',
                            labelAlign: 'right',
                            columnWidth: 1,
                            emptyText: '请填写'
                        },
                        title: '文字设置',
                        items: [
                            {
                                fieldLabel: '文字库',
                                id: idCode + '_longTextList',
                                allowBlank: false,
                                xtype: 'textfield',
                                listeners: {
                                    change: function (obj, newValue, oldValue, eOpts) {
                                        Ext.getCmp(idCode + "_maxLength").setValue(newValue.truthLength());
                                    }
                                }
                            },
                            {
                                fieldLabel: '最小长度',
                                id: idCode + '_minLength',
                                value: 1,
                                minValue: 1,
                                allowBlank: false,
                                xtype: 'numberfield',
                            },
                            {
                                fieldLabel: '最大长度',
                                id: idCode + '_maxLength',
                                allowBlank: false,
                                minValue: 1,
                                xtype: 'numberfield',
                            }
                        ]
                    }
                ]
            };
            var numberArrayField = {
                xtype: 'fieldcontainer',
                layout: 'column',
                columnWidth: 1,
                id: idCode + "_5",
                hidden: true,
                disabled: true,
                defaults: {
                    labelWidth: 60,
                    margin: '5 5 5 5',
                    labelAlign: 'right',
                    columnWidth: 1,
                    emptyText: '请填写'
                },
                random: function () {
                    var valueArray = [];
                    var numberList = Ext.getCmp(idCode + "_numberList").getValue();
                    var charArray = numberList.toString().split(",");
                    for (var i = 0; i < Number.MAX_VALUE; i++) {
                        var value = charArray[FastExt.Base.randomInt(0, charArray.length - 1)];
                        if (Ext.isEmpty(value)) {
                            continue;
                        }
                        valueArray.push(value);
                        if (valueArray.length === dataLength) {
                            break;
                        }
                    }
                    return valueArray;
                },
                items: [
                    {
                        xtype: 'fieldset',
                        columnWidth: 1,
                        layout: 'column',
                        defaults: {
                            labelWidth: 60,
                            margin: '5 5 5 5',
                            labelAlign: 'right',
                            columnWidth: 1,
                            emptyText: '请填写'
                        },
                        title: '数字集合设置',
                        items: [
                            {
                                fieldLabel: '数字集合',
                                id: idCode + '_numberList',
                                allowBlank: false,
                                value: defaultValue,
                                xtype: 'textfield'
                            },
                            {
                                xtype: 'displayfield',
                                value: '以英文逗号（,）为分隔符！'
                            }
                        ]
                    }
                ]
            };
            var setPanel = Ext.create('Ext.form.Panel', {
                bodyPadding: 5,
                region: 'center',
                autoScroll: true,
                layout: "column",
                defaults: {
                    labelWidth: 60,
                    margin: '5 5 5 5',
                    labelAlign: 'right',
                    columnWidth: 1,
                    emptyText: '请填写'
                },
                items: [
                    {
                        xtype: "combo",
                        name: 'autoType',
                        fieldLabel: '随机类型',
                        editable: false,
                        displayField: "text",
                        valueField: "id",
                        value: 1,
                        listeners: {
                            change: function (obj, newValue, oldValue, eOpts) {
                                Ext.getCmp(idCode + "_" + oldValue).setHidden(true);
                                Ext.getCmp(idCode + "_" + oldValue).setDisabled(true);
                                Ext.getCmp(idCode + "_" + newValue).setHidden(false);
                                Ext.getCmp(idCode + "_" + newValue).setDisabled(false);
                            }
                        },
                        store: Ext.create('Ext.data.Store', {
                            fields: ["id", "text"],
                            data: [
                                {
                                    'text': '文本',
                                    "id": 1
                                },
                                {
                                    'text': '长文本',
                                    "id": 4
                                },
                                {
                                    'text': '数字',
                                    "id": 2
                                },
                                {
                                    'text': '数字集合',
                                    "id": 5
                                },
                                {
                                    'text': '日期',
                                    "id": 3
                                }
                            ]
                        })
                    }, textField, numberField, dateField, longTextField, numberArrayField
                ]
            });
            var setColumnValue = function (valueArray) {
                var columnGrid = FastExt.Grid.getColumnGrid(column);
                var store = columnGrid.getStore();
                if (valueArray.length === 0 || !store) {
                    return;
                }
                store.holdUpdate = true;
                var selectData = columnGrid.getSelectionModel().getSelection();
                if (selectData.length > 0) {
                    Ext.each(selectData, function (record, index) {
                        if (Ext.isObject(valueArray[index])) {
                            FastExt.Store.setRecordValue(record, column.dataIndex, valueArray[index]);
                        }
                        else {
                            record.set(column.dataIndex, valueArray[index]);
                        }
                    });
                }
                else {
                    store.each(function (record, index) {
                        if (Ext.isObject(valueArray[index])) {
                            FastExt.Store.setRecordValue(record, column.dataIndex, valueArray[index]);
                        }
                        else {
                            record.set(column.dataIndex, valueArray[index]);
                        }
                    });
                }
                store.holdUpdate = false;
                store.fireEvent("endupdate");
            };
            var win = Ext.create('Ext.window.Window', {
                title: title,
                height: 360,
                iconCls: 'extIcon extRandom',
                width: 450,
                layout: 'border',
                items: [setPanel],
                modal: true,
                constrain: true,
                listeners: {
                    show: function () {
                        var autoTypeField = setPanel.getField("autoType");
                        autoTypeField.setValue(autoType);
                        autoTypeField.setReadOnly(selectReadOnly);
                    }
                },
                buttons: [
                    "->",
                    {
                        text: '取消',
                        iconCls: 'extIcon extClose',
                        handler: function () {
                            win.close();
                        }
                    },
                    {
                        text: '立即生成',
                        iconCls: 'extIcon extOk whiteColor',
                        handler: function () {
                            var form = setPanel.getForm();
                            if (form.isValid()) {
                                var buildType = setPanel.getFieldValue("autoType");
                                var valueArray = Ext.getCmp(idCode + "_" + buildType).random();
                                if (!valueArray || valueArray.length === 0) {
                                    return;
                                }
                                setColumnValue(valueArray);
                                win.close();
                            }
                        }
                    }
                ]
            });
            win.show();
        };
        Grid.configColumnSearchLink = function (column) {
            var checked = "";
            if (column.searchLink) {
                checked = column.searchLink.checked;
            }
            FastExt.System.showMenuColumns(column, checked).then(function (data) {
                if (data.columns.length > 0) {
                    column.searchLink = data;
                    FastExt.Dialog.toast("配置成功！");
                }
                else {
                    column.searchLink = null;
                    FastExt.Dialog.toast("已清空搜索链！");
                }
            });
        };
        Grid.refreshColumnStyle = function (column) {
            try {
                if (!Ext.isEmpty(column.dataIndex)) {
                    var sortDirection = column.sortDirection;
                    if (Ext.isEmpty(sortDirection)) {
                        sortDirection = "<font size='1'></font>";
                    }
                    else {
                        if (sortDirection === "ASC") {
                            sortDirection = "<font color='red' size='1'>&nbsp;&nbsp;[正序]</font>";
                        }
                        else {
                            sortDirection = "<font color='red' size='1'>&nbsp;&nbsp;[倒序]</font>";
                        }
                    }
                    if (Ext.isEmpty(column.sumText)) {
                        column.sumText = "<font size='1'></font>";
                    }
                    if (column.searching) {
                        column.setText(FastExt.Base.getSVGIcon("extSearch") + "&nbsp;" + column.configText + column.sumText + sortDirection + "&nbsp;");
                        column.setStyle('color', 'red');
                    }
                    else {
                        column.setText("&nbsp;" + column.configText + column.sumText + sortDirection + "&nbsp;");
                        column.setStyle('color', '#000000');
                    }
                    FastExt.Grid.checkColumnSort(FastExt.Grid.getColumnGrid(column));
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        Grid.checkColumnSort = function (grid) {
            try {
                var hasSort = grid.getStore().getSorters().length > 0;
                var pagingToolBar = grid.child('#pagingToolBar');
                if (pagingToolBar) {
                    var sortBtn = pagingToolBar.down("button[toolType=sortBtn]");
                    if (hasSort) {
                        sortBtn.setIconCls("extIcon extSort redColor");
                        sortBtn.setUserCls("redBorder");
                    }
                    else {
                        sortBtn.setIconCls("extIcon extSort grayColor");
                        sortBtn.setUserCls("");
                    }
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        Grid.checkHistoryConfig = function (grid) {
            var pagingToolBar = grid.child('#pagingToolBar');
            if (pagingToolBar) {
                var selectHistoryBtn = pagingToolBar.down("button[toolType=selectHistoryBtn]");
                if (selectHistoryBtn) {
                    if (parseInt(grid.selectHistoryConfig["state"]) === 1) {
                        selectHistoryBtn.setIconCls(selectHistoryBtn.baseIconCls + " redColor");
                        selectHistoryBtn.setUserCls("redBorder");
                    }
                    else {
                        selectHistoryBtn.setIconCls(selectHistoryBtn.baseIconCls + " grayColor");
                        selectHistoryBtn.setUserCls("");
                    }
                }
            }
        };
        Grid.configColumnProperty = function (column) {
            try {
                column.configText = column.text;
                column.toSearchKey = function (where, i) {
                    return "colWhere['@" + this.getIndex() + FastExt.Base.toString(where.link, "&") + this.dataIndex + where.compare + ":index" + i + "']";
                };
                column.containsSearchWhere = function (where) {
                    var me = this;
                    if (!me.where) {
                        me.where = [];
                    }
                    for (var _i = 0, _a = me.where; _i < _a.length; _i++) {
                        var itemWhere = _a[_i];
                        if (itemWhere.link === where.link
                            && itemWhere.compare === where.compare
                            && itemWhere.value === where.value) {
                            return true;
                        }
                    }
                    return false;
                };
                column.searchValue = function (value) {
                    var me = this;
                    if (!me.where) {
                        me.where = [];
                    }
                    var where = {
                        link: '&',
                        compare: '=',
                        value: value
                    };
                    if (me.containsSearchWhere(where)) {
                        return;
                    }
                    me.where.push(where);
                    me.doSearch();
                };
                column.getRenderCacheKey = function () {
                    var me = this;
                    return $.md5(FastExt.Grid.getColumnGrid(me).code + "-" + me.dataIndex + "-render");
                };
                column.clearSearch = function () {
                    var me = this;
                    var storeParams = FastExt.Grid.getColumnGrid(me).getStore().proxy.extraParams;
                    if (me.where) {
                        var waitRemove = [];
                        for (var storeParamsKey in storeParams) {
                            if (storeParamsKey.indexOf("colWhere") >= 0 && storeParamsKey.indexOf(me.dataIndex) >= 0) {
                                waitRemove.push(storeParamsKey);
                            }
                        }
                        for (var i = 0; i < waitRemove.length; i++) {
                            delete storeParams[waitRemove[i]];
                        }
                    }
                    me.where = [];
                    me.searchMenu = null;
                    me.searching = false;
                    FastExt.Grid.refreshColumnStyle(me);
                };
                column.doSearch = function (requestServer) {
                    var me = this;
                    var storeParams = FastExt.Grid.getColumnGrid(me).getStore().proxy.extraParams;
                    if (me.where) {
                        var fulltextSearch = false;
                        for (var i = 0; i < me.where.length; i++) {
                            var w = me.where[i];
                            var key = me.toSearchKey(w, i);
                            var value = w.value;
                            if (w.compare.indexOf('?') >= 0) {
                                value = '%' + w.value + '%';
                            }
                            if (w.compare === "??") {
                                value = w.value;
                                fulltextSearch = true;
                            }
                            storeParams[key] = value;
                        }
                        if (fulltextSearch) {
                            FastExt.Grid.clearColumnSort(FastExt.Grid.getColumnGrid(me));
                            FastExt.Grid.checkColumnSort(FastExt.Grid.getColumnGrid(me));
                        }
                        storeParams["colWhere['^" + me.dataIndex + "@SearchExclude']"] = me.searchExclude;
                        if (FastExt.Base.toBool(requestServer, true)) {
                            FastExt.Grid.getColumnGrid(me).getStore().loadPage(1);
                        }
                        me.searching = me.where.length !== 0;
                        FastExt.Grid.refreshColumnStyle(me);
                    }
                };
                column.setAlignContent = function (align) {
                    var columnId = this.getId();
                    var cellEls = $("[data-columnid=" + columnId + "]");
                    for (var i = 0; i < cellEls.length; i++) {
                        $(cellEls[i]).children().css("text-align", align);
                    }
                    this.align = align;
                    FastExt.Grid.getColumnGrid(this).saveUIConfig(true);
                };
                if (column.where && column.where.length > 0) {
                    column.doSearch(false);
                }
                if (column.isSubHeader) {
                    column.groupHeaderText = column.ownerCt.text;
                }
                else {
                    column.groupHeaderText = null;
                }
                if (Ext.isEmpty(column.field)) {
                    column.editable = false;
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        Grid.configColumnListener = function (column) {
        };
        Grid.buildSearchItem = function (column, where) {
            try {
                var fulltextColumn = false;
                var grid = FastExt.Grid.getColumnGrid(column);
                if (grid && grid.getStore() && grid.getStore().entity) {
                    fulltextColumn = FastExt.Entity.isFulltextColumn(grid.getStore().entity.entityCode, column.dataIndex);
                }
                var editorField = FastExt.Grid.getColumnSimpleEditor(column, true);
                if (!editorField) {
                    return;
                }
                editorField.fromHeadSearch = true;
                editorField.validator = null;
                editorField.flex = 1;
                editorField.margin = '2 2 0 0';
                editorField.repeatTriggerClick = false;
                editorField.onClearValue = function () {
                    var parent = this.up("container");
                    if (Ext.isFunction(parent.removeSearch)) {
                        parent.removeSearch();
                        return;
                    }
                    parent.destroy();
                };
                editorField.triggers = {
                    close: {
                        cls: 'text-clear',
                        hideOnReadOnly: false,
                        handler: function () {
                            this.onClearValue();
                        }
                    }
                };
                if (FastExt.Form.isEnumField(editorField)) {
                    editorField.editable = false;
                }
                else {
                    editorField.editable = true;
                }
                editorField.emptyText = "请输入条件值";
                if (!where) {
                    where = {
                        link: '&',
                        compare: '=',
                        value: ''
                    };
                    if (FastExt.Form.isTextField(editorField) || FastExt.Form.isLinkField(editorField)
                        || FastExt.Form.isMapField(editorField)
                        || FastExt.Form.isHtmlContentField(editorField)
                        || FastExt.Form.isContentField(editorField)) {
                        where.compare = '?';
                    }
                    if (fulltextColumn) {
                        where.compare = '??';
                    }
                    if (FastExt.Form.isDateField(editorField)) {
                        where.compare = '>=';
                    }
                }
                var dataType = {
                    full: fulltextColumn,
                    date: FastExt.Form.isDateField(editorField),
                };
                editorField.value = where.value;
                editorField.submitValue = false;
                editorField.name = "value";
                editorField.itemId = "editorField";
                editorField.strict = where.compare.indexOf(">") >= 0 || where.compare.indexOf("<") >= 0 || where.compare.indexOf("=") >= 0;
                var panel = {
                    xtype: 'container',
                    margin: '0',
                    searchItem: true,
                    border: 0,
                    flex: 1,
                    region: 'center',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    toParam: function () {
                        var params = {};
                        this.items.each(function (item) {
                            if (Ext.isFunction(item.getValue)) {
                                if (item.isValid()) {
                                    if (Ext.isDate(item.getValue())) {
                                        params[item.getName()] = Ext.Date.format(item.getValue(), item.format);
                                    }
                                    else {
                                        params[item.getName()] = item.getValue();
                                    }
                                }
                                else {
                                    FastExt.Component.shakeComment(item);
                                    FastExt.Dialog.toast(FastExt.Form.getFieldError(item)[0]);
                                    params = null;
                                    return false;
                                }
                            }
                        });
                        return params;
                    },
                    setParam: function (where) {
                        this.items.each(function (item) {
                            if (Ext.isFunction(item.getValue)) {
                                if (item.getName() === 'compare') {
                                    item.setValue(where.compare);
                                }
                                else if (item.getName() === 'link') {
                                    item.setValue(where.link);
                                }
                                else {
                                    item.setValue(where.value);
                                }
                            }
                        });
                    },
                    refreshField: function () {
                        var compareValue = this.getComponent("compare").getValue();
                        var field = this.getComponent("editorField");
                        if (!field) {
                            return;
                        }
                        if (field.rendered) {
                            if (Ext.isFunction(field.setReadOnlyAttr)) {
                                field.setReadOnlyAttr(false);
                            }
                            if (compareValue == "~" || compareValue == "!~") {
                                field.setValue("<NULL>");
                                if (Ext.isFunction(field.setReadOnlyAttr)) {
                                    field.setReadOnlyAttr(true);
                                }
                            }
                            else if (compareValue == "#" || compareValue == "!#") {
                                field.setValue("<REPEAT>");
                                if (Ext.isFunction(field.setReadOnlyAttr)) {
                                    field.setReadOnlyAttr(true);
                                }
                            }
                        }
                    },
                    items: [
                        {
                            xtype: 'combo',
                            name: 'link',
                            value: FastExt.Base.toString(where.link, "&"),
                            margin: '2 2 0 2',
                            width: 35,
                            valueField: 'text',
                            editable: false,
                            hideTrigger: true,
                            tpl: Ext.create('Ext.XTemplate', '<ul class="x-list-plain"><tpl for=".">', '<li role="option" class="x-boundlist-item" style="font-size: 12px;">{desc}</li>', '</tpl></ul>'),
                            listeners: {
                                afterrender: function (obj, eOpts) {
                                    obj.getPicker().setMinWidth(100);
                                }
                            },
                            store: FastExt.Store.getCompareLinkDataStore()
                        },
                        {
                            xtype: 'combo',
                            name: 'compare',
                            value: where.compare,
                            itemId: "compare",
                            margin: '2 2 0 2',
                            width: 65,
                            valueField: 'text',
                            displayField: "desc",
                            editable: false,
                            hideTrigger: true,
                            tpl: Ext.create('Ext.XTemplate', '<ul class="x-list-plain"><tpl for=".">', '<li role="option" class="x-boundlist-item" style="font-size: 12px;">{desc}</li>', '</tpl></ul>'),
                            listeners: {
                                afterrender: function (obj, eOpts) {
                                    obj.getPicker().setMinWidth(100);
                                },
                                change: function (obj, newValue, oldValue) {
                                    var field = obj.ownerCt.getComponent("editorField");
                                    if (oldValue == "~" || oldValue == "!~" || oldValue == "#" || oldValue == "!#") {
                                        field.setValue(null);
                                    }
                                    if (newValue.indexOf(">") >= 0 || newValue.indexOf("<") >= 0 || newValue.indexOf("=") >= 0) {
                                        field.strict = true;
                                    }
                                    else {
                                        field.strict = false;
                                    }
                                    obj.ownerCt.refreshField();
                                }
                            },
                            store: FastExt.Store.getCompareDataStore(dataType)
                        },
                        editorField
                    ],
                    listeners: {
                        afterrender: function (obj, eOpts) {
                            obj.refreshField();
                        }
                    }
                };
                return panel;
            }
            catch (e) {
                console.error(e);
            }
            return null;
        };
        Grid.canColumnSearch = function (column) {
            if (FastExt.Grid.getColumnGrid(column).xtype === "") {
            }
            if (!FastExt.Base.toBool(FastExt.Grid.getColumnGrid(column).columnSearch, true)) {
                return false;
            }
            if (FastExt.Grid.isFilesColumn(column)
                || FastExt.Grid.isFileColumn(column)) {
                return FastExt.Base.toBool(column.search, false);
            }
            if (!FastExt.Base.toBool(column.search, true)) {
                return false;
            }
            if (FastExt.Base.toBool(column["encrypt"], false)) {
                return false;
            }
            return true;
        };
        Grid.showColumnSearchMenu = function (column) {
            try {
                if (!FastExt.Grid.canColumnSearch(column)) {
                    return false;
                }
                if (!column.searchMenu) {
                    column.searchMenu = Ext.create('Ext.menu.Menu', {
                        padding: '0 0 0 0',
                        power: false,
                        showSeparator: false,
                        columnSearchMenu: true,
                        editorMenu: true,
                        scrollToHidden: true,
                        style: {
                            background: "#ffffff"
                        },
                        fixedItemCount: 2,
                        addSearchItem: function (where) {
                            var index = this.items.length - this.fixedItemCount;
                            if (index >= 5) {
                                return;
                            }
                            this.insert(index, FastExt.Grid.buildSearchItem(column, where));
                        },
                        doSearch: function () {
                            var me = this;
                            var where = [];
                            me.items.each(function (item, index) {
                                if (item.searchItem) {
                                    var toParam = item.toParam();
                                    if (!toParam) {
                                        where = null;
                                        return false;
                                    }
                                    if (Ext.isEmpty(toParam.value)) {
                                        return;
                                    }
                                    toParam.index = index;
                                    where.push(toParam);
                                }
                            });
                            if (where) {
                                column.clearSearch();
                                column.where = where;
                                column.doSearch();
                                me.hide();
                            }
                        },
                        items: [
                            {
                                xtype: 'container',
                                layout: 'fit',
                                margin: '5',
                                border: 0,
                                hidden: true,
                                itemId: 'configSearch',
                                items: [
                                    {
                                        xtype: 'fieldset',
                                        title: '配置搜索忽略的字符',
                                        layout: "column",
                                        margin: '0',
                                        items: [
                                            {
                                                xtype: 'textfield',
                                                labelAlign: 'right',
                                                columnWidth: 1,
                                                itemId: 'searchExclude',
                                                value: column.searchExclude,
                                                name: 'searchExclude',
                                                emptyText: '请输入字符',
                                                listeners: {
                                                    change: function (obj, newValue, oldValue, eOpts) {
                                                        column.searchExclude = newValue;
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                xtype: 'container',
                                layout: {
                                    type: 'hbox',
                                    align: 'stretch'
                                },
                                margin: '2',
                                border: 0,
                                items: [
                                    {
                                        xtype: 'button',
                                        iconCls: 'extIcon extSet fontSize14',
                                        contextMenu: false,
                                        width: 35,
                                        handler: function () {
                                            var configPanel = this.ownerCt.ownerCt.getComponent("configSearch");
                                            configPanel.setHidden(!configPanel.isHidden());
                                        }
                                    },
                                    {
                                        xtype: 'button',
                                        text: '搜索',
                                        flex: 1,
                                        contextMenu: false,
                                        iconCls: 'extIcon extSearch',
                                        margin: '0 2 0 2',
                                        handler: function () {
                                            this.ownerCt.ownerCt.doSearch();
                                            FastExt.Grid.saveGridColumn(FastExt.Grid.getColumnGrid(column));
                                        }
                                    },
                                    {
                                        xtype: 'button',
                                        iconCls: 'extIcon extPlus fontSize14',
                                        width: 35,
                                        contextMenu: false,
                                        handler: function () {
                                            this.ownerCt.ownerCt.addSearchItem();
                                        }
                                    }
                                ]
                            }
                        ],
                        listeners: {
                            show: function (obj, epts) {
                                column.addCls("x-column-header-open");
                                if (obj.items.length === obj.fixedItemCount) {
                                    obj.addSearchItem();
                                }
                                var searchExclude = obj.down("#searchExclude");
                                if (searchExclude) {
                                    searchExclude.setValue(column.searchExclude);
                                }
                                try {
                                    new Ext.util.KeyMap({
                                        target: obj.getEl(),
                                        key: 13,
                                        fn: function (keyCode, e) {
                                            obj.doSearch();
                                        },
                                        scope: obj
                                    });
                                }
                                catch (e) {
                                    console.error(e);
                                }
                            },
                            hide: function (obj, epts) {
                                column.removeCls("x-column-header-open");
                            }
                        }
                    });
                    column.searchMenu.addCls("header-search-menu");
                    var grid = FastExt.Grid.getColumnGrid(column);
                    if (grid) {
                        grid.add(column.searchMenu);
                    }
                }
                if (column.where) {
                    for (var i = 0; i < column.where.length; i++) {
                        var where = column.where[i];
                        if (Ext.isEmpty(where.index)) {
                            where.index = i;
                        }
                        if (where.index < column.searchMenu.items.length - column.searchMenu.fixedItemCount) {
                            column.searchMenu.items.getAt(where.index).setParam(where);
                        }
                        else {
                            column.searchMenu.addSearchItem(where);
                        }
                    }
                }
                column.searchMenu.setWidth(Math.max(parseInt(column.getWidth()), 300));
                column.searchMenu.showBy(column, "tl-bl?");
                return true;
            }
            catch (e) {
                console.error(e);
            }
            return false;
        };
        Grid.showColumnSearchWin = function (obj, grid) {
            if (!obj.searchWin) {
                var store_1 = FastExt.Store.getGridColumnStore(grid, true);
                var buildItem_1 = function (data, where) {
                    var inputItem = FastExt.Grid.buildSearchItem(FastExt.Grid.getColumn(grid, data.get("id"), data.get("text")), where);
                    inputItem.removeSearch = function () {
                        var searchContainer = this.up("container");
                        if (searchContainer) {
                            searchContainer.destroy();
                        }
                    };
                    return {
                        xtype: 'container',
                        flex: 1,
                        columnWidth: 1,
                        layout: 'hbox',
                        margin: '0 0 2 0',
                        border: 0,
                        toParam: function () {
                            var param = {};
                            var combo = this.items.get(0);
                            var data = combo.getStore().findRecord("id", combo.getValue(), 0, false, false, true);
                            param["text"] = data.get("text");
                            param["dataIndex"] = data.get("id");
                            var inputItem = this.items.get(1);
                            param = FastExt.Json.mergeJson(param, inputItem.toParam());
                            return param;
                        },
                        items: [
                            {
                                xtype: 'combo',
                                region: 'west',
                                valueField: 'id',
                                displayField: 'text',
                                flex: 0.4,
                                margin: '2 0 0 2',
                                value: data.get("id"),
                                editable: false,
                                listeners: {
                                    change: function (obj, newValue, oldValue, eOpts) {
                                        var parent = this.up("container");
                                        parent.remove(parent.items.get(1), true);
                                        var data = obj.getStore().findRecord("id", newValue, 0, false, false, true);
                                        var inputItem = FastExt.Grid.buildSearchItem(FastExt.Grid.getColumn(grid, data.get("id"), data.get("text")));
                                        inputItem.removeSearch = function () {
                                            var searchContainer = this.up("container");
                                            if (searchContainer) {
                                                searchContainer.destroy();
                                            }
                                        };
                                        parent.insert(1, inputItem);
                                    }
                                },
                                store: store_1
                            },
                            inputItem
                        ]
                    };
                };
                var defaultItems = grid.searchItems;
                if (!defaultItems) {
                    defaultItems = [];
                }
                var formPanel_1 = Ext.create('Ext.form.FormPanel', {
                    margin: '5',
                    border: 0,
                    layout: 'column',
                    width: 460,
                    scrollable: true,
                    defaults: {
                        labelWidth: 80,
                        margin: '5 5 5 5',
                        labelAlign: 'right',
                        emptyText: '请填写'
                    },
                    items: defaultItems,
                });
                var winSize = FastExt.Grid.getGridInWindowSize(grid);
                obj.searchWin = Ext.create('Ext.window.Window', {
                    title: '搜索数据',
                    layout: 'fit',
                    constrain: true,
                    iconCls: 'extIcon extSearch',
                    resizable: true,
                    minHeight: 200,
                    minWidth: 400,
                    height: winSize.height,
                    width: winSize.width,
                    animateTarget: obj,
                    items: [formPanel_1],
                    refreshSearchItem: function (addDefaultItem) {
                        if (!store_1) {
                            return;
                        }
                        if (!grid) {
                            return;
                        }
                        formPanel_1.removeAll();
                        var columns = grid.getColumns();
                        for (var i = 0; i < columns.length; i++) {
                            var item = columns[i];
                            if (item.where) {
                                var data = store_1.findRecord("id", item.dataIndex, 0, false, false, true);
                                if (data) {
                                    for (var i_1 = 0; i_1 < item.where.length; i_1++) {
                                        formPanel_1.add(buildItem_1(data, item.where[i_1]));
                                    }
                                }
                            }
                        }
                        if (formPanel_1.items.length === 0 && store_1.getCount() > 0 && addDefaultItem) {
                            formPanel_1.add(buildItem_1(store_1.getAt(0)));
                        }
                    },
                    listeners: {
                        close: function (panel, eOpts) {
                            if (obj.searchWin.gridLoad) {
                                obj.searchWin.gridLoad.destroy();
                            }
                            if (store_1) {
                                store_1.destroy();
                            }
                            obj.searchWin = null;
                        }
                    },
                    buttons: [
                        {
                            text: '清空条件',
                            iconCls: 'extIcon extClear whiteColor',
                            handler: function () {
                                formPanel_1.removeAll();
                                if (!grid) {
                                    return;
                                }
                                Ext.each(grid.getColumns(), function (item) {
                                    item.clearSearch();
                                });
                                grid.getStore().loadPage(1);
                            }
                        },
                        '->',
                        {
                            text: '添加条件',
                            iconCls: 'extIcon extPlus',
                            handler: function () {
                                formPanel_1.add(buildItem_1(store_1.getAt(0)));
                                var winHeight = 50 + formPanel_1.items.length * 35 + 55;
                                formPanel_1.scrollTo(0, winHeight, false);
                            }
                        },
                        {
                            text: '确定',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                if (!grid) {
                                    return;
                                }
                                Ext.each(grid.getColumns(), function (item) {
                                    item.clearSearch();
                                });
                                var searchColumns = [];
                                formPanel_1.items.each(function (item) {
                                    if (!item.toParam) {
                                        var params = {};
                                        params["where['" + item.name + "']"] = item.getValue();
                                        Ext.apply(grid.getStore().proxy.extraParams, params);
                                        return;
                                    }
                                    var toParam = item.toParam();
                                    if (!toParam) {
                                        return;
                                    }
                                    if (Ext.isEmpty(toParam.value)) {
                                        return;
                                    }
                                    var column = FastExt.Grid.getColumn(grid, toParam.dataIndex, toParam.text);
                                    if (!column) {
                                        return false;
                                    }
                                    if (!column.where) {
                                        column.where = [];
                                    }
                                    delete toParam.dataIndex;
                                    delete toParam.text;
                                    column.where.push(toParam);
                                    searchColumns.push(column);
                                });
                                Ext.each(searchColumns, function (item) {
                                    item.doSearch(false);
                                });
                                grid.getStore().loadPage(1);
                            }
                        }
                    ]
                });
                obj.searchWin.gridLoad = grid.on('load', function () {
                    try {
                        obj.searchWin.refreshSearchItem(false);
                    }
                    catch (e) {
                        console.error(e);
                    }
                }, this, { destroyable: true });
                obj.searchWin.refreshSearchItem(true);
                grid.ownerCt.add(obj.searchWin);
            }
            else {
                FastExt.Component.shakeComment(obj.searchWin);
            }
            obj.searchWin.show();
        };
        Grid.getPageToolBar = function (dataStore) {
            var entityRecycle = false;
            if (dataStore.entity && FastExt.Base.toBool(dataStore.entity.recycle, false)) {
                entityRecycle = true;
            }
            var fromRecycle = false;
            if (dataStore.where && FastExt.Base.toBool(dataStore.where['^fromRecycle'], false)) {
                fromRecycle = true;
            }
            var menuText = FastExt.Store.getStoreMenuText(dataStore);
            var pagingtoolbar = Ext.create('Ext.toolbar.Paging', {
                store: dataStore,
                dock: 'bottom',
                itemId: 'pagingToolBar',
                pageSize: dataStore.pageSize,
                displayInfo: true,
                overflowHandler: 'scroller'
            });
            var control = {
                xtype: 'combo',
                pageTool: true,
                displayField: 'text',
                valueField: 'id',
                editable: false,
                width: 100,
                value: Math.min(dataStore.pageSize, FastExt.Store.maxPageSize),
                store: FastExt.Store.getPageDataStore(),
                listeners: {
                    change: function (obj, newValue, oldValue) {
                        if (FastExt.System.silenceGlobalSave) {
                            return;
                        }
                        if (newValue != null && newValue != 0) {
                            var pageRecord = obj.getStore().getById(newValue);
                            if (!pageRecord) {
                                obj.totalCount = newValue;
                                obj.setValue(-1);
                                return;
                            }
                            if (newValue === -1) {
                                this.ownerCt.pageSize = dataStore.getTotalCount();
                                dataStore.pageSize = dataStore.getTotalCount();
                                if (!Ext.isEmpty(obj.totalCount)) {
                                    this.ownerCt.pageSize = obj.totalCount;
                                    dataStore.pageSize = obj.totalCount;
                                }
                            }
                            else {
                                this.ownerCt.pageSize = newValue;
                                dataStore.pageSize = newValue;
                            }
                            dataStore.loadPage(1);
                            if (dataStore.grid) {
                                dataStore.grid.saveUIConfig(true);
                            }
                        }
                    }
                }
            };
            var copyBtn = {
                xtype: 'button',
                tooltip: '拷贝数据',
                subtext: '拷贝数据@' + menuText,
                checkSelect: 2,
                iconCls: 'extIcon extCopy2 grayColor',
                checkAddPower: true,
                checkCopyPower: true,
                handler: function () {
                    var selection = dataStore.grid.getSelection();
                    if (selection.length === 0) {
                        FastExt.Dialog.showAlert("系统提醒", "请选择需要复制的数据！");
                        return;
                    }
                    Ext.Msg.confirm("系统提醒", "您确定复制选中的" + selection.length + "条数据吗？", function (button, text) {
                        if (button === "yes") {
                            FastExt.Dialog.showWait("正在复制数据中……");
                            FastExt.Store.commitStoreCopy(dataStore.grid.getStore(), selection).then(function (success) {
                                if (success) {
                                    dataStore.grid.getSelectionModel().deselectAll();
                                    var grouped = dataStore.grid.getStore().isGrouped();
                                    if (grouped) {
                                        FastExt.Grid.getGridView(dataStore.grid).getFeature('group').collapseAll();
                                    }
                                    FastExt.Dialog.hideWait();
                                }
                            });
                        }
                    });
                }
            };
            var deleteAllBtn = {
                xtype: 'button',
                tooltip: '清空数据',
                subtext: '清空数据@' + menuText,
                checkDeleteAllPower: true,
                checkDeletePower: true,
                iconCls: 'extIcon extClear grayColor',
                handler: function () {
                    var menuText = FastExt.Store.getStoreMenuText(dataStore.grid.getStore());
                    var confirmFunction = function () {
                        FastExt.System.validOperate("清空【" + menuText + "】数据", function () {
                            FastExt.Dialog.showWait("正在清空数据中……");
                            var params = {
                                "entityCode": dataStore.entity.entityCode,
                                "all": true,
                                "storeId": dataStore.getId()
                            };
                            if (dataStore.grid.getStore().entity.menu) {
                                params["menu"] = FastExt.Store.getStoreMenuText(dataStore.grid.getStore());
                            }
                            FastExt.Server.deleteEntity(params, function (success, message) {
                                FastExt.Dialog.hideWait();
                                if (success) {
                                    dataStore.loadPage(1);
                                }
                                FastExt.Dialog.showAlert("系统提醒", message);
                            });
                        }, 30);
                    };
                    var formPanel = Ext.create('Ext.form.FormPanel', {
                        bodyPadding: 10,
                        method: 'POST',
                        region: 'center',
                        layout: {
                            type: 'vbox',
                            pack: 'center',
                            align: 'middle'
                        },
                        defaults: {
                            margin: '5 5 5 5'
                        },
                        border: 0,
                        items: [
                            {
                                xtype: "lottie",
                                width: 150,
                                height: 120,
                                jsonPath: 'base/lottie/amazed.json',
                            },
                            {
                                xtype: "label",
                                text: "【【 请您谨慎操作 】】",
                            },
                            {
                                xtype: "label",
                                text: "您确定清空当前条件下的" + dataStore.getTotalCount() + "条数据吗？",
                            },
                            {
                                xtype: "label",
                                text: "当前操作页面《" + menuText + "》",
                            },
                            {
                                xtype: "checkboxfield",
                                boxLabel: "我已了解此操作是永久性且无法撤销",
                                listeners: {
                                    change: function (obj, newValue) {
                                        clearConfirmWindow.down("#deleteBtn").setDisabled(!newValue);
                                    },
                                }
                            }
                        ]
                    });
                    var clearConfirmWindow = Ext.create('Ext.window.Window', {
                        title: '清空数据',
                        iconCls: 'extIcon extClear',
                        layout: {
                            type: 'vbox',
                            pack: 'center',
                            align: 'middle'
                        },
                        constrain: true,
                        resizable: false,
                        cls: 'redAlert',
                        items: [formPanel],
                        modal: true,
                        buttons: [
                            '->',
                            {
                                text: '取消',
                                iconCls: 'extIcon extClose',
                                handler: function () {
                                    clearConfirmWindow.close();
                                }
                            },
                            {
                                text: '清空',
                                itemId: "deleteBtn",
                                disabled: true,
                                iconCls: 'extIcon extOk',
                                handler: function () {
                                    confirmFunction();
                                    clearConfirmWindow.close();
                                }
                            },
                            '->'
                        ],
                        listeners: {
                            show: function (obj) {
                                FastExt.Component.shakeComment(obj);
                            },
                        }
                    });
                    clearConfirmWindow.show();
                }
            };
            if (fromRecycle) {
                deleteAllBtn.tooltip = "清空回收站";
            }
            var recycleBtn = {
                xtype: 'button',
                tooltip: '回收站',
                iconCls: 'extIcon extRecycle grayColor',
                handler: function () {
                    FastExt.Grid.showRecycleGrid(this, dataStore);
                }
            };
            var searchBtn = {
                xtype: 'button',
                toolType: 'searchBtn',
                tooltip: '搜索数据',
                iconCls: 'extIcon extSearch grayColor',
                handler: function () {
                    FastExt.Grid.showColumnSearchWin(this, dataStore.grid);
                }
            };
            var sortBtn = {
                xtype: 'button',
                toolType: 'sortBtn',
                tooltip: '排序数据',
                iconCls: 'extIcon extSort grayColor',
                handler: function () {
                    FastExt.Grid.showColumnSortWin(this, dataStore.grid);
                }
            };
            var timerBtn = {
                xtype: 'button',
                toolType: 'timerBtn',
                tooltip: '定时刷新',
                iconCls: 'extIcon extAlarm grayColor',
                baseIconCls: 'extIcon extAlarm',
                handler: function () {
                    FastExt.Grid.showTimerRefreshGrid(this, dataStore.grid);
                }
            };
            var reportBtn = {
                xtype: 'button',
                toolType: 'reportBtn',
                tooltip: '图表查看',
                iconCls: 'extIcon extReport grayColor',
                handler: function () {
                    FastExt.Grid.showEChartConfigWin(this, dataStore.grid);
                }
            };
            var selectHistoryBtn = {
                xtype: 'button',
                toolType: 'selectHistoryBtn',
                tooltip: '数据选择器',
                iconCls: 'extIcon extSelect grayColor',
                baseIconCls: 'extIcon extSelect',
                handler: function () {
                    FastExt.Grid.showSelectRecordHistory(this, dataStore.grid);
                }
            };
            pagingtoolbar.insert(0, control);
            pagingtoolbar.insert(0, {
                xtype: 'label',
                text: '每页',
                margin: '0 10 0 10'
            });
            var refreshBtn = pagingtoolbar.child("#refresh");
            var beginIndex = pagingtoolbar.items.indexOf(refreshBtn);
            if (dataStore.entity && FastExt.Base.toBool(dataStore.entity.actionTimer, true)) {
                pagingtoolbar.insert(++beginIndex, timerBtn);
            }
            pagingtoolbar.insert(++beginIndex, "-");
            pagingtoolbar.insert(++beginIndex, searchBtn);
            pagingtoolbar.insert(++beginIndex, sortBtn);
            pagingtoolbar.insert(++beginIndex, selectHistoryBtn);
            if (fromRecycle) {
                var rebackBtn = {
                    xtype: 'button',
                    tooltip: '还原数据',
                    checkSelect: 2,
                    iconCls: 'extIcon extReback grayColor',
                    handler: function () {
                        FastExt.Grid.rebackGridData(dataStore.grid);
                    }
                };
                pagingtoolbar.insert(++beginIndex, "-");
                pagingtoolbar.insert(++beginIndex, rebackBtn);
            }
            pagingtoolbar.insert(++beginIndex, "-");
            if (!fromRecycle) {
                if (dataStore.entity && FastExt.Base.toBool(dataStore.entity.actionCopy, true)) {
                    pagingtoolbar.insert(++beginIndex, copyBtn);
                }
            }
            if (dataStore.entity && FastExt.Base.toBool(dataStore.entity.actionDeleteAll, true)
                && FastExt.System.isSuperRole()) {
                pagingtoolbar.insert(++beginIndex, deleteAllBtn);
            }
            if (dataStore.entity && !Ext.isEmpty(dataStore.entity["echartsDate"])) {
                pagingtoolbar.insert(++beginIndex, "-");
                pagingtoolbar.insert(++beginIndex, reportBtn);
            }
            if (!fromRecycle && entityRecycle) {
                pagingtoolbar.insert(++beginIndex, "-");
                pagingtoolbar.insert(++beginIndex, recycleBtn);
            }
            return pagingtoolbar;
        };
        Grid.showRecycleGrid = function (obj, dataStore) {
            if (!dataStore) {
                return;
            }
            var title = "回收站";
            if (dataStore.entity.menu) {
                title = dataStore.entity.menu.text + "-回收站";
            }
            var entityObj = eval("new " + dataStore.entity.entityCode + "()");
            entityObj.menu = {
                id: $.md5(title),
                text: title
            };
            var where = { "^fromRecycle": true };
            var gridPanel = entityObj.getList(FastExt.Json.mergeJson(where, dataStore.where));
            var entityOwner = gridPanel.down("[entityList=true]");
            entityOwner.code = $.md5(dataStore.entity.entityCode + "回收站");
            var winWidth = parseInt((document.body.clientWidth * 0.7).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.8).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                title: title,
                iconCls: 'extIcon extRecycle',
                layout: 'fit',
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 600,
                constrain: true,
                resizable: true,
                modal: true,
                maximizable: true,
                animateTarget: obj,
                maximized: false,
                items: [gridPanel]
            });
            win.show();
        };
        Grid.rebackGridData = function (grid) {
            return new Ext.Promise(function (resolve, reject) {
                if (!grid.getStore().entity) {
                    Ext.Msg.alert('系统提醒', '还原失败！Grid的DataStore未绑定Entity!');
                    return;
                }
                if (grid.getSelection().length === 0) {
                    FastExt.Dialog.toast('请您先选择需要还原的数据！');
                    return;
                }
                var selectLength = grid.getSelection().length;
                var doDelete = function () {
                    FastExt.Dialog.showWait("正在还原数据中……");
                    FastExt.Store.commitStoreReback(grid.getStore(), grid.getSelection()).then(function (success, message) {
                        if (success) {
                            grid.getSelectionModel().deselectAll();
                            var grouped = grid.getStore().isGrouped();
                            if (grouped) {
                                FastExt.Grid.getGridView(grid).getFeature('group').collapseAll();
                            }
                            FastExt.Dialog.hideWait();
                            Ext.Msg.alert('系统提醒', '还原成功！');
                        }
                        resolve(success);
                    });
                };
                var confirmConfig = {
                    title: "系统提醒",
                    icon: Ext.Msg.QUESTION,
                    message: "您确定还原选中的" + selectLength + "条数据吗？",
                    buttons: Ext.Msg.YESNO,
                    defaultFocus: "no",
                    callback: function (button, text) {
                        if (button === "yes") {
                            doDelete();
                        }
                    }
                };
                Ext.Msg.show(confirmConfig);
            });
        };
        Grid.showColumnSortWin = function (obj, grid) {
            if (!obj.sortWin) {
                var store_2 = FastExt.Store.getGridColumnStore(grid);
                var buildItem_2 = function (data, defaultValue) {
                    if (!defaultValue) {
                        defaultValue = "ASC";
                    }
                    return {
                        xtype: 'container',
                        flex: 1,
                        columnWidth: 1,
                        layout: 'hbox',
                        margin: '0 0 2 0',
                        border: 0,
                        toParam: function () {
                            var param = {};
                            var combo = this.items.get(0);
                            param["property"] = combo.getValue();
                            var directionItem = this.items.get(1);
                            param["direction"] = directionItem.getValue();
                            return param;
                        },
                        items: [
                            {
                                xtype: 'combo',
                                region: 'west',
                                valueField: 'id',
                                flex: 0.5,
                                margin: '2 0 0 2',
                                value: data.get("id"),
                                displayField: 'text',
                                editable: false,
                                store: store_2
                            },
                            {
                                xtype: 'combo',
                                flex: 0.5,
                                valueField: 'value',
                                editable: false,
                                margin: '2 2 0 2',
                                value: defaultValue,
                                triggers: {
                                    close: {
                                        cls: 'text-clear',
                                        handler: function () {
                                            this.ownerCt.destroy();
                                        }
                                    }
                                },
                                store: Ext.create('Ext.data.Store', {
                                    fields: ["id", "text"],
                                    data: [
                                        {
                                            'text': '无',
                                            'value': 'NONE'
                                        },
                                        {
                                            'text': '正序',
                                            "value": 'ASC'
                                        },
                                        {
                                            'text': '倒序',
                                            "value": 'DESC'
                                        }
                                    ]
                                })
                            }
                        ]
                    };
                };
                var formPanel_2 = Ext.create('Ext.form.FormPanel', {
                    margin: '5',
                    border: 0,
                    layout: 'column',
                    width: 460,
                    scrollable: true,
                    defaults: {
                        labelWidth: 80,
                        margin: '5 5 5 5',
                        labelAlign: 'right',
                        emptyText: '请填写'
                    },
                    items: [],
                });
                var winSize = FastExt.Grid.getGridInWindowSize(grid);
                obj.sortWin = Ext.create('Ext.window.Window', {
                    title: '排序数据',
                    layout: 'fit',
                    constrain: true,
                    iconCls: 'extIcon extSort',
                    resizable: true,
                    minHeight: 200,
                    minWidth: 400,
                    height: winSize.height,
                    width: winSize.width,
                    animateTarget: obj,
                    items: [formPanel_2],
                    refreshSortItem: function (addDefault) {
                        formPanel_2.removeAll();
                        grid.getStore().getSorters().each(function (item) {
                            var data = store_2.findRecord("id", item.getProperty(), 0, false, false, true);
                            if (data) {
                                formPanel_2.add(buildItem_2(data, item.getDirection()));
                            }
                        });
                        if (formPanel_2.items.length === 0 && addDefault) {
                            formPanel_2.add(buildItem_2(store_2.getAt(0), "NONE"));
                        }
                    },
                    listeners: {
                        close: function (panel, eOpts) {
                            if (obj.sortWin.gridLoad) {
                                obj.sortWin.gridLoad.destroy();
                            }
                            if (store_2) {
                                store_2.destroy();
                            }
                            obj.sortWin = null;
                        }
                    },
                    buttons: [
                        {
                            text: '添加条件',
                            iconCls: 'extIcon extPlus',
                            handler: function () {
                                formPanel_2.add(buildItem_2(store_2.getAt(0)));
                                var winHeight = 50 + formPanel_2.items.length * 35 + 55;
                                formPanel_2.scrollTo(0, winHeight, false);
                            }
                        },
                        {
                            text: '确定',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                FastExt.Grid.clearColumnSort(grid);
                                var sorts = [];
                                formPanel_2.items.each(function (item) {
                                    var toParam = item.toParam();
                                    sorts.push(toParam);
                                    var column = FastExt.Grid.getColumn(grid, toParam.property);
                                    column.sortDirection = toParam.direction;
                                    FastExt.Grid.refreshColumnStyle(column);
                                });
                                if (sorts.length > 0) {
                                    grid.getStore().sort(sorts);
                                }
                                else {
                                    grid.getStore().loadPage(1);
                                }
                                FastExt.Grid.checkColumnSort(grid);
                            }
                        }
                    ]
                });
                obj.sortWin.gridLoad = grid.on('load', function () {
                    try {
                        obj.sortWin.refreshSortItem(false);
                    }
                    catch (e) {
                        console.error(e);
                    }
                }, this, { destroyable: true });
                obj.sortWin.refreshSortItem(true);
                grid.ownerCt.add(obj.sortWin);
            }
            else {
                FastExt.Component.shakeComment(obj.sortWin);
            }
            obj.sortWin.show();
        };
        Grid.clearColumnSort = function (grid) {
            var sortCollection = grid.getStore().getSorters();
            sortCollection.clear();
            if (!grid) {
                return;
            }
            Ext.each(grid.getColumns(), function (item) {
                item.sortDirection = null;
                FastExt.Grid.refreshColumnStyle(item);
            });
        };
        Grid.showTimerRefreshGrid = function (obj, grid) {
            if (!obj.timerWin) {
                if (!grid.timerConfig) {
                    grid.timerConfig = {
                        "state": 0,
                        "value": 30
                    };
                }
                var formPanel_3 = Ext.create('Ext.form.FormPanel', {
                    margin: '5',
                    border: 0,
                    layout: 'column',
                    width: 400,
                    scrollable: true,
                    defaults: {
                        labelWidth: 120,
                        margin: '5 5 5 5',
                        labelAlign: 'right',
                        emptyText: '请填写'
                    },
                    viewModel: {
                        data: grid.timerConfig
                    },
                    items: [
                        {
                            xtype: 'combo',
                            name: 'state',
                            displayField: 'text',
                            valueField: 'id',
                            fieldLabel: '是否启动',
                            editable: false,
                            flex: 1,
                            columnWidth: 1,
                            value: 0,
                            allowBlank: false,
                            bind: '{state}',
                            store: FastExt.Store.getYesOrNoDataStore()
                        },
                        {
                            xtype: 'combo',
                            name: 'silence',
                            displayField: 'text',
                            valueField: 'id',
                            fieldLabel: '静默刷新',
                            editable: false,
                            flex: 1,
                            columnWidth: 1,
                            value: 0,
                            allowBlank: false,
                            bind: '{silence}',
                            store: FastExt.Store.getYesOrNoDataStore()
                        },
                        {
                            xtype: "numberfield",
                            name: 'value',
                            bind: '{value}',
                            fieldLabel: "时间间隔（秒）",
                            columnWidth: 1,
                            minValue: 1,
                            value: 30,
                            decimalPrecision: 0,
                            allowBlank: false
                        }
                    ],
                });
                var winSize = FastExt.Grid.getGridInWindowSize(grid);
                obj.timerWin = Ext.create('Ext.window.Window', {
                    title: '定时刷新数据',
                    layout: 'fit',
                    constrain: true,
                    iconCls: 'extIcon extAlarm',
                    resizable: true,
                    minHeight: 200,
                    minWidth: 400,
                    height: winSize.height,
                    width: winSize.width,
                    animateTarget: obj,
                    items: [formPanel_3],
                    listeners: {
                        close: function (panel, eOpts) {
                            obj.timerWin = null;
                        }
                    },
                    buttons: [
                        {
                            text: '确定',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                var form = formPanel_3.getForm();
                                if (form.isValid()) {
                                    grid.timerConfig = formPanel_3.getValues();
                                    grid.checkRefreshTimer(true);
                                    obj.timerWin.close();
                                }
                            }
                        }
                    ]
                });
                grid.ownerCt.add(obj.timerWin);
            }
            else {
                FastExt.Component.shakeComment(obj.timerWin);
            }
            obj.timerWin.show();
        };
        Grid.showEChartConfigWin = function (obj, grid) {
            if (!obj.reportWin) {
                var columnStore_1 = FastExt.Store.getChartGridColumnStore(grid);
                var buildItem_3 = function (data, defaultValue) {
                    if (!defaultValue) {
                        defaultValue = "count";
                    }
                    return {
                        xtype: 'container',
                        flex: 1,
                        columnWidth: 1,
                        layout: 'hbox',
                        margin: '0 0 2 0',
                        border: 0,
                        toParam: function () {
                            var param = {};
                            var combo = this.items.get(0);
                            param["property"] = combo.getValue();
                            var functionItem = this.items.get(1);
                            param["function"] = functionItem.getValue();
                            param["details"] = combo.getDisplayValue() + "【" + functionItem.getDisplayValue() + "】";
                            return param;
                        },
                        items: [
                            {
                                xtype: 'combo',
                                region: 'west',
                                valueField: 'id',
                                flex: 0.5,
                                margin: '2 0 0 2',
                                value: data.get("id"),
                                displayField: 'text',
                                editable: false,
                                store: columnStore_1
                            },
                            {
                                xtype: 'combo',
                                flex: 0.5,
                                valueField: 'value',
                                editable: false,
                                margin: '2 2 0 2',
                                value: defaultValue,
                                triggers: {
                                    close: {
                                        cls: 'text-clear',
                                        handler: function () {
                                            this.ownerCt.destroy();
                                        }
                                    }
                                },
                                store: Ext.create('Ext.data.Store', {
                                    fields: ["id", "text"],
                                    data: [
                                        {
                                            'text': '计数',
                                            'value': 'count'
                                        },
                                        {
                                            'text': '平均值',
                                            "value": 'avg'
                                        },
                                        {
                                            'text': '求和',
                                            "value": 'sum'
                                        }, {
                                            'text': '最大值',
                                            "value": 'max'
                                        }, {
                                            'text': '最小值',
                                            "value": 'min'
                                        }
                                    ]
                                })
                            },
                        ]
                    };
                };
                var formPanel_4 = Ext.create('Ext.form.FormPanel', {
                    margin: '5',
                    border: 0,
                    layout: 'column',
                    width: 400,
                    scrollable: true,
                    defaults: {
                        labelWidth: 80,
                        margin: '5 5 5 5',
                        labelAlign: 'right',
                        emptyText: '请填写'
                    },
                    items: [],
                });
                obj.reportWin = Ext.create('Ext.window.Window', {
                    title: '图表查看',
                    layout: 'fit',
                    constrain: true,
                    iconCls: 'extIcon extReport',
                    resizable: true,
                    minHeight: 200,
                    minWidth: 400,
                    height: 200,
                    animateTarget: obj,
                    items: [formPanel_4],
                    listeners: {
                        close: function (panel, eOpts) {
                            obj.reportWin = null;
                        },
                        show: function (win) {
                            win.setLoading("请稍后……");
                            FastExt.Server.showExtConfig(grid.getStore().entity.entityCode, "EChartsColumn", function (success, data, message) {
                                if (success) {
                                    var toParams = FastExt.Json.jsonToObject(data);
                                    for (var i = 0; i < toParams.length; i++) {
                                        var toParam = toParams[i];
                                        var data_2 = columnStore_1.findRecord("id", toParam["property"], 0, false, false, true);
                                        if (data_2) {
                                            formPanel_4.add(buildItem_3(data_2, toParam["function"]));
                                        }
                                    }
                                }
                                win.setLoading(false);
                                if (formPanel_4.items.length === 0) {
                                    formPanel_4.add(buildItem_3(columnStore_1.getAt(0), "count"));
                                }
                            });
                        }
                    },
                    buttons: [
                        {
                            text: '添加统计',
                            iconCls: 'extIcon extPlus',
                            handler: function () {
                                formPanel_4.add(buildItem_3(columnStore_1.getAt(0)));
                                var winHeight = 50 + formPanel_4.items.length * 35 + 55;
                                formPanel_4.scrollTo(0, winHeight, false);
                            }
                        },
                        {
                            text: '确定',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                var params = {
                                    "entityCode": grid.getStore().entity.entityCode,
                                    "columnDate": grid.getStore().entity.echartsDate,
                                    "storeId": grid.getStore().getId(),
                                };
                                var toParams = [];
                                formPanel_4.items.each(function (item, index) {
                                    var toParam = item.toParam();
                                    toParams.push(toParam);
                                    for (var toParamKey in toParam) {
                                        params["echarts[" + index + "]." + toParamKey] = toParam[toParamKey];
                                    }
                                });
                                FastExt.Server.saveExtConfig(grid.getStore().entity.entityCode, "EChartsColumn", FastExt.Json.objectToJson(toParams), function () {
                                });
                                FastExt.Grid.showEntityECharts(this, grid.getStore().entity.comment + "【图表】", params);
                            }
                        }
                    ]
                });
                grid.ownerCt.add(obj.reportWin);
            }
            else {
                FastExt.Component.shakeComment(obj.reportWin);
            }
            obj.reportWin.show();
        };
        Grid.showEntityECharts = function (obj, title, params) {
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var beginDate = Ext.Date.format(Ext.Date.add(new Date(), Ext.Date.MONTH, -1), 'Y-m-d');
            var endDate = Ext.Date.format(new Date(), 'Y-m-d');
            params["type"] = 0;
            params["chartTitle"] = title;
            params["beginDate"] = beginDate;
            params["endDate"] = endDate;
            var win = Ext.create('Ext.window.Window', {
                title: title,
                height: winHeight,
                width: winWidth,
                minWidth: winWidth,
                minHeight: winHeight,
                iconCls: 'extIcon extReport',
                layout: 'border',
                resizable: true,
                maximizable: true,
                constrain: true,
                modal: true,
                refreshECharts: function () {
                    var me = this;
                    if (FastExt.ECharts.hasECharts(me)) {
                        me.setLoading(false);
                        FastExt.ECharts.getECharts(me).showLoading();
                    }
                    FastExt.Server.showEcharts(params, function (success, message, data) {
                        me.setLoading(false);
                        if (success) {
                            FastExt.ECharts.loadECharts(me, data);
                        }
                        else {
                            FastExt.Dialog.showAlert("系统提醒", message);
                        }
                    });
                },
                bodyStyle: {
                    background: "#fcfcfc"
                },
                tbar: {
                    xtype: 'toolbar',
                    overflowHandler: 'menu',
                    items: [
                        {
                            xtype: 'combo',
                            fieldLabel: "图表类型",
                            labelWidth: 60,
                            valueField: 'value',
                            editable: false,
                            value: 0,
                            listeners: {
                                change: function (obj, newValue, oldValue, eOpts) {
                                    params["type"] = newValue;
                                    win.refreshECharts();
                                }
                            },
                            store: Ext.create('Ext.data.Store', {
                                fields: ["id", "text"],
                                data: [
                                    {
                                        'text': '年图表',
                                        "value": 4
                                    },
                                    {
                                        'text': '月图表',
                                        "value": 1
                                    },
                                    {
                                        'text': '日图表',
                                        'value': 0
                                    },
                                    {
                                        'text': '时图表',
                                        "value": 2
                                    }, {
                                        'text': '时分图表',
                                        "value": 3
                                    }
                                ]
                            })
                        },
                        {
                            xtype: "daterangefield",
                            fieldLabel: "日期范围",
                            flex: 1,
                            margin: '0 0 0 5',
                            maxRangeMonth: 12,
                            beginDate: beginDate,
                            endDate: endDate,
                            labelWidth: 60,
                            onClearValue: function () {
                                params["beginDate"] = this.beginDate;
                                params["endDate"] = this.endDate;
                                win.refreshECharts();
                            },
                            onAfterSelect: function () {
                                params["beginDate"] = this.beginDate;
                                params["endDate"] = this.endDate;
                                win.refreshECharts();
                            }
                        },
                        {
                            xtype: 'button',
                            text: '折线图',
                            iconCls: 'extIcon extPolyline',
                            margin: '0 5 0 5',
                            handler: function () {
                                params["chartType"] = "line";
                                win.refreshECharts();
                            }
                        }, {
                            xtype: 'button',
                            text: '柱状图',
                            iconCls: 'extIcon extReport',
                            margin: '0 5 0 5',
                            handler: function () {
                                params["chartType"] = "bar";
                                win.refreshECharts();
                            }
                        }, {
                            xtype: 'button',
                            text: '堆叠图',
                            iconCls: 'extIcon extMore',
                            margin: '0 5 0 5',
                            handler: function () {
                                params["chartType"] = "stack";
                                win.refreshECharts();
                            }
                        }
                    ]
                },
                listeners: {
                    show: function (obj) {
                        win.setLoading("请稍后……");
                        obj.refreshECharts();
                    }
                }
            });
            win.show();
        };
        Grid.deleteGridData = function (grid) {
            return new Ext.Promise(function (resolve, reject) {
                if (!grid.getStore().entity) {
                    Ext.Msg.alert('系统提醒', '删除失败！Grid的DataStore未绑定Entity!');
                    return;
                }
                if (grid.getSelection().length === 0) {
                    FastExt.Dialog.toast('请您先选择需要删除的数据！');
                    return;
                }
                var selectLength = grid.getSelection().length;
                var doDelete = function () {
                    FastExt.Dialog.showWait("正在删除数据中……");
                    FastExt.Store.commitStoreDelete(grid.getStore(), grid.getSelection()).then(function (success) {
                        if (success) {
                            grid.getSelectionModel().deselectAll();
                            var grouped = grid.getStore().isGrouped();
                            if (grouped) {
                                FastExt.Grid.getGridView(grid).getFeature('group').collapseAll();
                            }
                            FastExt.Dialog.hideWait();
                        }
                        resolve(success);
                    });
                };
                if (grid.operate && grid.operate.alertDelete) {
                    FastExt.Dialog.showDeleteDataAlert("确认删除数据", "您确定删除选中的" + selectLength + "条数据吗？", doDelete);
                }
                else {
                    doDelete();
                }
            });
        };
        Grid.updateGridData = function (grid) {
            return new Ext.Promise(function (resolve, reject) {
                if (!grid.getStore().entity) {
                    Ext.Msg.alert('系统提醒', '修改失败！Grid的DataStore未绑定Entity!');
                    return;
                }
                var records = grid.getStore().getUpdatedRecords();
                if (records.length === 0) {
                    FastExt.Dialog.toast('当前暂无数据被修改！');
                    return;
                }
                if (grid.operate && grid.operate.alertUpdate) {
                    Ext.Msg.confirm("系统提醒", "您确定提交被修改的数据吗？", function (button, text) {
                        if (button === "yes") {
                            FastExt.Dialog.showWait("正在修改数据中……");
                            FastExt.Store.commitStoreUpdate(grid.getStore()).then(function (result) {
                                resolve(result);
                                FastExt.Dialog.hideWait();
                            });
                        }
                    });
                }
                else {
                    FastExt.Dialog.showWait("正在修改数据中……");
                    FastExt.Store.commitStoreUpdate(grid.getStore()).then(function (result) {
                        resolve(result);
                        FastExt.Dialog.hideWait();
                    });
                }
            });
        };
        Grid.showPublicDetailsWindow = function (obj, title, entity, record, buttons) {
            FastExt.Grid.showDetailsWindow(obj, title, entity, record, buttons, {
                "noneManager": true,
            });
        };
        Grid.showDetailsWindow = function (obj, title, entity, record, buttons, columnConfig) {
            if (!entity) {
                return;
            }
            if (!record) {
                return;
            }
            var onlyValueArray = [entity.code];
            if (entity.idProperty) {
                for (var j = 0; j < entity.idProperty.length; j++) {
                    var idName = entity.idProperty[j];
                    onlyValueArray.push(idName + ":" + record.get(idName));
                }
            }
            if (onlyValueArray.length == 1) {
                onlyValueArray.push(new Date().getTime());
            }
            FastExt.Dialog.showWait("获取配置中……");
            var onlyCode = $.md5(JSON.stringify(onlyValueArray));
            FastExt.Grid.restoreGridButton(entity.entityCode).then(function (buttonInfos) {
                var targetEntityCode = entity.entityCode;
                if (!Ext.isEmpty(record.get("columnEntityCode"))) {
                    targetEntityCode = record.get("columnEntityCode");
                }
                FastExt.Server.showColumns(targetEntityCode, function (success, value, message) {
                    FastExt.Dialog.hideWait();
                    if (success) {
                        var columnInfos = Ext.decode(value);
                        var data = [];
                        var lastGroupNon = 1;
                        for (var key in columnInfos) {
                            if (columnInfos.hasOwnProperty(key)) {
                                var column = columnInfos[key];
                                if (Ext.isEmpty(column.dataIndex)) {
                                    continue;
                                }
                                if (!FastExt.Base.toBool(column.detailsable, true)) {
                                    continue;
                                }
                                var item = {
                                    value: record.get(column.dataIndex),
                                    groupHeaderText: column.groupHeaderText,
                                    record: record,
                                    entity: entity,
                                    configEditor: FastExt.Base.toBool(column["canEdit"]),
                                    dataIndex: column.dataIndex,
                                    columnName: column.columnName,
                                    editor: false
                                };
                                for (var c in column) {
                                    if (column.hasOwnProperty(c)) {
                                        item[c] = column[c];
                                    }
                                }
                                if (!Ext.isEmpty(column["editorField"])) {
                                    var fieldObj = FastExt.Json.jsonToObject(column["editorField"]);
                                    if (fieldObj != null && !Ext.isEmpty(fieldObj.xtype)) {
                                        item.configEditor = true;
                                    }
                                }
                                if (!FastExt.Base.toBool(record.get(column.dataIndex + "Editor"), true)) {
                                    item.configEditor = false;
                                }
                                if (!FastExt.Base.toBool(record.get("__editor"), true)) {
                                    item.configEditor = false;
                                }
                                if (!item.groupHeaderText) {
                                    item.groupHeaderText = lastGroupNon;
                                }
                                else {
                                    lastGroupNon++;
                                }
                                data.push(item);
                            }
                        }
                        data.sort(function (a, b) {
                            return a.index - b.index;
                        });
                        var detailsStore = Ext.create('Ext.data.Store', {
                            fields: [],
                            autoLoad: false,
                            groupField: 'groupHeaderText'
                        });
                        detailsStore.loadData(data);
                        detailsStore.sort('index', 'ASC');
                        var iframePanelArray = Ext.ComponentQuery.query("window[detailsWinId=" + onlyCode + "]");
                        if (iframePanelArray.length > 0) {
                            iframePanelArray[0].getComponent("detailsGrid").setStore(detailsStore);
                            Ext.WindowManager.bringToFront(iframePanelArray[0], true);
                            FastExt.Component.shakeComment(iframePanelArray[0]);
                            return;
                        }
                        var detailsGrid = Ext.create('Ext.grid.Panel', {
                            border: 0,
                            scrollable: 'y',
                            region: 'center',
                            store: detailsStore,
                            itemId: "detailsGrid",
                            hideHeaders: true,
                            features: [{
                                    ftype: 'grouping',
                                    collapsible: false,
                                    hideGroupedHeader: true,
                                    expandTip: null,
                                    collapseTip: null,
                                    groupHeaderTpl: [
                                        '<b>{name:this.formatName}</b>', {
                                            formatName: function (name) {
                                                if (Ext.isNumeric(name)) {
                                                    return "基本属性";
                                                }
                                                return name;
                                            }
                                        }
                                    ]
                                }],
                            columns: [
                                {
                                    header: '名称',
                                    power: false,
                                    dataIndex: 'text',
                                    flex: 0.3,
                                    tdCls: 'tdVTop',
                                    align: 'right',
                                    renderer: function (val, m, r) {
                                        m.style = 'overflow:auto;padding: 3px 6px;text-overflow: ellipsis;white-space:normal !important;word-break:break-word;line-height: 30px; ';
                                        return "<b>" + val + "：</b>";
                                    }
                                },
                                {
                                    header: '值',
                                    dataIndex: 'value',
                                    power: false,
                                    flex: 0.7,
                                    align: 'left',
                                    renderer: function (val, m, r, rowIndex, colIndex, store, view) {
                                        try {
                                            m.style = 'overflow:auto;padding: 3px 6px;text-overflow: ellipsis;white-space:normal !important;word-break:break-word; line-height: 30px;';
                                            var fun = FastExt.Entity.getColumnRender(entity, r.get("dataIndex"));
                                            if (Ext.isEmpty(fun)) {
                                                var rendererFunction = r.get("rendererFunction");
                                                if (rendererFunction) {
                                                    fun = eval(rendererFunction);
                                                }
                                            }
                                            if (!Ext.isEmpty(fun)) {
                                                val = fun(val, m, r.get("record"), rowIndex, colIndex, store, view, true);
                                            }
                                            if (Ext.isEmpty(val) || val === "null") {
                                                return "<font color='#ccc'>无</font>";
                                            }
                                            return val;
                                        }
                                        catch (e) {
                                            return val;
                                        }
                                    }
                                },
                                {
                                    xtype: 'actioncolumn',
                                    width: 80,
                                    sortable: false,
                                    menuDisabled: true,
                                    items: [
                                        {
                                            iconCls: 'extIcon extEdit editColor marginRight5 textBlackShadowWhite',
                                            tooltip: '编辑数据',
                                            align: 'center',
                                            isDisabled: function (view, rowIndex, colIndex, item, record) {
                                                return !FastExt.Base.toBool(record.get("editor"), false);
                                            },
                                            getClass: function (v, metadata, record) {
                                                if (FastExt.Base.toBool(record.get("editor"), false)) {
                                                    return "extIcon extEdit marginRight5 textBlackShadowWhite";
                                                }
                                                return "";
                                            },
                                            handler: FastExt.Grid.showDetailsEditMenu
                                        }, {
                                            iconCls: 'extIcon extCopy2 searchColor textBlackShadowWhite',
                                            tooltip: '复制数据',
                                            align: 'center',
                                            isDisabled: function (view, rowIndex, colIndex, item, record) {
                                                return !FastExt.Base.toBool(record.get("doCopy"), false);
                                            },
                                            getClass: function (v, metadata, record) {
                                                if (FastExt.Base.toBool(record.get("doCopy"), false)) {
                                                    return "extIcon extCopy2 searchColor textBlackShadowWhite";
                                                }
                                                return "";
                                            },
                                            handler: FastExt.Grid.copyDetailsValue
                                        }
                                    ]
                                }
                            ],
                            viewConfig: {
                                loadMask: {
                                    msg: '正在为您在加载数据…'
                                },
                                enableTextSelection: true
                            },
                            toggleActionColumn: function (record) {
                                if (this.lasClickRecord) {
                                    if (this.lasClickRecord.getId() === record.getId()) {
                                        return;
                                    }
                                    this.lasClickRecord.set("editor", false);
                                    this.lasClickRecord.set("doCopy", false);
                                }
                                record.set("doCopy", true);
                                record.set("editor", record.get("configEditor"));
                                this.lasClickRecord = record;
                            },
                            listeners: {
                                itemclick: function (obj, record) {
                                    this.toggleActionColumn(record);
                                },
                                select: function (obj, record) {
                                    this.toggleActionColumn(record);
                                },
                            }
                        });
                        if (!buttons) {
                            buttons = [];
                        }
                        var winButtons = buttons;
                        var menus = FastExt.System.searchMenusByEntityCode(entity.entityCode);
                        var invokeMenu_1 = function (invokeMenu) {
                            if (invokeMenu) {
                                try {
                                    if (FastExt.System.lastTabId === invokeMenu.id) {
                                        FastExt.Component.shakeComment(Ext.getCmp(invokeMenu.id));
                                        return;
                                    }
                                    FastExt.System.selectMenu(invokeMenu.id);
                                }
                                finally {
                                    if (entity.idProperty) {
                                        FastExt.Component.futureQuery("[menuId=" + invokeMenu.id + "]", function (objTab) {
                                            if (objTab) {
                                                var _loop_5 = function (j) {
                                                    var idName = entity.idProperty[j];
                                                    FastExt.Component.futureQuery("[dataIndex=" + idName + "]", function (objColumn) {
                                                        if (objColumn) {
                                                            if (!FastExt.Base.toBool(objColumn[0].restoreConfig, false)) {
                                                                return false;
                                                            }
                                                            objColumn[0].searchValue(record.get(idName));
                                                        }
                                                        return true;
                                                    }, 15 * 1000, objTab[0]);
                                                };
                                                for (var j = 0; j < entity.idProperty.length; j++) {
                                                    _loop_5(j);
                                                }
                                            }
                                            return true;
                                        }, 30 * 1000);
                                    }
                                }
                            }
                            else {
                                FastExt.Dialog.showAlert("系统提醒", "打开失败！您或没有此功能的管理权限！");
                            }
                        };
                        if (menus.length > 0 && FastExt.System.isSuperRole()) {
                            var menuButton = {
                                text: '进入管理界面',
                                iconCls: "extIcon extManage whiteColor",
                                menu: [],
                            };
                            var _loop_4 = function (menu) {
                                menuButton.menu.push({
                                    text: FastExt.System.getPlainMenu(menu, "&nbsp;>&nbsp;"),
                                    icon: FastExt.Server.getIcon(menu.iconName, menu.color),
                                    handler: function () {
                                        invokeMenu_1(menu);
                                    }
                                });
                            };
                            for (var _i = 0, menus_2 = menus; _i < menus_2.length; _i++) {
                                var menu = menus_2[_i];
                                _loop_4(menu);
                            }
                            winButtons.push(menuButton);
                        }
                        if (buttonInfos.length > 0) {
                            var moreButton = {
                                text: '其他操作',
                                iconCls: 'extIcon extMore whiteColor',
                                menu: []
                            };
                            for (var i = 0; i < buttonInfos.length; i++) {
                                var button = buttonInfos[i];
                                moreButton.menu.push({
                                    text: button.text,
                                    iconCls: button.iconCls,
                                    icon: button.icon,
                                    functionStr: button.handler,
                                    handler: function (obj, e) {
                                        var inVarNames = [];
                                        try {
                                            var gussGrid_1 = {
                                                getSelection: function () {
                                                    return [record];
                                                },
                                                getSelectionModel: function () {
                                                    return gussGrid_1;
                                                }
                                            };
                                            window[entity.getListThisVarName] = entity;
                                            inVarNames.push(entity.getListThisVarName);
                                            window[entity.getListGridVarName] = gussGrid_1;
                                            inVarNames.push(entity.getListGridVarName);
                                            var func = FastExt.Base.loadFunction(this.functionStr);
                                            func.apply(obj, e);
                                        }
                                        catch (e) {
                                            console.error(e, this.functionStr, entity);
                                        }
                                        finally {
                                            for (var _i = 0, inVarNames_1 = inVarNames; _i < inVarNames_1.length; _i++) {
                                                var inVarName = inVarNames_1[_i];
                                                window[inVarName] = null;
                                            }
                                        }
                                    }
                                });
                            }
                            winButtons.push(moreButton);
                        }
                        var winWidth = parseInt((document.body.clientWidth * 0.4).toFixed(0));
                        var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
                        var tools = [];
                        if (FastExt.System.isSuperRole()) {
                            tools.push({
                                type: 'help',
                                callback: function (panel, tool, event) {
                                    FastExt.Dialog.showJson(this, "查看原始数据结构", FastExt.Json.objectToJson(record.data));
                                }
                            });
                        }
                        var win = Ext.create('Ext.window.Window', {
                            title: title,
                            detailsWinId: onlyCode,
                            height: winHeight,
                            width: winWidth,
                            minHeight: 450,
                            iconCls: 'extIcon extDetails',
                            minWidth: 400,
                            layout: 'border',
                            resizable: true,
                            constrain: true,
                            maximizable: true,
                            animateTarget: obj,
                            tools: tools,
                            listeners: {
                                destroy: function (obj, op) {
                                },
                                show: function (obj) {
                                    obj.focus();
                                }
                            },
                            items: [detailsGrid],
                            buttons: winButtons.length > 0 ? winButtons : null,
                        });
                        win.show();
                    }
                    else {
                        FastExt.Dialog.showAlert("系统提醒", message);
                    }
                }, columnConfig);
            });
        };
        Grid.createDetailsGrid = function (data, configGrid, configName, configValue) {
            var newData = [];
            for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                var datum = data_3[_i];
                if (datum) {
                    newData.push(datum);
                }
            }
            var dataStore = Ext.create('Ext.data.Store', {
                autoLoad: false,
                fields: [],
                data: newData
            });
            var nameConfig = {
                header: '名称',
                dataIndex: 'name',
                flex: 0.3,
                align: 'right',
                renderer: function (val, m, r) {
                    m.style = 'color:#000000;overflow:auto;padding: 3px 6px;text-overflow: ellipsis;white-space:normal !important;line-height:25px;word-break:break-word;min-height:32px; ';
                    return "<b>" + val + "：</b>";
                },
                listeners: {
                    dblclick: function (grid, obj, celNo, obj1, obj2, rowNo, e) {
                        if (celNo === 0) {
                        }
                    }
                }
            };
            var valueConfig = {
                header: '值',
                dataIndex: 'value',
                flex: 0.7,
                align: 'left',
                renderer: function (val, m, r) {
                    try {
                        m.style = 'overflow:auto;padding: 3px 6px;text-overflow: ellipsis;white-space:normal !important;line-height:25px;word-break:break-word;min-height:32px; ';
                        var fun = r.get("renderer");
                        if (Ext.isFunction(fun)) {
                            var value = fun(val, m, r.get("record"), -1, -1, null, null, true);
                            if (Ext.isEmpty(value)) {
                                return "<font color='#ccc'>无</font>";
                            }
                            return value;
                        }
                        return val;
                    }
                    catch (e) {
                        return val;
                    }
                },
                listeners: {
                    dblclick: function (grid, obj, celNo, obj1, obj2, rowNo, e) {
                        if (celNo === 0) {
                        }
                    }
                }
            };
            var gridConfig = {
                region: 'center',
                border: 0,
                columnLines: true,
                store: dataStore,
                viewConfig: {
                    enableTextSelection: true
                },
                updateData: function (newData) {
                    dataStore.setData(newData);
                },
                columns: [FastExt.Json.mergeJson(nameConfig, configName),
                    FastExt.Json.mergeJson(valueConfig, configValue)]
            };
            return Ext.create('Ext.grid.Panel', FastExt.Json.mergeJson(gridConfig, configGrid));
        };
        Grid.showDetailsEditMenu = function (view, rowIndex, colIndex, item, e, record) {
            var entity = record.get("entity");
            var columnName = record.get("columnName");
            if (Ext.isEmpty(columnName)) {
                columnName = record.get("dataIndex");
            }
            var editorField;
            var linkColumn = record.get("linkColumn");
            if (linkColumn) {
                var realColumnName = FastExt.Entity.getRealAttr(linkColumn);
                if (realColumnName) {
                    columnName = realColumnName;
                }
                editorField = Ext.create(linkColumn.configField);
            }
            if (!editorField) {
                editorField = FastExt.Entity.getEditorFieldObject(entity, columnName);
            }
            if (!editorField) {
                editorField = Ext.create(FastExt.Json.jsonToObjectUnsafe(record.get("editorField")));
            }
            if (!editorField) {
                FastExt.Dialog.toast("此属性无法编辑！");
                return;
            }
            view.getSelectionModel().selectRange(rowIndex, rowIndex);
            var cell = view.getCell(record, 1, true);
            editorField.flex = 1;
            editorField.emptyText = "请输入";
            editorField.region = 'center';
            editorField.record = record.get("record");
            editorField.fromColumn = true;
            if (editorField.hasListener("beforeedit")) {
                if (!editorField.fireEvent("beforeedit")) {
                    return;
                }
            }
            if (FastExt.Listeners.onBeforeEditorField) {
                if (!FastExt.Listeners.onBeforeEditorField(editorField, editorField.record)) {
                    return;
                }
            }
            if (FastExt.Base.toString(editorField.inputType, "none") !== "password") {
                if (Ext.isFunction(editorField.setValue)) {
                    var value = record.get("value");
                    if (Ext.isObject(value) || Ext.isArray(value)) {
                        editorField.setValue(JSON.stringify(value), record.get("record"));
                    }
                    else {
                        editorField.setValue(value, record.get("record"));
                    }
                }
            }
            if (Ext.isFunction(editorField.startEdit)) {
                editorField.startEdit();
            }
            var putRecord = function (fieldObj) {
                if (fieldObj.isValid()) {
                    if (!Ext.isEmpty(fieldObj.getValue())) {
                        var store_3 = record.get("record").store;
                        if (!store_3) {
                            record.store.commitChanges();
                            return;
                        }
                        store_3.holdUpdate = true;
                        FastExt.Store.setRecordValue(record.get("record"), record.get("dataIndex"), fieldObj);
                        FastExt.Store.setRecordValue(record, "value", fieldObj);
                        if (view) {
                            view.setLoading("提交数据中……");
                        }
                        FastExt.Store.commitStoreUpdate(store_3).then(function (success) {
                            store_3.holdUpdate = false;
                            if (view) {
                                view.setLoading(false);
                            }
                            if (success) {
                                record.store.commitChanges();
                            }
                        });
                    }
                }
            };
            if (Ext.isFunction(editorField.showWindow)) {
                editorField.showWindow(cell, function (result) {
                    putRecord(result);
                });
                return;
            }
            var menu = Ext.create('Ext.menu.Menu', {
                showSeparator: false,
                layout: 'fit',
                scrollToHidden: true,
                modal: true,
                editorMenu: true,
                shadow: false,
                doUpdate: function () {
                    var me = this;
                    if (me.putRecorded) {
                        return;
                    }
                    var fieldObj = me.items.get(0).items.get(0);
                    if (!fieldObj.isValid()) {
                        FastExt.Component.shakeComment(me);
                        FastExt.Dialog.toast(FastExt.Form.getFieldError(fieldObj)[0]);
                        return;
                    }
                    me.putRecorded = true;
                    putRecord(fieldObj);
                    me.hide();
                },
                items: [
                    {
                        xtype: 'container',
                        layout: {
                            type: 'hbox',
                            align: 'stretch'
                        },
                        style: {
                            background: "#ffffff",
                            borderWidth: 1,
                            borderColor: "#ffffff",
                            color: '#eeeee'
                        },
                        border: 0,
                        items: [editorField,
                            {
                                xtype: 'button',
                                text: '确定',
                                name: 'confirm',
                                region: 'east',
                                iconCls: 'extIcon extOk',
                                margin: '0 0 0 2',
                                height: FastExt.Form.getFieldMinHeight(true),
                                handler: function () {
                                    menu.doUpdate();
                                }
                            }
                        ]
                    }
                ],
                listeners: {
                    show: function (obj, epts) {
                        var fieldObj = obj.items.get(0).items.get(0);
                        fieldObj.focus();
                    },
                    hide: function (obj) {
                        var upContainerPanel = view.up("[detailsPanel=true]");
                        if (upContainerPanel) {
                            upContainerPanel.holdFloatView = false;
                        }
                        var editorField = obj.items.get(0).items.get(0);
                        if (Ext.isFunction(editorField.endEdit)) {
                            editorField.endEdit();
                        }
                        obj.close();
                    }
                }
            });
            menu.addCls("edit-menu");
            menu.addCls("edit-details-menu");
            menu.setWidth(cell.getWidth());
            menu.showBy(cell, "tl");
            var upContainerPanel = view.up("[detailsPanel=true]");
            if (upContainerPanel) {
                upContainerPanel.holdFloatView = true;
            }
        };
        Grid.showDataEditorWin = function (obj, grid) {
            if (!grid) {
                return;
            }
            if (grid.getSelection().length === 0) {
                FastExt.Dialog.toast("请选择一行需要修改的数据！");
                return;
            }
            var store = grid.getStore();
            if (!store) {
                FastExt.Dialog.toast("无法修改此行数据，数据源无效！");
                return;
            }
            var entity = grid.getStore().entity;
            if (!entity) {
                FastExt.Dialog.toast("无法修改此行数据，未绑定实体信息！");
                return;
            }
            var columns = grid.getColumns();
            var itemFields = [];
            var record = grid.getSelection()[0];
            var groupFieldSet = {};
            var groupFields = {};
            var labelWidth = 80;
            for (var i = 0; i < columns.length; i++) {
                var column = columns[i];
                if (Ext.isEmpty(column.field) || !FastExt.Base.toBool(column.editable, true)) {
                    continue;
                }
                var realField = column.field;
                if (!Ext.isObject(realField)) {
                    realField = {
                        xtype: realField,
                    };
                }
                if (Ext.isEmpty(realField.xtype)) {
                    continue;
                }
                var copyField = Ext.clone(realField);
                var columnName = FastExt.Entity.getRealAttr(column);
                copyField.name = "data." + columnName;
                var labelText = column.configText;
                var itemField = Ext.create(copyField);
                itemField.columnWidth = 1;
                itemField.fieldLabel = labelText;
                itemField.configFieldLabel = labelText;
                itemField.emptyText = "请输入" + labelText;
                itemField.ghostDataIndex = column.dataIndex;
                itemField.realEditorField = true;
                itemField.record = record;
                if (Ext.isEmpty(itemField.itemId)) {
                    if (Ext.isEmpty(realField.name)) {
                        itemField.itemId = column.dataIndex;
                    }
                    else {
                        itemField.itemId = realField.name;
                    }
                }
                if (Ext.isFunction(itemField.setValue) && itemField.inputType !== "password") {
                    var value = record.get(column.dataIndex);
                    if (Ext.isObject(value) || Ext.isArray(value)) {
                        itemField.setValue(JSON.stringify(value), record);
                    }
                    else {
                        itemField.setValue(value, record);
                    }
                }
                if (!Ext.isEmpty(column.groupHeaderText)) {
                    if (!groupFieldSet.hasOwnProperty(column.groupHeaderText)) {
                        groupFieldSet[column.groupHeaderText] = Ext.create({
                            xtype: "fieldset",
                            title: column.groupHeaderText,
                            columnWidth: 1,
                            layout: "column",
                            defaults: {
                                labelWidth: 80,
                                margin: "5 5 5 5",
                                labelAlign: "right",
                                allowBlankTip: true,
                                emptyText: "请填写"
                            },
                        });
                        groupFields[column.groupHeaderText] = [];
                        itemFields.push(groupFieldSet[column.groupHeaderText]);
                    }
                    groupFields[column.groupHeaderText].push(itemField);
                    groupFieldSet[column.groupHeaderText].defaults.labelWidth = Math.max(groupFieldSet[column.groupHeaderText].defaults.labelWidth, labelText.length * 14 + 8 + 10 + 10);
                    continue;
                }
                if (itemField.hasListener("beforeedit")) {
                    if (!itemField.fireEvent("beforeedit", itemField)) {
                        return false;
                    }
                }
                labelWidth = Math.max(labelWidth, labelText.length * 14 + 8 + 10 + 10);
                itemFields.push(itemField);
            }
            for (var groupFieldsKey in groupFields) {
                groupFieldSet[groupFieldsKey].add(groupFields[groupFieldsKey]);
            }
            if (itemFields.length === 0) {
                FastExt.Dialog.toast("无修改权限！");
                return;
            }
            if (grid.hasListener("beforeeditwin")) {
                if (!grid.fireEvent("beforeeditwin", grid, itemFields)) {
                    return false;
                }
            }
            var formPanel = Ext.create('Ext.form.FormPanel', {
                cacheKey: entity.entityCode + "Editor",
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                fileUpload: true,
                autoScroll: false,
                border: 0,
                defaults: {
                    labelWidth: Math.min(labelWidth, 188),
                    margin: '5 5 5 5',
                    labelAlign: 'right',
                    allowBlankTip: true,
                },
                layout: "column",
                items: itemFields,
            });
            var winWidth = parseInt((document.body.clientWidth * 0.4).toFixed(0));
            var maxHeight = parseInt((document.body.clientHeight * 0.8).toFixed(0));
            var editorWin = Ext.create('Ext.window.Window', {
                title: '修改数据',
                subtitle: entity.entityCode,
                width: winWidth,
                icon: obj.icon,
                iconCls: obj.iconCls,
                minWidth: 200,
                maxHeight: maxHeight,
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                },
                autoScroll: true,
                resizable: true,
                maximizable: true,
                constrain: true,
                animateTarget: obj,
                items: [formPanel],
                modal: true,
                unpin: true,
                listeners: {
                    show: function (obj) {
                        formPanel.restoreCache();
                        obj.focus();
                    }
                },
                buttons: [
                    {
                        text: '暂存',
                        iconCls: 'extIcon extSave whiteColor',
                        handler: function () {
                            formPanel.saveCache();
                        }
                    },
                    {
                        text: '重置',
                        iconCls: 'extIcon extReset',
                        handler: function () {
                            if (formPanel.form) {
                                formPanel.form.reset();
                            }
                            formPanel.deleteCache();
                        }
                    },
                    {
                        text: '确定',
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            if (!store) {
                                return;
                            }
                            store.holdUpdate = true;
                            var fields = formPanel.query("[realEditorField=true]");
                            for (var _i = 0, fields_1 = fields; _i < fields_1.length; _i++) {
                                var field = fields_1[_i];
                                if (field.isValid()) {
                                    if (!Ext.isEmpty(field.getValue())) {
                                        FastExt.Store.setRecordValue(record, field.ghostDataIndex, field);
                                    }
                                }
                            }
                            FastExt.Dialog.showWait("提交数据中……");
                            FastExt.Store.commitStoreUpdate(store).then(function (success) {
                                FastExt.Dialog.hideWait();
                                store.holdUpdate = false;
                                if (success) {
                                    store.commitChanges();
                                    formPanel.deleteCache();
                                    editorWin.close();
                                }
                                else {
                                    store.rejectChanges();
                                }
                            });
                        }
                    }
                ]
            });
            editorWin.show();
        };
        Grid.copyDetailsValue = function (view, rowIndex, colIndex, item, e, record) {
            var cell = view.getCell(record, 1, true);
            FastExt.Base.copyToBoard($(cell.dom).text().trim());
            FastExt.Dialog.toast("复制成功！");
        };
        Grid.showSelectRecordHistory = function (obj, grid) {
            if (Ext.isEmpty(grid.showHistoryState)) {
                grid.showHistoryState = 0;
            }
            if (!obj.selectHistoryWin) {
                if (!grid.selectHistoryConfig) {
                    grid.selectHistoryConfig = {
                        "state": 0,
                        "count": 0
                    };
                }
                grid.selectHistoryConfig.count = grid.getSelectRecordHistory().length;
                var formPanel_5 = Ext.create('Ext.form.FormPanel', {
                    margin: '5',
                    border: 0,
                    layout: 'column',
                    width: 400,
                    scrollable: true,
                    defaults: {
                        labelWidth: 140,
                        margin: '5 5 5 5',
                        labelAlign: 'right',
                        emptyText: '请填写'
                    },
                    viewModel: {
                        data: grid.selectHistoryConfig
                    },
                    items: [
                        {
                            xtype: 'combo',
                            name: 'state',
                            displayField: 'text',
                            valueField: 'id',
                            fieldLabel: '是否记忆选择',
                            editable: false,
                            flex: 1,
                            columnWidth: 1,
                            value: 0,
                            allowBlank: false,
                            bind: '{state}',
                            store: FastExt.Store.getYesOrNoDataStore()
                        },
                        {
                            xtype: "numberfield",
                            name: 'count',
                            bind: '{count}',
                            selectHistoryCount: true,
                            fieldLabel: "已选中数据（条）",
                            columnWidth: 1,
                            value: 0,
                            readOnly: true
                        }
                    ],
                });
                var winSize = FastExt.Grid.getGridInWindowSize(grid);
                obj.selectHistoryWin = Ext.create('Ext.window.Window', {
                    title: '数据选择器',
                    layout: 'fit',
                    constrain: true,
                    iconCls: 'extIcon extSelect',
                    resizable: true,
                    minHeight: 100,
                    minWidth: 400,
                    height: winSize.height,
                    width: winSize.width,
                    animateTarget: obj,
                    items: [formPanel_5],
                    listeners: {
                        close: function (panel, eOpts) {
                            if (obj.selectHistoryWin.gridSelectinoChange) {
                                obj.selectHistoryWin.gridSelectinoChange.destroy();
                            }
                            if (obj.selectHistoryWin.gridLoad) {
                                obj.selectHistoryWin.gridLoad.destroy();
                            }
                            obj.selectHistoryWin = null;
                        }
                    },
                    buttons: [
                        {
                            text: '查看选中的数据',
                            iconCls: 'extIcon extSee',
                            showSelectHistoryBtn: true,
                            listeners: {
                                render: function () {
                                    this.checkState();
                                }
                            },
                            resetState: function () {
                                grid.showHistoryState = 0;
                                this.checkState();
                            },
                            checkState: function () {
                                if (grid.showHistoryState === 1) {
                                    this.setText("取消查看");
                                    this.setIconCls("extIcon extReset");
                                }
                                else {
                                    this.setText("查看选中的数据");
                                    this.setIconCls("extIcon extSee");
                                }
                            },
                            handler: function () {
                                grid.closeSelectHistoryLoad = true;
                                if (grid.showHistoryState === 0) {
                                    grid.getStore().loadData(grid.getSelectRecordHistory());
                                    grid.showHistoryState = 1;
                                    this.checkState();
                                }
                                else {
                                    grid.getStore().reload();
                                }
                            }
                        },
                        '->',
                        {
                            text: '确定',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                var form = formPanel_5.getForm();
                                if (form.isValid()) {
                                    grid.selectHistoryConfig = formPanel_5.getValues();
                                    if (parseInt(grid.selectHistoryConfig["state"]) === 0) {
                                        FastExt.Dialog.toast("已关闭选中数据的记忆器！");
                                        grid.clearSelectRecordHistory();
                                        grid.getStore().reload();
                                    }
                                    else {
                                        FastExt.Dialog.toast("已启用选中数据的记忆器！");
                                        grid.recordSelect();
                                    }
                                    FastExt.Grid.checkHistoryConfig(grid);
                                    obj.selectHistoryWin.close();
                                }
                            }
                        }
                    ]
                });
                obj.selectHistoryWin.gridSelectinoChange = grid.on('selectionchange', function () {
                    grid.refreshSelectHistoryCount();
                }, this, { destroyable: true });
                obj.selectHistoryWin.gridLoad = grid.on('load', function () {
                    try {
                        grid.showHistoryState = 0;
                        var buttons = grid.ownerCt.query("[showSelectHistoryBtn=true]");
                        for (var i = 0; i < buttons.length; i++) {
                            if (Ext.isFunction(buttons[i].resetState)) {
                                buttons[i].resetState();
                            }
                        }
                    }
                    catch (e) {
                        console.error(e);
                    }
                }, this, { destroyable: true });
                grid.ownerCt.add(obj.selectHistoryWin);
            }
            else {
                FastExt.Component.shakeComment(obj.selectHistoryWin);
            }
            obj.selectHistoryWin.show();
        };
        return Grid;
    }());
    FastExt.Grid = Grid;
    var GridOperate = (function () {
        function GridOperate(config) {
            this.alertDelete = true;
            this.alertUpdate = true;
            this.autoUpdate = false;
            this.autoDetails = true;
            this.hoverTip = false;
            this.refreshData = false;
            this.excelOut = true;
            this.excelIn = true;
            this.downloadData = true;
            this.uploadData = true;
            this.globalSearch = true;
            this.deleteAllData = true;
            this.copyData = true;
            this.showRowNumber = false;
            this.showDetailsButton = true;
            this.showUpdateButton = true;
            if (config) {
                for (var key in config) {
                    this[key] = config[key];
                }
            }
        }
        return GridOperate;
    }());
    FastExt.GridOperate = GridOperate;
    var GridColumnMenu = (function () {
        function GridColumnMenu() {
            this.cancelSort = true;
            this.batchRandom = true;
            this.batchUpdate = true;
            this.batchUpdateDB = true;
            this.batchReplaceDB = true;
            this.operation = true;
            this.searchLink = true;
            this.lookField = true;
        }
        return GridColumnMenu;
    }());
    FastExt.GridColumnMenu = GridColumnMenu;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Image = (function () {
        function Image() {
        }
        Image.rotateOSSImgUrl = function (imgUrl, rotate) {
            if (!Ext.isEmpty(imgUrl) && !Ext.isEmpty(rotate)) {
                var split = imgUrl.split("/");
                var imgName = split[split.length - 1];
                if (imgName.startWith("svg-")) {
                    return imgUrl;
                }
                if (imgUrl.toString().indexOf("?") >= 0) {
                    return imgUrl + "&x-oss-process=image/rotate," + rotate;
                }
                return imgUrl + "?x-oss-process=image/rotate," + rotate;
            }
            return imgUrl;
        };
        Image.smallOSSImgUrl = function (imgUrl) {
            if (!Ext.isEmpty(imgUrl)) {
                var split = imgUrl.split("/");
                var imgName = split[split.length - 1];
                if (imgName.startWith("svg-")) {
                    return imgUrl;
                }
                if (imgUrl.toString().indexOf("?") >= 0) {
                    return imgUrl + "&x-oss-process=image/resize,h_20,m_lfit";
                }
                return imgUrl + "?x-oss-process=image/resize,h_20,m_lfit";
            }
            return imgUrl;
        };
        Image.showImage = function (obj, url, callBack, modal) {
            if (Ext.isEmpty(modal)) {
                modal = false;
            }
            var imageRootHtmlId = null;
            if (obj && Ext.isFunction(obj.getAttribute)) {
                imageRootHtmlId = obj.getAttribute("data-container-id");
            }
            var jsonData = [];
            if (Ext.isArray(url)) {
                jsonData = url;
            }
            else {
                jsonData.push({
                    "url": url
                });
            }
            if (imageRootHtmlId && FastExt.Image.showAllRelationImage) {
                $("#" + imageRootHtmlId).find("img").each(function (index, imgItem) {
                    var $imgObj = $(imgItem);
                    if ($imgObj.attr("data-container-id") && $imgObj.attr("data-details-id")) {
                        var key = $imgObj.attr("data-details-id");
                        var src = $imgObj.attr("src");
                        if (FastExt.Cache.memory.hasOwnProperty(key)) {
                            src = FastExt.Cache.memory[key];
                        }
                        if (Ext.isString(url) && src === url) {
                            return true;
                        }
                        jsonData.push({
                            "url": src,
                        });
                    }
                });
            }
            var selectIndex = -1;
            if (Ext.getStore("ImageViewStore") != null) {
                var currStore = Ext.getStore("ImageViewStore");
                var newJsonData = [];
                for (var _i = 0, jsonData_1 = jsonData; _i < jsonData_1.length; _i++) {
                    var jsonDatum = jsonData_1[_i];
                    var existsRecord = currStore.findRecord("url", jsonDatum.url);
                    if (existsRecord) {
                        if (Ext.isString(url) && url === jsonDatum.url) {
                            selectIndex = currStore.indexOf(existsRecord);
                        }
                        continue;
                    }
                    newJsonData.push(jsonDatum);
                }
                currStore.add(newJsonData);
                if (selectIndex === -1) {
                    selectIndex = currStore.count() - 1;
                }
                currStore.imgSelectIndex = selectIndex;
                Ext.getCmp("ImageViewGrid").getSelectionModel().select(selectIndex);
                return;
            }
            else {
                if (selectIndex === -1) {
                    selectIndex = 0;
                }
            }
            var imageStore = Ext.create('Ext.data.Store', {
                fields: ['url'],
                autoLoad: false,
                imgSelectIndex: selectIndex,
                id: "ImageViewStore",
                data: jsonData
            });
            var dataGridImages = Ext.create('Ext.grid.Panel', {
                store: imageStore,
                region: 'west',
                hideHeaders: true,
                id: "ImageViewGrid",
                width: 125,
                disabled: true,
                border: 1,
                scrollable: "y",
                columns: [{
                        header: '文件',
                        dataIndex: 'url',
                        flex: 1,
                        align: 'center',
                        renderer: function (val) {
                            if (Ext.isEmpty(val)) {
                                return "<span style='color: #ccc;'>无</span>";
                            }
                            var arrayInfo = val.split("@");
                            var url = arrayInfo[0];
                            return "<img width='30px' onerror=\"javascript:this.src='images/default_img.png';\" src='" + url + "'/>";
                        }
                    }],
                tbar: [{
                        xtype: 'button',
                        border: 1,
                        text: '打包下载',
                        iconCls: 'extIcon extDownload',
                        handler: function (obj) {
                            var params = {};
                            imageStore.each(function (record, index) {
                                params["path" + index] = record.get("url");
                            });
                            var buildForm = FastExt.Form.buildForm("zipFile", params);
                            buildForm.submit();
                            $(buildForm).remove();
                        }
                    }],
                listeners: {
                    selectionchange: function (obj, selected) {
                        try {
                            var time = 0;
                            var store = this.getStore();
                            var arrowRightBtn = this.ownerCt.down("#arrowRight");
                            var arrowLeftBtn = this.ownerCt.down("#arrowLeft");
                            if (store.getCount() > 1) {
                                this.setHidden(false);
                                time = 120;
                                if (arrowRightBtn) {
                                    arrowRightBtn.setDisabled(store.count() - 1 === store.indexOf(selected[0]));
                                }
                                if (arrowLeftBtn) {
                                    arrowLeftBtn.setDisabled(store.indexOf(selected[0]) === 0);
                                }
                            }
                            else {
                                this.setHidden(true);
                                if (arrowRightBtn) {
                                    arrowRightBtn.setHidden(true);
                                }
                                if (arrowLeftBtn) {
                                    arrowLeftBtn.setHidden(true);
                                }
                            }
                            setTimeout(function () {
                                if (window["imgViewFrame"] && Ext.isFunction(window["imgViewFrame"].window.showImage)) {
                                    window["imgViewFrame"].window.showImage(FastExt.System.formatUrl(selected[0].get("url")), FastExt.System.http);
                                }
                            }, time);
                        }
                        catch (e) {
                            FastExt.Dialog.showException(e, "showImage");
                        }
                    }
                }
            });
            window["imageViewerLoadDone"] = function () {
                Ext.getCmp("ImageViewGrid").setDisabled(false);
                try {
                    var index = Ext.getStore("ImageViewStore").imgSelectIndex;
                    Ext.getCmp("ImageViewGrid").getSelectionModel().select(index);
                }
                catch (e) {
                    FastExt.Dialog.showException(e, "showImage");
                }
            };
            window["imageViewerSize"] = function (width, height) {
                Ext.getCmp("ImageViewWindow").setTitle("查看图片 " + width + "x" + height);
            };
            var imagePanel = Ext.create('Ext.panel.Panel', {
                layout: 'fit',
                region: 'center',
                border: 0,
                height: 'auto',
                iframePanel: true,
                html: '<div style="background: #000000;width: 100%;height: 100%;"></div>',
                listeners: {
                    afterrender: function (obj, eOpts) {
                        if (imageStore.getCount() <= 1) {
                            dataGridImages.setHidden(true);
                        }
                        else {
                            dataGridImages.setHidden(false);
                        }
                        obj.update("<iframe style='background: #000000;width: 100%;height: 100%;' name='imgViewFrame' " +
                            " src='" + FastExt.System.formatUrlVersion("base/image-view/index.html") + "' width='100%' height='100%' frameborder='0' scrolling='no' />");
                        obj.getEl().on("mouseleave", function (obj) {
                            var targetElement = window["imgViewFrame"].window.document.getElementsByTagName("div")[0];
                            FastExt.Base.dispatchTargetEvent(window["imgViewFrame"].window.document, targetElement, "pointerup");
                            window["imgViewFrame"].window.reset();
                        });
                    }
                },
                bbar: {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    layout: {
                        type: 'hbox',
                        align: 'middle',
                        pack: 'center'
                    },
                    items: [
                        {
                            xtype: 'button',
                            iconCls: 'extIcon extReset',
                            handler: function () {
                                window["imgViewFrame"].window.reset();
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'extIcon extZoomOut',
                            handler: function () {
                                window["imgViewFrame"].window.zoomOut();
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'extIcon extZoomIn',
                            handler: function () {
                                window["imgViewFrame"].window.zoomIn();
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'extIcon extOneOne',
                            handler: function () {
                                window["imgViewFrame"].window.oneOne();
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'extIcon extArrowLeft',
                            itemId: "arrowLeft",
                            hidden: true,
                            handler: function () {
                                var imageGrid = Ext.getCmp("ImageViewGrid");
                                var data = imageGrid.getSelection();
                                var currIndex = 0;
                                if (data.length > 0) {
                                    currIndex = imageGrid.getStore().indexOf(data[0]);
                                }
                                Ext.getCmp("ImageViewGrid").getSelectionModel().select(Math.max(currIndex - 1, 0));
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'extIcon extArrowRight',
                            itemId: "arrowRight",
                            hidden: true,
                            handler: function () {
                                var imageGrid = Ext.getCmp("ImageViewGrid");
                                var data = imageGrid.getSelection();
                                var currIndex = 0;
                                if (data.length > 0) {
                                    currIndex = imageGrid.getStore().indexOf(data[0]);
                                }
                                Ext.getCmp("ImageViewGrid").getSelectionModel().select(Math.min(currIndex + 1, imageGrid.getStore().count() - 1));
                            },
                        },
                        {
                            xtype: 'button',
                            iconCls: 'extIcon extRefresh',
                            handler: function () {
                                window["imgViewFrame"].window.rotate();
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'extIcon extLeftRight',
                            handler: function () {
                                window["imgViewFrame"].window.flipA();
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'extIcon extTopBottom',
                            handler: function () {
                                window["imgViewFrame"].window.flipB();
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'extIcon extDownload2',
                            handler: function () {
                                var data = dataGridImages.getSelectionModel().getSelection();
                                FastExt.Base.download(data[0].get("url"));
                            }
                        }
                    ]
                }
            });
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var newWin = Ext.create('Ext.window.Window', {
                title: "查看图片",
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 600,
                id: 'ImageViewWindow',
                layout: 'border',
                iconCls: 'extIcon extImage',
                resizable: true,
                alwaysOnTop: true,
                maximizable: true,
                modal: modal,
                constrain: true,
                animateTarget: obj,
                items: [dataGridImages, imagePanel],
                listeners: {
                    close: function (val) {
                        imageStore.destroy();
                        if (Ext.isFunction(callBack)) {
                            callBack();
                        }
                    }
                }
            });
            newWin.show();
        };
        Image.showAllRelationImage = true;
        return Image;
    }());
    FastExt.Image = Image;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Json = (function () {
        function Json() {
        }
        Json.jsonToObject = function (jsonStr) {
            try {
                return JSON.parse(jsonStr);
            }
            catch (e) {
            }
            return null;
        };
        Json.objectToJson = function (jsonObj) {
            try {
                return JSON.stringify(jsonObj);
            }
            catch (e) {
            }
            return null;
        };
        Json.objectToJsonUnsafe = function (jsonObj) {
            return JSON.stringify(jsonObj, function (key, val) {
                if (typeof val === 'function') {
                    return val.toString();
                }
                return val;
            });
        };
        Json.jsonToObjectUnsafe = function (jsonStr) {
            try {
                return JSON.parse(jsonStr, function (k, v) {
                    if (v.indexOf && v.indexOf('function') > -1) {
                        return eval("(function(){return " + v + " })()");
                    }
                    return v;
                });
            }
            catch (e) {
            }
            return null;
        };
        Json.mergeJson = function (jsonData1, jsonData2) {
            var newJsonData = {};
            if (!Ext.isEmpty(jsonData1)) {
                for (var property in jsonData1) {
                    newJsonData[property] = jsonData1[property];
                }
            }
            if (!Ext.isEmpty(jsonData2)) {
                for (var property in jsonData2) {
                    newJsonData[property] = jsonData2[property];
                }
            }
            return newJsonData;
        };
        Json.showFormatJson = function (obj, value, title) {
            try {
                if (obj && Ext.isFunction(obj.blur)) {
                    obj.blur();
                }
                if (Ext.isEmpty(title)) {
                    title = "查看JSON数据";
                }
                var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
                var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
                var win_2 = Ext.create('Ext.window.Window', {
                    title: title,
                    height: winHeight,
                    width: winWidth,
                    minHeight: 500,
                    minWidth: 600,
                    animateTarget: obj,
                    layout: 'fit',
                    resizable: true,
                    maximizable: true,
                    iconCls: 'extIcon extSee',
                    autoScroll: true,
                    modal: true,
                    constrain: true,
                    buttons: [
                        {
                            text: '保留转义符',
                            iconCls: 'extIcon extConvertCode whiteColor',
                            handler: function () {
                                if (FastExt.Base.toBool(this.keepChar, false)) {
                                    var result_1 = new JSONFormat(value, 4).toString();
                                    win_2.update("<div style='padding: 20px;'>" + result_1 + "</div>");
                                    this.setText("保留转义符");
                                    this.keepChar = false;
                                }
                                else {
                                    var newValue = value.replace(/\\/g, '\\\\');
                                    newValue = newValue.replace(/\\"/g, '\\\\"');
                                    var result_2 = new JSONFormat(newValue, 4).toString();
                                    win_2.update("<div style='padding: 20px;'>" + result_2 + "</div>");
                                    this.setText("解析转义符");
                                    this.keepChar = true;
                                }
                            }
                        },
                        '->',
                        {
                            text: '复制JSON数据',
                            iconCls: 'extIcon extCopy2 whiteColor',
                            handler: function () {
                                FastExt.Dialog.toast("复制成功！");
                                FastExt.Base.copyToBoard(value);
                            }
                        }
                    ]
                });
                var result = new JSONFormat(value, 4).toString();
                win_2.update("<div style='padding: 20px;'>" + result + "</div>");
                win_2.show();
            }
            catch (e) {
                console.error(e);
                FastExt.Dialog.showText(obj, null, "查看数据", value);
            }
        };
        return Json;
    }());
    FastExt.Json = Json;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Listeners = (function () {
        function Listeners() {
            FastExt.Listeners.onInitLoginPanel = window["onInitLoginPanel"];
            FastExt.Listeners.onAfterManagerLogin = window["onAfterLogin"] || window["onAfterManagerLogin"];
            FastExt.Listeners.onBeforeManagerLogin = window["onBeforeLogin"] || window["onBeforeManagerLogin"];
            FastExt.Listeners.onSystemNoticeShow = window["onSystemNoticeShow"];
            FastExt.Listeners.onInitSystemWelcomeItems = window["initWelcomeItems"];
            FastExt.Listeners.onInitLinkFieldDefaultValue = window["getLinkFieldDefaultValue"];
        }
        Listeners.addExtCreateFilter = function (key, filterFunction) {
            FastExt.System.addFilterByEntityCreate(key, filterFunction);
        };
        Listeners.fireExtCreateFilter = function (key, method, xtype, config) {
            var watchFunctions = FastExt.System.extCreateFilter[key];
            if (watchFunctions) {
                for (var j = 0; j < watchFunctions.length; j++) {
                    var watchFunction = watchFunctions[j];
                    if (Ext.isFunction(watchFunction)) {
                        var info = new FastExt.ComponentInvokeInfo();
                        info.method = method;
                        info.xtype = xtype;
                        info.config = config;
                        watchFunction(info);
                    }
                }
            }
        };
        return Listeners;
    }());
    FastExt.Listeners = Listeners;
    var ExtCreateFilter = (function () {
        function ExtCreateFilter(config) {
            this.enable = true;
            if (config) {
                for (var configKey in config) {
                    this[configKey] = config[configKey];
                }
            }
        }
        return ExtCreateFilter;
    }());
    FastExt.ExtCreateFilter = ExtCreateFilter;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Lottie = (function () {
        function Lottie() {
        }
        Lottie.loadJsonAnim = function (cmb, jsonPath, callBack) {
            FastExt.Lottie.loadJsonAnimByEl(FastExt.Base.getTargetBodyElement(cmb), jsonPath, callBack);
        };
        Lottie.loadJsonAnimByEl = function (el, jsonPath, callBack) {
            var doLoad = function () {
                FastExt.Lottie.loadedLottieJs = true;
                if (el) {
                    if (Ext.isEmpty(el.id)) {
                        el.id = "fastchar-id-" + $.md5(FastExt.Base.buildUUID16());
                    }
                    FastExt.Cache.memory[el.id + "Lottie"] = bodymovin.loadAnimation({
                        container: el,
                        renderer: 'svg',
                        loop: true,
                        autoplay: true,
                        path: jsonPath,
                        rendererSettings: {
                            progressiveLoad: false,
                            hideOnTransparent: true
                        }
                    });
                    FastExt.Cache.memory[el.id + "Lottie"].cacheId = el.id + "Lottie";
                    if (callBack) {
                        FastExt.Cache.memory[el.id + "Lottie"].addEventListener("data_ready", callBack);
                    }
                }
                else {
                    console.error("加载Lottie动画失败！无法获取目标控件的BodyElement！");
                }
            };
            if (!this.loadedLottieJs) {
                FastExt.System.addScript({ src: FastExt.Lottie.lottieJsPath }, doLoad);
            }
            else {
                doLoad();
            }
        };
        Lottie.unloadJsonAnim = function (cmb) {
            var lottie = FastExt.Lottie.getLottie(cmb);
            if (lottie) {
                lottie.destroy();
                FastExt.Cache.memory[lottie.cacheId] = null;
            }
        };
        Lottie.unloadJsonAnimByEl = function (el) {
            var lottie = FastExt.Lottie.getLottieByEl(el);
            if (lottie) {
                lottie.destroy();
                FastExt.Cache.memory[lottie.cacheId] = null;
            }
        };
        Lottie.unloadJsonAnimById = function (elId) {
            var lottie = FastExt.Lottie.getLottieByElId(elId);
            if (lottie) {
                lottie.destroy();
                FastExt.Cache.memory[lottie.cacheId] = null;
            }
        };
        Lottie.getLottie = function (cmb) {
            return FastExt.Lottie.getLottieByEl(FastExt.Base.getTargetBodyElement(cmb));
        };
        Lottie.getLottieByEl = function (el) {
            if (el) {
                return FastExt.Lottie.getLottieByElId(el.id);
            }
            return null;
        };
        Lottie.getLottieByElId = function (elId) {
            return FastExt.Cache.memory[elId + "Lottie"];
        };
        Lottie.showLottie = function (obj, jsonPath) {
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                title: "查看动效",
                height: winHeight,
                width: winWidth,
                layout: 'border',
                resizable: true,
                maximizable: true,
                constrain: true,
                modal: true,
                padding: "10 10 10 10",
                bodyStyle: {
                    background: "#ffffff"
                },
                listeners: {
                    show: function (obj) {
                        obj.setLoading("加载动效中，请稍后……");
                        FastExt.Lottie.loadJsonAnim(obj, jsonPath, function () {
                            obj.setLoading(false);
                        });
                    }
                }
            });
            win.show();
        };
        Lottie.lottieJsPath = "base/lottie/lottie.min.js";
        return Lottie;
    }());
    FastExt.Lottie = Lottie;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Map = (function () {
        function Map() {
        }
        Map.selAddressInMap = function (obj, lng, lat, address) {
            return new Ext.Promise(function (resolve, reject) {
                var defaultLngLat = "";
                if (!Ext.isEmpty(lng) && !Ext.isEmpty(lat) && parseFloat(lng) !== 0 && parseFloat(lat) !== 0) {
                    defaultLngLat = lng + "," + lat;
                }
                var mapPanel = Ext.create('Ext.panel.Panel', {
                    layout: 'border',
                    region: 'center',
                    iframePanel: true,
                    border: 0
                });
                var showInputPoint = function (title, pointType) {
                    Ext.Msg.prompt(title, "请输入坐标经纬度(lng,lat)", function (btn, text) {
                        if (btn === 'ok') {
                            text = text.toString()
                                .replaceAll(" ", "")
                                .replaceAll("，", ",");
                            if (window["mapFrame"]) {
                                if (pointType) {
                                    window["mapFrame"].window["AMap"].convertFrom([text.split(",")], pointType, function (status, result) {
                                        var lnglats = result.locations;
                                        var lnglat = lnglats[0];
                                        window["mapFrame"].window.setLngLatAddress(lnglat.toString());
                                    });
                                }
                                else {
                                    window["mapFrame"].window.setLngLatAddress(text);
                                }
                            }
                        }
                    });
                };
                var formPanel = Ext.create('Ext.form.FormPanel', {
                    url: 'addData',
                    method: 'POST',
                    region: 'north',
                    fileUpload: true,
                    autoScroll: false,
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    defaults: {
                        margin: '5 5 5 5'
                    },
                    items: [
                        {
                            name: 'map.taskTitle',
                            fieldLabel: '位置搜索',
                            labelWidth: 60,
                            labelAlign: 'right',
                            id: 'txtSearch',
                            columnWidth: 1,
                            flex: 1,
                            allowBlank: false,
                            useHistory: true,
                            emptyText: '输入地址',
                            xtype: 'textfield'
                        }, {
                            xtype: 'button',
                            width: 100,
                            text: '搜索',
                            handler: function () {
                                doSearch();
                            }
                        }, {
                            xtype: 'button',
                            width: 120,
                            text: '查找高德坐标',
                            handler: function () {
                                showInputPoint("查找高德坐标");
                            }
                        }, {
                            xtype: 'button',
                            width: 120,
                            text: '查找GPS坐标',
                            handler: function () {
                                showInputPoint("查找GPS坐标", "gps");
                            }
                        }
                    ],
                    listeners: {
                        'render': function (text) {
                            try {
                                new Ext.util.KeyMap({
                                    target: text.getEl(),
                                    key: 13,
                                    fn: doSearch,
                                    scope: Ext.getBody()
                                });
                            }
                            catch (e) {
                                console.error(e);
                            }
                        }
                    }
                });
                var doSearch = function () {
                    var form = formPanel.getForm();
                    if (form.isValid()) {
                        window["mapFrame"].window.searchAddress(Ext.getCmp("txtSearch").getValue());
                    }
                };
                var bottomPanel = Ext.create('Ext.panel.Panel', {
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    region: 'south',
                    border: 0,
                    height: 42,
                    defaults: {
                        margin: '5 5 5 5'
                    },
                    items: [
                        {
                            xtype: 'textfield',
                            id: 'lblAddress',
                            fieldLabel: '选择位置',
                            labelWidth: 60,
                            value: address,
                            labelAlign: 'right',
                            flex: 1
                        },
                        {
                            xtype: 'textfield',
                            id: 'lblLngLat',
                            readOnly: true,
                            width: 160,
                            value: defaultLngLat
                        },
                        {
                            xtype: 'button',
                            width: 100,
                            text: '确定',
                            handler: function () {
                                var lblLngLat = Ext.getCmp("lblLngLat");
                                var lnglat = lblLngLat.getValue();
                                var lng = lnglat.split(",")[0];
                                var lat = lnglat.split(",")[1];
                                FastExt.Base.runCallBack(resolve, {
                                    lng: lng,
                                    lat: lat,
                                    addr: Ext.getCmp("lblAddress").getValue(),
                                    pro: lblLngLat.province,
                                    city: lblLngLat.city,
                                    area: lblLngLat.area
                                });
                                win.close();
                            }
                        }
                    ]
                });
                var containerPanel = Ext.create('Ext.panel.Panel', {
                    layout: 'border',
                    border: 0,
                    items: [
                        formPanel, mapPanel, bottomPanel
                    ]
                });
                var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
                var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
                var win = Ext.create('Ext.window.Window', {
                    title: '选择位置',
                    height: winHeight,
                    width: winWidth,
                    minHeight: 500,
                    minWidth: 600,
                    iconCls: 'extIcon extMap',
                    layout: 'fit',
                    resizable: true,
                    maximizable: true,
                    animateTarget: obj,
                    constrain: true,
                    items: [containerPanel],
                    modal: true,
                    listeners: {
                        show: function () {
                            var url = FastExt.System.formatUrlVersion('base/map/select.html', {
                                mapVersion: FastExt.System.getExt("amap-version").value,
                                mapKey: FastExt.System.getExt("amap-key").value
                            });
                            mapPanel.update("<iframe name='mapFrame'  src='" + url + "' style='width: 100%;height: 100%;overflow: hidden;border: 0;' />");
                        },
                        close: function (val) {
                            FastExt.Base.runCallBack(resolve);
                        },
                        destroy: function () {
                            window["onMapLoadDone"] = null;
                            window["closeMapMask"] = null;
                            window["showMapMask"] = null;
                            window["showMapAlert"] = null;
                            window["setMarkCurrPos"] = null;
                        },
                    }
                });
                win.show();
                containerPanel.setLoading("正在定位中，请稍后……");
                window["onMapLoadDone"] = function () {
                    if (!Ext.isEmpty(defaultLngLat)) {
                        window["mapFrame"].window.setLngLatAddress(defaultLngLat);
                    }
                    else {
                        window["mapFrame"].window.startLocation();
                    }
                };
                window["closeMapMask"] = function () {
                    containerPanel.setLoading(false);
                };
                window["showMapMask"] = function (msg) {
                    if (msg) {
                        containerPanel.setLoading(msg);
                    }
                    else {
                        containerPanel.setLoading(true);
                    }
                };
                window["showMapAlert"] = function (msg) {
                    FastExt.Dialog.showAlert("系统提醒", msg);
                };
                window["setMarkCurrPos"] = function (lnglat, address, province, city, area) {
                    Ext.getCmp("lblAddress").setValue(address);
                    var lblLngLat = Ext.getCmp("lblLngLat");
                    lblLngLat.setValue(lnglat);
                    lblLngLat.province = province;
                    lblLngLat.city = city;
                    lblLngLat.area = area;
                };
            });
        };
        Map.showAddressInMap = function (obj, lnglat, mapTitle, mapAddress) {
            var mapPanel = Ext.create('Ext.panel.Panel', {
                layout: 'border',
                region: 'center',
                border: 0,
                iframePanel: true
            });
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                title: '查看位置',
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 600,
                iconCls: 'extIcon extMap',
                layout: 'fit',
                resizable: true,
                maximizable: true,
                animateTarget: obj,
                constrain: true,
                modal: true,
                items: [mapPanel],
                listeners: {
                    show: function () {
                        var params = {
                            lnglat: lnglat,
                            mapVersion: FastExt.System.getExt("amap-version").value,
                            mapKey: FastExt.System.getExt("amap-key").value,
                            mapTitle: mapTitle,
                            mapAddress: mapAddress
                        };
                        mapPanel.update("<iframe  src='" + FastExt.System.formatUrlVersion('base/map/show.html', params) + "' style='width: 100%;height: 100%;overflow: hidden;border: 0;' />");
                    },
                    destroy: function () {
                        window["closeMapMask"] = null;
                    },
                }
            });
            win.show();
            mapPanel.setLoading("正在请求地址信息……");
            window["closeMapMask"] = function () {
                mapPanel.setLoading(false);
            };
        };
        Map.selRectangleInMap = function (obj, southWestLngLat, northEastLngLat, imgUrl, anchors, rotate) {
            return new Ext.Promise(function (resolve, reject) {
                if (Ext.isEmpty(rotate)) {
                    rotate = 0;
                }
                var mapPanel = Ext.create('Ext.panel.Panel', {
                    layout: 'border',
                    region: 'center',
                    iframePanel: true,
                    border: 0
                });
                var formPanel = Ext.create('Ext.form.FormPanel', {
                    method: 'POST',
                    region: 'north',
                    fileUpload: true,
                    autoScroll: true,
                    height: 50,
                    layout: "column",
                    imgRotate: rotate,
                    defaults: {
                        margin: '5 5 5 5'
                    },
                    items: [
                        {
                            name: 'map.taskTitle',
                            fieldLabel: '位置搜索',
                            labelWidth: 60,
                            labelAlign: 'right',
                            id: 'txtSearch',
                            columnWidth: 1,
                            useHistory: true,
                            emptyText: '输入地址',
                            xtype: 'textfield'
                        }, {
                            xtype: 'button',
                            width: 100,
                            text: '搜索',
                            handler: function () {
                                doSearch();
                            }
                        }, {
                            xtype: 'button',
                            width: 100,
                            text: '选取',
                            handler: function () {
                                window["mapRectangleFrame"].window.selectRectangle();
                            }
                        }, {
                            xtype: 'button',
                            width: 100,
                            text: '锚点管理',
                            handler: function () {
                                FastExt.Map.manageMapAnchorPoints(this, window["mapRectangleFrame"]);
                            }
                        },
                        {
                            xtype: 'button',
                            width: 120,
                            hidden: Ext.isEmpty(imgUrl),
                            text: '向左旋转图片',
                            handler: function () {
                                formPanel.imgRotate += 5;
                                if (formPanel.imgRotate > 360) {
                                    formPanel.imgRotate = 0;
                                }
                                window["mapRectangleFrame"].window.setImgLayerUrl(FastExt.Image.rotateOSSImgUrl(imgUrl, formPanel.imgRotate));
                            }
                        }, {
                            xtype: 'button',
                            width: 120,
                            hidden: Ext.isEmpty(imgUrl),
                            text: '向右旋转图片',
                            handler: function () {
                                formPanel.imgRotate -= 5;
                                if (formPanel.imgRotate < 0) {
                                    formPanel.imgRotate = 360;
                                }
                                window["mapRectangleFrame"].window.setImgLayerUrl(FastExt.Image.rotateOSSImgUrl(imgUrl, formPanel.imgRotate));
                            }
                        }
                    ],
                    listeners: {
                        'render': function (text) {
                            try {
                                new Ext.util.KeyMap({
                                    target: text.getEl(),
                                    key: 13,
                                    fn: doSearch,
                                    scope: Ext.getBody()
                                });
                            }
                            catch (e) {
                                console.error(e);
                            }
                        }
                    }
                });
                var doSearch = function () {
                    var form = formPanel.getForm();
                    if (form.isValid()) {
                        window["mapRectangleFrame"].window.searchAddress(Ext.getCmp("txtSearch").getValue());
                    }
                };
                var bottomPanel = Ext.create('Ext.panel.Panel', {
                    layout: "column",
                    region: 'south',
                    border: 0,
                    height: 42,
                    defaults: {
                        margin: '5 5 5 5'
                    },
                    items: [
                        {
                            xtype: 'textfield',
                            id: 'lblSouthWestLngLat',
                            fieldLabel: '西南角(左下)',
                            labelAlign: 'right',
                            readOnly: true,
                            columnWidth: 0.35
                        },
                        {
                            xtype: 'textfield',
                            id: 'lblNorthEastLngLat',
                            fieldLabel: '东北角(右上)',
                            readOnly: true,
                            columnWidth: 0.35
                        }, {
                            xtype: 'textfield',
                            id: 'lblRectangleSize',
                            labelWidth: 60,
                            fieldLabel: '矩形宽高',
                            readOnly: true,
                            columnWidth: 0.3
                        },
                        {
                            xtype: 'button',
                            width: 100,
                            text: '确定',
                            handler: function () {
                                var lblSouthWestLngLat = Ext.getCmp("lblSouthWestLngLat");
                                var southWestLngLat = lblSouthWestLngLat.getValue();
                                var lblNorthEastLngLat = Ext.getCmp("lblNorthEastLngLat");
                                var northEastLngLat = lblNorthEastLngLat.getValue();
                                FastExt.Base.runCallBack(resolve, {
                                    southWestLngLat: southWestLngLat,
                                    southWestLng: southWestLngLat.split(",")[0],
                                    southWestLat: southWestLngLat.split(",")[1],
                                    northEastLngLat: northEastLngLat,
                                    northEastLng: northEastLngLat.split(",")[0],
                                    northEastLat: northEastLngLat.split(",")[1],
                                    anchors: window["mapRectangleFrame"].pointDataArray,
                                    rotate: formPanel.imgRotate
                                });
                                win.close();
                            }
                        }
                    ]
                });
                var containerPanel = Ext.create('Ext.panel.Panel', {
                    layout: 'border',
                    border: 0,
                    items: [
                        formPanel, mapPanel, bottomPanel
                    ]
                });
                var winWidth = parseInt((document.body.clientWidth * 0.5).toFixed(0));
                var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
                var win = Ext.create('Ext.window.Window', {
                    title: '选择图层位置',
                    height: winHeight,
                    width: winWidth,
                    minHeight: 500,
                    minWidth: 600,
                    iconCls: 'extIcon extMap',
                    layout: 'fit',
                    resizable: true,
                    maximizable: true,
                    animateTarget: obj,
                    constrain: true,
                    items: [containerPanel],
                    modal: true,
                    listeners: {
                        show: function () {
                            var url = FastExt.System.formatUrlVersion('base/map/rectangle.html', {
                                mapVersion: FastExt.System.getExt("amap-version").value,
                                mapKey: FastExt.System.getExt("amap-key").value
                            });
                            mapPanel.update("<iframe name='mapRectangleFrame'  src='" + url + "' width='100%' height='100%' frameborder='0' scrolling='no' />");
                        },
                        close: function (val) {
                            FastExt.Base.runCallBack(resolve);
                        }
                    }
                });
                win.show();
                window["onMapLoadDone"] = function () {
                    var showImgUrl = FastExt.Image.rotateOSSImgUrl(imgUrl, rotate);
                    window["mapRectangleFrame"].pointDataArray = anchors;
                    window["mapRectangleFrame"].window.setImgLayerUrl(showImgUrl);
                    if (southWestLngLat && northEastLngLat) {
                        containerPanel.setLoading(false);
                        window["mapRectangleFrame"].window.selectRectangle(southWestLngLat, northEastLngLat, showImgUrl);
                    }
                    if (window["mapRectangleFrame"].pointDataArray) {
                        var data = [];
                        for (var i = 0; i < window["mapRectangleFrame"].pointDataArray.length; i++) {
                            data.push(window["mapRectangleFrame"].pointDataArray[i].gdPoint);
                        }
                        window["mapRectangleFrame"].window.setAnchorPoints(data, false);
                    }
                };
                window["closeMapMask"] = function () {
                    containerPanel.setLoading(false);
                };
                window["showMapMask"] = function (msg) {
                    if (msg) {
                        containerPanel.setLoading(msg);
                    }
                    else {
                        containerPanel.setLoading(true);
                    }
                };
                window["alert"] = function (msg) {
                    FastExt.Dialog.showAlert("系统提醒", msg);
                };
                window["setSelectBounds"] = function (southWestLngLat, northEastLngLat, size) {
                    var lblSouthWestLngLat = Ext.getCmp("lblSouthWestLngLat");
                    if (lblSouthWestLngLat) {
                        lblSouthWestLngLat.setValue(southWestLngLat);
                    }
                    var lblNorthEastLngLat = Ext.getCmp("lblNorthEastLngLat");
                    if (lblNorthEastLngLat) {
                        lblNorthEastLngLat.setValue(northEastLngLat);
                    }
                    var lblRectangleSize = Ext.getCmp("lblRectangleSize");
                    if (lblRectangleSize) {
                        lblRectangleSize.setValue(size.width + "px - " + size.height + "px");
                    }
                };
            });
        };
        Map.manageMapAnchorPoints = function (obj, mapFrame) {
            if (obj) {
                obj.blur();
            }
            if (!mapFrame.pointDataArray) {
                mapFrame.pointDataArray = [];
            }
            var pointStore = Ext.create('Ext.data.Store', {
                autoLoad: true,
                data: mapFrame.pointDataArray
            });
            var showInputPoint = function (title, pointType) {
                Ext.Msg.prompt(title, "请输入坐标经纬度(lng,lat)", function (btn, text) {
                    if (btn === 'ok') {
                        text = text.toString().replaceAll(" ", "")
                            .replaceAll("，", ",");
                        if (mapFrame) {
                            if (pointType) {
                                mapFrame.window["AMap"].convertFrom([text.split(",")], pointType, function (status, result) {
                                    var lnglats = result.locations;
                                    var lnglat = lnglats[0];
                                    var record = pointStore.findRecord("gdPoint", lnglat.toString(), 0, false, false, true);
                                    if (record) {
                                        FastExt.Dialog.toast("坐标已存在！");
                                        return;
                                    }
                                    var data = {
                                        "gdPoint": lnglat.toString()
                                    };
                                    pointStore.add(data);
                                });
                            }
                            else {
                                var record = pointStore.findRecord("gdPoint", text, 0, false, false, true);
                                if (record) {
                                    FastExt.Dialog.toast("坐标已存在！");
                                    return;
                                }
                                var data = {
                                    "gdPoint": text
                                };
                                pointStore.add(data);
                            }
                        }
                    }
                });
            };
            var dataGridPoints = Ext.create('Ext.grid.Panel', {
                selModel: FastExt.Grid.getGridSelModel(),
                store: pointStore,
                columnLines: true,
                cellTip: true,
                columns: [
                    {
                        header: '高德坐标',
                        dataIndex: 'gdPoint',
                        align: 'center',
                        flex: 1,
                        field: {
                            xtype: 'textfield'
                        },
                        renderer: FastExt.Renders.normal()
                    }
                ],
                selType: 'cellmodel',
                tbar: [
                    {
                        xtype: 'button',
                        border: 1,
                        text: '删除',
                        iconCls: 'extIcon extDelete',
                        handler: function () {
                            var data = dataGridPoints.getSelectionModel().getSelection();
                            if (data.length === 0) {
                                FastExt.Dialog.toast("请您选择需要删除的坐标！");
                            }
                            else {
                                Ext.Msg.confirm("系统提醒", "您确定立即删除选中的坐标吗？", function (button, text) {
                                    if (button === "yes") {
                                        Ext.Array.each(data, function (record) {
                                            pointStore.remove(record);
                                        });
                                        dataGridPoints.getSelectionModel().deselectAll();
                                        FastExt.Dialog.toast("删除成功！");
                                    }
                                });
                            }
                        }
                    },
                    {
                        xtype: 'button',
                        border: 1,
                        text: '添加高德坐标',
                        iconCls: 'extIcon extAdd',
                        handler: function () {
                            showInputPoint("添加高德坐标");
                        }
                    },
                    {
                        xtype: 'button',
                        border: 1,
                        text: '添加GPS坐标',
                        iconCls: 'extIcon extAdd',
                        handler: function () {
                            showInputPoint("添加GPS坐标", 'gps');
                        }
                    }
                ],
                listeners: {
                    selectionchange: function () {
                    }
                }
            });
            var win = Ext.create('Ext.window.Window', {
                title: "图层锚点管理",
                height: 300,
                width: 400,
                minWidth: 400,
                minHeight: 300,
                layout: 'fit',
                resizable: true,
                modal: true,
                constrain: true,
                iconCls: 'extIcon extFolder',
                animateTarget: obj,
                items: [dataGridPoints],
                buttons: [{
                        text: '确定',
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            var data = [];
                            var jsonData = [];
                            pointStore.each(function (record, index) {
                                var gdPoint = record.get("gdPoint");
                                data.push(gdPoint);
                                jsonData.push({ "gdPoint": gdPoint });
                            });
                            if (mapFrame) {
                                mapFrame.pointDataArray = jsonData;
                                mapFrame.window.setAnchorPoints(data, true);
                            }
                            win.close();
                        }
                    }],
                listeners: {
                    close: function () {
                    }
                }
            });
            win.show();
        };
        Map.showImgLayerInMap = function (obj, imgUrl, southWestLngLat, northEastLngLat, zIndex, minZoom, maxZoom) {
            return new Ext.Promise(function (resolve, reject) {
                var mapPanel = Ext.create('Ext.panel.Panel', {
                    layout: 'border',
                    region: 'center',
                    iframePanel: true,
                    border: 0
                });
                var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
                var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
                var win = Ext.create('Ext.window.Window', {
                    title: '查看图层位置',
                    height: winHeight,
                    width: winWidth,
                    minHeight: 500,
                    minWidth: 600,
                    iconCls: 'extIcon extMap',
                    layout: 'fit',
                    resizable: true,
                    maximizable: true,
                    animateTarget: obj,
                    constrain: true,
                    items: [mapPanel],
                    modal: true,
                    listeners: {
                        show: function () {
                            var url = FastExt.System.formatUrlVersion('base/map/showRectangle.html', {
                                mapVersion: FastExt.System.getExt("amap-version").value,
                                mapKey: FastExt.System.getExt("amap-key").value
                            });
                            mapPanel.update("<iframe name='mapFrame'  src='" + url + "' width='100%' height='100%' frameborder='0' scrolling='no' />");
                        },
                        close: function (val) {
                            if (!resolve.called) {
                                resolve.called = true;
                                resolve();
                            }
                        }
                    }
                });
                win.show();
                if (Ext.isEmpty(zIndex)) {
                    zIndex = 6;
                }
                window["onMapLoadDone"] = function () {
                    window["mapFrame"].window.showImgLayerInMap(imgUrl, southWestLngLat, northEastLngLat, zIndex, minZoom, maxZoom);
                };
                window["alert"] = function (msg) {
                    FastExt.Dialog.showAlert("系统提醒", msg);
                };
            });
        };
        return Map;
    }());
    FastExt.Map = Map;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Menu = (function () {
        function Menu() {
        }
        Menu.copyMenu = function (target) {
            var menus = [];
            if (target.items) {
                target.items.each(function (item, index) {
                    var child = {
                        icon: item.icon,
                        text: item.text,
                        handler: item.handler
                    };
                    if (item.getMenu() != null) {
                        child.menu = FastExt.Menu.copyMenu(item.getMenu());
                    }
                    menus.push(child);
                });
            }
            return menus;
        };
        Menu.fireMenuEvent = function (menu, event) {
            if (menu && menu.items) {
                menu.items.each(function (item, index) {
                    if (item.hasOwnProperty(event) && Ext.isFunction(item[event])) {
                        item[event]();
                    }
                    if (Ext.isFunction(item.getMenu)) {
                        FastExt.Menu.fireMenuEvent(item.getMenu(), event);
                    }
                });
            }
        };
        Menu.isSplitLineLast = function (menus) {
            if (menus) {
                if (menus.items && menus.items.length > 0) {
                    return menus.items[menus.items.length - 1] === "-";
                }
                if (Ext.isArray(menus) && menus.length > 0) {
                    return menus[menus.length - 1] === "-";
                }
            }
            return false;
        };
        Menu.refreshItem = function (menu) {
            if (menu && menu.items) {
                var visibleItem_1 = [];
                menu.items.each(function (item, index) {
                    if (item.xtype === "menuseparator") {
                        if (visibleItem_1.length > 0 && visibleItem_1[visibleItem_1.length - 1].xtype === "menuseparator") {
                            item.hide();
                        }
                        else {
                            item.show();
                        }
                    }
                    if (!item.isHidden()) {
                        visibleItem_1.push(item);
                    }
                    if (Ext.isFunction(item.getMenu)) {
                        FastExt.Menu.refreshItem(item.getMenu());
                    }
                });
                if (visibleItem_1.length > 0 && visibleItem_1[visibleItem_1.length - 1].xtype === "menuseparator") {
                    visibleItem_1[visibleItem_1.length - 1].hide();
                }
            }
        };
        return Menu;
    }());
    FastExt.Menu = Menu;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var MuuriTool = (function () {
        function MuuriTool() {
        }
        MuuriTool.bindToContainer = function (container, muuriConfig, callback) {
            if (container.muuriGrid) {
                callback(container.muuriGrid);
                return;
            }
            var doLoad = function () {
                FastExt.MuuriTool.loadedMuuriJs = true;
                var targetId = null;
                if (Ext.isFunction(container.getMuuriGridContainerId)) {
                    targetId = container.getMuuriGridContainerId();
                }
                if (Ext.isEmpty(targetId)) {
                    console.warn("Muuri渲染失败！目标ID为空！");
                    return;
                }
                var grid = new Muuri('#' + targetId, muuriConfig);
                container.muuriGrid = grid;
                callback(grid);
            };
            if (!this.loadedMuuriJs) {
                FastExt.System.addScript({ src: FastExt.MuuriTool.muuriJsPath }, function () {
                    FastExt.System.addScript({ src: FastExt.MuuriTool.webAnimasJsPath }, doLoad);
                });
            }
            else {
                doLoad();
            }
        };
        MuuriTool.justBindToContainer = function (container, muuriConfig, callback) {
            FastExt.MuuriTool.releaseMuuriGrid(container);
            FastExt.MuuriTool.bindToContainer(container, muuriConfig, callback);
        };
        MuuriTool.getMuuriGrid = function (container) {
            if (container.muuriGrid) {
                return container.muuriGrid;
            }
            return null;
        };
        MuuriTool.releaseMuuriGrid = function (container) {
            var muuriGrid = FastExt.MuuriTool.getMuuriGrid(container);
            if (muuriGrid) {
                muuriGrid.destroy(true);
                container.muuriGrid = null;
            }
        };
        MuuriTool.muuriJsPath = "base/muuri/muuri.min.js";
        MuuriTool.webAnimasJsPath = "base/muuri/web-animations.min.js";
        return MuuriTool;
    }());
    FastExt.MuuriTool = MuuriTool;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Objects = (function () {
        function Objects() {
        }
        Objects.safeObject = function (source) {
            if (source) {
                return source;
            }
            return {};
        };
        Objects.safeSplit = function (source, splitChar) {
            if (Ext.isEmpty(source)) {
                return [];
            }
            return source.split(splitChar);
        };
        return Objects;
    }());
    FastExt.Objects = Objects;
})(FastExt || (FastExt = {}));
var FastOverrider;
(function (FastOverrider) {
    var ExtOverrider = (function () {
        function ExtOverrider() {
            var oldCreate = Ext.create;
            Ext.create = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                try {
                    if (args.length > 1) {
                        if (Ext.isObject(args[1]) && args[1].filter && args[1].filter.enable) {
                            var filterConfig = args[1].filter;
                            FastExt.Listeners.fireExtCreateFilter(filterConfig.key, filterConfig.method, args[0], args[1]);
                        }
                    }
                    return oldCreate.apply(this, args);
                }
                catch (e) {
                    if (FastExt.System.isDebug()) {
                        FastExt.Server.reportException(FastExt.ErrorHandler.geErrorInfo(e));
                    }
                    return null;
                }
            };
            var oldGetScrollbarSize = Ext.scrollbar.size;
            Ext.scrollbar.size = function () {
                var scrollbarSize = oldGetScrollbarSize.apply(this, arguments);
                scrollbarSize.width = 8;
                scrollbarSize.height = 8;
                return scrollbarSize;
            };
        }
        return ExtOverrider;
    }());
    FastOverrider.ExtOverrider = ExtOverrider;
    var PowerComponentOverride = (function () {
        function PowerComponentOverride() {
            Ext.override(Ext.Component, {
                onFastPowerContextMenu: function (e, t, eOpts) {
                    e.stopEvent();
                    FastExt.Power.showPowerConfig(this, e);
                },
                afterRender: function () {
                    try {
                        if (!FastExt.System.isInitSystem()) {
                            return;
                        }
                        var me = this;
                        me.power = FastExt.Base.toBool(me.power, true);
                        if (me.power && (me.getXTypes().indexOf("field/") > 0 || Ext.Array.contains(FastExt.Power.types, me.getXType()))) {
                            me.code = FastExt.Power.getPowerCode(me);
                            if (!me.power) {
                                return;
                            }
                            if (me.up("[powerUI=false]")) {
                                return;
                            }
                            if (me.code) {
                                me.managerPower = FastExt.Power.checkManagerPower(me);
                                FastExt.Power.setPower(me.code, FastExt.Base.copy(me.managerPower));
                                if (!FastExt.Power.hasPower(me, 'show')) {
                                    me.hideable = false;
                                    me.setHidden(true);
                                    me.setDisabled(true);
                                    me.clearListeners();
                                    if (Ext.isFunction(me.collapse)) {
                                        me.collapse();
                                    }
                                }
                                else if (!FastExt.Power.hasPower(me, 'edit')) {
                                    me.editable = false;
                                    if (Ext.isFunction(me.setReadOnly)) {
                                        me.setReadOnly(true);
                                    }
                                }
                                if (FastExt.Power.config) {
                                    me.powerConfig = FastExt.Power.checkPower(me.code);
                                    FastExt.Power.setPowerStyle(me);
                                    me.getEl().on('contextmenu', me.onFastPowerContextMenu, me);
                                }
                            }
                        }
                    }
                    finally {
                        this.callParent(arguments);
                    }
                }
            });
            Ext.override(Ext.Component, {
                setDisabled: function (disabled) {
                    if (FastExt.Power.config) {
                        return this['enable']();
                    }
                    return this.callParent(arguments);
                }
            });
            Ext.override(Ext.form.field.Base, {
                markInvalid: function (errors) {
                    if (FastExt.Power.config) {
                        return;
                    }
                    this.callParent(arguments);
                }
            });
        }
        return PowerComponentOverride;
    }());
    FastOverrider.PowerComponentOverride = PowerComponentOverride;
    var ComponentOverride = (function () {
        function ComponentOverride() {
            Ext.override(Ext.Component, {
                constructor: function (config) {
                    this.callParent(arguments);
                    this.addCls("fast-" + this.xtype);
                },
                setZIndex: function () {
                    var callIndex = this.callParent(arguments);
                    if (this.justTop || (this.cfg && this.cfg.justTop)) {
                        this.el.setZIndex(FastExt.Component.pageMaxZIndex);
                    }
                    return callIndex;
                },
                refreshAllowBlankTip: function () {
                    var me = this;
                    if (!FastExt.Base.toBool(me.allowBlank, true) && !Ext.isEmpty(me.fieldLabel)
                        && me.allowBlankTip) {
                        me.setFieldLabel('<svg class="svgIcon fileIcon redColor fontSize8" aria-hidden="true"><use xlink:href="#extSnow"></use></svg>&nbsp;' + me.configFieldLabel);
                    }
                },
                show: function () {
                    try {
                        if (FastExt.System.isInitSystem()) {
                            if (this.getXType() === "window"
                                || this.getXType() === "messagebox") {
                                if (!FastExt.Base.toBool(this.sessionWin, false)) {
                                    if (FastExt.System.sessionOutAlert) {
                                        this.hide();
                                        return null;
                                    }
                                }
                            }
                        }
                    }
                    catch (e) {
                        console.error(e);
                    }
                    return this.callParent(arguments);
                },
                onResize: function (width, height, oldWidth, oldHeight) {
                    this.callParent(arguments);
                    if (this.needCacheUI) {
                        if (width !== Ext.getBody().getWidth()) {
                            FastExt.Cache.setCache(this.cacheUICode + "Width", width);
                        }
                        if (height !== Ext.getBody().getHeight()) {
                            FastExt.Cache.setCache(this.cacheUICode + "Height", height);
                        }
                    }
                },
                onFastBodyElMouseLeave: function (event) {
                    if (this.helpTip) {
                        this.helpTip.close();
                        this.helpTip = null;
                    }
                },
                onFastBodyElMouseOver: function () {
                    if (this.help) {
                        this.buildHelpTip();
                    }
                },
                onFastBodyElContextMenu: function () {
                    if (this.help) {
                        this.buildHelpTip();
                    }
                },
                buildHelpTip: function () {
                    try {
                        var me_2 = this;
                        if (me_2.helpTip) {
                            if (me_2.helpTip.showDelay > 0) {
                                if (me_2.helpTipTimeout) {
                                    clearTimeout(me_2.helpTipTimeout);
                                }
                                me_2.helpTipTimeout = setTimeout(function () {
                                    if (me_2.helpTip) {
                                        me_2.helpTip.show();
                                    }
                                }, me_2.helpTip.showDelay);
                            }
                            else {
                                me_2.helpTip.show();
                            }
                            return;
                        }
                        var helpContent = me_2.help;
                        if (window["getHelpContent"]) {
                            helpContent = window["getHelpContent"](me_2.help);
                        }
                        var anchor = me_2.helpAnchor;
                        if (Ext.isEmpty(anchor)) {
                            anchor = "left";
                        }
                        var helpShowDelay = me_2.helpShowDelay;
                        if (Ext.isEmpty(helpShowDelay)) {
                            helpShowDelay = 0;
                        }
                        var helpMaxWidth = me_2.helpMaxWidth;
                        if (Ext.isEmpty(helpMaxWidth)) {
                            helpMaxWidth = 500;
                        }
                        var targetEl = me_2.bodyEl;
                        if (!targetEl) {
                            targetEl = me_2.el;
                        }
                        me_2.helpTip = Ext.create('Ext.tip.ToolTip', {
                            target: targetEl,
                            resizable: false,
                            anchor: anchor,
                            anchorOffset: 0,
                            autoHide: false,
                            hideDelay: 0,
                            focusOnToFront: false,
                            maxWidth: helpMaxWidth,
                            closeAction: 'destroy',
                            hideAction: 'destroy',
                            html: helpContent,
                            showDelay: helpShowDelay,
                            autoShow: helpShowDelay === 0,
                            listeners: {
                                beforedestroy: function () {
                                    me_2.helpTip = null;
                                    if (me_2.helpTipTimeout) {
                                        clearTimeout(me_2.helpTipTimeout);
                                    }
                                },
                                hide: function () {
                                    this.close();
                                },
                                move: function (obj, x, y, eOpts) {
                                    var anchor = obj.anchor;
                                    var anchorOffset = (me_2.getWidth() - 20) / 2;
                                    if (anchor === "left" || anchor === "right") {
                                        anchorOffset = (me_2.getHeight() - 20) / 2;
                                    }
                                    if (!Ext.isEmpty(me_2.helpAnchorOffset) && parseInt(me_2.helpAnchorOffset) != -1) {
                                        anchorOffset = me_2.helpAnchorOffset;
                                    }
                                    obj.anchorOffset = anchorOffset;
                                }
                            }
                        });
                    }
                    catch (e) {
                        console.error(e);
                    }
                },
                finishRender: function () {
                    this.callParent(arguments);
                    var me = this;
                    try {
                        if (FastExt.Power.isPower()) {
                            return;
                        }
                        if (me.help) {
                            var targetEl = me.bodyEl;
                            if (!targetEl) {
                                targetEl = me.el;
                            }
                            if (Ext.isEmpty(me.helpType)) {
                                me.helpType = FastEnum.HelpEnumType.mouse_right_click;
                            }
                            targetEl.on("mouseleave", me.onFastBodyElMouseLeave, me);
                            if (me.helpType == FastEnum.HelpEnumType.mouse_right_click) {
                                targetEl.on("contextmenu", me.onFastBodyElContextMenu, me);
                            }
                            else if (me.helpType == FastEnum.HelpEnumType.mouse_in_out) {
                                targetEl.on("mouseover", me.onFastBodyElMouseOver, me);
                            }
                        }
                    }
                    catch (e) {
                        console.error(e);
                    }
                },
                initComponent: function () {
                    var me = this;
                    try {
                        if (me.labelAlign && !Ext.isEmpty(me.fieldLabel)) {
                            me.userCls = "fast-filefield-label-" + me.labelAlign;
                        }
                        me.labelSeparator = "";
                        if (me.emptyText === "default") {
                            me.emptyText = "请填写";
                            if (!Ext.isEmpty(me.fieldLabel)) {
                                me.emptyText = "请填写" + me.fieldLabel;
                                var realXtype = me.xtype;
                                if (me.parentXtype) {
                                    realXtype = me.parentXtype;
                                }
                                if (realXtype.indexOf("combo") >= 0
                                    || realXtype.indexOf("link") >= 0
                                    || realXtype.indexOf("date") >= 0
                                    || realXtype.indexOf("map") >= 0
                                    || realXtype.indexOf("pca") >= 0) {
                                    me.emptyText = "请选择" + me.fieldLabel;
                                }
                            }
                        }
                        me.configFieldLabel = me.fieldLabel;
                        me.refreshAllowBlankTip();
                        me.validateOnBlur = false;
                        me.validateOnChange = false;
                        me.closeToolText = "关闭";
                        me.collapseToolText = "关闭";
                        me.expandToolText = "展开";
                        if ((me.getXType() === "window" || me.getXType() === "panel")
                            && (!Ext.isEmpty(me.getTitle()) || !Ext.isEmpty(me.subtitle))
                            && (me.resizable || me.split)) {
                            me.cacheUICode = $.md5(me.getTitle() + me.subtitle + $("title").text() + me.width + me.height);
                            var width = FastExt.Cache.getCache(me.cacheUICode + "Width");
                            var height = FastExt.Cache.getCache(me.cacheUICode + "Height");
                            var collapse = FastExt.Base.toBool(FastExt.Cache.getCache(me.cacheUICode + "Collapse"), me.collapsed);
                            if (width != null) {
                                me.setWidth(width);
                                me.setFlex(0);
                            }
                            if (height != null) {
                                me.setHeight(height);
                                me.setFlex(0);
                            }
                            me.collapsed = collapse;
                            me.needCacheUI = true;
                            me.setCollapsed(collapse);
                        }
                        if (FastExt.Base.toBool(me.iframePanel, false)) {
                            me.disabledCls = "iframe-disabled-panel";
                        }
                        if (!Ext.isEmpty(me.firstCls)) {
                            me.baseCls = me.firstCls + " " + me.baseCls;
                        }
                    }
                    catch (e) {
                        console.error(e);
                    }
                    finally {
                        this.callParent(arguments);
                    }
                },
                destroy: function () {
                    this.callParent(arguments);
                    try {
                        if (this.tip) {
                            this.tip.destroy();
                            this.tip = null;
                        }
                        if (this.menu) {
                            this.menu.destroy();
                            this.menu = null;
                        }
                    }
                    catch (e) {
                    }
                },
            });
        }
        return ComponentOverride;
    }());
    FastOverrider.ComponentOverride = ComponentOverride;
    var PanelOverride = (function () {
        function PanelOverride() {
            Ext.override(Ext.panel.Panel, {
                collapse: function () {
                    this.callParent(arguments);
                    if (this.needCacheUI) {
                        FastExt.Cache.setCache(this.cacheUICode + "Collapse", true);
                    }
                },
                expand: function (animate) {
                    this.callParent(arguments);
                    if (this.needCacheUI) {
                        FastExt.Cache.setCache(this.cacheUICode + "Collapse", false);
                    }
                },
                onMouseLeaveFloated: function (e) {
                    if (FastExt.Base.toBool(this.holdFloatView, false)) {
                        this.onMouseEnterFloated(e);
                        return;
                    }
                    this.callParent(arguments);
                },
                close: function () {
                    if (!FastExt.Base.toBool(this.canClose, true)) {
                        return;
                    }
                    this.callParent(arguments);
                }
            });
        }
        return PanelOverride;
    }());
    FastOverrider.PanelOverride = PanelOverride;
    var LoadMaskOverride = (function () {
        function LoadMaskOverride() {
            Ext.override(Ext.LoadMask, {
                constructor: function () {
                    this.callParent(arguments);
                    var msgId = this.getId() + "-msgEl";
                    var animDiv = $("<div id='" + this.getId() + "-anim' style='height: 70px;width: 70px;'></div>");
                    $("#" + msgId).prepend(animDiv);
                },
                getAnimEl: function () {
                    var animDiv = $("#" + this.getId() + "-anim");
                    if (animDiv.length > 0) {
                        return animDiv[0];
                    }
                    return null;
                },
                show: function () {
                    var me = this;
                    var animEl = me.getAnimEl();
                    if (animEl) {
                        FastExt.Lottie.loadJsonAnimByEl(animEl, "base/lottie/loading.json");
                    }
                    if (me.target && (me.target.disabledLoadMaskOnce || me.target.disabledLoadMask)) {
                        me.target.disabledLoadMaskOnce = false;
                        return me;
                    }
                    if (me.isElement) {
                        me.ownerCt.mask(this.useMsg ? this.msg : '', this.msgCls);
                        me.fireEvent('show', this);
                        return;
                    }
                    return me.callParent(arguments);
                },
                hide: function () {
                    try {
                        var animEl = this.getAnimEl();
                        if (animEl) {
                            FastExt.Lottie.unloadJsonAnimByEl(animEl);
                        }
                    }
                    catch (e) {
                    }
                    return this.callParent(arguments);
                },
            });
        }
        return LoadMaskOverride;
    }());
    FastOverrider.LoadMaskOverride = LoadMaskOverride;
    var ButtonOverride = (function () {
        function ButtonOverride() {
            Ext.override(Ext.button.Button, {
                afterRender: function () {
                    try {
                        var me = this;
                        if (me.tipText) {
                            me.tip = new Ext.ToolTip({
                                target: me.el,
                                trackMouse: true,
                                renderTo: Ext.getBody(),
                                dismissDelay: 0,
                                html: me.tipText
                            });
                        }
                        if (FastExt.Base.toBool(me.local)) {
                            if (!FastExt.System.isLocal()) {
                                me.setHidden(true);
                            }
                        }
                        this.callParent(arguments);
                    }
                    catch (e) {
                        console.error(e);
                    }
                    finally {
                        FastExt.Button.checkGridToolbarButton(this);
                    }
                }
            });
        }
        return ButtonOverride;
    }());
    FastOverrider.ButtonOverride = ButtonOverride;
    var GridOverride = (function () {
        function GridOverride() {
            Ext.override(Ext.grid.Panel, {
                initComponent: function () {
                    this.callParent(arguments);
                    if (this.ownerGrid) {
                        FastExt.Grid.onGridInitComponent(this.ownerGrid);
                    }
                    else {
                        FastExt.Grid.onGridInitComponent(this);
                    }
                },
                finishRender: function () {
                    this.callParent(arguments);
                    if (this.ownerGrid) {
                        FastExt.Grid.onGridAfterRender(this.ownerGrid);
                    }
                    else {
                        FastExt.Grid.onGridAfterRender(this);
                    }
                },
                destroy: function () {
                    try {
                        if (this.contextMenu) {
                            this.contextMenu.destroy();
                        }
                        if (this.columnHeadMenu) {
                            this.columnHeadMenu.destroy();
                        }
                        FastExt.Cache.memory["GridSelectHistory" + this.code] = null;
                    }
                    catch (e) {
                    }
                    this.callParent(arguments);
                }
            });
            Ext.override(Ext.grid.CellContext, {
                setRow: function (row) {
                    try {
                        if (!this.view) {
                            return this;
                        }
                        if (row) {
                            this.callParent(arguments);
                        }
                        return this;
                    }
                    catch (e) {
                        console.error(e);
                    }
                    return this;
                }
            });
            Ext.override(Ext.grid.column.Column, {
                afterRender: function () {
                    try {
                        var me = this;
                        me.code = FastExt.Power.getPowerCode(me);
                        if (!me.renderer) {
                            me.renderer = FastExt.Renders.normal();
                        }
                        if (me.rendererFunction) {
                            me.renderer = eval(me.rendererFunction);
                        }
                        FastExt.Grid.configColumnProperty(me);
                        FastExt.Grid.configColumnListener(me);
                    }
                    catch (e) {
                        console.error(e);
                    }
                    finally {
                        this.callParent(arguments);
                    }
                },
                destroy: function () {
                    if (this.searchMenu) {
                        this.searchMenu.destroy();
                    }
                    if (this.editMenu) {
                        this.editMenu.destroy();
                    }
                    if (this.batchEditMenu) {
                        this.batchEditMenu.destroy();
                    }
                    this.callParent(arguments);
                }
            });
            Ext.override(Ext.grid.selection.SpreadsheetModel, {
                onHeaderClick: function () {
                    this.callParent(arguments);
                },
                deselectAll: function (suppressEvent, passHistory) {
                    if (!FastExt.Base.toBool(passHistory, false)) {
                        if (this.view && this.view.ownerGrid
                            && this.view.ownerGrid.selectHistoryConfig
                            && this.view.ownerGrid.selectHistoryConfig.state === 1) {
                            this.view.ownerGrid.clearSelectRecordHistory();
                        }
                    }
                    this.callParent(arguments);
                },
                selectAll: function () {
                    this.callParent(arguments);
                    this.selected.allSelected = true;
                },
                getSelection: function (passHistory) {
                    if (!FastExt.Base.toBool(passHistory, false)) {
                        if (this.view && this.view.ownerGrid
                            && this.view.ownerGrid.selectHistoryConfig
                            && this.view.ownerGrid.selectHistoryConfig.state === 1) {
                            return this.view.ownerGrid.getSelectRecordHistory();
                        }
                    }
                    return this.callParent(arguments);
                },
                getNumbererColumnConfig: function () {
                    var config = this.callParent(arguments);
                    config["text"] = "序号";
                    config["align"] = "center";
                    config["resizable"] = true;
                    if (parseInt(config["width"]) > 0) {
                        config["width"] = 52;
                    }
                    config["configWidth"] = config["width"];
                    return config;
                },
            });
            Ext.override(Ext.grid.ColumnLayout, {
                calculate: function (ownerContext) {
                    try {
                        this.callParent(arguments);
                    }
                    catch (e) {
                    }
                },
            });
        }
        return GridOverride;
    }());
    FastOverrider.GridOverride = GridOverride;
    var StoreOverride = (function () {
        function StoreOverride() {
            Ext.override(Ext.data.Store, {
                constructor: function () {
                    this.callParent(arguments);
                    if (this.entity) {
                        this.autoDestroy = true;
                    }
                },
                destroy: function () {
                    try {
                        if (this.columnRenderKey) {
                            if (Ext.isArray(this.columnRenderKey)) {
                                for (var _i = 0, _a = this.columnRenderKey; _i < _a.length; _i++) {
                                    var columnRenderKeyElement = _a[_i];
                                    FastExt.Cache.memory[columnRenderKeyElement] = null;
                                    window[columnRenderKeyElement] == null;
                                }
                            }
                            else {
                                FastExt.Cache.memory[this.columnRenderKey] = null;
                                window[this.columnRenderKey] == null;
                            }
                        }
                        if (this.entity) {
                            FastExt.Server.destroyList(this.getId());
                        }
                    }
                    catch (e) {
                    }
                    this.callParent(arguments);
                }
            });
        }
        return StoreOverride;
    }());
    FastOverrider.StoreOverride = StoreOverride;
    var LayoutOverride = (function () {
        function LayoutOverride() {
            Ext.override(Ext.layout.container.Accordion, {
                nextCmp: function (cmp) {
                    var next = cmp.next();
                    if (next && next.isHidden()) {
                        return this.nextCmp(next);
                    }
                    return next;
                },
                prevCmp: function (cmp) {
                    var prev = cmp.prev();
                    if (prev && prev.isHidden()) {
                        return this.prevCmp(prev);
                    }
                    return prev;
                },
                onBeforeComponentCollapse: function (comp) {
                    try {
                        var me = this, owner = me.owner, toExpand = void 0, expanded = void 0, previousValue = void 0;
                        if (me.owner.items.getCount() === 1) {
                            return false;
                        }
                        if (!me.processing) {
                            me.processing = true;
                            previousValue = owner.deferLayouts;
                            owner.deferLayouts = true;
                            toExpand = me.nextCmp(comp) || me.prevCmp(comp);
                            if (toExpand.isHidden()) {
                                owner.deferLayouts = previousValue;
                                me.processing = false;
                                me.onBeforeComponentCollapse(toExpand);
                                return;
                            }
                            if (me.multi) {
                                owner.deferLayouts = previousValue;
                                me.processing = false;
                                return;
                            }
                            if (toExpand) {
                                toExpand.expand();
                            }
                            owner.deferLayouts = previousValue;
                            me.processing = false;
                        }
                    }
                    catch (e) {
                        console.error(e);
                    }
                }
            });
        }
        return LayoutOverride;
    }());
    FastOverrider.LayoutOverride = LayoutOverride;
    var DomOverride = (function () {
        function DomOverride() {
            Ext.override(Ext.dom.Element, {
                syncContent: function (source) {
                    try {
                        this.callParent(arguments);
                    }
                    catch (e) {
                        console.error(e);
                    }
                },
                constructor: function (dom) {
                    this.callParent(arguments);
                },
                onFastMouseUp: function (e, t) {
                    if (t && t.className && t.className.toString().indexOf("x-tree-elbow-img") >= 0) {
                        FastExt.Cache.memory["holdGridRecordSelectHistory"] = true;
                    }
                    else {
                        FastExt.Cache.memory["holdGridRecordSelectHistory"] = false;
                    }
                },
                removeCls: function () {
                    try {
                        if (!this.getData()) {
                            return;
                        }
                        return this.callParent(arguments);
                    }
                    catch (e) {
                        console.error(e);
                    }
                    return this;
                },
            });
        }
        return DomOverride;
    }());
    FastOverrider.DomOverride = DomOverride;
    var ToolbarOverride = (function () {
        function ToolbarOverride() {
            Ext.override(Ext.toolbar.Paging, {
                initComponent: function () {
                    this.inputItemWidth = 70;
                    this.callParent(arguments);
                    var refreshBtn = this.child("#refresh");
                    refreshBtn.setIconCls("extIcon extRefresh grayColor");
                    this.on("beforechange", this.onFastBeforeChange, this);
                },
                onFastBeforeChange: function (obj, page, eOpts) {
                    return obj.checkStoreUpdate(function () {
                        obj.store.loadPage(page);
                    });
                },
                checkStoreUpdate: function (callBack) {
                    var me = this;
                    if (!me.store.entity) {
                        return true;
                    }
                    var records = me.store.getUpdatedRecords();
                    if (records.length > 0) {
                        Ext.Msg.confirm("系统提醒", "当前页有未提交修改的数据，是否提交修改？", function (button, text) {
                            if (button == "yes") {
                                FastExt.Store.commitStoreUpdate(me.store).then(function () {
                                    callBack();
                                });
                            }
                            else {
                                callBack();
                            }
                        });
                        return false;
                    }
                    return true;
                }
            });
        }
        return ToolbarOverride;
    }());
    FastOverrider.ToolbarOverride = ToolbarOverride;
    var UtilOverride = (function () {
        function UtilOverride() {
            Ext.override(Ext.util.Grouper, {
                sortFn: function (item1, item2) {
                    return 0;
                }
            });
        }
        return UtilOverride;
    }());
    FastOverrider.UtilOverride = UtilOverride;
    var ResizerOverride = (function () {
        function ResizerOverride() {
            Ext.override(Ext.resizer.Splitter, {
                onRender: function () {
                    var me = this;
                    me.collapseOnDblClick = false;
                    me.callParent(arguments);
                }
            });
        }
        return ResizerOverride;
    }());
    FastOverrider.ResizerOverride = ResizerOverride;
    var DDOverride = (function () {
        function DDOverride() {
            Ext.override(Ext.dd.DragTracker, {
                onMouseDown: function (e) {
                    this.callParent(arguments);
                    if (this.disabled) {
                        return;
                    }
                    if (e.target && e.target.className) {
                        if (e.target.className.toString().indexOf("x-tool") >= 0) {
                            return;
                        }
                        if (e.target.className.toString().indexOf("x-column") >= 0) {
                            return;
                        }
                    }
                    var iframePanelArray = Ext.ComponentQuery.query("[iframePanel=true]");
                    for (var i = 0; i < iframePanelArray.length; i++) {
                        iframePanelArray[i].oldDisabled = iframePanelArray[i].disabled;
                        iframePanelArray[i].setDisabled(true);
                    }
                },
                onMouseUp: function (e) {
                    this.callParent(arguments);
                    var iframePanelArray = Ext.ComponentQuery.query("[iframePanel=true]");
                    for (var i = 0; i < iframePanelArray.length; i++) {
                        iframePanelArray[i].setDisabled(iframePanelArray[i].oldDisabled);
                    }
                },
                endDrag: function (e) {
                    this.callParent(arguments);
                    var iframePanelArray = Ext.ComponentQuery.query("[iframePanel=true]");
                    for (var i = 0; i < iframePanelArray.length; i++) {
                        iframePanelArray[i].setDisabled(iframePanelArray[i].oldDisabled);
                    }
                }
            });
        }
        return DDOverride;
    }());
    FastOverrider.DDOverride = DDOverride;
    var FormOverride = (function () {
        function FormOverride() {
            Ext.override(Ext.form.Basic, {
                submit: function (options) {
                    options = options || {};
                    var me = this, action;
                    options.submitEmptyText = false;
                    options.timeout = 3 * 60;
                    if (options.standardSubmit || me.standardSubmit) {
                        action = 'standardsubmit';
                    }
                    else {
                        action = me.api ? 'directsubmit' : 'submit';
                    }
                    return me.doAction(action, options);
                },
                getValues: function (asString, dirtyOnly, includeEmptyText, useDataValues, isSubmitting) {
                    var value = this.callParent(arguments);
                    var extraParams = {};
                    var fields = this.getFields().items;
                    for (var _i = 0, fields_2 = fields; _i < fields_2.length; _i++) {
                        var field = fields_2[_i];
                        if (field.extraParams) {
                            extraParams = FastExt.Json.mergeJson(extraParams, field.extraParams);
                        }
                        if (field.multiSplit) {
                            extraParams[field.name] = field.getValue().split(field.multiSplit);
                        }
                    }
                    if (asString) {
                        return value + "&" + Ext.Object.toQueryString(extraParams);
                    }
                    return FastExt.Json.mergeJson(value, extraParams);
                },
                isValid: function () {
                    try {
                        var me = this, invalid = void 0;
                        Ext.suspendLayouts();
                        var fieldName_1 = "";
                        var index_1 = 0;
                        var errorInfo_1 = "请正确填写数据！";
                        invalid = me.getFields().filterBy(function (field) {
                            var v = !field.validate();
                            if (v && index_1 === 0) {
                                fieldName_1 = field.getFieldLabel();
                                errorInfo_1 = FastExt.Form.getFieldError(field)[0];
                                index_1++;
                            }
                            return v;
                        });
                        Ext.resumeLayouts(true);
                        var result = invalid.length < 1;
                        if (!result) {
                            if (Ext.isEmpty(fieldName_1)) {
                                FastExt.Dialog.toast("请将数据填写完整！");
                            }
                            else if (!Ext.isEmpty(errorInfo_1)) {
                                FastExt.Dialog.toast("【" + fieldName_1 + "】错误：" + errorInfo_1);
                            }
                            else {
                                FastExt.Dialog.toast("【" + fieldName_1 + "】错误！");
                            }
                            FastExt.Component.shakeComment(me.owner.ownerCt);
                        }
                        return result;
                    }
                    catch (e) {
                        FastExt.Dialog.showException(e);
                    }
                }
            });
            Ext.override(Ext.form.field.File, {
                onRender: function () {
                    this.callParent(arguments);
                    var me = this;
                    if (me.multiple && me.fileInputEl) {
                        me.fileInputEl.dom.setAttribute("multiple", "multiple");
                    }
                }
            });
            Ext.override(Ext.form.field.Time, {
                initComponent: function () {
                    this.invalidText = "无效的时间格式!";
                    this.callParent(arguments);
                }
            });
            Ext.override(Ext.form.field.Text, {
                validate: function () {
                    var result = this.callParent(arguments);
                    if (result && this.xtype === "textfield" && !this.disabled && !this.readOnly && this.useHistory) {
                        this.saveHistory();
                    }
                    return result;
                },
                isUseHistory: function () {
                    return this.xtype === "textfield" && !this.disabled && !this.readOnly && this.useHistory;
                },
                isUseLetterKeyboard: function () {
                    return this.xtype === "textfield" && !this.disabled && !this.readOnly && this.letterKeyboard;
                },
                onChange: function (newVal, oldVal) {
                    this.callParent(arguments);
                    if (this.isUseHistory()) {
                        this.checkHistory();
                    }
                    if (this.isUseLetterKeyboard()) {
                        document.getElementById(this.getInputId()).setAttribute("type", "text");
                    }
                },
                finishRender: function () {
                    this.callParent(arguments);
                    if (this.isUseHistory()) {
                        this.checkHistory();
                        this.inputEl.on('click', this.onFastHistoryInputClick, this);
                    }
                    if (this.isUseLetterKeyboard()) {
                        document.getElementById(this.getInputId()).setAttribute("type", "password");
                    }
                },
                onFastHistoryInputClick: function () {
                    if (this.checkHistory()) {
                        if (this.historyShown) {
                            this.hideHistory();
                        }
                        else {
                            this.showHistory();
                        }
                    }
                },
                onFastHideHistoryMenu: function () {
                    var editorMenu = this.getEditorMenu();
                    if (editorMenu) {
                        editorMenu.holdShow = false;
                    }
                    if (this.hideHistoryTask) {
                        this.hideHistoryTask.delay(100);
                    }
                },
                getHistory: function () {
                    if (!this.code) {
                        this.code = FastExt.Power.getPowerCode(this);
                    }
                    var cacheHistory = FastExt.Cache.getCache(this.code + FastExt.System.getManagerId());
                    if (this.defaultHistory) {
                        if (Ext.isEmpty(cacheHistory)) {
                            cacheHistory = {};
                        }
                        cacheHistory = Ext.Object.merge(cacheHistory, this.defaultHistory);
                    }
                    return cacheHistory;
                },
                checkHistory: function () {
                    var cacheHistory = this.getHistory();
                    if (cacheHistory && Object.keys(cacheHistory).length > 0) {
                        this.getTrigger('history').show();
                        return true;
                    }
                    else {
                        this.getTrigger('history').hide();
                        return false;
                    }
                },
                clearHistory: function () {
                    if (!this.code) {
                        this.code = FastExt.Power.getPowerCode(this);
                    }
                    FastExt.Cache.setCache(this.code + FastExt.System.getManagerId(), {});
                    FastExt.Dialog.toast("已清空历史记录！");
                    this.checkHistory();
                },
                showHistory: function () {
                    if (!this.code) {
                        this.code = FastExt.Power.getPowerCode(this);
                    }
                    if (this.hideHistoryTask) {
                        this.hideHistoryTask.cancel();
                    }
                    if (this.historyMenu) {
                        this.historyMenu.destroy();
                    }
                    var meField = this;
                    var editorMenu = meField.getEditorMenu();
                    if (editorMenu) {
                        editorMenu.holdShow = true;
                    }
                    this.historyMenu = new Ext.menu.Menu({
                        padding: '0 0 0 0',
                        power: false,
                        showSeparator: false,
                        maxHeight: 300,
                        style: {
                            background: "#ffffff"
                        },
                        listeners: {
                            hide: {
                                fn: this.onFastHideHistoryMenu,
                                scope: this,
                            },
                        },
                    });
                    var cacheHistory = this.getHistory();
                    if (!cacheHistory) {
                        return;
                    }
                    if (Ext.isArray(cacheHistory)) {
                        cacheHistory = {};
                    }
                    this.historyMenu.add({
                        text: "清空历史记录",
                        iconCls: 'extIcon extClear',
                        handler: function () {
                            meField.clearHistory();
                        }
                    });
                    var keys = Object.keys(cacheHistory);
                    keys.sort(function (a, b) {
                        var date1 = cacheHistory[a].date;
                        var date2 = cacheHistory[b].date;
                        return FastExt.Dates.parseDate(date2).getTime() - FastExt.Dates.parseDate(date1).getTime();
                    });
                    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                        var key = keys_1[_i];
                        var cache = cacheHistory[key];
                        this.historyMenu.add({
                            text: FastExt.Base.toMaxString(key, 15) + (cache.default ? "" : " [ " + cache.date + " ] "),
                            iconCls: cache.default ? 'extIcon extColumn' : 'extIcon extHistory',
                            realText: key,
                            handler: function () {
                                meField.setValue(this.realText);
                                meField.fireEvent("selectHistoryValue", meField, this.realText);
                            },
                        });
                    }
                    this.historyMenu.showBy(this.bodyEl, "tl-bl?");
                    this.historyShown = true;
                    if (!this.hideHistoryTask) {
                        this.hideHistoryTask = new Ext.util.DelayedTask(function () {
                            this.historyShown = false;
                        }, this);
                    }
                },
                hideHistory: function () {
                    if (this.historyMenu) {
                        this.historyMenu.close();
                    }
                    this.historyShown = false;
                },
                saveHistory: function () {
                    var value = this.getValue();
                    var cacheHistory = FastExt.Cache.getCache(this.code + FastExt.System.getManagerId());
                    if (!cacheHistory) {
                        cacheHistory = {};
                    }
                    if (Ext.isEmpty(value)) {
                        return;
                    }
                    cacheHistory[value] = {
                        date: Ext.Date.format(new Date(), "Y-m-d H:i:s"),
                    };
                    FastExt.Cache.setCache(this.code + FastExt.System.getManagerId(), cacheHistory);
                },
                initComponent: function () {
                    try {
                        var me_3 = this;
                        if (me_3.inputType === 'password') {
                            me_3.addTriggers({
                                eayOpen: {
                                    cls: 'extIcon extEye editColor',
                                    hidden: true,
                                    handler: function () {
                                        if (me_3.up("menu")) {
                                            me_3.up("menu").holdShow = true;
                                        }
                                        this.getTrigger('eayOpen').hide();
                                        this.getTrigger('eayClose').show();
                                        var inputObj = document.getElementById(this.getInputId());
                                        inputObj.blur();
                                        inputObj.setAttribute("type", "password");
                                        setTimeout(function () {
                                            FastExt.Base.inputFocusEnd(inputObj);
                                            if (me_3.up("menu")) {
                                                me_3.up("menu").holdShow = false;
                                            }
                                        }, 100);
                                    }
                                },
                                eayClose: {
                                    cls: 'extIcon extNoSee',
                                    handler: function () {
                                        if (me_3.up("menu")) {
                                            me_3.up("menu").holdShow = true;
                                        }
                                        this.getTrigger('eayOpen').show();
                                        this.getTrigger('eayClose').hide();
                                        var inputObj = document.getElementById(this.getInputId());
                                        inputObj.blur();
                                        inputObj.setAttribute("type", "text");
                                        setTimeout(function () {
                                            FastExt.Base.inputFocusEnd(inputObj);
                                            if (me_3.up("menu")) {
                                                me_3.up("menu").holdShow = false;
                                            }
                                        }, 100);
                                    }
                                }
                            });
                        }
                        else if (me_3.isUseHistory()) {
                            me_3.addTriggers({
                                history: {
                                    cls: 'extIcon extHistory2',
                                    hidden: true,
                                    handler: me_3.onFastHistoryInputClick,
                                },
                            });
                        }
                    }
                    finally {
                        this.callParent(arguments);
                    }
                },
                destroy: function () {
                    if (this.historyMenu) {
                        this.historyMenu.destroy();
                    }
                    this.callParent(arguments);
                },
            });
            Ext.override(Ext.form.field.ComboBox, {
                initComponent: function () {
                    try {
                        var me = this;
                        if (me.searchable) {
                            me.editable = true;
                            me.queryMode = "local";
                            me.anyMatch = true;
                            me.caseSensitive = true;
                            me.validator = function (val) {
                                if (this.allowBlank) {
                                    return true;
                                }
                                if (this.searchable && !FastExt.Base.toBool(this.newable, false)) {
                                    var enumRecord = this.getStore().findRecord(this.valueField, this.getValue(), 0, false, false, true);
                                    if (!enumRecord) {
                                        return "数据【" + val + "】无效，请选择下拉框里的选项！";
                                    }
                                }
                                return true;
                            };
                        }
                    }
                    finally {
                        this.callParent(arguments);
                    }
                },
                toggle: function () {
                    var pickerHidden = this.getPicker().hidden;
                    if (pickerHidden) {
                        this.collapse();
                    }
                    else if (this.searchable) {
                        this.doQuery(this.getRawValue(), false, true);
                    }
                    else {
                        this.expand();
                    }
                },
            });
        }
        return FormOverride;
    }());
    FastOverrider.FormOverride = FormOverride;
    var MenuOverride = (function () {
        function MenuOverride() {
            Ext.override(Ext.menu.Menu, {
                hide: function () {
                    var me = this;
                    if (!me.powerMenu) {
                        if (FastExt.Power.menuShowing) {
                            return;
                        }
                    }
                    if (me.holdShow) {
                        return;
                    }
                    return this.callParent(arguments);
                },
                onShortcutKey: function () {
                    try {
                        this.callParent(arguments);
                    }
                    catch (e) {
                    }
                },
                delayClose: function (duration) {
                    new Ext.util.DelayedTask(this.close, this).delay(duration);
                },
            });
            Ext.override(Ext.menu.Item, {
                focus: function () {
                    if (this.isDisabled()) {
                        return;
                    }
                    if (this.isDisabled()) {
                        return;
                    }
                    var icon = this.icon;
                    var regStr = /([^/]*.svg)/;
                    if (icon && regStr.test(icon)) {
                        var newIcon = FastExt.Server.getIcon(regStr.exec(icon)[1].trim(), "#ffffff");
                        var iconEl = Ext.get(this.getId() + "-iconEl");
                        if (iconEl) {
                            iconEl.setStyle("background-image", "url(" + newIcon + ")");
                        }
                    }
                    return this.callParent(arguments);
                },
                onFocusLeave: function () {
                    this.callParent(arguments);
                    if (this.isDisabled()) {
                        return;
                    }
                    var icon = this.icon;
                    var regStr = /([^/]*.svg)/;
                    if (icon && regStr.test(icon)) {
                        var iconEl = Ext.get(this.getId() + "-iconEl");
                        if (iconEl) {
                            iconEl.setStyle("background-image", "url(" + icon + ")");
                        }
                    }
                },
            });
        }
        return MenuOverride;
    }());
    FastOverrider.MenuOverride = MenuOverride;
    var WindowOverride = (function () {
        function WindowOverride() {
            Ext.override(Ext.Window, {
                setIcon: function (value) {
                    this.callParent(arguments);
                    var me = this;
                    var regStr = /([^/]*.svg)/;
                    if (value && regStr.test(value)) {
                        me.icon = FastExt.Server.getIcon(regStr.exec(value)[1].trim(), "#ffffff");
                    }
                },
                restore: function () {
                    if (!Ext.isEmpty(this.oldMaxHeight)) {
                        this.maxHeight = this.oldMaxHeight;
                    }
                    if (!Ext.isEmpty(this.oldMaxWidth)) {
                        this.maxWidth = this.oldMaxWidth;
                    }
                    return this.callParent(arguments);
                },
                maximize: function () {
                    if (!Ext.isEmpty(this.maxHeight)) {
                        this.height = Math.min(this.getHeight(), this.maxHeight);
                        this.oldMaxHeight = this.maxHeight;
                        delete this.maxHeight;
                    }
                    if (!Ext.isEmpty(this.maxWidth)) {
                        this.width = Math.min(this.getWidth(), this.maxWidth);
                        this.oldMaxWidth = this.maxWidth;
                        delete this.maxWidth;
                    }
                    return this.callParent(arguments);
                },
                afterRender: function () {
                    this.callParent(arguments);
                },
                onShowComplete: function () {
                    this.callParent(arguments);
                    this.toFront(true);
                    this.focus();
                    if (FastExt.Base.toBool(this.autofocusField, true)) {
                        var queryCmp = this.query("form");
                        if (queryCmp && queryCmp.length > 0) {
                            queryCmp[0].getForm().getFields().each(function (item) {
                                if (item.readOnly || item.isDisabled()) {
                                    return true;
                                }
                                if (item.xtype === "textfield" || item.xtype === "numberfield"
                                    || item.xtype === "contentfield"
                                    || item.xtype === "textareafield"
                                    || item.xtype === "htmlcontentfield") {
                                    item.focus(true, 100);
                                    return false;
                                }
                            });
                        }
                    }
                },
                initComponent: function () {
                    try {
                        if (Ext.isEmpty(this.tools)) {
                            this.tools = [];
                        }
                        if ((!this.modal && this.id.indexOf("messagebox") < 0 && FastExt.Base.toBool(this.unpin, true))
                            || FastExt.Base.toBool(this.unpin, false)) {
                            this.tools.push({
                                type: 'unpin',
                                tooltip: '固定窗口',
                                callback: function (owner, tool, event) {
                                    var currTools = owner.getHeader().getTools();
                                    if (tool.type === "unpin") {
                                        tool.setType("pin");
                                        tool.setTooltip("取消固定窗口");
                                        owner.canClose = false;
                                    }
                                    else {
                                        tool.setType("unpin");
                                        tool.setTooltip("固定窗口");
                                        owner.canClose = true;
                                    }
                                    for (var i = 0; i < currTools.length; i++) {
                                        var item = currTools[i];
                                        if (item.type === "close") {
                                            if (tool.type === "unpin") {
                                                item.show();
                                            }
                                            else {
                                                item.hide();
                                            }
                                            break;
                                        }
                                    }
                                }
                            });
                        }
                        if (this.animateTarget == window) {
                            this.animateTarget = null;
                        }
                        if (!this.animateTarget) {
                            this.animateTarget = FastExt.Base.getTargetElement(FastExt.System.currClickTarget);
                        }
                        if (this.getId().indexOf("ghost") >= 0) {
                            this.animateTarget = null;
                        }
                        if (!FastExt.Base.toBool(FastExt.System.getExt("window-anim").value, true)) {
                            this.animateTarget = null;
                        }
                        if (FastExt.Base.toString(this.xtype, "") === "toast") {
                            this.animateTarget = null;
                        }
                        if (FastExt.Base.toBool(this.animateDisable, false)) {
                            this.animateTarget = null;
                        }
                        this.liveDrag = true;
                    }
                    catch (e) {
                        console.error(e);
                    }
                    finally {
                        this.callParent(arguments);
                    }
                },
            });
        }
        return WindowOverride;
    }());
    FastOverrider.WindowOverride = WindowOverride;
    var MessageBoxOverride = (function () {
        function MessageBoxOverride() {
            Ext.override(Ext.window.MessageBox, {
                confirm: function (cfg, message, fn, scope) {
                    FastExt.Dialog.showConfirm(cfg, message, fn);
                    return this;
                },
                prompt: function (title, message, fn, scope, multiline, value) {
                    FastExt.Dialog.showPrompt(title, message, fn, multiline, value);
                    return this;
                },
                alert: function (title, message, fn, scope) {
                    FastExt.Dialog.showAlert(title, message, fn);
                    return this;
                },
                show: function (cfg) {
                    var me = this;
                    me.closeToolText = null;
                    cfg = cfg || {};
                    if (FastExt.Base.toBool(cfg.progress, false)
                        || FastExt.Base.toBool(cfg.wait, false)) {
                        cfg.animateTarget = null;
                    }
                    else {
                        if (Ext.isEmpty(cfg.animateTarget)) {
                            cfg.animateTarget = FastExt.Base.getTargetElement(FastExt.System.currClickTarget);
                        }
                        if (!FastExt.Base.toBool(FastExt.System.getExt("window-anim").value, true)) {
                            cfg.animateTarget = null;
                        }
                    }
                    return me.callParent(arguments);
                },
                onShowComplete: function () {
                    this.callParent(arguments);
                    this.toFront(true);
                    this.focus();
                }
            });
        }
        return MessageBoxOverride;
    }());
    FastOverrider.MessageBoxOverride = MessageBoxOverride;
    var TooltipOverride = (function () {
        function TooltipOverride() {
            Ext.override(Ext.tip.ToolTip, {
                show: function () {
                    if (BoxReordererOverrider.DRAGGING) {
                        return;
                    }
                    this.callParent(arguments);
                },
                onShow: function () {
                    this.callParent(arguments);
                    if (this.disableDocMouseDown) {
                        Ext.destroy(this.mousedownListener);
                    }
                },
                onDocMouseDown: function (e) {
                    try {
                        this.callParent(arguments);
                    }
                    catch (e) {
                    }
                }
            });
        }
        return TooltipOverride;
    }());
    FastOverrider.TooltipOverride = TooltipOverride;
    var TabPanelOverrider = (function () {
        function TabPanelOverrider() {
        }
        return TabPanelOverrider;
    }());
    FastOverrider.TabPanelOverrider = TabPanelOverrider;
    var TreeListOverrider = (function () {
        function TreeListOverrider() {
            Ext.override(Ext.list.Tree, {
                constructor: function () {
                    this.callParent(arguments);
                    this.element.on("contextmenu", this.onContextMenu, this);
                },
                onContextMenu: function (e) {
                    var item = e.getTarget('[data-recordId]'), id;
                    if (item) {
                        id = item.getAttribute('data-recordId');
                        item = this.itemMap[id];
                        if (this.hasListener("itemcontextmenu")) {
                            this.fireEvent("itemcontextmenu", this, item, e);
                        }
                        this.setSelection(item.getNode());
                    }
                },
            });
        }
        return TreeListOverrider;
    }());
    FastOverrider.TreeListOverrider = TreeListOverrider;
    var BoxReordererOverrider = (function () {
        function BoxReordererOverrider() {
            Ext.override(Ext.ux.BoxReorderer, {
                startDrag: function () {
                    this.callParent(arguments);
                    BoxReordererOverrider.DRAGGING = true;
                },
                endDrag: function () {
                    this.callParent(arguments);
                    BoxReordererOverrider.DRAGGING = false;
                },
            });
        }
        return BoxReordererOverrider;
    }());
    FastOverrider.BoxReordererOverrider = BoxReordererOverrider;
    for (var subClass in FastOverrider) {
        FastOverrider[subClass]();
    }
})(FastOverrider || (FastOverrider = {}));
var FastExt;
(function (FastExt) {
    var Plugins = (function () {
        function Plugins() {
            Ext.define('Ext.plugin.ShowLazyItems', {
                extend: 'Ext.plugin.Abstract',
                alias: 'plugin.showlazyitems',
                init: function (comp) {
                    this.callParent(arguments);
                    if (this.items) {
                        if (this.eagerInstantiation) {
                            this.items = comp.prepareItems(this.items);
                        }
                    }
                    comp.onShowComplete = Ext.Function.createInterceptor(comp.onShowComplete, this.onComponentShow, this);
                },
                onComponentShow: function () {
                    this.cmp.add(this.items);
                    this.cmp.onComponentShow = null;
                }
            });
        }
        return Plugins;
    }());
    FastExt.Plugins = Plugins;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var PowerSet = (function () {
        function PowerSet() {
            this.show = true;
            this.edit = true;
        }
        return PowerSet;
    }());
    FastExt.PowerSet = PowerSet;
    var Power = (function () {
        function Power() {
        }
        Power.isPower = function () {
            return window["isPower"]();
        };
        Power.hasPower = function (target, type) {
            if (target.managerPower) {
                if (target.managerPower.hasOwnProperty(type)) {
                    return target.managerPower[type];
                }
            }
            return true;
        };
        Power.checkPower = function (code) {
            var me = this;
            if (!me.powers[code]) {
                me.powers[code] = FastExt.Base.copy(me.defaultPower);
            }
            var powerConfig = me.powers[code];
            if (!Ext.isEmpty(powerConfig)) {
                for (var defaultPowerKey in me.defaultPower) {
                    if (!powerConfig.hasOwnProperty(defaultPowerKey)) {
                        powerConfig[defaultPowerKey] = me.defaultPower[defaultPowerKey];
                    }
                }
            }
            return powerConfig;
        };
        Power.checkManagerPower = function (target) {
            if (!FastExt.System.manager) {
                return null;
            }
            if (!FastExt.System.managerPowers) {
                if (Ext.isEmpty(FastExt.System.manager.managerExtPower) || FastExt.System.manager.role.roleType === 0) {
                    return null;
                }
            }
            if (!FastExt.System.managerPowers) {
                FastExt.System.managerPowers = FastExt.Json.jsonToObject(FastExt.System.manager.managerExtPower);
            }
            if (!FastExt.System.managerPowers) {
                FastExt.System.managerPowers = {};
            }
            var powerConfig = FastExt.System.managerPowers[target.code];
            if (!powerConfig) {
                powerConfig = FastExt.Base.copy(FastExt.Power.defaultPower);
            }
            for (var defaultPowerKey in FastExt.Power.defaultPower) {
                if (!powerConfig.hasOwnProperty(defaultPowerKey)) {
                    powerConfig[defaultPowerKey] = FastExt.Power.defaultPower[defaultPowerKey];
                }
            }
            return powerConfig;
        };
        Power.pushPower = function (code, config) {
            var me = this;
            me.powers[code] = config;
        };
        Power.setPower = function (code, config) {
            var me = this;
            if (!me.powers[code]) {
                me.powers[code] = config;
            }
        };
        Power.getSavePowerData = function () {
            var me = this;
            var data = me.powers;
            return Ext.encode(data);
        };
        Power.getPowerCode = function (obj) {
            if (obj != null) {
                if (!Ext.isEmpty(obj.code)) {
                    return obj.code;
                }
                var buildText = null;
                if (Ext.isFunction(obj.up)) {
                    if (FastExt.System.powerVersion === "2.0") {
                        var menuContainer = obj.up("[menuContainer=true]");
                        if (menuContainer) {
                            buildText = menuContainer.getTitle();
                        }
                        else {
                            var window_1 = obj.up("window");
                            if (window_1) {
                                buildText = window_1.getTitle();
                            }
                        }
                    }
                    else {
                        var window_2 = obj.up("window");
                        if (window_2) {
                            buildText = window_2.getTitle();
                        }
                    }
                }
                if (obj.name) {
                    buildText += obj.name;
                }
                if (obj.title) {
                    buildText += obj.title;
                }
                if (obj.text) {
                    buildText += obj.text;
                }
                if (obj.subtext) {
                    buildText += obj.subtext;
                }
                if (obj.dataIndex) {
                    buildText += obj.dataIndex;
                }
                if (Ext.isFunction(obj.getFieldLabel) && Ext.isEmpty(obj.getFieldLabel())) {
                    buildText += obj.getFieldLabel();
                }
                if (buildText) {
                    obj.buildCodeText = buildText;
                    return $.md5(buildText);
                }
            }
            return null;
        };
        Power.setPowerStyle = function (target) {
            var query = Ext.all("[code=" + target.code + "]");
            Ext.each(query, function (item, index) {
                var powerConfig = FastExt.Power.checkPower(target.code);
                if (powerConfig) {
                    if (!powerConfig.show) {
                        item.addCls("no-show-power");
                    }
                    else {
                        item.removeCls("no-show-power");
                        if (!powerConfig.edit) {
                            item.addCls("no-edit-power");
                        }
                        else {
                            item.removeCls("no-edit-power");
                        }
                    }
                }
            });
        };
        Power.showPowerConfig = function (target, e) {
            if (!FastExt.System.isInitSystem()) {
                return;
            }
            var powerConfig = FastExt.Power.checkPower(target.code);
            FastExt.Power.menuShowing = true;
            var panel = Ext.create('Ext.container.Container', {
                layout: {
                    type: 'vbox',
                    pack: 'center'
                },
                border: 0,
                defaults: {
                    height: 20,
                    power: false
                },
                items: [
                    {
                        xtype: 'checkbox',
                        name: 'updateAlert',
                        checked: true,
                        boxLabel: '允许显示',
                        value: powerConfig.show,
                        listeners: {
                            change: function (obj, newValue, oldValue, eOpts) {
                                powerConfig.show = newValue;
                                FastExt.Power.setPowerStyle(target);
                            }
                        }
                    },
                    {
                        xtype: 'checkbox',
                        name: 'updateAlert',
                        checked: true,
                        boxLabel: '允许编辑',
                        hidden: !FastExt.Grid.isColumnType(target),
                        value: powerConfig.edit,
                        listeners: {
                            change: function (obj, newValue, oldValue, eOpts) {
                                powerConfig.edit = newValue;
                                FastExt.Power.setPowerStyle(target);
                            }
                        }
                    }
                ]
            });
            var contextMenu = new Ext.menu.Menu({
                padding: '0 0 0 10',
                powerMenu: true,
                showSeparator: false,
                style: {
                    background: "#ffffff"
                },
                items: [panel],
                listeners: {
                    beforehide: function (obj, eOpts) {
                        FastExt.Power.menuShowing = false;
                        FastExt.Power.pushPower(target.code, powerConfig);
                    }
                }
            });
            contextMenu.showAt(e.getXY());
        };
        Power.types = [FastEnum.PowerType.gridcolumn, FastEnum.PowerType.menuitem, FastEnum.PowerType.button];
        Power.config = false;
        Power.menuShowing = false;
        Power.powers = [];
        Power.defaultPower = new FastExt.PowerSet();
        return Power;
    }());
    FastExt.Power = Power;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Renders = (function () {
        function Renders() {
        }
        Renders.getRenderFunStr = function (column) {
            return FastExt.Cache.getCache(column.getRenderCacheKey());
        };
        Renders.getRenderColumn = function (obj, colIndex) {
            try {
                if (Ext.isFunction(obj.getHeaderContainer)) {
                    var headerCt = obj.getHeaderContainer();
                    if (headerCt) {
                        return headerCt.getHeaderAtIndex(colIndex);
                    }
                }
            }
            catch (e) {
                console.error(e);
            }
            return null;
        };
        Renders.getRenderKey = function (colIndex, rowIndex, store) {
            var key = $.md5(rowIndex + ":" + colIndex);
            if (!store) {
                store = {
                    getId: function () {
                        return new Date().getTime();
                    },
                };
            }
            var cacheKey = $.md5(key + store.getId());
            if (!store.columnRenderKey) {
                store.columnRenderKey = [];
            }
            store.columnRenderKey.push(cacheKey);
            return $.md5(key + store.getId());
        };
        Renders.onClickFromDataClick = function (obj) {
            var functionStr = Ext.util.Base64.decode($(obj).attr("data-click-function"));
            eval(functionStr);
        };
        Renders.toSingleLineText = function (val) {
            if (Ext.isEmpty(val)) {
                return this.toEmptyTip();
            }
            return val.toString()
                .replace(new RegExp("\n", 'g'), "")
                .replace(new RegExp("\t", 'g'), "")
                .replace(/<\/?.+?>/g, "");
        };
        Renders.toHtmlContent = function (val) {
            if (Ext.isEmpty(val)) {
                return this.toEmptyTip();
            }
            return val.toString()
                .replace(new RegExp("\n", 'g'), "<br/>")
                .replace(new RegExp("\t", 'g'), "&nbsp;&nbsp;&nbsp;&nbsp;")
                .replace(new RegExp(" ", 'g'), "&nbsp;");
        };
        Renders.toEmptyTip = function () {
            return FastExt.Renders.toEmpty("无");
        };
        Renders.toEmpty = function (tipValue) {
            if (Ext.isEmpty(tipValue)) {
                tipValue = "无";
            }
            return "<span style='color: #ccc;'>" + tipValue + "</span>";
        };
        Renders.toClickText = function (text, clickFunctionStr) {
            if (FastExt.Power.config) {
                return text;
            }
            return "<span class=\"fast-grid-click\" data-click-function=\"" + Ext.util.Base64.encode(clickFunctionStr) + "\" onclick=\"FastExt.Renders.onClickFromDataClick(this)\" >" + text + "</span>";
        };
        Renders.normal = function (append, position) {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                if (Ext.isEmpty(val)) {
                    return FastExt.Renders.toEmptyTip();
                }
                if (!append) {
                    append = "";
                }
                if (!Ext.isEmpty(position)) {
                    if (position === "left" || position === "l" || FastExt.Base.toBool(position, false)) {
                        val = append + val;
                    }
                    if (position === "right" || position === "r") {
                        val = val + append;
                    }
                }
                else {
                    val = val + append;
                }
                if (details) {
                    return FastExt.Renders.toHtmlContent(val);
                }
                return FastExt.Renders.toSingleLineText(val);
            };
        };
        Renders.money = function () {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val)) {
                    return FastExt.Renders.toEmptyTip();
                }
                return "￥" + FastExt.Renders.toSingleLineText(val);
            };
        };
        Renders.text = function () {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val)) {
                    return FastExt.Renders.toEmptyTip();
                }
                if (details) {
                    return FastExt.Renders.toHtmlContent(val);
                }
                return "<span style='white-space: pre;'>" + FastExt.Renders.toSingleLineText(val) + "</span>";
            };
        };
        Renders.bigText = function () {
            return function (val, m, record, rowIndex, colIndex, store, view) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return FastExt.Renders.toEmptyTip();
                }
                var key = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                FastExt.Cache.memory[key] = val;
                var functionStr = "FastExt.Dialog.showText(null,null,'查看内容',MemoryCache['" + key + "'])";
                return "&nbsp;<span onclick=\"" + functionStr + "\" " +
                    " class='fast-grid-action' " +
                    " >" + FastExt.Base.getSVGIcon("extSee") + "&nbsp;查看内容</span>&nbsp;";
            };
        };
        Renders.bigText2 = function () {
            return function (val, m, record, rowIndex, colIndex, store, view) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return FastExt.Renders.toEmptyTip();
                }
                var key = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                FastExt.Cache.memory[key] = val;
                var functionStr = "FastExt.Dialog.showText(null,null,'查看内容',MemoryCache['" + key + "'])";
                return FastExt.Renders.toClickText(val, functionStr);
            };
        };
        Renders.image = function (height, width) {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                try {
                    if (FastExt.Power.config) {
                        return val;
                    }
                    var key = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                    var imageHeight = "14px";
                    var imageWidth = "auto";
                    if (Ext.isEmpty(val) || val === "null") {
                        return "<img style='object-fit: cover; border:1px solid #cccccc;height:" + imageHeight + ";'" +
                            " src='images/default_img.png'   alt='' />";
                    }
                    if (val.startWith("//")) {
                        val = "http:" + val;
                    }
                    try {
                        if (height && Ext.isNumber(height)) {
                            imageHeight = height + "px";
                        }
                        if (width && Ext.isNumber(width)) {
                            imageWidth = width + "px";
                        }
                    }
                    catch (e) {
                    }
                    var arrayInfo = val.split("@");
                    var url = arrayInfo[0];
                    var name_3 = url.substring(url.lastIndexOf("/") + 1);
                    if (FastExt.FileModule.json().match(name_3)) {
                        return "&nbsp;<span onclick=\"FastExt.Dialog.showLottie(this,'" + FastExt.System.formatUrlVersion(url) + "')\" " +
                            " class='fast-grid-action' " +
                            " >" + FastExt.Base.getSVGIcon("extSee") + "&nbsp;查看动效</span>&nbsp;";
                    }
                    window[key] = "<img  alt=''" +
                        " style='object-fit: cover;border:1px solid #cccccc;width: 100px; min-height:14px;  ' " +
                        " width='100' " +
                        " class='lazyload'" +
                        " onerror=\"javascript:this.src = 'images/default_img.png';\"" +
                        " src='" + url + "' />";
                    FastExt.Cache.memory[key] = url;
                    return "<img class='lazyload' " +
                        " alt=''" +
                        " data-details-id='" + key + "' " +
                        " data-container-id='" + (view ? view.getId() : "none") + "' " +
                        " style='object-fit: cover;border:1px solid #cccccc;height:" + imageHeight + ";width: " + imageWidth + "; min-width:14px; min-height:14px; '" +
                        " width='" + imageWidth.replace("px", "") + "'" +
                        " height='" + imageHeight.replace("px", "") + "' " +
                        " onclick=\"FastExt.Dialog.showImage(this,'" + key + "')\"  " +
                        " onerror=\"javascript:this.src = 'images/default_img.png';\"" +
                        " src='" + FastExt.Image.smallOSSImgUrl(url) + "' " +
                        " />";
                }
                catch (e) {
                    console.error(e);
                    return "<span style='color: #ccc;'>暂无图片</span>";
                }
            };
        };
        Renders.image2 = function () {
            return function (val, m, record, rowIndex, colIndex, store, view) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return FastExt.Renders.toEmptyTip();
                }
                var key = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                FastExt.Cache.memory[key] = val;
                var functionStr = "FastExt.Dialog.showImage(this,'" + key + "')";
                return FastExt.Renders.toClickText("查看图片", functionStr);
            };
        };
        Renders.mp4 = function (nickName) {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return "<span style='color: #ccc;'>暂无文件</span>";
                }
                var arrayInfo = val.split("@");
                var url = arrayInfo[0];
                var name = url.substring(url.lastIndexOf("/") + 1);
                if (arrayInfo.length > 1) {
                    name = arrayInfo[1];
                }
                if (nickName) {
                    name = "播放视频";
                }
                var functionStr = "FastExt.Dialog.showVideo(this,'" + FastExt.System.formatUrlVersion(url) + "');";
                return FastExt.Renders.toClickText("<span style='margin-right: 5px;'>" + FastExt.Base.getSVGIcon("extFileMP4") + "</span>" + name, functionStr);
            };
        };
        Renders.mp3 = function () {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return "<span style='color: #ccc;'>暂无文件</span>";
                }
                var arrayInfo = val.split("@");
                var url = arrayInfo[0];
                var name = url.substring(url.lastIndexOf("/") + 1);
                if (arrayInfo.length > 1) {
                    name = arrayInfo[1];
                }
                var functionStr = "FastExt.Dialog.showMusic(this,'" + FastExt.System.formatUrlVersion(url) + "');";
                return FastExt.Renders.toClickText("<span style='margin-right: 5px;'>" + FastExt.Base.getSVGIcon("extFileMP3") + "</span>" + name, functionStr);
            };
        };
        Renders.office = function () {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return "<span style='color: #ccc;'>暂无文件</span>";
                }
                var arrayInfo = val.split("@");
                var url = arrayInfo[0];
                var realUrl = url.split("?")[0];
                var name = realUrl.substring(realUrl.lastIndexOf("/") + 1);
                if (arrayInfo.length > 1) {
                    name = arrayInfo[1];
                }
                var fileClassName = FastExt.Base.getSVGClassName(realUrl, name);
                var functionStr = "FastExt.File.officeViewer('" + FastExt.System.formatUrlVersion(val) + "')";
                var viewStr = "&nbsp;<span onclick=\"" + functionStr + "\" " +
                    " class='fast-grid-action' " +
                    " >" + FastExt.Base.getSVGIcon("extEye") + "&nbsp;预览</span>&nbsp;";
                var functionStr2 = " FastExt.Base.openUrl('" + FastExt.System.formatUrlVersion(url) + "','_blank')";
                return viewStr + FastExt.Renders.toClickText("<span style='margin-right: 5px;'>" + FastExt.Base.getSVGIcon(fileClassName) + "</span>" + name, functionStr2);
            };
        };
        Renders.file = function (fileNameAttr) {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return "<span style='color: #ccc;'>暂无文件</span>";
                }
                var arrayInfo = val.split("@");
                var url = arrayInfo[0];
                var realUrl = url.split("?")[0];
                var name = realUrl.substring(realUrl.lastIndexOf("/") + 1);
                if (arrayInfo.length > 1) {
                    name = arrayInfo[1];
                }
                if (!Ext.isEmpty(fileNameAttr)) {
                    name = record.get(fileNameAttr);
                }
                if (FastExt.FileModule.image().match(realUrl, name)) {
                    return FastExt.Renders.image()(val, m, record, rowIndex, colIndex, store, view, details);
                }
                if (FastExt.FileModule.mp4().match(realUrl, name)) {
                    return FastExt.Renders.mp4()(val, m, record, rowIndex, colIndex, store, view, details);
                }
                if (FastExt.FileModule.pdf().match(realUrl, name)
                    || FastExt.FileModule.word().match(realUrl, name)
                    || FastExt.FileModule.excel().match(realUrl, name)
                    || FastExt.FileModule.ppt().match(realUrl, name)) {
                    return FastExt.Renders.office()(val, m, record, rowIndex, colIndex, store, view, details);
                }
                var fileClassName = FastExt.Base.getSVGClassName(realUrl, name);
                var functionStr = " FastExt.Base.openUrl('" + FastExt.System.formatUrlVersion(url) + "','_blank')";
                return FastExt.Renders.toClickText("<span style='margin-right: 5px;'>" + FastExt.Base.getSVGIcon(fileClassName) + "</span>" + name, functionStr);
            };
        };
        Renders.files = function () {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val) || val === "null") {
                        return "<span style='color: #ccc;'>暂无文件</span>";
                    }
                    var data = val;
                    if (Ext.isString(val)) {
                        if (!Ext.isEmpty(val)) {
                            try {
                                data = Ext.decode(val);
                            }
                            catch (e) {
                                console.error(e);
                            }
                        }
                    }
                    if (data.length === 0) {
                        return "<span style='color: #ccc;'>暂无文件</span>";
                    }
                    var dataId = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                    var detailsList = "";
                    var showFileName = false, showFileLength = false;
                    for (var i = 0; i < data.length; i++) {
                        var urlVal = data[i];
                        if (!showFileName) {
                            var urlSplit = urlVal.split("@");
                            showFileName = urlSplit.length > 1;
                            showFileLength = urlSplit.length > 2;
                        }
                        detailsList += "<div style='margin: 5px;display: inline-block;'>" + FastExt.Renders.file()(urlVal, m, record, rowIndex, i, store, view, details) + "</div>";
                    }
                    if (details) {
                        return detailsList;
                    }
                    FastExt.Cache.memory[dataId] = "<div style='overflow: scroll;max-height: 300px;'>" + detailsList + "</div>";
                    FastExt.Cache.memory[dataId + "Val"] = val;
                    var functionStr = "FastExt.File.showFiles(this,null,[FastExt.FileModule.file()],MemoryCache['" + dataId + "Val'],'查看附件',true," + showFileName + "," + showFileLength + ")";
                    window[dataId] = detailsList;
                    return "&nbsp;<span onclick=\"" + functionStr + "\" " +
                        "  data-details-id='" + dataId + "' class='fast-grid-action' " +
                        " >" + FastExt.Base.getSVGIcon("extFolder") + "&nbsp;共有" + data.length + "个文件</span>&nbsp;";
                }
                catch (e) {
                    console.error(e);
                    return "<span style='color: #ccc;'>暂无文件</span>";
                }
            };
        };
        Renders.images = function () {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                try {
                    if (FastExt.Power.config) {
                        return val;
                    }
                    if (Ext.isEmpty(val) || val === "null") {
                        return "<span style='color: #ccc;'>暂无图片</span>";
                    }
                    var data = val;
                    if (Ext.isString(val)) {
                        if (!Ext.isEmpty(val)) {
                            try {
                                data = Ext.decode(val);
                            }
                            catch (e) {
                                console.error(e);
                            }
                        }
                    }
                    if (data.length === 0) {
                        return "<span style='color: #ccc;'>暂无图片</span>";
                    }
                    var dataId = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                    var detailsList = "";
                    var urlArray = [];
                    for (var i = 0; i < data.length; i++) {
                        detailsList += FastExt.Renders.image(24)(data[i], m, record, rowIndex, i, store, view, details) + "&nbsp;&nbsp;";
                        urlArray.push({ url: data[i] });
                    }
                    if (details) {
                        return detailsList;
                    }
                    FastExt.Cache.memory[dataId] = urlArray;
                    var functionStr = "FastExt.Dialog.showImage(null,MemoryCache['" + dataId + "'])";
                    window[dataId] = detailsList;
                    return "&nbsp;<span onclick=\"" + functionStr + "\" " +
                        "  data-details-id='" + dataId + "' class='fast-grid-action' " +
                        " >" + FastExt.Base.getSVGIcon("extImage") + "&nbsp;共有" + data.length + "张图片</span>&nbsp;";
                }
                catch (e) {
                    console.error(e);
                    return "<span style='color: #ccc;'>暂无图片</span>";
                }
            };
        };
        Renders.html = function () {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return FastExt.Renders.toEmptyTip();
                }
                var key = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                FastExt.Cache.memory[key] = val;
                var functionStr = "FastExt.Dialog.showEditorHtml(this,'查看内容',MemoryCache['" + key + "'])";
                return "&nbsp;<span onclick=\"" + functionStr + "\" " +
                    " class='fast-grid-action' " +
                    " >" + FastExt.Base.getSVGIcon("extSee") + "&nbsp;查看内容</>&nbsp;";
            };
        };
        Renders.html2 = function () {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return FastExt.Renders.toEmptyTip();
                }
                if (details) {
                    return val;
                }
                return FastExt.Renders.toSingleLineText(val);
            };
        };
        Renders.json = function () {
            return function (val, m, record, rowIndex, colIndex, store, view) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return FastExt.Renders.toEmptyTip();
                }
                var key = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                FastExt.Cache.memory[key] = val;
                var functionStr = "FastExt.Dialog.showJson(this,'查看JSON内容',MemoryCache['" + key + "'])";
                return FastExt.Renders.toClickText(FastExt.Renders.toSingleLineText(val), functionStr);
            };
        };
        Renders.json2 = function () {
            return function (val, m, record, rowIndex, colIndex, store, view) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return FastExt.Renders.toEmptyTip();
                }
                var key = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                FastExt.Cache.memory[key] = val;
                var functionStr = "FastExt.Dialog.showJson(this,'查看JSON内容',MemoryCache['" + key + "'])";
                return FastExt.Renders.toClickText("查看JSON内容", functionStr);
            };
        };
        Renders.link = function (name, entityCode, entityId) {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    var keyValue = record.get(name);
                    if (Ext.isEmpty(val) || val === "null") {
                        return FastExt.Renders.toEmpty(keyValue);
                    }
                    var functionStr = "new " + entityCode + "().showDetails(null, {'t." + entityId + "':'" + keyValue + "'})";
                    return FastExt.Renders.toClickText(FastExt.Renders.toSingleLineText(val), functionStr);
                }
                catch (e) {
                    console.error(e);
                    return FastExt.Renders.toEmptyTip();
                }
            };
        };
        Renders.target = function (targetId, targetType, targetFunction) {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val) || val === "null") {
                        return FastExt.Renders.toEmptyTip();
                    }
                    if (!targetFunction) {
                        targetFunction = "getTargetEntity";
                    }
                    if (!Ext.isFunction(window[targetFunction])) {
                        return val;
                    }
                    var targetTypeValue = record.get(targetType);
                    var targetIdValue = record.get(targetId);
                    var targetEntity = window[targetFunction](targetTypeValue, targetType);
                    if (targetEntity) {
                        var functionStr = "new " + targetEntity.entityCode + "().showDetails(null, {'t." + targetEntity.entityId + "':'" + targetIdValue + "'})";
                        return FastExt.Renders.toClickText(FastExt.Renders.toSingleLineText(val), functionStr);
                    }
                    return val;
                }
                catch (e) {
                    console.error(e);
                    return FastExt.Renders.toEmptyTip();
                }
            };
        };
        Renders.map = function (lngName, latName, titleName) {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val) || val === "null") {
                        return FastExt.Renders.toEmptyTip();
                    }
                    var lng = record.get(lngName);
                    var lat = record.get(latName);
                    var mapTitle = record.get(titleName);
                    if (lng && lat) {
                        var lnglat = lng + "," + lat;
                        var functionStr = "FastExt.Map.showAddressInMap(null,'" + lnglat + "','','" + val + "')";
                        if (mapTitle) {
                            functionStr = "FastExt.Map.showAddressInMap(null,'" + lnglat + "','" + mapTitle + "','" + val + "')";
                        }
                        return FastExt.Renders.toClickText(val, functionStr);
                    }
                    return val;
                }
                catch (e) {
                    return FastExt.Renders.toEmptyTip();
                }
            };
        };
        Renders.mapImgLayer = function (imgUrlName, southWestLngLatName, northEastLngLatName, rotateName, zIndexName, minZoomName, maxZoomName) {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val) || val === "null") {
                        return FastExt.Renders.toEmptyTip();
                    }
                    var imgUrl = record.get(imgUrlName);
                    var southWestLngLat = record.get(southWestLngLatName);
                    var northEastLngLat = record.get(northEastLngLatName);
                    var rotate = record.get(rotateName);
                    if (rotate) {
                        imgUrl = FastExt.Image.rotateOSSImgUrl(imgUrl, rotate);
                    }
                    var zIndex = record.get(zIndexName);
                    if (Ext.isEmpty(zIndex)) {
                        zIndex = 6;
                    }
                    var minZoom = record.get(minZoomName);
                    var maxZoom = record.get(maxZoomName);
                    if (Ext.isEmpty(minZoom)) {
                        minZoom = 1;
                    }
                    if (Ext.isEmpty(maxZoom)) {
                        maxZoom = 20;
                    }
                    if (imgUrl && southWestLngLat && northEastLngLat) {
                        var functionStr = " FastExt.Map.showImgLayerInMap(null,'" + imgUrl + "','" + southWestLngLat + "','" + northEastLngLat + "'," + zIndex + "," + minZoom + "," + maxZoom + ")";
                        return FastExt.Renders.toClickText(val, functionStr);
                    }
                    return val;
                }
                catch (e) {
                    return FastExt.Renders.toEmptyTip();
                }
            };
        };
        Renders.password = function () {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val)) {
                    return FastExt.Renders.toEmptyTip();
                }
                return "<span>******</span>";
            };
        };
        Renders.href = function (url) {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(url)) {
                    url = val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return FastExt.Renders.toEmptyTip();
                }
                var functionStr = "FastExt.Base.openUrl('" + url + "','_blank')";
                return FastExt.Renders.toClickText(val, functionStr);
            };
        };
        Renders.fileSize = function () {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val) || val === "null") {
                        return FastExt.Renders.toEmptyTip();
                    }
                    if (val >= 1024 * 1024) {
                        return (val / 1024.0 / 1024.0).toFixed(2) + "M";
                    }
                    if (val >= 1024) {
                        return (val / 1024.0).toFixed(2) + "KB";
                    }
                    return val + "B";
                }
                catch (e) {
                    console.error(e);
                    return FastExt.Renders.toEmptyTip();
                }
            };
        };
        Renders.duration = function () {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val) || val === "null") {
                        return FastExt.Renders.toEmptyTip();
                    }
                    var seconds = parseInt(val) / 1000;
                    var hour = parseInt((seconds / (60 * 60)).toString());
                    var minute = parseInt(((seconds / 60) % 60).toString());
                    var second = parseInt((seconds % 60).toString());
                    if (hour > 0) {
                        return hour + "时" + minute + "分" + second + "秒";
                    }
                    if (minute > 0) {
                        return minute + "分" + second + "秒";
                    }
                    return second + "秒";
                }
                catch (e) {
                    console.error(e);
                    return FastExt.Renders.toEmptyTip();
                }
            };
        };
        Renders.dateFormat = function (format) {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val) || val === "null") {
                        return FastExt.Renders.toEmptyTip();
                    }
                    if (Ext.isEmpty(format)) {
                        format = "Y-m-d H:i:s";
                    }
                    var guessDateFormat = FastExt.Base.guessDateFormat(val);
                    record.set();
                    return Ext.Date.format(Ext.Date.parse(val, guessDateFormat), format);
                }
                catch (e) {
                    console.error(e);
                    return val;
                }
            };
        };
        Renders.dateFormatTip = function (format, appendWeek) {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val) || val === "null") {
                        return FastExt.Renders.toEmptyTip();
                    }
                    var guessDateFormat = FastExt.Base.guessDateFormat(val);
                    var sourceDate = Ext.Date.parse(val, guessDateFormat);
                    return FastExt.Dates.formatDateTip(sourceDate, format, appendWeek);
                }
                catch (e) {
                    console.error(e);
                    return val;
                }
            };
        };
        Renders.timestamp = function (format) {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val) || val === "null") {
                        return FastExt.Renders.toEmptyTip();
                    }
                    if (Ext.isEmpty(format)) {
                        format = "Y-m-d H:i:s";
                    }
                    return Ext.Date.format(new Date(parseInt(val)), format);
                }
                catch (e) {
                    console.error(e);
                    return val;
                }
            };
        };
        Renders.timestampTip = function (format, appendWeek) {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val) || val === "null") {
                        return FastExt.Renders.toEmptyTip();
                    }
                    return FastExt.Dates.formatDateTip(new Date(parseInt(val)), format, appendWeek);
                }
                catch (e) {
                    console.error(e);
                    return val;
                }
            };
        };
        Renders.enum = function (enumName, enumValue, enumText) {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val)) {
                        return FastExt.Renders.toEmptyTip();
                    }
                    if (Ext.isEmpty(enumText)) {
                        enumText = "text";
                    }
                    if (Ext.isEmpty(enumValue)) {
                        enumValue = "id";
                    }
                    var defaultInnerHtml = "<span style='color: #ccc;'>" + val + "</span>";
                    return "<div style='display: inline;' data-set='false' data-enum='" + enumName + "' data-enum-value='" + enumValue + "' data-enum-text='" + enumText + "' data-id='" + val + "'>" + defaultInnerHtml + "</div>";
                }
                finally {
                    FastExt.Store.getEnumDataByRender(enumName);
                }
            };
        };
        Renders.exception = function () {
            return function (val, m, record, rowIndex, colIndex, store, view) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val)) {
                        return FastExt.Renders.toEmptyTip();
                    }
                    var key = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                    FastExt.Cache.memory[key] = val;
                    var functionStr = "FastExt.Dialog.showCode(null,MemoryCache['" + key + "'])";
                    return "&nbsp;<span onclick=\"" + functionStr + "\" " +
                        " class='fast-grid-action' " +
                        " >" + FastExt.Base.getSVGIcon("extSee") + "&nbsp;查看异常内容</span>&nbsp;";
                }
                catch (e) {
                    return "<span style='color: #ccc;'>" + val + "</span>";
                }
            };
        };
        Renders.color = function () {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val)) {
                        return FastExt.Renders.toEmptyTip();
                    }
                    var color = FastExt.Color.toColor(val);
                    return "<div style='background: " + color + ";padding: 0 25px;height: 14px;display: inline;'></div>";
                }
                catch (e) {
                    return "<span style='color: #ccc;'>" + val + "</span>";
                }
            };
        };
        return Renders;
    }());
    FastExt.Renders = Renders;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Server = (function () {
        function Server() {
            Server.initExtAjaxConfig();
            Server.initJQueryConfig();
        }
        Server.getGlobalParams = function () {
            return {
                "fromOS": FastExt.Base.getOS(),
                "managerWeb": true,
                "webVersion": FastExt.System.getExt("version").value,
                "__browser": Ext.browser.name,
                "__managerId": FastExt.System.getManagerId(),
            };
        };
        Server.initExtAjaxConfig = function () {
            Ext.Ajax.on('beforerequest', function (conn, options, eObj) {
                try {
                    if (FastExt.Server.isSilenceRequest()) {
                        return;
                    }
                    FastExt.System.getProgressLine(FastExt.Color.toColor(FastExt.System.getExt("front-color").value)).set(0);
                    FastExt.System.getProgressLine(FastExt.Color.toColor(FastExt.System.getExt("front-color").value)).animate(0.7);
                }
                catch (e) {
                }
                finally {
                    var fromGlobal = FastExt.Server.getGlobalParams();
                    fromGlobal["__httpTool"] = "extjs";
                    conn.setExtraParams(fromGlobal);
                }
            });
            Ext.Ajax.on('requestcomplete', function (conn, response, options) {
                try {
                    if (response.status === 203) {
                        FastExt.System.sessionOut();
                    }
                    else if (response.status === 204) {
                        FastExt.System.sessionOut("您的账户已在其他终端登录！");
                    }
                    else if (response.status === 403) {
                        FastExt.Dialog.showAlert("请求异常", response.responseText);
                    }
                    else {
                        try {
                            var jsonData = eval("(" + response.responseText + ")");
                            if (jsonData.code === 203 || jsonData.code === 204) {
                                FastExt.System.sessionOut(jsonData.message);
                            }
                        }
                        catch (e) {
                        }
                    }
                }
                catch (e) {
                }
                finally {
                    FastExt.System.getProgressLine(FastExt.Color.toColor(FastExt.System.getExt("front-color").value)).animate(1);
                    FastExt.Server.checkVersion(response);
                    FastExt.Server.checkManager(response);
                }
            });
            Ext.Ajax.on('requestexception', function (conn, response, options, eOpts) {
                try {
                    if (FastExt.Server.isSilenceRequest()) {
                        return;
                    }
                    FastExt.Dialog.showException(response.responseText, "请求异常！");
                }
                catch (e) {
                }
                finally {
                    FastExt.System.getProgressLine(FastExt.Color.toColor(FastExt.System.getExt("front-color").value)).animate(1);
                }
            });
        };
        Server.initJQueryConfig = function () {
            $(document).ajaxStart(function (obj) {
                try {
                    if (FastExt.Server.isSilenceRequest()) {
                        return;
                    }
                    FastExt.System.getProgressLine(FastExt.Color.toColor(FastExt.System.getExt("front-color").value)).set(0);
                    FastExt.System.getProgressLine(FastExt.Color.toColor(FastExt.System.getExt("front-color").value)).animate(0.7);
                }
                catch (e) {
                }
                finally {
                    $.ajaxSetup({ data: FastExt.Server.getGlobalParams() });
                }
            });
            $(document).ajaxComplete(function (event, xhr, options) {
                try {
                    if (xhr.status === 203) {
                        FastExt.System.sessionOut();
                    }
                    else if (xhr.status === 204) {
                        FastExt.System.sessionOut("您的账户已在其他终端登录！");
                    }
                    else if (xhr.status === 403) {
                        FastExt.Dialog.showAlert("请求异常", xhr.responseText);
                    }
                    else {
                        try {
                            var jsonData = eval("(" + xhr.responseText + ")");
                            if (jsonData.code === 203 || jsonData.code === 204) {
                                FastExt.System.sessionOut(jsonData.message);
                            }
                        }
                        catch (e) {
                        }
                    }
                }
                catch (e) {
                }
                finally {
                    FastExt.System.getProgressLine(FastExt.Color.toColor(FastExt.System.getExt("front-color").value)).animate(1);
                    FastExt.Server.checkVersion(xhr);
                    FastExt.Server.checkManager(xhr);
                }
            });
            $(document).ajaxError(function (event, xhr, settings) {
                try {
                    if (FastExt.Server.isSilenceRequest()) {
                        return;
                    }
                    FastExt.Dialog.showException(xhr.responseText, "请求异常");
                }
                catch (e) {
                }
                finally {
                    FastExt.System.getProgressLine(FastExt.Color.toColor(FastExt.System.getExt("front-color").value)).animate(1);
                }
            });
        };
        Server.checkVersion = function (httpRequest) {
            try {
                if (FastExt.Power.isPower()) {
                    return;
                }
                if (Ext.isFunction(httpRequest.getResponseHeader)) {
                    var responsePVCode = httpRequest.getResponseHeader("Project-Version-Code");
                    if (FastExt.Base.toBool(httpRequest.getResponseHeader("Project-Debug"), true)) {
                        return;
                    }
                    if (!Ext.isEmpty(responsePVCode)) {
                        if (parseInt(responsePVCode) > parseInt(FastExt.System.getExt("version").value)) {
                            if ($("#newVersionTip").length > 0) {
                                return;
                            }
                            $("body").append($("<div id='newVersionTip' style='position: fixed;right: 50px;bottom: 50px;width: 160px;height: 160px;" +
                                "z-index: 2147483647;" +
                                "cursor: pointer;'></div>"));
                            var $newVersionTip = $("#newVersionTip");
                            FastExt.Lottie.loadJsonAnimByEl($newVersionTip[0], "base/lottie/new_version.json");
                            $newVersionTip.on("click", function () {
                                location.reload();
                            });
                        }
                    }
                }
            }
            catch (e) {
            }
        };
        Server.checkManager = function (httpRequest) {
            if (Ext.isFunction(httpRequest.getResponseHeader) && FastExt.System.manager) {
                var managerIdMd5 = httpRequest.getResponseHeader("Project-Manager-ID");
                if (Ext.isEmpty(managerIdMd5)) {
                    return;
                }
                if ($.md5(FastExt.System.getManagerId().toString()) === managerIdMd5) {
                    return;
                }
            }
            else {
                return;
            }
            if (Ext.getCmp("ManagerInfoChangeWin")) {
                return;
            }
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                defaults: {
                    margin: '5 5 5 5'
                },
                border: 0,
                items: [
                    {
                        xtype: "lottie",
                        width: 150,
                        height: 120,
                        jsonPath: 'base/lottie/error_normal.json',
                    },
                    {
                        xtype: "label",
                        maxWidth: 250,
                        margin: '5 5 10 5',
                        html: "系统检测到您的登录信息发生变化，建议您刷新页面！",
                    }
                ],
            });
            var warnWindow = Ext.create('Ext.window.Window', {
                title: "账户提醒",
                iconCls: 'extIcon extManager',
                id: "ManagerInfoChangeWin",
                width: 280,
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                constrain: true,
                resizable: false,
                animateDisable: true,
                items: [formPanel],
                modal: true,
                buttons: [
                    '->',
                    {
                        text: '知道了',
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            warnWindow.close();
                        }
                    },
                    {
                        text: "立即刷新",
                        iconCls: 'extIcon extReset',
                        handler: function () {
                            location.reload();
                        }
                    },
                    '->'
                ],
            });
            warnWindow.show();
        };
        Server.isSilenceRequest = function () {
            return FastExt.Base.toBool(Server.silence, false);
        };
        Server.setSilence = function (value) {
            Server.silence = value;
        };
        Server.loginUrl = function () {
            return "controller/login";
        };
        Server.validOperateUrl = function () {
            return "controller/valid";
        };
        Server.showConfigUrl = function () {
            return "showConfig";
        };
        Server.importEntityExcelUrl = function () {
            return "entity/importData";
        };
        Server.loadEntityDataUrl = function () {
            return "entity/loadData";
        };
        Server.logout = function (message) {
            if (Ext.isEmpty(message)) {
                message = "正在退出登录中……";
            }
            FastExt.Dialog.showWait(message);
            $.post("controller/logout", function () {
                location.reload();
            });
        };
        Server.updateEntity = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("entity/update", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.message);
                    }
                    else {
                        callBack(false, result.message);
                    }
                }
            });
        };
        Server.updateDBEntity = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("entity/batchUpdate", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.message);
                    }
                    else {
                        callBack(false, result.message);
                    }
                }
            });
        };
        Server.replaceDBEntity = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("entity/replace", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.message);
                    }
                    else {
                        callBack(false, result.message);
                    }
                }
            });
        };
        Server.deleteAttach = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("deleteAttach", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.message);
                    }
                    else {
                        callBack(false, result.message);
                    }
                }
            });
        };
        Server.deleteEntity = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("entity/delete", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message);
                }
            });
        };
        Server.rebackEntity = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("entity/reback", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message);
                }
            });
        };
        Server.copyEntity = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("entity/copy", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.message);
                    }
                    else {
                        callBack(false, result.message);
                    }
                }
            });
        };
        Server.clearEntity = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("entity/clear", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.message);
                    }
                    else {
                        callBack(false, result.message);
                    }
                }
            });
        };
        Server.clearRepeatEntity = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("entity/repeat", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.message);
                    }
                    else {
                        callBack(false, result.message);
                    }
                }
            });
        };
        Server.showExtConfig = function (key, type, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false);
                return;
            }
            var params = {
                "configKey": key,
                "configType": type
            };
            $.post("ext/config/showExtConfig", params, function (result) {
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.data.configValue, result.message);
                    }
                    else {
                        callBack(false, null, result.message);
                    }
                }
            });
        };
        Server.saveExtConfig = function (key, type, value, callBack, otherParams) {
            if (FastExt.Power.isPower()) {
                callBack(false);
                return;
            }
            var params = {
                "configKey": key,
                "configType": type,
                "configValue": value
            };
            if (!Ext.isEmpty(otherParams)) {
                params = FastExt.Json.mergeJson(params, otherParams);
            }
            $.post("ext/config/saveExtConfig", params, function (result) {
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.message);
                    }
                    else {
                        callBack(false, result.message);
                    }
                }
            });
        };
        Server.deleteExtConfig = function (key, type, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false);
                return;
            }
            var params = {
                "configKey": key,
                "configType": type
            };
            $.post("ext/config/deleteExtConfig", params, function (result) {
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.message);
                    }
                    else {
                        callBack(false, result.message);
                    }
                }
            });
        };
        Server.exportExcel = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("entity/export", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.data, result.message);
                    }
                    else {
                        callBack(false, null, result.message);
                    }
                }
            });
        };
        Server.excelModule = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可生成模板！");
                return;
            }
            $.post("entity/module", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.data, result.message);
                    }
                    else {
                        callBack(false, null, result.message);
                    }
                }
            });
        };
        Server.showColumns = function (entityCode, callBack, params) {
            if (!params) {
                params = {};
            }
            $.post("ext/config/showEntityColumn?entityCode=" + entityCode, params, function (result) {
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.data.configValue, result.message);
                    }
                    else {
                        callBack(false, null, result.message);
                    }
                }
            });
        };
        Server.getIcon = function (iconName, color) {
            var iconPath = "icons/" + iconName;
            if (Ext.isEmpty(color)) {
                return iconPath;
            }
            if (color.startWith("#")) {
                color = color.substring(1);
            }
            return "icon?path=" + iconPath + "&color=" + color;
        };
        Server.showSystemConfig = function (callBack) {
            $.post("ext/config/showSystemConfig", function (result) {
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.data, result.message);
                    }
                    else {
                        callBack(false, null, result.message);
                    }
                }
            });
        };
        Server.deleteSystemConfig = function (callBack) {
            $.post("ext/config/deleteSystemConfig", function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message);
                }
            });
        };
        Server.loadMonitor = function (callBack) {
            Server.setSilence(true);
            $.post("monitor", function (result) {
                Server.setSilence(false);
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.data);
                }
            });
        };
        Server.countReport = function (callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("countReport", function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.data);
                }
            });
        };
        Server.checkWaitNotice = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            Server.setSilence(true);
            $.post("controller/waitNotice", params, function (result) {
                Server.setSilence(false);
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.data);
                }
            });
        };
        Server.doneWaitNotice = function (noticeId, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("controller/doneNotice", { "noticeId": noticeId }, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message, result.data);
                }
            });
        };
        Server.clearWaitNotice = function (callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("controller/clearNotice", function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message, result.data);
                }
            });
        };
        Server.downData = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("entity/downData", params, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message, result.data);
                }
            });
        };
        Server.updateAllLayer = function (callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("updateAllLayer", function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message);
                }
            });
        };
        Server.updateAllSame = function (callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("updateAllSame", function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message);
                }
            });
        };
        Server.updateLayer = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("entity/updateLayer", params, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message);
                }
            });
        };
        Server.updateSame = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("entity/updateSame", params, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message);
                }
            });
        };
        Server.showEcharts = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("entity/echarts", params, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message, result.data);
                }
            });
        };
        Server.saveCache = function (source, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("saveToCache", { source: source }, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message, result.data);
                }
            });
        };
        Server.reportException = function (message) {
            try {
                if (Ext.isEmpty(message) || message === "null") {
                    return;
                }
                if (Ext.isObject(message)) {
                    message = FastExt.Json.objectToJson(message);
                }
                if (message.indexOf("表单填写不完整") >= 0) {
                    return;
                }
                $.post("base/system/tool/jsException", { jsException: message }, function (result) {
                    if (FastExt.System.isDebug() && FastExt.System.isLocal()) {
                        if (result.success) {
                            FastExt.Dialog.toast("已上报JS错误！");
                        }
                    }
                });
            }
            catch (e) {
            }
        };
        Server.loadSource = function (entityCode, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("entity/loadSource", { entityCode: entityCode }, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message, result.data);
                }
            });
        };
        Server.saveSource = function (entityCode, content, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post("entity/saveSource", { entityCode: entityCode, content: content }, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message, result.data);
                }
            });
        };
        Server.destroyList = function (storeId) {
            if (FastExt.Power.isPower()) {
                return;
            }
            $.post("entity/destroyList", { storeId: storeId }, function (result) {
            });
        };
        Server.saveSystemConfig = function (configKey, configValue) {
            var params = {};
            params[configKey] = configValue;
            $.post("ext/config/saveSystemConfig", params, function (result) {
            });
        };
        return Server;
    }());
    FastExt.Server = Server;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Store = (function () {
        function Store() {
        }
        Store.getStoreMenuText = function (store, menu, splitChar) {
            if (Ext.isEmpty(splitChar)) {
                splitChar = ">";
            }
            if (menu) {
                return FastExt.System.getPlainMenu(menu, splitChar);
            }
            else if (store && store.entity) {
                return FastExt.System.getPlainMenu(store.entity.menu, splitChar);
            }
            return null;
        };
        Store.commitStoreUpdate = function (store, successMsg) {
            return new Ext.Promise(function (resolve, reject) {
                if (!store) {
                    return;
                }
                if (!store.entity) {
                    return;
                }
                if (!store.entity.idProperty) {
                    return;
                }
                if (store.commiting) {
                    return;
                }
                var records = store.getUpdatedRecords();
                var phantoms = store.getNewRecords();
                records = records.concat(phantoms);
                if (records.length === 0) {
                    resolve(true);
                    store.commiting = false;
                    return;
                }
                store.commiting = true;
                var params = { "entityCode": store.entity.entityCode };
                if (store.entity.menu) {
                    params["menu"] = FastExt.Store.getStoreMenuText(store);
                }
                for (var i = 0; i < records.length; i++) {
                    var record = records[i];
                    for (var j = 0; j < store.entity.idProperty.length; j++) {
                        var idName = store.entity.idProperty[j];
                        params['data[' + i + '].' + idName] = record.get(idName);
                    }
                    for (var key in record.modified) {
                        var oldValue = record.modified[key];
                        var newValue = record.get(key);
                        if (!Ext.isString(oldValue) && Ext.isEmpty(newValue)) {
                            params["data[" + i + "]." + key] = "<null>";
                        }
                        else {
                            params["data[" + i + "]." + key] = record.get(key);
                        }
                    }
                }
                FastExt.Server.updateEntity(params, function (success, message) {
                    store.commiting = false;
                    resolve(success);
                    if (success) {
                        FastExt.Dialog.toast(successMsg ? successMsg : message);
                        store.commitChanges();
                    }
                    else {
                        store.rejectChanges();
                        Ext.Msg.alert('系统提醒', message);
                    }
                });
            });
        };
        Store.commitStoreDelete = function (store, data) {
            return new Ext.Promise(function (resolve, reject) {
                if (!store.entity) {
                    return;
                }
                if (!store.entity.idProperty) {
                    return;
                }
                var params = { "entityCode": store.entity.entityCode };
                if (store.entity.menu) {
                    params["menu"] = FastExt.Store.getStoreMenuText(store);
                }
                for (var i = 0; i < data.length; i++) {
                    var record = data[i];
                    for (var j = 0; j < store.entity.idProperty.length; j++) {
                        var idName = store.entity.idProperty[j];
                        params['data[' + i + '].' + idName] = record.get(idName);
                    }
                }
                FastExt.Server.deleteEntity(params, function (success, message) {
                    resolve(success);
                    if (success) {
                        FastExt.Dialog.toast(message);
                        var reloadPage = store.currentPage;
                        if (store.count() - data.length <= 0) {
                            reloadPage = reloadPage - 1;
                        }
                        store.loadPage(Math.max(reloadPage, 1));
                    }
                    else {
                        Ext.Msg.alert('系统提醒', message);
                    }
                });
            });
        };
        Store.commitStoreReback = function (store, data) {
            return new Ext.Promise(function (resolve, reject) {
                if (!store.entity) {
                    return;
                }
                if (!store.entity.idProperty) {
                    return;
                }
                var params = { "entityCode": store.entity.entityCode };
                if (store.entity.menu) {
                    params["menu"] = FastExt.Store.getStoreMenuText(store);
                }
                for (var i = 0; i < data.length; i++) {
                    var record = data[i];
                    for (var j = 0; j < store.entity.idProperty.length; j++) {
                        var idName = store.entity.idProperty[j];
                        params['data[' + i + '].' + idName] = record.get(idName);
                    }
                }
                FastExt.Server.rebackEntity(params, function (success, message) {
                    resolve(success);
                    if (success) {
                        var reloadPage = store.currentPage;
                        if (store.count() - data.length <= 0) {
                            reloadPage = reloadPage - 1;
                        }
                        store.loadPage(Math.max(reloadPage, 1));
                    }
                    else {
                        Ext.Msg.alert('系统提醒', message);
                    }
                });
            });
        };
        Store.commitStoreCopy = function (store, data) {
            return new Ext.Promise(function (resolve, reject) {
                if (!store.entity) {
                    return;
                }
                if (!store.entity.idProperty) {
                    return;
                }
                var params = { "entityCode": store.entity.entityCode };
                if (store.entity.menu) {
                    params["menu"] = Store.getStoreMenuText(store);
                }
                var hasData = false;
                for (var i = 0; i < data.length; i++) {
                    var record = data[i];
                    for (var j = 0; j < store.entity.idProperty.length; j++) {
                        var idName = store.entity.idProperty[j];
                        var value = record.get(idName);
                        params['data[' + i + '].' + idName] = value;
                        if (!Ext.isEmpty(value)) {
                            hasData = true;
                        }
                    }
                }
                if (!hasData) {
                    FastExt.Dialog.toast("选中的数据不可复制！");
                    return;
                }
                FastExt.Server.copyEntity(params, function (success, message) {
                    resolve(success);
                    if (success) {
                        FastExt.Dialog.toast(message);
                        var reloadPage = store.currentPage;
                        if (store.count() - data.length <= 0) {
                            reloadPage = reloadPage - 1;
                        }
                        store.loadPage(Math.max(reloadPage, 1));
                    }
                    else {
                        Ext.Msg.alert('系统提醒', message);
                    }
                });
            });
        };
        Store.isModified = function (record) {
            for (var name_4 in record.data) {
                try {
                    if (record.isModified(name_4)) {
                        return true;
                    }
                }
                catch (e) {
                }
            }
            return false;
        };
        Store.getEntityDataStore = function (entity, where, tree) {
            if (Ext.isEmpty(entity)) {
                FastExt.Dialog.showAlert("系统提醒", "参数entity不可为空！");
                return;
            }
            var config = {
                fields: [],
                pageSize: 20,
                where: where,
                entity: entity,
                remoteSort: FastExt.Base.toBool(entity.remoteSort, true),
                treeConfig: tree,
                proxy: {
                    type: 'ajax',
                    url: 'entity/list',
                    actionMethods: {
                        create: 'POST',
                        read: 'POST',
                        update: 'POST',
                        destroy: 'POST'
                    },
                    listeners: {
                        exception: function (obj, request, operation, eOpts) {
                            try {
                                var data = eval("(" + request.responseText + ")");
                                if (!data.success) {
                                    FastExt.Dialog.showAlert("数据获取失败", data.message, null, true, true);
                                }
                            }
                            catch (e) {
                                FastExt.Dialog.showAlert("数据获取失败", request.responseText, null, true, true);
                            }
                        }
                    },
                    reader: {
                        type: 'json',
                        root: 'list',
                        totalProperty: 'totalRow'
                    }
                },
                listeners: {
                    beforeload: function (store, options, eOpts) {
                        store.recordSelectHistory = false;
                        try {
                            if (FastExt.Power.isPower()) {
                                console.log("权限配置默认，取消数据加载！");
                                return false;
                            }
                            if (!store.entity || !store.entity.entityCode) {
                                return false;
                            }
                            var params = store.proxy.extraParams;
                            var newParams_1 = {
                                "entityCode": store.entity.entityCode,
                                "limit": store.pageSize,
                                "storeId": store.getId(),
                            };
                            if (store.where) {
                                for (var w in store.where) {
                                    newParams_1["where['" + w + "']"] = store.where[w];
                                }
                            }
                            if (tree) {
                                if (Ext.isEmpty(tree.parentIdValue)) {
                                    tree.parentIdValue = -1;
                                }
                                newParams_1["page"] = -1;
                                newParams_1["fromTree"] = true;
                                newParams_1["treeParentIdName"] = tree.parentIdName;
                                var parentValue = options.node.data[tree.idName];
                                var isFirstInstance = FastExt.Base.toBool(options.node.isFirstInstance, false);
                                if (Ext.isEmpty(parentValue)) {
                                    parentValue = tree.parentIdValue;
                                }
                                newParams_1["where['^treeSearch']"] = false;
                                newParams_1["where['^treeLevel']"] = parseInt(options.node.data.depth) + 1;
                                if (store.grid && FastExt.Grid.hasSearchColumn(store.grid)) {
                                    FastExt.Base.deleteObjectAttr("where['" + tree.parentIdName + "']", newParams_1, params);
                                    FastExt.Base.deleteObjectAttr("where['" + tree.idName + "']", newParams_1, params);
                                    newParams_1["where['^treeSearch']"] = true;
                                }
                                else if (isFirstInstance && tree.parentIdValue !== -1) {
                                    newParams_1["where['" + tree.idName + "']"] = parentValue;
                                    FastExt.Base.deleteObjectAttr("where['" + tree.parentIdName + "']", newParams_1, params);
                                }
                                else {
                                    FastExt.Base.deleteObjectAttr("where['" + tree.idName + "']", newParams_1, params);
                                    newParams_1["where['" + tree.parentIdName + "']"] = parentValue;
                                }
                            }
                            if (store.grid) {
                                newParams_1["power"] = FastExt.Base.toBool(store.grid.power, true);
                                if (store.grid.listParams) {
                                    newParams_1 = FastExt.Json.mergeJson(newParams_1, store.grid.listParams);
                                }
                                store.grid.fromStoreChange = true;
                                if (store.grid.getSelection().length > 0) {
                                    store.grid.getSelectionModel().deselectAll(false, true);
                                }
                                else {
                                    store.grid.fireEvent("selectionchange", store.grid);
                                }
                                store.grid.fromStoreChange = false;
                                if (store.grid.where) {
                                    for (var w in store.grid.where) {
                                        newParams_1["where['" + w + "']"] = store.grid.where[w];
                                    }
                                }
                                store.getSorters().each(function (item) {
                                    var column = FastExt.Grid.getColumn(store.grid, item.getProperty());
                                    newParams_1["indexSort['" + item.getProperty() + "']"] = column.getIndex();
                                });
                                FastExt.Grid.checkColumnSearch(store.grid);
                                if (Ext.isFunction(store.grid.onBeforeLoad)) {
                                    var result = store.grid.onBeforeLoad(store.grid, store, newParams_1);
                                    if (!FastExt.Base.toBool(result, true)) {
                                        return false;
                                    }
                                }
                            }
                            store.getProxy().setExtraParams(FastExt.Json.mergeJson(params, newParams_1));
                            return true;
                        }
                        catch (e) {
                            FastExt.Dialog.showException(e, "store:beforeload");
                        }
                    }
                },
                autoLoad: false
            };
            config.autoLoad = false;
            var entityStore;
            if (tree) {
                if (!FastExt.System.silenceGlobalSave) {
                    config["root"] = {
                        expanded: true
                    };
                }
                entityStore = Ext.create('Ext.data.TreeStore', config);
            }
            else {
                entityStore = Ext.create('Ext.data.Store', config);
            }
            entityStore.on("load", function (store) {
                setTimeout(function () {
                    try {
                        if (store.grid) {
                            store.grid.syncRowHeights();
                        }
                    }
                    catch (e) {
                    }
                }, 300);
            });
            return entityStore;
        };
        Store.getEnumDataStore = function (enumName, firstData, lastData, params, useCache, reload, justData) {
            return new Ext.Promise(function (resolve, reject) {
                FastExt.Store.getEnumDataArray(enumName, firstData, lastData, params, useCache, reload).then(function (dataArray) {
                    if (justData) {
                        resolve(dataArray);
                    }
                    else {
                        resolve(Ext.create('Ext.data.Store', {
                            autoLoad: false,
                            enumName: enumName,
                            data: dataArray
                        }));
                    }
                });
            });
        };
        Store.getEnumDataArray = function (enumName, firstData, lastData, params, useCache, reload) {
            return new Ext.Promise(function (resolve, reject) {
                if (!params) {
                    params = {};
                }
                if (Ext.isEmpty(enumName)) {
                    resolve([]);
                    return;
                }
                if (Ext.isEmpty(useCache)) {
                    useCache = true;
                }
                if (Ext.isEmpty(reload)) {
                    reload = false;
                }
                var cacheKey = $.md5(enumName + Ext.JSON.encode(params));
                var filterData = function () {
                    var dataArray = Ext.clone(FastExt.Cache.getEnumCache(enumName, cacheKey));
                    if (firstData) {
                        dataArray = Ext.Array.insert(dataArray, 0, firstData);
                    }
                    if (lastData) {
                        dataArray = Ext.Array.push(dataArray, lastData);
                    }
                    return dataArray;
                };
                if (!useCache || !FastExt.Cache.existEnumCache(enumName, cacheKey) || reload) {
                    $.post("showEnums?enumName=" + enumName, params, function (result) {
                        try {
                            if (result.success) {
                                FastExt.Cache.setEnumCache(enumName, cacheKey, result.data);
                                resolve(filterData());
                            }
                            else {
                                Ext.Msg.alert('枚举获取失败', result.message);
                            }
                        }
                        catch (e) {
                            FastExt.Dialog.showException(e, "获取枚举数据源！[getEnumDataStore]");
                        }
                    });
                    return;
                }
                resolve(filterData());
            });
        };
        Store.getEnumData = function (enumName, id, attr) {
            return new Ext.Promise(function (resolve, reject) {
                if (!attr) {
                    attr = "id";
                }
                if (Ext.isEmpty(id)) {
                    resolve(null);
                    return;
                }
                FastExt.Store.getEnumDataArray(enumName).then(function (dataArray) {
                    for (var i = 0; i < dataArray.length; i++) {
                        var data = dataArray[i];
                        if (!Ext.isEmpty(data[attr]) && data[attr].toString() === id.toString()) {
                            resolve(data);
                            return;
                        }
                    }
                    resolve(null);
                });
            });
        };
        Store.getEnumDataByRender = function (enumName) {
            try {
                var key_1 = "Enum@" + enumName + "@Loading";
                if (FastExt.Base.toBool(FastExt.Cache.memory[key_1], false)) {
                    return;
                }
                FastExt.Cache.memory[key_1] = true;
                FastExt.Store.getEnumDataArray(enumName).then(function (dataArray) {
                    var enumContainers = $("[data-enum=" + enumName + "][data-set='false']");
                    for (var i = 0; i < enumContainers.length; i++) {
                        var item = $(enumContainers[i]);
                        var enumValue = item.attr("data-id");
                        var enumValueAttr = item.attr("data-enum-value");
                        var enumTextAttr = item.attr("data-enum-text");
                        if (Ext.isEmpty(enumValueAttr) || enumValueAttr === "undefined") {
                            enumValueAttr = "id";
                        }
                        if (Ext.isEmpty(enumTextAttr) || enumValueAttr === "undefined") {
                            enumTextAttr = "text";
                        }
                        for (var i_2 = 0; i_2 < dataArray.length; i_2++) {
                            var data = dataArray[i_2];
                            if (FastExt.Base.toString(data[enumValueAttr], "") === enumValue.toString()) {
                                var innerHtml = void 0;
                                if (data) {
                                    var text = data[enumTextAttr];
                                    var enumColor = data["color"];
                                    if (Ext.isEmpty(text)) {
                                        innerHtml = "<span style='color: #ccc;'>" + enumValue + "</span>";
                                    }
                                    else {
                                        var color = FastExt.Color.toColor(enumColor, "#000000");
                                        innerHtml = "<span style='color: " + color + ";'>" + text + "</span>";
                                    }
                                }
                                else {
                                    return;
                                }
                                item.html(innerHtml);
                                item.attr("data-set", "true");
                                break;
                            }
                        }
                    }
                    FastExt.Cache.memory[key_1] = null;
                });
            }
            catch (e) {
            }
        };
        Store.getPageDataStore = function (maxSize, iteration) {
            if (!maxSize || maxSize.length === 0)
                maxSize = FastExt.Store.maxPageSize;
            if (!iteration || iteration.length === 0)
                iteration = 10;
            var dataArray = [];
            for (var i = 0; i < maxSize / 10; i++) {
                var text = ((i + 1) * iteration) + '条';
                var id = ((i + 1) * iteration);
                dataArray.push({
                    'text': text,
                    "id": id
                });
            }
            return Ext.create('Ext.data.Store', {
                id: 'pageSizeDataStore',
                fields: ["id", "text"],
                data: dataArray
            });
        };
        Store.getCompareDataStore = function (dataType) {
            var data = [
                {
                    id: -1,
                    text: '~',
                    desc: '空值'
                },
                {
                    id: -2,
                    text: '!~',
                    desc: '非空值'
                },
                {
                    id: 0,
                    text: '=',
                    desc: '等于'
                },
                {
                    id: 1,
                    text: '!=',
                    desc: '不等于'
                },
                {
                    id: 2,
                    text: '?',
                    desc: '包含'
                },
                {
                    id: 3,
                    text: '!?',
                    desc: '不包含'
                },
                {
                    id: 4,
                    text: '>',
                    desc: '大于'
                },
                {
                    id: 6,
                    text: '>=',
                    desc: '大等于'
                },
                {
                    id: 5,
                    text: '<',
                    desc: '小于'
                },
                {
                    id: 7,
                    text: '<=',
                    desc: '小等于'
                },
                {
                    id: 8,
                    text: '*',
                    desc: '匹配'
                },
                {
                    id: 9,
                    text: '!*',
                    desc: '不匹配'
                },
                {
                    id: 10,
                    text: '#',
                    desc: '重复'
                },
                {
                    id: 11,
                    text: '!#',
                    desc: '不重复'
                }
            ];
            if (dataType.date) {
                data = [
                    {
                        id: -1,
                        text: '~',
                        desc: '空值'
                    },
                    {
                        id: -2,
                        text: '!~',
                        desc: '非空值'
                    },
                    {
                        id: 0,
                        text: '=',
                        desc: '等于'
                    },
                    {
                        id: 1,
                        text: '!=',
                        desc: '不等于'
                    },
                    {
                        id: 4,
                        text: '>',
                        desc: '大于'
                    },
                    {
                        id: 6,
                        text: '>=',
                        desc: '大等于'
                    },
                    {
                        id: 5,
                        text: '<',
                        desc: '小于'
                    },
                    {
                        id: 7,
                        text: '<=',
                        desc: '小等于'
                    },
                ];
            }
            if (dataType && dataType.full) {
                data.splice(2, 0, {
                    id: -3,
                    text: '??',
                    desc: '检索'
                });
            }
            return Ext.create('Ext.data.Store', {
                data: data,
            });
        };
        Store.getCompareLinkDataStore = function () {
            return Ext.create('Ext.data.Store', {
                data: [
                    {
                        id: 0,
                        text: '&',
                        desc: '并且'
                    },
                    {
                        id: 1,
                        text: '||',
                        desc: '或者'
                    }
                ]
            });
        };
        Store.getGridColumnStore = function (grid, search) {
            var dataArray = [];
            if (grid) {
                var configColumns = grid.getColumns();
                for (var i = 0; i < configColumns.length; i++) {
                    var column = configColumns[i];
                    if (Ext.isEmpty(column.dataIndex)) {
                        continue;
                    }
                    if (FastExt.Base.toBool(search, false)) {
                        if (!FastExt.Grid.canColumnSearch(column)) {
                            continue;
                        }
                    }
                    dataArray.push({
                        "text": column.configText,
                        "id": column.dataIndex,
                        "index": i
                    });
                }
            }
            return Ext.create('Ext.data.Store', {
                fields: ["id", "text", "index"],
                data: dataArray
            });
        };
        Store.getChartGridColumnStore = function (grid) {
            var dataArray = [];
            if (grid) {
                var configColumns = grid.getColumns();
                for (var i = 0; i < configColumns.length; i++) {
                    var column = configColumns[i];
                    if (Ext.isEmpty(column.dataIndex)) {
                        continue;
                    }
                    if ((FastExt.Grid.isNumberColumn(column) && FastExt.Base.toBool(column.chart, true))
                        || FastExt.Grid.isIdPropertyColumn(column)
                        || FastExt.Base.toBool(column.chart, true)) {
                        dataArray.push({
                            "text": column.configText,
                            "id": column.dataIndex,
                            "index": i
                        });
                    }
                }
            }
            return Ext.create('Ext.data.Store', {
                fields: ["id", "text", "index"],
                data: dataArray
            });
        };
        Store.getYesOrNoDataStore = function () {
            return Ext.create('Ext.data.Store', {
                id: 'yesOrNoDataStore',
                fields: ["id", "text"],
                data: [
                    {
                        'text': '是',
                        "id": 1
                    },
                    {
                        'text': '否',
                        "id": 0
                    }
                ]
            });
        };
        Store.getThemeDataStore = function () {
            return Ext.create('Ext.data.Store', {
                id: 'themeDataStore',
                fields: ["id", "text"],
                data: [
                    {
                        'text': '圆润立体',
                        "id": 'extjs/theme/fast-theme-wrap'
                    },
                    {
                        'text': '清爽扁平',
                        "id": 'extjs/theme/fast-theme-flat'
                    }
                ]
            });
        };
        Store.getSystemLayoutDataStore = function () {
            return Ext.create('Ext.data.Store', {
                id: 'systemLayoutDataStore',
                fields: ["id", "text"],
                data: [
                    {
                        'text': '传统布局',
                        "id": 'normal'
                    },
                    {
                        'text': '桌面布局',
                        "id": 'desktop'
                    }
                ]
            });
        };
        Store.getFontSizeDataStore = function () {
            return Ext.create('Ext.data.Store', {
                id: 'fontSizeDataStore',
                fields: ["id", "text"],
                data: [
                    {
                        'text': '14px',
                        "id": '14px'
                    },
                    {
                        'text': '16px',
                        "id": '16px'
                    }, {
                        'text': '18px',
                        "id": '18px'
                    }
                ]
            });
        };
        Store.getFrontRadiusDataStore = function () {
            return Ext.create('Ext.data.Store', {
                id: 'fontSizeDataStore',
                fields: ["id", "text"],
                data: [
                    {
                        'text': '8px',
                        "id": '8px'
                    },
                    {
                        'text': '88px',
                        "id": '88px'
                    }
                ],
            });
        };
        Store.setRecordValue = function (record, dataIndex, field) {
            field.dataIndex = dataIndex;
            if (Ext.isFunction(field.setRecordValue)) {
                field.setRecordValue(record, false);
            }
            else {
                var value = field.getValue();
                if (Ext.isDate(field.getValue())) {
                    record.set(dataIndex, Ext.Date.format(value, field.format));
                }
                else {
                    record.set(dataIndex, value);
                }
            }
            if (record.store) {
                if (FastExt.Base.toBool(field.autoUpdate, false)) {
                    FastExt.Store.commitStoreUpdate(record.store);
                }
            }
        };
        Store.isSameRecord = function (firstRecord, secondRecord) {
            if (firstRecord.store && firstRecord.store.entity && secondRecord.store && secondRecord.store.entity) {
                if (firstRecord.store.entity.entityCode === secondRecord.store.entity.entityCode) {
                    return FastExt.Store.isSameRecordByEntity(firstRecord.store.entity, firstRecord, secondRecord);
                }
            }
            return false;
        };
        Store.isSameRecordByEntity = function (entity, firstRecord, secondRecord) {
            if (!entity.idProperty) {
                return false;
            }
            for (var i = 0; i < entity.idProperty.length; i++) {
                var idName = entity.idProperty[i];
                if (firstRecord.get(idName) !== secondRecord.get(idName)) {
                    return false;
                }
            }
            return true;
        };
        Store.mergeStoreParamBySelect = function (store, selectParams) {
            if (store) {
                var storeParams = store.proxy.extraParams;
                if (store.treeConfig) {
                    delete storeParams["where['" + store.treeConfig.idName + "']"];
                    delete storeParams["where['" + store.treeConfig.parentIdName + "']"];
                }
                return FastExt.Json.mergeJson(selectParams, storeParams);
            }
            return selectParams;
        };
        Store.maxPageSize = 50;
        return Store;
    }());
    FastExt.Store = Store;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var System = (function () {
        function System() {
        }
        Object.defineProperty(System, "fontSize", {
            get: function () {
                if (window["fontSize"]) {
                    return window["fontSize"];
                }
                return this._fontSize;
            },
            enumerable: false,
            configurable: true
        });
        System.isDesktopLayout = function () {
            var systemLayout = FastExt.Objects.safeObject(FastExt.System.getExt("system-layout")).value;
            if (Ext.isEmpty(systemLayout)) {
                return false;
            }
            return systemLayout.toLowerCase() === "desktop";
        };
        System.isThemeWrap = function () {
            var systemTheme = FastExt.Color.toColor(FastExt.System["theme"].value);
            return systemTheme.indexOf("fast-theme-wrap") >= 0;
        };
        System.removeLoading = function () {
            window["removeLoading"]();
        };
        System.checkBrowserVersion = function () {
            if (Ext.isIE && Ext.ieVersion < 11) {
                var win = Ext.create('Ext.window.Window', {
                    title: '系统提醒',
                    width: 250,
                    height: 100,
                    layout: 'fit',
                    icon: 'icons/icon_error.svg',
                    resizable: false,
                    closable: false,
                    html: "<div style='background:#eeeeee; padding:10px;'>您当前的IE版本太低，至少在11.0以上的IE才能使用本系统！</div>",
                    modal: true
                });
                win.show();
                return false;
            }
            return true;
        };
        System.getBodyContainer = function () {
            if (!FastExt.System.systemBodyContainer) {
                Ext.getDoc().on("contextmenu", function (e) {
                    e.stopEvent();
                });
                Ext.tip.QuickTipManager.init();
                Ext.QuickTips.init();
                FastExt.System.systemBodyContainer = Ext.create('Ext.container.Viewport', {
                    id: 'bodyContainer',
                    layout: 'card',
                    border: 0,
                    renderTo: Ext.getBody()
                });
            }
            if (!Ext.isEmpty(window["systemErrorMessage"])) {
                FastExt.Dialog.toast(window["systemErrorMessage"]);
                window["systemErrorMessage"] = undefined;
            }
            return FastExt.System.systemBodyContainer;
        };
        System.getValue = function (name) {
            var obj = FastExt.System[name];
            if (obj) {
                return obj;
            }
            return { value: "" };
        };
        System.addScript = function (script, callBack) {
            if (script == null)
                return;
            var oHead = document.getElementsByTagName('head').item(0);
            var oScript = document.createElement("script");
            var isCode = false;
            oScript.type = "text/javascript";
            if (script.src != null && script.src.length > 0) {
                oScript.src = FastExt.System.formatUrlVersion(script.src);
            }
            else if (script.href != null && script.href.length > 0) {
                oScript.src = FastExt.System.formatUrlVersion(script.href);
            }
            else if (script.text) {
                try {
                    oScript.appendChild(document.createTextNode(script.text));
                }
                catch (ex) {
                    oScript.text = script.text;
                }
                isCode = true;
            }
            else {
                if (callBack != null) {
                    callBack();
                }
                return;
            }
            oHead.appendChild(oScript);
            if (isCode) {
                if (callBack != null) {
                    callBack();
                }
                return;
            }
            oScript.onload = oScript.readystatechange = function () {
                if (callBack != null) {
                    callBack();
                }
            };
            oScript.onerror = function () {
                alert("脚本文件" + script.src + "加载失败，请您稍后重试！");
            };
        };
        System.addStyle = function (style, callBack) {
            var oHead = document.getElementsByTagName('head').item(0);
            var oStyle = document.createElement("style");
            oStyle.type = "text/css";
            if (oStyle.styleSheet) {
                oStyle.styleSheet.cssText = style;
            }
            else {
                oStyle.innerHTML = style;
            }
            if (callBack != null) {
                callBack();
            }
            oHead.appendChild(oStyle);
            return oStyle;
        };
        System.removeStyle = function (code) {
            var styles = document.getElementsByTagName('style');
            for (var i = 0; i < styles.length; i++) {
                var style = styles[i];
                if (style["code"] === code) {
                    style.parentNode.removeChild(style);
                }
            }
        };
        System.addStylesheet = function (link, callBack) {
            if (link == null)
                return;
            var oHead = document.getElementsByTagName('head').item(0);
            var oLink = document.createElement("link");
            oLink.rel = "stylesheet";
            oLink.href = FastExt.System.formatUrl(link.href);
            oHead.appendChild(oLink);
            oLink.onload = oLink.readystatechange = function () {
                if (callBack != null) {
                    callBack();
                }
            };
            oLink.onerror = function () {
                alert("系统Link文件" + link.href + "加载失败，请您稍后重试！");
            };
        };
        System.getProgressLine = function (toColor) {
            try {
                if (Ext.isEmpty(toColor)) {
                    toColor = "#f8c633";
                }
                if ($("#progress").length <= 0) {
                    return {
                        set: function () {
                        },
                        animate: function () {
                        },
                    };
                }
                if (!FastExt.System.progressLine) {
                    FastExt.System.progressLine = new ProgressBar.Line('#progress', {
                        color: toColor,
                        duration: 1000,
                        easing: 'easeInOut',
                        from: {
                            color: '#9c58b6'
                        },
                        to: {
                            color: toColor
                        },
                        step: function (state, line, attachment) {
                            line.path.setAttribute('stroke', state.color);
                        }
                    });
                }
                return FastExt.System.progressLine;
            }
            catch (e) {
            }
            return {
                set: function () {
                },
                animate: function () {
                },
            };
        };
        System.initConfig = function () {
            FastExt.System.baseUrl = window.location.href;
            if (FastExt.System.baseUrl.indexOf("#") > 0) {
                FastExt.System.baseUrl = FastExt.System.baseUrl.split("#")[0];
            }
            if (!FastExt.System.baseUrl.toString().endWith("/")) {
                FastExt.System.baseUrl = FastExt.System.baseUrl + "/";
            }
            var params = {};
            if (FastExt.Power.isPower()) {
                if (window.parent && Ext.isFunction(window.parent.getMenuPower)) {
                    params = { menuPower: window.parent.getMenuPower() };
                }
            }
            Ext.Ajax.request({
                url: FastExt.Server.showConfigUrl(),
                params: params,
                success: function (response, opts) {
                    var data = FastExt.Json.jsonToObject(response.responseText).data;
                    for (var key in data) {
                        if (data.hasOwnProperty(key)) {
                            FastExt.System[key] = data[key];
                        }
                    }
                    var allExt = FastExt.System.getAllExt();
                    for (var i = 0; i < allExt.length; i++) {
                        var head = allExt[i];
                        FastExt.System[head.name] = head;
                    }
                    FastExt.System.loadAppJs();
                },
                failure: function (response, opts) {
                    FastExt.Dialog.showException(response.responseText, "获取系统配置！[system.initConfig]");
                }
            });
        };
        System.loadAppJs = function () {
            FastExt.System.loadAppJsByCallback(0, function () {
                FastExt.System.globalConfig();
            });
        };
        System.loadAppJsByCallback = function (index, callback) {
            if (index >= FastExt.System["app"].length) {
                Ext.MessageBox.updateProgress(1, '已加载成功，正在显示中');
                FastExt.System.addStyle(FastExt.System["menusCss"], function () {
                    FastExt.System.initAppJsProperty();
                    callback();
                });
                return;
            }
            Ext.MessageBox.updateProgress(parseFloat(String(index + 1)) / parseFloat(FastExt.System["app"].length), '正在加载中，请耐心等待');
            FastExt.System.addScript({ src: FastExt.System["app"][index] }, function () {
                FastExt.System.loadAppJsByCallback(index + 1, callback);
            });
        };
        System.initAppJsProperty = function () {
            var entities = FastExt.System["entities"];
            for (var i = 0; i < entities.length; i++) {
                var entity = entities[i];
                try {
                    var pro = eval(entity.entityCode + ".prototype");
                    if (pro) {
                        for (var key in entity) {
                            pro[key] = entity[key];
                        }
                        entity.js = true;
                        var getList = eval("new " + entity.entityCode + "().getList");
                        if (getList) {
                            var getListFunctionStr = getList.toString();
                            var result = new RegExp("let (\\w+)[ ]?=[ ]?this[,; ]?").exec(getListFunctionStr);
                            if (result) {
                                pro["getListThisVarName"] = result[1];
                            }
                            else {
                                pro["getListThisVarName"] = "me";
                            }
                            result = new RegExp("[let,]?[ ]?(\\w+)[ ]?=[ ]?Ext.create\\((['\"])Ext.grid.Panel\\2").exec(getListFunctionStr);
                            if (result) {
                                pro["getListGridVarName"] = result[1];
                            }
                            else {
                                pro["getListGridVarName"] = "grid";
                            }
                        }
                    }
                }
                catch (e) {
                    entity.js = false;
                }
            }
        };
        System.globalConfig = function () {
            if (FastExt.Power.isPower()) {
                if (window.parent && Ext.isFunction(window.parent["getExtPower"])) {
                    FastExt.Power.config = true;
                    FastExt.Power.powers = FastExt.Json.jsonToObject(window.parent["getExtPower"]());
                    if (!FastExt.Power.powers) {
                        FastExt.Power.powers = {};
                    }
                    FastExt.System.managerPowers = FastExt.Json.jsonToObject(window.parent["getParentExtPower"]());
                    if (FastExt.System.managerPowers) {
                        for (var code in FastExt.Power.powers) {
                            if (FastExt.System.managerPowers.hasOwnProperty(code)) {
                                var managerPower = FastExt.System.managerPowers[code];
                                for (var managerPowerKey in managerPower) {
                                    if (!managerPower[managerPowerKey]) {
                                        FastExt.Power.powers[code][managerPowerKey] = false;
                                    }
                                }
                            }
                        }
                    }
                    window["getExtPower"] = function () {
                        return FastExt.Power.getSavePowerData();
                    };
                }
            }
            Ext.on('mousedown', function (e) {
                FastExt.System.currClickTarget = e.target;
            });
            window.addEventListener("popstate", function (e) {
                FastExt.System.selectTab(FastExt.System.getMenuIdFromLocation());
            }, false);
            FastExt.System.init = true;
            if (FastExt.System.isDesktopLayout()) {
                FastExt.Desktop.initSystem();
            }
            else {
                FastExt.System.initSystem();
            }
        };
        System.initSystem = function () {
            FastExt.System.removeLoading();
            var me = this;
            var container = FastExt.System.getBodyContainer();
            container.removeAll();
            var systemBgColor = FastExt.Color.toColor(me["theme-color"].value);
            var leftTreeWidth = parseInt((document.body.clientWidth * 0.25).toFixed(0));
            var leftTreePanel = Ext.create('Ext.panel.Panel', {
                border: 0,
                region: 'center',
                cls: 'treelist-with-nav',
                scrollable: "y",
                items: [
                    {
                        xtype: 'treelist',
                        id: 'leftTreeList',
                        reference: 'treelist',
                        expanderOnly: false,
                        singleExpand: FastExt.System.menuSingleExpand,
                        ui: 'nav',
                        scrollable: "y",
                        expanderFirst: false,
                        selectOnExpander: true,
                        highlightPath: true,
                        store: {
                            type: 'tree',
                            root: {
                                expanded: true,
                                children: me.menus
                            }
                        },
                        viewModel: {
                            formulas: {
                                selectionItem: function (get) {
                                    var selection = get('treelist.selection');
                                    if (selection) {
                                        if (selection.data.leaf) {
                                            me.showTab(selection.data.method, selection.data.id, selection.data.text, selection.data.icon);
                                        }
                                    }
                                    return selection;
                                }
                            }
                        }
                    }
                ],
                listeners: {
                    resize: function (obj, width, height, oldWidth, oldHeight, eOpts) {
                        var pressed = width <= 128;
                        var treelist = Ext.getCmp("leftTreeList");
                        var ct = treelist.ownerCt.ownerCt;
                        treelist.setMicro(pressed);
                        if (pressed) {
                            ct.setWidth(44);
                        }
                        else {
                            ct.setWidth(width);
                        }
                    }
                }
            });
            me.tabPanelContainer = Ext.create('Ext.tab.Panel', {
                region: 'center',
                id: 'tabs',
                plain: true,
                style: {
                    marginTop: '-8px'
                },
                items: [],
                tabBar: {
                    userCls: "systemTab",
                    layout: {
                        overflowHandler: "menu",
                    },
                },
                recordTab: function () {
                    FastExt.System.recordTab();
                },
                plugins: ['tabreorderer', 'tabclosemenu'],
            });
            var rightContainer = Ext.create('Ext.panel.Panel', {
                layout: 'border',
                region: 'center',
                border: 0,
                style: {
                    background: '#eeeeee'
                },
                items: [me.tabPanelContainer]
            });
            var leftContainer = Ext.create('Ext.panel.Panel', {
                layout: 'border',
                region: 'west',
                border: 0,
                width: leftTreeWidth,
                minWidth: 44,
                maxWidth: 500,
                subtitle: '左侧菜单',
                split: true,
                style: {
                    background: '#32404e'
                },
                items: [
                    {
                        xtype: 'image',
                        height: 35,
                        border: 0,
                        padding: '5 5 5 5',
                        region: 'south',
                        src: FastExt.Server.getIcon("icon_v_menu.svg"),
                        cls: 'leftBottom',
                        listeners: {
                            el: {
                                click: function () {
                                    if (leftContainer.getWidth() <= 44) {
                                        if (leftContainer.oldWidth != null) {
                                            leftContainer.setWidth(Math.max(200, leftContainer.oldWidth));
                                        }
                                        else {
                                            leftContainer.setWidth(200);
                                        }
                                    }
                                    else {
                                        leftContainer.oldWidth = leftContainer.getWidth();
                                        leftContainer.setWidth(44);
                                    }
                                }
                            }
                        }
                    }, leftTreePanel
                ]
            });
            me.tabPanelContainer.add({
                title: '首页',
                xtype: 'panel',
                id: 'tabWelcome',
                reorderable: false,
                closable: false,
                layout: 'fit',
                iconCls: 'extIcon extIndex',
                justFixed: true,
                items: [FastExt.System.getWelcomePanel()],
                listeners: {
                    beforeactivate: function (tab) {
                        if (FastExt.System.silenceGlobalSave) {
                            return;
                        }
                        try {
                            me.selectMenu(me.lastTabId, true);
                        }
                        catch (e) {
                        }
                    },
                    activate: function (tab) {
                        FastExt.System.clearAllTabTheme();
                        if (FastExt.System.silenceGlobalSave) {
                            return;
                        }
                        if (me.restoredTab) {
                            FastExt.System.pushLocationHistory({ text: tab.title });
                        }
                    }
                }
            });
            var containerPanel = Ext.create('Ext.panel.Panel', {
                layout: 'border',
                border: 0,
                bodyStyle: {
                    background: systemBgColor
                },
                items: [FastExt.System.getSystemHeaderPanel(), leftContainer, rightContainer],
            });
            container.add(containerPanel);
            var restoreTab = function () {
                if (window["indexLottie"]) {
                    window["indexLottie"].destroy();
                    window["indexLottie"] = null;
                }
                var tabFromHrefMenuId = me.getMenuIdFromLocation();
                var hasFromHref = me.existMenu(tabFromHrefMenuId);
                if (FastExt.Base.toBool(me['tab-record'].value, true)) {
                    Ext.MessageBox.updateProgress(1, '即将完成操作，请耐心等待', '系统初始化成功！获取菜单中…');
                    me.restoreTab().then(function (value) {
                        FastExt.Dialog.hideWait();
                        var tabs = FastExt.Json.jsonToObject(value);
                        me.restoredTab = true;
                        if (!tabs) {
                            return;
                        }
                        Ext.each(tabs, function (tab) {
                            if (tabFromHrefMenuId === tab.id) {
                                tab.active = true;
                            }
                            else if (hasFromHref) {
                                tab.active = false;
                            }
                            var existMenu = FastExt.System.getMenu(tab.id);
                            if (existMenu) {
                                tab.method = existMenu.method;
                                tab.icon = existMenu.icon;
                            }
                            me.showTab(tab.method, tab.id, tab.title, tab.icon, tab.active, true, tab.where, tab.closable, tab.reorderable);
                        });
                        if (hasFromHref) {
                            me.selectTab(tabFromHrefMenuId);
                        }
                        if (tabs.length === 0 || !me.tabPanelContainer.getActiveTab()) {
                            me.tabPanelContainer.setActiveTab(Ext.getCmp("tabWelcome"));
                        }
                        if (FastExt.Listeners.onFinishSystem) {
                            FastExt.Listeners.onFinishSystem();
                        }
                    });
                }
                else {
                    FastExt.Dialog.hideWait();
                    me.tabPanelContainer.setActiveTab(Ext.getCmp("tabWelcome"));
                    if (FastExt.Listeners.onFinishSystem) {
                        FastExt.Listeners.onFinishSystem();
                    }
                }
            };
            if (FastExt.Base.toBool(me["needInit"], false)) {
                FastExt.Dialog.hideWait();
                FastExt.Listeners.onAfterInitSystem = function () {
                    restoreTab();
                    FastExt.Listeners.onAfterInitSystem = null;
                };
                FastExt.System.startSilenceSaveConfig(null, "正在升级当前账户的系统配置");
            }
            else {
                restoreTab();
            }
        };
        System.getSystemHeaderPanel = function (cls) {
            var systemBgColor = FastExt.Color.toColor(FastExt.System["theme-color"].value);
            var systemTlColor = FastExt.Color.toColor(FastExt.System["front-color"].value);
            var systemLogo = FastExt.System["system-logo"].value;
            var systemTitle = FastExt.Eval.runObject(FastExt.System.getAllExt(), $("title").text());
            if (Ext.isEmpty(systemLogo)) {
                systemLogo = "icons/icon_head_system.svg";
            }
            var headHeight = 55;
            if (Ext.isEmpty(cls)) {
                cls = "headContainer";
            }
            var headItems = [
                {
                    xtype: 'image',
                    src: this.formatUrl(systemLogo),
                    height: headHeight - 20,
                    width: headHeight - 20,
                    cls: 'headLogo',
                    margin: '10 5 5 5',
                    style: {
                        borderRadius: '10px'
                    }
                },
                {
                    xtype: 'label',
                    margin: '0 0 0 5',
                    html: "<div class='headTitle' style='color: " + systemTlColor + ";' >" + systemTitle + "</div>"
                },
                "->",
                FastExt.System.isSuperRole() ? {
                    xtype: 'button',
                    iconCls: 'extIcon extSearch searchColor',
                    text: '系统全局搜索',
                    minWidth: 155,
                    cls: 'headButton',
                    code: 'SystemGlobalSearchButton',
                    handler: function () {
                        FastExt.System.showGlobalSearch(this);
                    }
                } : null,
                {
                    xtype: 'button',
                    iconCls: 'extIcon extManager2 searchColor',
                    text: FastExt.System.manager.managerName,
                    minWidth: 155,
                    cls: 'headButton',
                    handler: function () {
                        FastExt.System.showManagerInfo(this);
                    }
                },
                {
                    xtype: 'button',
                    iconCls: 'extIcon extExits redColor',
                    text: "退出登录",
                    cls: 'headButton',
                    handler: function () {
                        FastExt.System.logout();
                    }
                }
            ];
            if (FastExt.Listeners.onInitSystemHeaderItems) {
                FastExt.Listeners.onInitSystemHeaderItems(headItems);
            }
            var headerInfo = Ext.create('Ext.toolbar.Toolbar', {
                height: headHeight,
                padding: '0 0 0 0',
                border: 0,
                flex: 1,
                power: false,
                cls: cls,
                id: "SystemHeadButtons",
                style: {
                    background: systemBgColor
                },
                items: headItems,
            });
            var headerTip = Ext.create('Ext.toolbar.Toolbar', {
                border: 0,
                padding: '0 0 0 0',
                flex: 1,
                height: 3,
                style: {
                    background: systemBgColor
                },
                html: "<div class=\"progress\" id=\"progress\"></div>"
            });
            return Ext.create('Ext.container.Container', {
                layout: 'absolute',
                region: 'north',
                height: headHeight,
                border: 0,
                hidden: FastExt.Power.config,
                items: [headerInfo, headerTip],
                listeners: {
                    afterlayout: function () {
                        if (!FastExt.Base.toBool(this.bindFullscreen, false)) {
                            this.bindFullscreen = true;
                            this.getEl().on("dblclick", function () {
                                if (FastExt.System.fullscreen) {
                                    FastExt.System.outFullscreen();
                                }
                                else {
                                    FastExt.System.inFullScreen();
                                }
                            });
                        }
                    }
                }
            });
        };
        System.sessionOut = function (message) {
            if (Ext.isEmpty(message)) {
                message = "系统检测到您的会话已失效，请您重新登录！";
            }
            if (Ext.getCmp("ManagerSessionOutWin")) {
                return;
            }
            var me = this;
            if (me.sessionOutAlert) {
                return;
            }
            FastExt.Dialog.hideWait();
            me.sessionOutAlert = true;
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                defaults: {
                    margin: '5 5 5 5'
                },
                border: 0,
                items: [
                    {
                        xtype: "lottie",
                        width: 150,
                        height: 120,
                        jsonPath: 'base/lottie/error_normal.json',
                    },
                    {
                        xtype: "label",
                        maxWidth: 250,
                        margin: '5 5 10 5',
                        html: message,
                    }
                ],
            });
            var warnWindow = Ext.create('Ext.window.Window', {
                title: "账户提醒",
                iconCls: 'extIcon extSessionOut',
                id: "ManagerSessionOutWin",
                width: 280,
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                maximizable: false,
                sessionWin: true,
                fixed: true,
                draggable: false,
                animateDisable: true,
                constrain: true,
                resizable: false,
                alwaysOnTop: true,
                toFrontOnShow: true,
                items: [formPanel],
                modal: true,
                listeners: {
                    destroy: function (obj, op) {
                        if (FastExt.Power.isPower()) {
                            window.parent.close();
                        }
                        else {
                            location.reload();
                        }
                    }
                },
                buttons: [
                    '->',
                    {
                        text: "重新登录",
                        iconCls: 'extIcon extLogin',
                        handler: function () {
                            FastExt.Server.logout("退出系统中，请稍后……");
                        }
                    },
                    '->'
                ],
            });
            warnWindow.show();
        };
        System.logout = function () {
            var message = "<div style='line-height: 170%;'>";
            message += "<b style='font-size: 16px;'>您确定退出当前登录的账户吗？</b>";
            message += "<br/><b style='font-size: 14px;'>当前账户：" + FastExt.System.manager["managerName"] + "</b>";
            message += "</div>";
            Ext.Msg.confirm("系统提示", message, function (btn) {
                if (btn === "yes") {
                    FastExt.Server.logout();
                }
            });
        };
        System.showManagerInfo = function (obj) {
            if (!FastExt.System.manager.infoWin) {
                var data = [
                    {
                        "name": "账户名称",
                        "value": FastExt.System.manager["managerName"]
                    },
                    {
                        "name": "账户登录名",
                        "value": FastExt.System.manager["managerLoginName"]
                    },
                    {
                        "name": "账户状态",
                        "value": FastExt.System.manager["managerStateStr"]
                    },
                    {
                        "name": "账户角色",
                        "value": FastExt.System.manager["role"]["roleName"]
                    },
                    {
                        "name": "角色类型",
                        "value": FastExt.System.manager["role"]["roleTypeStr"]
                    },
                    {
                        "name": "角色状态",
                        "value": FastExt.System.manager["role"]["roleStateStr"]
                    }, {
                        "name": "允许登录",
                        "value": FastExt.System.manager["onlineTypeStr"],
                    }, {
                        "name": "最后一次登录",
                        "value": FastExt.System.manager["lastLoginTime"],
                    }
                ];
                if (FastExt.Listeners.onShowManagerInfo) {
                    FastExt.Listeners.onShowManagerInfo(data);
                }
                var grid = FastExt.Grid.createDetailsGrid(data, {
                    power: false,
                    hideHeaders: true
                }, {}, {
                    align: 'center'
                });
                FastExt.System.manager.infoWin = Ext.create('Ext.window.Window', {
                    title: '登录系统的账户信息',
                    layout: 'fit',
                    constrain: true,
                    iconCls: 'extIcon extManager2',
                    resizable: true,
                    minHeight: 200,
                    minWidth: 400,
                    height: 400,
                    width: 350,
                    animateTarget: obj,
                    items: [grid],
                    listeners: {
                        close: function (window, eOpts) {
                            FastExt.System.manager.infoWin = null;
                        }
                    },
                    buttons: [
                        {
                            text: '退出登录',
                            iconCls: 'extIcon extExits whiteColor',
                            handler: function () {
                                FastExt.System.logout();
                            }
                        },
                        '->',
                        {
                            text: '更多操作',
                            iconCls: 'extIcon extMore whiteColor',
                            menu: [
                                {
                                    text: '初始化配置',
                                    columnWidth: 1,
                                    iconCls: 'extIcon extRefresh extRole',
                                    handler: function () {
                                        Ext.Msg.confirm("系统提醒", "将初始化系统记忆配置，确定继续吗？", function (button, text) {
                                            if (button == "yes") {
                                                FastExt.System.startSilenceSaveConfig();
                                            }
                                        });
                                    }
                                },
                                {
                                    text: '修改登录密码',
                                    iconCls: 'extIcon extResetPassword redColor',
                                    handler: function () {
                                        FastExt.System.modifyPassword(this);
                                    }
                                }
                            ]
                        }
                    ]
                });
            }
            else {
                FastExt.Component.shakeComment(FastExt.System.manager.infoWin);
            }
            FastExt.System.manager.infoWin.show();
        };
        System.getExt = function (key) {
            return window["getExt"](key);
        };
        System.isDebug = function () {
            return FastExt.Base.toBool(FastExt.System.getExt("debug").value, false);
        };
        System.isLocal = function () {
            return FastExt.Base.toBool(FastExt.System.getExt("local").value, false);
        };
        System.getAllExt = function () {
            return window["getAllExt"]();
        };
        System.isInitSystem = function () {
            try {
                if (FastExt.System.init)
                    return true;
            }
            catch (e) {
            }
            return false;
        };
        System.isSuperRole = function () {
            var me = this;
            if (me.manager && me.manager.role) {
                if (me.manager.role.roleType === 0) {
                    return true;
                }
            }
            return false;
        };
        System.getManagerId = function () {
            var me = this;
            if (me.manager) {
                return me.manager.managerId;
            }
            return -1;
        };
        System.inFullScreen = function () {
            try {
                var element = document.documentElement;
                if (element.requestFullscreen) {
                    element.requestFullscreen();
                }
                else if (element.msRequestFullscreen) {
                    element.msRequestFullscreen();
                }
                else if (element.mozRequestFullScreen) {
                    element.mozRequestFullScreen();
                }
                else if (element.webkitRequestFullscreen) {
                    element.webkitRequestFullscreen();
                }
            }
            catch (e) {
                console.error(e);
            }
            finally {
                this.fullscreen = true;
            }
        };
        System.outFullscreen = function () {
            try {
                var element = document;
                if (element.exitFullscreen) {
                    element.exitFullscreen();
                }
                else if (element.msExitFullscreen) {
                    element.msExitFullscreen();
                }
                else if (element.mozCancelFullScreen) {
                    element.mozCancelFullScreen();
                }
                else if (element.webkitExitFullscreen) {
                    element.webkitExitFullscreen();
                }
            }
            catch (e) {
                console.error(e);
            }
            finally {
                this.fullscreen = false;
            }
        };
        System.validOperate = function (operate, callBack, timeout) {
            if (!operate) {
                return;
            }
            var operateValid = Cookies.get("ValidOperate" + $.md5(operate));
            if (!timeout) {
                timeout = 24 * 60 * 60;
            }
            if (operateValid) {
                callBack();
            }
            else {
                var loginNormal_1 = FastExt.System.getExt("login-type").value === "normal";
                var labelWidth = FastExt.Base.getNumberValue(FastExt.System.fontSize) * 5 + 8;
                var doValid_1 = function () {
                    var form = loginPanel_1.form;
                    if (form.isValid()) {
                        var loginPassword = loginPanel_1.form.findField("loginPassword").getValue();
                        form.submit({
                            params: {
                                loginPassword: $.md5(loginPassword),
                                operate: operate,
                                timeout: timeout
                            },
                            waitMsg: '正在为您验证中……',
                            success: function (form, action) {
                                win_3.close();
                                callBack();
                            },
                            failure: function (form, action) {
                                refreshCode_1();
                                if (action.result) {
                                    Ext.Msg.alert('验证失败', action.result.message, function () {
                                        if (action.result.code === -3) {
                                            loginPanel_1.form.findField("validateCode").focus();
                                        }
                                    });
                                }
                            }
                        });
                    }
                };
                var loginPanel_1 = Ext.create('Ext.form.FormPanel', {
                    url: FastExt.Server.validOperateUrl(),
                    method: 'POST',
                    fileUpload: true,
                    border: 0,
                    width: '100%',
                    layout: "anchor",
                    region: 'center',
                    bodyStyle: {},
                    padding: '10 10 0 10',
                    items: [
                        {
                            xtype: 'textfield',
                            fieldLabel: '登录账号',
                            labelAlign: 'right',
                            labelWidth: labelWidth,
                            margin: '10 10 0 0',
                            name: 'loginName',
                            allowBlank: false,
                            readOnly: true,
                            value: FastExt.System.manager.managerLoginName,
                            blankText: '请输入当前登录名',
                            emptyText: '请输入当前登录名',
                            anchor: "100%"
                        }, {
                            xtype: 'textfield',
                            fieldLabel: '登录密码',
                            labelAlign: 'right',
                            labelWidth: labelWidth,
                            inputType: 'password',
                            margin: '10 10 0 0',
                            allowBlank: false,
                            blankText: '请输入登录密码',
                            emptyText: '请输入登录密码',
                            submitValue: false,
                            name: 'loginPassword',
                            anchor: "100%"
                        },
                        {
                            xtype: 'fieldcontainer',
                            labelWidth: 0,
                            anchor: "100%",
                            layout: {
                                type: 'hbox',
                                align: 'stretch'
                            },
                            hidden: loginNormal_1,
                            items: [{
                                    xtype: 'textfield',
                                    fieldLabel: '验证码',
                                    labelAlign: 'right',
                                    labelWidth: labelWidth,
                                    margin: '10 10 0 0',
                                    allowBlank: loginNormal_1,
                                    flex: 1,
                                    name: 'validateCode',
                                    emptyText: '请输入验证码',
                                    blankText: '请输入验证码'
                                }, {
                                    xtype: 'image',
                                    margin: '10 10 0 0',
                                    width: 70,
                                    id: 'imgCode',
                                    height: 32
                                }]
                        },
                        {
                            xtype: 'fieldcontainer',
                            labelWidth: 0,
                            anchor: "100%",
                            layout: {
                                type: 'hbox',
                                align: 'stretch'
                            },
                            items: [{
                                    xtype: 'button',
                                    text: '取消',
                                    iconCls: 'extIcon extReset',
                                    flex: 1,
                                    tipText: '取消验证',
                                    margin: '10 5 10 10',
                                    handler: function () {
                                        win_3.close();
                                    }
                                }, {
                                    xtype: 'button',
                                    text: '确定',
                                    tipText: '确定验证',
                                    margin: '10 10 10 5',
                                    iconCls: 'extIcon extOk',
                                    flex: 1,
                                    handler: function () {
                                        doValid_1();
                                    }
                                }]
                        }
                    ],
                    listeners: {
                        'render': function (text) {
                            try {
                                new Ext.util.KeyMap({
                                    target: text.getEl(),
                                    key: 13,
                                    fn: doValid_1,
                                    scope: Ext.getBody()
                                });
                            }
                            catch (e) {
                                console.error(e);
                            }
                        }
                    }
                });
                var refreshCode_1 = function () {
                    try {
                        loginPanel_1.form.findField("validateCode").reset();
                        Ext.getCmp("imgCode").setSrc("showCaptcha?t=" + Math.random());
                    }
                    catch (e) {
                    }
                };
                var bottomPanel = Ext.create('Ext.panel.Panel', {
                    region: 'south',
                    layout: 'fit',
                    width: '100%',
                    border: 0,
                    html: "<div align='center' style='font-size: small;color:red;text-decoration:none; padding-left: 40px;padding-right: 40px;padding-bottom: 10px;'>" +
                        "<b>完成验证后将继续执行《" + operate + "》操作</b>" +
                        "</div>"
                });
                var win_3 = Ext.create('Ext.window.Window', {
                    title: '当前操作需要安全验证',
                    iconCls: 'extIcon extPower',
                    width: 380,
                    resizable: false,
                    layout: 'vbox',
                    toFrontOnShow: true,
                    modal: true,
                    constrain: true,
                    items: [loginPanel_1, bottomPanel]
                });
                win_3.show(null, function () {
                    try {
                        if (!loginNormal_1) {
                            refreshCode_1();
                            Ext.get('imgCode').on({
                                click: function () {
                                    refreshCode_1();
                                }
                            });
                        }
                    }
                    catch (e) {
                    }
                });
            }
        };
        System.formatUrlVersion = function (url, params) {
            if (Ext.isEmpty(url)) {
                return url;
            }
            var urlArray = url.split("@");
            url = urlArray[0];
            var newUrl = url;
            if (url.indexOf("v=") < 0) {
                if (url.indexOf("?") > 0) {
                    newUrl = url + "&v=" + FastExt.System.getExt("version").value;
                }
                else {
                    newUrl = url + "?v=" + FastExt.System.getExt("version").value;
                }
            }
            if (params) {
                for (var key in params) {
                    if (params.hasOwnProperty(key)) {
                        newUrl = newUrl + "&" + key + "=" + params[key];
                    }
                }
            }
            urlArray[0] = newUrl;
            return urlArray.join("@");
        };
        System.formatUrl = function (url, params) {
            if (Ext.isEmpty(url)) {
                return url;
            }
            if (url.startWith("http://") || url.startWith("https://")) {
                return this.formatUrlVersion(url, params);
            }
            if (this.http) {
                return this.formatUrlVersion(this.http + url, params);
            }
            return this.formatUrlVersion(url, params);
        };
        System.asyncMethod = function (method) {
            return new Ext.Promise(function (resolve, reject) {
                try {
                    var itemValue = eval(method);
                    resolve(itemValue);
                }
                catch (e) {
                    resolve(null);
                    console.error(e);
                }
            });
        };
        System.getMenu = function (menuId) {
            return FastExt.System.getMenuData(menuId);
        };
        System.getMenuData = function (menuId) {
            var getMenuById = function (parent, menus, findMenuId) {
                for (var i = 0; i < menus.length; i++) {
                    var menu = menus[i];
                    var cloneMenu = Ext.clone(menu);
                    cloneMenu.parent = parent;
                    if (cloneMenu.id === findMenuId) {
                        return cloneMenu;
                    }
                    if (cloneMenu.children) {
                        var childMenu = getMenuById(cloneMenu, cloneMenu.children, findMenuId);
                        if (childMenu != null) {
                            return childMenu;
                        }
                    }
                }
                return null;
            };
            return getMenuById(null, FastExt.System.menus, menuId);
        };
        System.findLastTag = function () {
            for (var i = FastExt.System.tabPanelContainer.items.items.length - 1; i >= 0; i--) {
                var item = FastExt.System.tabPanelContainer.items.items[i];
                if (item) {
                    if (!FastExt.Base.toBool(item.tab.closable, true) && !FastExt.Base.toBool(item.tab.reorderable, true)) {
                        return item;
                    }
                }
            }
            return null;
        };
        System.recordTab = function () {
            return new Ext.Promise(function (resolve, reject) {
                try {
                    var tabArray_1 = [];
                    FastExt.System.tabPanelContainer.items.each(function (item, index) {
                        var tab = {};
                        if (Ext.isEmpty(item.method)) {
                            return;
                        }
                        tab.method = item.method;
                        tab.where = item.where;
                        tab.title = item.title;
                        tab.icon = item.icon;
                        tab.id = item.id;
                        tab.closable = item.closable;
                        tab.reorderable = item.reorderable;
                        tab.active = item === FastExt.System.tabPanelContainer.getActiveTab();
                        tabArray_1.push(tab);
                    });
                    FastExt.Server.setSilence(true);
                    FastExt.Server.saveExtConfig($.md5("SystemTabs"), "TabRecord", FastExt.Json.objectToJson(tabArray_1), function (success, message) {
                        resolve(success);
                        FastExt.Server.setSilence(false);
                    });
                }
                catch (e) {
                    reject(e);
                }
            });
        };
        System.restoreTab = function () {
            return new Ext.Promise(function (resolve, reject) {
                try {
                    FastExt.Server.showExtConfig($.md5("SystemTabs"), "TabRecord", function (success, value) {
                        resolve(value);
                    });
                }
                catch (e) {
                    reject(e);
                }
            });
        };
        System.selectTab = function (id, shakeThis, moveFirst) {
            if (!id) {
                return false;
            }
            var me = this;
            if (FastExt.System.isDesktopLayout()) {
                FastExt.Desktop.showWindowMenu(null, FastExt.Desktop.getMenu(id));
                return false;
            }
            var tab = Ext.getCmp(id);
            if (FastExt.System.lastTabId === id && shakeThis) {
                FastExt.Component.shakeComment(tab);
            }
            if (tab) {
                me.tabPanelContainer.setActiveTab(tab);
                if (moveFirst) {
                    me.tabPanelContainer.moveAfter(tab, Ext.getCmp("tabWelcome"));
                }
                tab.focus();
                return true;
            }
            else {
                return me.selectMenu(id, false);
            }
        };
        System.selectMenu = function (menuId, justParent) {
            try {
                if (FastExt.System.isDesktopLayout()) {
                    FastExt.Desktop.showWindowMenu(null, FastExt.System.getMenu(menuId));
                    return;
                }
                var me = this;
                if (Ext.isEmpty(justParent)) {
                    justParent = false;
                }
                var treelist = Ext.getCmp("leftTreeList");
                if (!treelist) {
                    return;
                }
                var record = treelist.getStore().getNodeById(menuId);
                if (!record)
                    return false;
                var parentId = record.get("parentId");
                if (!Ext.isEmpty(parentId)) {
                    var parent_1 = treelist.getStore().getNodeById(parentId);
                    if (justParent) {
                        treelist.setSelection(parent_1);
                        parent_1.collapse();
                        return;
                    }
                    else {
                        if (parentId !== "root") {
                            parent_1.expand(false, true);
                            me.selectMenu(parentId, justParent);
                        }
                    }
                }
                treelist.setSelection(record);
                return true;
            }
            catch (e) {
                FastExt.Dialog.showException(e, "选择菜单！[system.selectMenu]");
            }
        };
        System.existMenu = function (menuId) {
            if (Ext.isEmpty(menuId)) {
                return false;
            }
            return FastExt.System.getMenu(menuId) != null;
        };
        System.getPlainMenu = function (menu, splitChar) {
            if (Ext.isEmpty(splitChar)) {
                splitChar = ">";
            }
            if (menu) {
                if (menu.parent) {
                    var storeMenuText = FastExt.System.getPlainMenu(menu.parent, splitChar);
                    if (storeMenuText) {
                        return storeMenuText + splitChar + menu.text;
                    }
                }
                else if (menu.parentId && menu.parentId.toLowerCase() !== "root") {
                    var storeMenuText = FastExt.System.getPlainMenu(this.getMenu(menu.parentId), splitChar);
                    if (storeMenuText) {
                        return storeMenuText + splitChar + menu.text;
                    }
                }
                return menu.text;
            }
            return null;
        };
        System.getPathMenu = function (menu) {
            if (menu) {
                if (menu.parent) {
                    var pathMenus = FastExt.System.getPathMenu(menu.parent);
                    if (pathMenus) {
                        pathMenus.push(menu);
                        return pathMenus;
                    }
                }
                return [menu];
            }
            return null;
        };
        System.getPlainIconMenu = function (menu, splitChar) {
            var menuArray = FastExt.System.getPathMenu(menu);
            var menuIconHtml = "<div style=\"line-height: 20px;display: flex\" >";
            for (var i = 0; i < menuArray.length; i++) {
                var targetMenu = menuArray[i];
                var itemHtml = "<img src=\"" + targetMenu.icon + "\" width=\"20px\" height=\"20px\" />" +
                    "<span style=\"margin-left: 5px;\">" + targetMenu.text + "</span> ";
                if (i != 0) {
                    itemHtml = "<span style='font-size: 12px;margin: 0 5px;color: #cccccc;' class='extIcon extArrowRight2'></span>" + itemHtml;
                }
                menuIconHtml += itemHtml;
            }
            menuIconHtml += "</div>";
            return menuIconHtml;
        };
        System.getPlainIconMenuHtmlBySVG = function (menu) {
            return "<div style=\"line-height: 20px;display: flex\" ><svg style='width: 20px;height: 20px;' class=\"svgIconFill\" aria-hidden=\"true\"><use xlink:href=\"#" + menu.iconCls + "\"></use></svg>" +
                "<span style=\"margin-left: 5px;\">" + menu.text + "</span></div> ";
        };
        System.searchMenuByEntityCode = function (entityCode) {
            var filterMenu = function (menuArray) {
                if (!menuArray) {
                    return null;
                }
                for (var i = 0; i < menuArray.length; i++) {
                    var menu = menuArray[i];
                    if (menu.method && menu.method.indexOf(entityCode) >= 0) {
                        return menu;
                    }
                    if (menu.children) {
                        var result = filterMenu(menu.children);
                        if (result) {
                            return result;
                        }
                    }
                }
                return null;
            };
            return filterMenu(this.menus);
        };
        System.searchMenusByEntityCode = function (entityCode) {
            var filterMenu = function (menuArray) {
                var menus = [];
                if (!menuArray) {
                    return null;
                }
                for (var i = 0; i < menuArray.length; i++) {
                    var menu = menuArray[i];
                    if (menu.method && menu.method.indexOf(entityCode) >= 0) {
                        menus.push(menu);
                    }
                    if (menu.children) {
                        var result = filterMenu(menu.children);
                        if (result) {
                            menus.push.apply(menus, result);
                        }
                    }
                }
                return menus;
            };
            return filterMenu(this.menus);
        };
        System.getAllMethodMenu = function (filterKey) {
            if (Ext.isEmpty(filterKey)) {
                filterKey = "";
            }
            var filterMenu = function (parentMenus, menuArray) {
                if (!parentMenus) {
                    return;
                }
                for (var i = 0; i < parentMenus.length; i++) {
                    var menu = parentMenus[i];
                    if (menu.method && menu.method.indexOf(filterKey) >= 0) {
                        menuArray.push(menu);
                    }
                    filterMenu(menu.children, menuArray);
                }
            };
            var menuArray = [];
            filterMenu(FastExt.System.menus, menuArray);
            return menuArray;
        };
        System.showTab = function (method, tabId, title, icon, activate, moveFirst, where, closable, reorderable) {
            var me = this;
            var menu = me.getMenu(tabId);
            if (!menu) {
                menu = {
                    method: method,
                    id: tabId,
                    text: title,
                    icon: icon,
                };
            }
            if (FastExt.System.isDesktopLayout()) {
                FastExt.Desktop.showWindowMenu(this, menu);
                return;
            }
            if (FastExt.System.tabPanelContainer.getActiveTab() && tabId === FastExt.System.tabPanelContainer.getActiveTab().getId()) {
                return;
            }
            if (!icon || icon.length === 0)
                icon = FastExt.Server.getIcon("icon_function.svg");
            if (Ext.isEmpty(moveFirst)) {
                moveFirst = true;
            }
            if (Ext.isEmpty(activate)) {
                activate = true;
            }
            var changeIcon = function (targetTab, selected) {
                if (targetTab) {
                    var menu_1 = me.getMenu(targetTab.getId());
                    if (menu_1) {
                        var btnIconEl = Ext.get(targetTab.tabBtnId + "-btnIconEl");
                        if (btnIconEl) {
                            var color = menu_1.color;
                            if (selected) {
                                color = FastExt.Color.toColor(me["theme-color"].value);
                            }
                            btnIconEl.setStyle("background-image", "url(" + FastExt.Server.getIcon(menu_1.iconName, color) + ")");
                        }
                    }
                }
            };
            var currTab = Ext.getCmp(tabId);
            if (!currTab) {
                var tooltip = title;
                if (menu) {
                    tooltip = FastExt.System.getPlainIconMenu(menu, " >> ");
                }
                currTab = FastExt.System.tabPanelContainer.add({
                    xtype: 'panel',
                    id: tabId,
                    code: tabId,
                    icon: icon,
                    layout: 'fit',
                    title: title,
                    border: 0,
                    menuId: tabId,
                    menuContainer: true,
                    closable: FastExt.Base.toBool(closable, true),
                    reorderable: FastExt.Base.toBool(reorderable, true),
                    methodInvoked: false,
                    method: method,
                    where: where,
                    items: [],
                    tabBtnId: null,
                    tabConfig: {
                        help: tooltip,
                        tabId: tabId,
                        helpType: FastEnum.HelpEnumType.mouse_in_out,
                        helpAnchor: FastEnum.TooltipAnchorType.top,
                        helpMaxWidth: parseInt((document.body.clientWidth * 0.8).toFixed(0)),
                        listeners: {
                            destroy: function (obj) {
                                if (obj.helpTip) {
                                    obj.helpTip.close();
                                }
                            }
                        },
                        handler: function (clickFrom) {
                            if (clickFrom && clickFrom.xtype === "menuitem") {
                                FastExt.System.selectTab(clickFrom.tabId, false, true);
                            }
                        }
                    },
                    doFixed: function () {
                        var me = this;
                        me.tab.setClosable(!me.tab.closable);
                        if (!me.tab.closable) {
                            var cmp = FastExt.System.findLastTag();
                            if (cmp) {
                                FastExt.System.tabPanelContainer.moveAfter(me, cmp);
                            }
                            me.reorderable = me.tab.reorderable = false;
                        }
                        else {
                            me.reorderable = me.tab.reorderable = true;
                            var cmp = FastExt.System.findLastTag();
                            if (cmp) {
                                FastExt.System.tabPanelContainer.moveAfter(me, cmp);
                            }
                        }
                        if (Ext.isFunction(FastExt.System.tabPanelContainer.recordTab)) {
                            FastExt.System.tabPanelContainer.recordTab();
                        }
                    },
                    doCopyUrl: function () {
                        var tab = this;
                        FastExt.Base.copyToBoard(FastExt.System.baseUrl + "#/" + tab.title + "/" + tab.id);
                        FastExt.Dialog.toast("复制成功！");
                    },
                    anchorLeftMenu: function () {
                        var tab = this;
                        FastExt.System.selectMenu(tab.id);
                    },
                    openInWindow: function () {
                        var tab = this;
                        var winWidth = parseInt((document.body.clientWidth * 0.8).toFixed(0));
                        var winHeight = parseInt((document.body.clientHeight * 0.9).toFixed(0));
                        var win = Ext.create('Ext.window.Window', {
                            title: tab.title,
                            height: winHeight,
                            width: winWidth,
                            minHeight: 500,
                            minWidth: 800,
                            icon: tab.icon,
                            layout: 'fit',
                            resizable: true,
                            constrain: true,
                            maximizable: true,
                            listeners: {
                                show: function (win) {
                                    win.shown = true;
                                    FastExt.System.asyncMethod(tab.method).then(function (obj) {
                                        if (obj == null) {
                                            return;
                                        }
                                        var entityOwner = obj.down("[entityList=true]");
                                        if (entityOwner) {
                                            entityOwner.where = FastExt.Json.mergeJson(tab.where, entityOwner.where);
                                            entityOwner.code = $.md5(tab.id);
                                            entityOwner.buildCodeText = tab.title;
                                        }
                                        win.add(obj);
                                    });
                                }
                            }
                        });
                        win.show();
                    },
                    listeners: {
                        deactivate: function (tab) {
                            if (!tab || tab.destroyed || tab.destroying) {
                                return;
                            }
                            if (!FastExt.System.silenceGlobalSave) {
                                try {
                                    changeIcon(tab, false);
                                    var entityOwner = tab.down("[entityList=true]");
                                    if (entityOwner && entityOwner.onTabDeactivate) {
                                        entityOwner.onTabDeactivate(tab);
                                    }
                                }
                                catch (e) {
                                    console.error(e);
                                }
                            }
                        },
                        activate: function (tab) {
                            if (!tab) {
                                return;
                            }
                            me.lastTabId = tab.id;
                            var doShow = function () {
                                if (!FastExt.System.silenceGlobalSave) {
                                    if (me.existMenu(tab.id)) {
                                        me.selectMenu(tab.id, false);
                                    }
                                    changeIcon(tab, true);
                                }
                                if (!tab.methodInvoked || FastExt.System.silenceGlobalSave) {
                                    me.asyncMethod(method).then(function (obj) {
                                        try {
                                            if (!obj) {
                                                return;
                                            }
                                            tab.methodInvoked = true;
                                            var entityOwner = obj.down("[entityList=true]");
                                            if (entityOwner) {
                                                entityOwner.where = FastExt.Json.mergeJson(tab.where, entityOwner.where);
                                                entityOwner.code = $.md5(tab.id);
                                                entityOwner.buildCodeText = tab.title;
                                            }
                                            tab.add(obj);
                                        }
                                        catch (e) {
                                            console.error(e);
                                        }
                                    });
                                }
                                else {
                                    var entityOwner = tab.down("[entityList=true]");
                                    if (entityOwner && entityOwner.onTabActivate) {
                                        entityOwner.onTabActivate(tab);
                                    }
                                    if (entityOwner && entityOwner.hasListener("aftertabactive")) {
                                        if (!entityOwner.fireEvent("aftertabactive")) {
                                            return;
                                        }
                                    }
                                }
                                if (!FastExt.System.silenceGlobalSave) {
                                    try {
                                        var href = window.location.href;
                                        if (href.indexOf("#") > 0) {
                                            var menuId = href.substring(href.lastIndexOf("/") + 1);
                                            if (tab.id === menuId) {
                                                return;
                                            }
                                        }
                                        FastExt.System.pushLocationHistory({ text: tab.title, id: tab.id });
                                    }
                                    catch (e) {
                                        console.error(e);
                                    }
                                    me.recordTab();
                                }
                            };
                            FastExt.System.changeTabTheme(tab.id, doShow);
                        },
                        afterlayout: function (tab, container, pos) {
                            if (!FastExt.System.tabPanelContainer) {
                                return;
                            }
                            if (!FastExt.System.silenceGlobalSave) {
                                try {
                                    Ext.get(this.tabBtnId).dom.ondblclick = function () {
                                        var currShowTabId = tab.getId();
                                        FastExt.System.tabPanelContainer.items.each(function (obj, index) {
                                            if (index !== 0 && obj.id === currShowTabId) {
                                                if (obj.closable && Ext.isFunction(obj.close)) {
                                                    obj.close();
                                                }
                                            }
                                        });
                                    };
                                    if (FastExt.System.tabPanelContainer.getActiveTab() && FastExt.System.tabPanelContainer.getActiveTab().getId() === tab.getId()) {
                                        changeIcon(tab, true);
                                    }
                                }
                                catch (e) {
                                }
                            }
                        },
                        destroy: function (obj, eOpts) {
                            if (!FastExt.System.silenceGlobalSave) {
                                me.recordTab();
                            }
                        }
                    },
                    initEvents: function () {
                        this.tabBtnId = this.getEl().getAttribute("aria-labelledby");
                    }
                });
            }
            if (activate) {
                if (FastExt.System.silenceGlobalSave) {
                    FastExt.System.tabPanelContainer.setActiveTab(currTab);
                    return;
                }
                if (!FastExt.System.tabPanelContainer.getActiveTab() || FastExt.System.tabPanelContainer.getActiveTab().getId() !== currTab.getId()) {
                    if (moveFirst) {
                        var cmp = me.findLastTag();
                        if (cmp) {
                            FastExt.System.tabPanelContainer.moveAfter(currTab, cmp);
                        }
                    }
                    FastExt.System.tabPanelContainer.setActiveTab(currTab);
                }
            }
        };
        System.changeTabTheme = function (menuId, callBack) {
            try {
                var menu = FastExt.System.getMenu(menuId);
                if (menu && menu.baseCls) {
                    var tabTheme = FastExt.System.getExt("tab-theme").value;
                    if (!FastExt.Base.toBool(tabTheme, false)) {
                        return;
                    }
                    FastExt.System.clearAllTabTheme();
                    FastExt.System.getBodyContainer().setUserCls(menu.baseCls);
                }
                else {
                    FastExt.System.clearAllTabTheme();
                }
            }
            catch (e) {
                console.error(e);
            }
            finally {
                callBack();
            }
        };
        System.clearAllTabTheme = function () {
            FastExt.System.getBodyContainer().setUserCls("");
        };
        System.closeAllTab = function () {
            if (FastExt.System.isDesktopLayout()) {
                FastExt.Desktop.closeAllDesktopWin();
                return;
            }
            if (FastExt.System.tabPanelContainer) {
                FastExt.System.tabPanelContainer.items.each(function (item, index) {
                    if (item.closable) {
                        item.close();
                    }
                });
            }
        };
        System.addTab = function (component, id, title, icon) {
            var me = this;
            var currTab = Ext.getCmp(id);
            if (!currTab) {
                currTab = me.tabPanelContainer.add({
                    title: title,
                    xtype: 'container',
                    id: id,
                    code: id,
                    icon: icon,
                    border: 0,
                    menuContainer: true,
                    closable: true,
                    reorderable: true,
                    layout: 'fit',
                    items: [component]
                });
            }
            me.tabPanelContainer.setActiveTab(currTab);
        };
        System.getMenuIdFromLocation = function () {
            var href = decodeURIComponent(window.location.href);
            if (href.indexOf("#") > 0) {
                return href.substring(href.lastIndexOf("/") + 1);
            }
            return null;
        };
        System.pushLocationHistory = function (menu) {
            var menuIdFromLocation = FastExt.System.getMenuIdFromLocation();
            if (menuIdFromLocation && menuIdFromLocation === menu.id) {
                return;
            }
            var state = {
                title: menu.text,
                url: menu.id ? FastExt.System.baseUrl + "#/" + menu.text + "/" + menu.id : FastExt.System.baseUrl,
            };
            window.history.pushState(state, menu.text, state.url);
        };
        System.modifyPassword = function (obj) {
            var me = this;
            var loginPanel = Ext.create('Ext.form.FormPanel', {
                url: 'controller/modifyPassword',
                method: 'POST',
                fileUpload: true,
                border: 0,
                width: '100%',
                layout: "anchor",
                region: 'center',
                bodyStyle: {},
                items: [
                    {
                        xtype: 'textfield',
                        fieldLabel: '当前密码',
                        labelAlign: 'right',
                        labelWidth: 60,
                        margin: '10 10 10 10',
                        name: 'managerPassword',
                        allowBlank: false,
                        inputType: 'password',
                        blankText: '请输入用户当前密码',
                        anchor: "100%"
                    },
                    {
                        xtype: 'textfield',
                        fieldLabel: '新密码',
                        labelAlign: 'right',
                        labelWidth: 60,
                        margin: '10 10 10 10',
                        name: 'newPassword',
                        allowBlank: false,
                        inputType: 'password',
                        blankText: '请输入用户新密码',
                        anchor: "100%"
                    },
                    {
                        xtype: 'textfield',
                        fieldLabel: '确认密码',
                        labelAlign: 'right',
                        labelWidth: 60,
                        margin: '10 10 10 10',
                        name: 'reNewPassword',
                        allowBlank: false,
                        inputType: 'password',
                        blankText: '请确认密码',
                        anchor: "100%"
                    },
                    {
                        xtype: 'hiddenfield',
                        name: 'managerId',
                        value: me.manager.managerId
                    },
                    {
                        xtype: 'fieldcontainer',
                        labelWidth: 0,
                        layout: 'column',
                        items: [{
                                xtype: 'button',
                                text: '立即修改',
                                margin: '10 10 10 5',
                                iconCls: 'extIcon extOk',
                                columnWidth: 1,
                                handler: function () {
                                    doSubmit();
                                }
                            }]
                    }
                ],
                listeners: {
                    'render': function (text) {
                        try {
                            new Ext.util.KeyMap({
                                target: text.getEl(),
                                key: 13,
                                fn: doSubmit,
                                scope: Ext.getBody()
                            });
                        }
                        catch (e) {
                            console.error(e);
                        }
                    }
                }
            });
            var doSubmit = function () {
                var form = loginPanel.form;
                if (form.isValid()) {
                    form.submit({
                        waitMsg: '正在修改中……',
                        success: function (form, action) {
                            FastExt.Dialog.toast(action.result.message);
                            win.close();
                            if (action.result.success) {
                                Ext.Msg.alert("系统提醒", "您当前的密码已被修改，请您重新登录！", function () {
                                    FastExt.Server.logout();
                                });
                            }
                        },
                        failure: function (form, action) {
                            if (action.result) {
                                Ext.Msg.alert('系统提醒', action.result.message);
                            }
                        }
                    });
                }
            };
            var win = Ext.create('Ext.window.Window', {
                title: '修改管理员登录密码',
                height: 250,
                iconCls: 'extIcon extResetPassword redColor',
                width: 400,
                layout: 'border',
                resizable: false,
                maximizable: false,
                animateTarget: obj,
                constrain: true,
                items: [loginPanel],
                modal: true
            });
            win.show();
        };
        System.getEntity = function (entityCode) {
            var me = this;
            var entities = me["entities"];
            for (var i = 0; i < entities.length; i++) {
                var entity = entities[i];
                if (entity.entityCode === entityCode) {
                    return entity;
                }
            }
            return null;
        };
        System.showMenuColumns = function (obj, checked) {
            return new Ext.Promise(function (resolve, reject) {
                var dataStore = Ext.create('Ext.data.TreeStore', {
                    proxy: {
                        type: 'ajax',
                        url: 'showMenuColumn',
                        actionMethods: {
                            create: 'POST',
                            read: 'POST',
                            update: 'POST',
                            destroy: 'POST'
                        },
                        listeners: {
                            exception: function (obj, request, operation, eOpts) {
                                var data = eval("(" + request.responseText + ")");
                                if (!data.success) {
                                    FastExt.Dialog.showAlert("数据获取失败", data.message, null, true, true);
                                }
                            }
                        },
                        reader: {
                            type: 'json'
                        }
                    },
                    root: {
                        expanded: true
                    },
                    listeners: {
                        load: function (obj, records, successful) {
                        },
                        beforeload: function (store, operation) {
                            Ext.apply(store.proxy.extraParams, {
                                "checked": checked
                            });
                        }
                    }
                });
                var treePanel = Ext.create('Ext.tree.Panel', {
                    store: dataStore,
                    rootVisible: false,
                    bufferedRenderer: false,
                    animate: true,
                    containerScroll: true,
                    autoScroll: true,
                    lastCheckNode: null,
                    viewConfig: {
                        loadMask: {
                            msg: '加载功能菜单中，请稍后……'
                        }
                    },
                    listeners: {
                        checkchange: function (currNode, checked, e, eOpts) {
                            if (checked) {
                                currNode.bubble(function (parentNode) {
                                    parentNode.set('checked', true);
                                });
                                currNode.cascadeBy(function (node) {
                                    node.set('checked', true);
                                });
                            }
                            else {
                                currNode.cascadeBy(function (node) {
                                    node.set('checked', false);
                                });
                            }
                        }
                    }
                });
                var win = Ext.create('Ext.window.Window', {
                    title: '搜索链配置',
                    width: 400,
                    height: 470,
                    layout: 'fit',
                    iconCls: 'extIcon extLink',
                    resizable: true,
                    animateTarget: obj,
                    maximizable: true,
                    constrain: true,
                    items: [treePanel],
                    modal: true,
                    buttons: [
                        {
                            text: '重置',
                            iconCls: 'extIcon extReset',
                            handler: function () {
                                dataStore.reload();
                            }
                        },
                        {
                            text: '确定',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                var checkedArray = treePanel.getChecked();
                                var treeData = [];
                                var menuIds = "";
                                for (var i = 0; i < checkedArray.length; i++) {
                                    if (checkedArray[i].isLeaf()) {
                                        var data = {};
                                        data.text = checkedArray[i].data.text;
                                        data.id = checkedArray[i].data.id;
                                        data.dataIndex = checkedArray[i].data.dataIndex;
                                        data.parentId = checkedArray[i].data.parentId;
                                        var findRecord = treePanel.getStore().findNode("id", data.parentId, 0, false, false, true);
                                        if (findRecord) {
                                            var parent_2 = {};
                                            var parentData = findRecord.data;
                                            parent_2.text = parentData.text;
                                            parent_2.id = parentData.id;
                                            parent_2.method = parentData.method;
                                            parent_2.icon = parentData.icon;
                                            data.parent = parent_2;
                                            treeData.push(data);
                                        }
                                    }
                                    menuIds += "," + checkedArray[i].data.id;
                                }
                                resolve({ checked: menuIds, columns: treeData });
                                win.close();
                            }
                        }
                    ]
                });
                win.show();
            });
        };
        System.showPowerMenus = function (obj, checked, parent) {
            return new Ext.Promise(function (resolve, reject) {
                var dataStore = Ext.create('Ext.data.TreeStore', {
                    proxy: {
                        type: 'ajax',
                        url: 'showPowerMenus',
                        actionMethods: {
                            create: 'POST',
                            read: 'POST',
                            update: 'POST',
                            destroy: 'POST'
                        },
                        listeners: {
                            exception: function (obj, request, operation, eOpts) {
                                var data = eval("(" + request.responseText + ")");
                                if (!data.success) {
                                    FastExt.Dialog.showAlert("数据获取失败", data.message, null, true, true);
                                }
                            }
                        },
                        reader: {
                            type: 'json'
                        }
                    },
                    root: {
                        expanded: true
                    },
                    listeners: {
                        load: function (obj, records, successful) {
                        },
                        beforeload: function (store, operation) {
                            Ext.apply(store.proxy.extraParams, {
                                "checked": checked,
                                "parent": parent
                            });
                        }
                    }
                });
                var treePanel = Ext.create('Ext.tree.Panel', {
                    store: dataStore,
                    rootVisible: false,
                    bufferedRenderer: false,
                    animate: true,
                    containerScroll: true,
                    autoScroll: true,
                    viewConfig: {
                        loadMask: {
                            msg: '加载功能菜单中，请稍后……'
                        }
                    },
                    listeners: {
                        checkchange: function (currNode, checked, e, eOpts) {
                            if (checked) {
                                currNode.bubble(function (parentNode) {
                                    parentNode.set('checked', true);
                                });
                                currNode.cascadeBy(function (node) {
                                    node.set('checked', true);
                                });
                            }
                            else {
                                currNode.cascadeBy(function (node) {
                                    node.set('checked', false);
                                });
                            }
                        }
                    }
                });
                var winWidth = parseInt((document.body.clientWidth * 0.5).toFixed(0));
                var winHeight = parseInt((document.body.clientHeight * 0.8).toFixed(0));
                var win = Ext.create('Ext.window.Window', {
                    title: '权限配置（选择功能菜单）',
                    height: winHeight,
                    width: winWidth,
                    minHeight: 400,
                    minWidth: 470,
                    layout: 'fit',
                    iconCls: 'extIcon extSelect',
                    resizable: true,
                    animateTarget: obj,
                    maximizable: true,
                    constrain: true,
                    items: [treePanel],
                    modal: true,
                    buttons: [{
                            text: '重置',
                            iconCls: 'extIcon extReset',
                            handler: function () {
                                dataStore.reload();
                            }
                        }, {
                            text: '确定',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                var checkedArray = treePanel.getChecked();
                                var menuIds = "";
                                for (var i = 0; i < checkedArray.length; i++) {
                                    menuIds += "," + checkedArray[i].data.id;
                                }
                                resolve(menuIds);
                                win.close();
                            }
                        }]
                });
                win.show();
            });
        };
        System.showPowerExt = function (obj, menuPower, extPower, parentExtPower) {
            return new Ext.Promise(function (resolve, reject) {
                window["getMenuPower"] = function () {
                    return menuPower;
                };
                window["getExtPower"] = function () {
                    return extPower;
                };
                window["getParentExtPower"] = function () {
                    return parentExtPower;
                };
                window["close"] = function () {
                    Ext.getCmp("ExtPowerWindow").close();
                };
                var winWidth = parseInt((document.body.clientWidth * 0.5).toFixed(0));
                var winHeight = parseInt((document.body.clientHeight * 0.8).toFixed(0));
                var win = Ext.create('Ext.window.Window', {
                    id: "ExtPowerWindow",
                    title: '配置界面权限（在组件上右击鼠标进行编辑权限）',
                    iconCls: 'extIcon extPower',
                    layout: 'fit',
                    resizable: false,
                    maximized: true,
                    fixed: true,
                    draggable: false,
                    width: winWidth,
                    height: winHeight,
                    listeners: {
                        show: function (obj) {
                            obj.update("<iframe name='extPowerFrame' " +
                                " src='power?managerId=0' width='100%' height='100%' frameborder='0' scrolling='no' />");
                        }
                    },
                    buttons: [
                        {
                            text: '保存权限配置',
                            iconCls: 'extIcon extSave whiteColor',
                            handler: function () {
                                resolve(window["extPowerFrame"].window.getExtPower());
                                win.close();
                            }
                        }
                    ]
                });
                win.show();
            });
        };
        System.showList = function (menuId, entityCode, where, config) {
            if (!Ext.isString(menuId)) {
                throw "操作失败！参数menuId必须为String类型！请检查调用showList方法的相关功能！";
            }
            if (!Ext.isString(entityCode)) {
                throw "操作失败！参数entityCode必须为String类型！请检查调用showList方法的相关功能！";
            }
            if (!Ext.isEmpty(where)) {
                if (!Ext.isObject(where)) {
                    throw "操作失败！参数where必须为Object对象类型！请检查调用showList方法的相关功能！";
                }
            }
            var entity = FastExt.System.getEntity(entityCode);
            if (!entity) {
                throw "操作失败！未获取到 '" + entityCode + "' 实体类！请检查实体类关联的表格是否存在！";
            }
            if (!entity.js) {
                throw "操作失败！未获取到 '" + entityCode + "' JS对象！";
            }
            if (!where) {
                where = {};
            }
            var entityJsObj = eval("new " + entityCode + "()");
            entityJsObj.menu = FastExt.System.getMenu(menuId);
            if (config) {
                return entityJsObj.getList(where, config);
            }
            return entityJsObj.getList(where);
        };
        System.getWelcomePanel = function () {
            FastExt.System.welcomeLeftPanels.push(FastExt.System.getSystemOperate(true));
            FastExt.System.welcomeLeftPanels.push(FastExt.System.getSystemWaitNotice(true));
            var accordionPanel = Ext.create('Ext.panel.Panel', {
                layout: {
                    type: 'accordion'
                },
                region: 'center',
                border: 0,
                flex: 0.6,
                items: FastExt.System.welcomeLeftPanels
            });
            if (FastExt.System.isSuperRole()) {
                FastExt.System.welcomeRightPanels.push(FastExt.System.getSystemVersion(true));
                FastExt.System.welcomeRightPanels.push(FastExt.System.getSystemConfig(true));
                FastExt.System.welcomeRightPanels.push(FastExt.System.getSystemMonitor(true));
            }
            var rightPanel = Ext.create('Ext.panel.Panel', {
                layout: 'accordion',
                region: 'east',
                border: 0,
                flex: 0.4,
                collapsed: false,
                split: true,
                subtitle: '系统右侧面板',
                items: FastExt.System.welcomeRightPanels
            });
            var items = [accordionPanel];
            if (FastExt.System.welcomeRightPanels.length > 0) {
                items.push(rightPanel);
            }
            if (FastExt.Listeners.onInitSystemWelcomeItems) {
                FastExt.Listeners.onInitSystemWelcomeItems(items);
            }
            if (!FastExt.Power.isPower()) {
                FastExt.System.startCheckSystemWait(true);
            }
            return Ext.create('Ext.panel.Panel', {
                layout: 'border',
                region: 'center',
                border: 0,
                items: items
            });
        };
        System.getSystemOperate = function (header) {
            var dataStoreTSystemOperatesModel = Ext.create('Ext.data.Store', {
                autoLoad: false,
                fields: [],
                id: 'SystemLogStore',
                idProperty: 'operateId',
                pageSize: 50,
                proxy: {
                    type: 'ajax',
                    url: 'entity/list',
                    actionMethods: {
                        create: 'POST',
                        read: 'POST',
                        update: 'POST',
                        destroy: 'POST'
                    },
                    reader: {
                        type: 'json',
                        root: 'list',
                        totalProperty: 'totalRow'
                    }
                }
            });
            var pagingtoolbar = Ext.create('Ext.toolbar.Paging', {
                store: dataStoreTSystemOperatesModel,
                dock: 'bottom',
                border: 0,
                overflowHandler: 'scroller',
                displayInfo: true
            });
            var dataGridTSystemOperatesModel = Ext.create('Ext.grid.Panel', {
                region: 'center',
                border: 0,
                power: true,
                multiColumnSort: true,
                iconCls: header ? 'extIcon extLog' : null,
                columnLines: true,
                title: header ? '系统操作日志' : null,
                hideHeaders: true,
                dataList: true,
                store: dataStoreTSystemOperatesModel,
                columns: [
                    {
                        header: '操作类型',
                        dataIndex: 'systemLogType',
                        align: 'center',
                        width: 120
                    },
                    {
                        header: '操作介绍',
                        dataIndex: 'systemLogContent',
                        align: 'center',
                        flex: 1
                    },
                    {
                        header: '操作时间',
                        dataIndex: 'systemLogDateTime',
                        width: 160,
                        align: 'center',
                        rendererFunction: "renders.dateFormat('Y-m-d H:i:s')"
                    }, {
                        header: '操作',
                        dataIndex: 'systemLogId',
                        width: 100,
                        align: 'center',
                        renderer: function (val) {
                            return "<a href=\"javascript:FastExt.System.showSystemLogDetails(" + val + ");\">查看详情</a>";
                        }
                    }
                ],
                dockedItems: [pagingtoolbar],
                viewConfig: {
                    enableTextSelection: true,
                    loadMask: {
                        msg: '正在为您在加载数据…'
                    }
                }
            });
            pagingtoolbar.insert(pagingtoolbar.items.getCount() - 2, {
                xtype: 'button',
                iconCls: 'extIcon extSearch',
                tooltip: '搜索日志',
                handler: function () {
                    dataGridTSystemOperatesModel.add(FastExt.System.showSearchSysOperate(dataGridTSystemOperatesModel, this));
                }
            });
            pagingtoolbar.insert(pagingtoolbar.items.getCount() - 3, "-");
            dataStoreTSystemOperatesModel.on('beforeload', function (store, options) {
                var jsonData = {};
                if (dataGridTSystemOperatesModel.whereSearchParams != null) {
                    jsonData = dataGridTSystemOperatesModel.whereSearchParams;
                }
                Ext.apply(store.proxy.extraParams, jsonData);
                Ext.apply(store.proxy.extraParams, {
                    "entityCode": "ExtSystemLogEntity",
                    "limit": dataStoreTSystemOperatesModel.pageSize
                });
            });
            dataStoreTSystemOperatesModel.loadPage(1);
            return dataGridTSystemOperatesModel;
        };
        System.showSystemLogDetails = function (id) {
            var store = Ext.getStore("SystemLogStore");
            var record = store.findRecord("systemLogId", id, 0, false, false, true);
            var buildData = function (data) {
                var array = [];
                var names = {
                    "a__managerName": "管理员",
                    "systemLogType": "操作类型",
                    "systemLogContent": "操作详情",
                    "systemLogIp": "来自IP",
                    "systemLogClient": "浏览器信息",
                    "systemSendData": "提交的数据",
                    "systemResultData": "返回的数据",
                    "systemLogDateTime": "操作时间"
                };
                for (var key in names) {
                    array.push({
                        "name": names[key],
                        "key": key,
                        "value": data[key]
                    });
                }
                return array;
            };
            var grid = FastExt.Grid.createDetailsGrid(buildData(record.getData()), {
                region: 'center',
                power: false,
                hideHeaders: true
            }, {
                width: 100,
                flex: 0,
            }, {
                align: 'left',
                renderer: function (val, m, record) {
                    m.style = 'overflow:auto;padding: 3px 6px;text-overflow: ellipsis;white-space:normal !important;line-height:20px;word-break:break-word; ';
                    var attr = record.get("key");
                    if (attr === "systemLogIp") {
                        return "<a href='https://www.baidu.com/s?wd=" + val + "' target='_blank'>" + val + "</a>";
                    }
                    return val;
                },
                listeners: {
                    dblclick: function (grid, obj, celNo, obj1, obj2, rowNo, e) {
                        var currRecord = grid.getStore().getAt(celNo);
                        var attr = currRecord.get("key");
                        if (attr === "systemSendData" || attr === "systemResultData") {
                            FastExt.Dialog.showFormatJson(obj, currRecord.get('value'));
                        }
                    }
                }
            });
            var winWidth = parseInt((document.body.clientWidth * 0.5).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                title: "日志详情",
                height: winHeight,
                iconCls: 'extIcon extDetails',
                width: winWidth,
                layout: 'border',
                resizable: true,
                maximizable: true,
                items: [grid],
                modal: true,
                constrain: true,
            });
            win.show();
        };
        System.showSearchSysOperate = function (grid, obj) {
            if (!grid.searchWin) {
                var defaultValue = grid.whereSearchParams ? grid.whereSearchParams : {};
                var searchForm_1 = Ext.create('Ext.form.FormPanel', {
                    bodyPadding: 5,
                    region: 'center',
                    autoScroll: true,
                    layout: "column",
                    defaults: {
                        labelWidth: 100,
                        margin: '5 5 5 5',
                        labelAlign: 'right',
                        emptyText: '可输入…'
                    },
                    items: [
                        {
                            fieldLabel: '关键字',
                            columnWidth: 1,
                            name: "where['^search']",
                            xtype: 'textfield',
                            value: defaultValue["where['^search']"],
                        }, {
                            fieldLabel: '开始时间',
                            columnWidth: 0.5,
                            name: "where['systemLogDateTime>=']",
                            xtype: 'datefield',
                            format: 'Y-m-d',
                            value: defaultValue["where['systemLogDateTime>=']"],
                        }, {
                            fieldLabel: '结束时间',
                            columnWidth: 0.5,
                            name: "where['systemLogDateTime<=']",
                            xtype: 'datefield',
                            format: 'Y-m-d',
                            value: defaultValue["where['systemLogDateTime<=']"],
                        },
                        {
                            fieldLabel: '操作用户',
                            columnWidth: 0.5,
                            name: "where['a__managerName%?%']",
                            xtype: 'textfield',
                            value: defaultValue["where['a__managerName%?%']"],
                        },
                        {
                            fieldLabel: '操作类型',
                            columnWidth: 0.5,
                            name: "where['systemLogType%?%']",
                            xtype: 'textfield',
                            value: defaultValue["where['systemLogType%?%']"],
                        }
                    ]
                });
                var title = obj.text;
                if (Ext.isEmpty(title)) {
                    title = "搜索系统日志";
                }
                grid.searchWin = Ext.create('Ext.window.Window', {
                    title: title,
                    width: 500,
                    minWidth: 500,
                    minHeight: 110,
                    height: 250,
                    layout: 'border',
                    constrain: true,
                    iconCls: 'extIcon extSearch',
                    resizable: true,
                    collapsible: true,
                    animateTarget: obj,
                    items: [searchForm_1],
                    listeners: {
                        close: function (panel, eOpts) {
                            grid.searchWin = null;
                        }
                    },
                    buttons: [{
                            text: '重置',
                            iconCls: 'extIcon extReset',
                            handler: function () {
                                searchForm_1.reset();
                                grid.whereSearchParams = searchForm_1.getValues();
                                grid.getStore().loadPage(1);
                            }
                        },
                        {
                            text: '搜索',
                            iconCls: 'extIcon extSearch',
                            handler: function () {
                                grid.whereSearchParams = searchForm_1.getValues();
                                grid.getStore().loadPage(1);
                            }
                        }]
                });
            }
            else {
                FastExt.Component.shakeComment(grid.searchWin);
            }
            grid.searchWin.show();
            return grid.searchWin;
        };
        System.getSystemWaitNotice = function (header) {
            var entity = eval("new ExtSystemNoticeEntity()");
            entity.menu = {
                text: "系统问题上报"
            };
            var dataStoreNotice = Ext.create('Ext.data.Store', {
                autoLoad: false,
                fields: [],
                id: "SystemWaitNoticeStore",
                entity: entity,
                pageSize: 50,
                proxy: {
                    type: 'ajax',
                    url: 'entity/list',
                    actionMethods: {
                        create: 'POST',
                        read: 'POST',
                        update: 'POST',
                        destroy: 'POST'
                    },
                    reader: {
                        type: 'json',
                        root: 'list',
                        totalProperty: 'totalRow'
                    }
                }
            });
            var pagingtoolbar = Ext.create('Ext.toolbar.Paging', {
                store: dataStoreNotice,
                dock: 'bottom',
                border: 0,
                overflowHandler: 'scroller',
                displayInfo: true
            });
            var dataGridNotice = Ext.create('Ext.grid.Panel', {
                region: 'center',
                border: 0,
                power: true,
                multiColumnSort: true,
                iconCls: header ? 'extIcon extTip' : null,
                columnLines: true,
                title: header ? '系统待办事项' : null,
                hideHeaders: true,
                dataList: true,
                store: dataStoreNotice,
                columns: [
                    {
                        header: '待办标题',
                        dataIndex: 'noticeTitle',
                        align: 'center',
                        width: 200
                    },
                    {
                        header: '处理人',
                        dataIndex: 'a__managerName',
                        align: 'center',
                        flex: 1
                    },
                    {
                        header: '待办内容',
                        dataIndex: 'noticeStateStr',
                        align: 'center',
                        width: 120,
                    },
                    {
                        header: '录入时间',
                        dataIndex: 'noticeDateTime',
                        width: 200,
                        align: 'center'
                    }
                ],
                plugins: [{
                        ptype: 'rowexpander',
                        rowBodyTpl: new Ext.XTemplate('<p>【{noticeTitle}】{noticeContent}</p>', "<p>" +
                            "<tpl if='noticeState==0' >" +
                            "<a id='aNoticeAction{noticeId}' href='javascript:FastExt.System.setDoneSystemWait({noticeId});'>标记为已读</a>&nbsp;&nbsp;&nbsp;&nbsp;" +
                            "</tpl>" +
                            "<tpl if='noticeAction' >" +
                            "<a href=\"javascript:{noticeAction};\">立即前往</a>" +
                            "</tpl>" +
                            "</p>")
                    }],
                dockedItems: [pagingtoolbar],
                viewConfig: {
                    enableTextSelection: true,
                    loadMask: {
                        msg: '正在为您在加载数据…'
                    }
                }
            });
            dataStoreNotice.on('beforeload', function (store, options) {
                var jsonData = {};
                if (dataGridNotice.searchForm != null) {
                    jsonData = dataGridNotice.searchForm.getValues();
                }
                Ext.apply(store.proxy.extraParams, jsonData);
                Ext.apply(store.proxy.extraParams, {
                    "entityCode": "ExtSystemNoticeEntity",
                    "limit": dataStoreNotice.pageSize
                });
            });
            dataStoreNotice.loadPage(1);
            return dataGridNotice;
        };
        System.setDoneSystemWait = function (noticeId) {
            FastExt.Dialog.showWait("正在标记中，请稍后……");
            FastExt.Server.doneWaitNotice(noticeId, function (success, message) {
                FastExt.Dialog.hideWait();
                if (success) {
                    FastExt.Dialog.toast(message);
                    $("#aNoticeAction" + noticeId).remove();
                    var winItem = Ext.getCmp("bNoticeAction" + noticeId);
                    if (winItem) {
                        Ext.getCmp("bNoticeAction" + noticeId).destroy();
                        var noticeWin = Ext.getCmp("NoticeAlertWindow");
                        if (noticeWin) {
                            var $type = $("[type='bNoticeAction']");
                            if ($type.length === 0) {
                                noticeWin.close();
                            }
                        }
                    }
                }
                else {
                    FastExt.Dialog.showAlert("系统提醒", message);
                }
            });
        };
        System.startCheckSystemWait = function (justRefresh) {
            window.clearTimeout(FastExt.Server.checkWaitNoticeTimer);
            var params = {};
            if (!justRefresh) {
                var $type = $("[type='bNoticeAction']");
                for (var i = 0; i < $type.length; i++) {
                    params["noticeId_" + i] = $($type[i]).attr("data-id");
                }
            }
            if (FastExt.System.silenceGlobalSave) {
                if (FastExt.Base.toBool(FastExt.System["noticeListener"], false)) {
                    FastExt.Server.checkWaitNoticeTimer = setTimeout(function () {
                        FastExt.System.startCheckSystemWait();
                    }, 3000);
                }
                return;
            }
            FastExt.Server.checkWaitNotice(params, function (success, data) {
                try {
                    if (success) {
                        var noticeWin_1 = Ext.getCmp("NoticeAlertWindow");
                        if (data.length <= 0 && Object.keys(params).length === 0) {
                            if (noticeWin_1) {
                                noticeWin_1.close();
                            }
                            return;
                        }
                        var winItems = [];
                        var needRefresh = false;
                        for (var i = 0; i < data.length; i++) {
                            var notice = data[i];
                            var noticePanel = {
                                xtype: 'fieldset',
                                margin: '10',
                                id: 'bNoticeAction' + notice.noticeId,
                                style: {
                                    background: '#ffffff'
                                },
                                columnWidth: 1,
                                viewModel: {
                                    data: notice
                                },
                                defaults: {
                                    anchor: '100%',
                                    height: 'auto',
                                    margin: '0',
                                    labelAlign: 'right',
                                    labelWidth: 0,
                                    columnWidth: 1,
                                    disabled: true,
                                    disabledCls: ".x-item-disabled-normal"
                                },
                                items: [
                                    {
                                        xtype: 'displayfield',
                                        bind: '{noticeContent}',
                                        renderer: function (val, field) {
                                            var viewData = field.ownerCt.viewModel.data;
                                            var html = "<b style='display: block;font-size: 16px;margin-bottom: 10px;'>" + viewData.noticeTitle + "</b>";
                                            html += "<div>" + val + "</div>";
                                            html += "<div style='margin-top: 10px;display: flex;' >" +
                                                "<a type='bNoticeAction' data-id='" + viewData.noticeId + "' href='javascript:FastExt.System.setDoneSystemWait(" + viewData.noticeId + ");'>标记为已读</a>";
                                            if (!Ext.isEmpty(viewData.noticeAction)) {
                                                html += "&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"javascript:" + viewData.noticeAction + ";\">立即前往</a>";
                                            }
                                            html += "<span style='flex: 1;text-align: right;'>" + viewData.noticeDateTime + "</span>" +
                                                "</div>";
                                            html += "<div style='font-size: smaller;color: #a0a0a0;margin-top: 10px;'>注：如果已处理请标记为已读！</div>";
                                            return html;
                                        }
                                    }
                                ]
                            };
                            winItems.push(noticePanel);
                            if ($("#bNoticeAction" + notice.noticeId).length === 0) {
                                needRefresh = true;
                            }
                        }
                        if (!needRefresh && !justRefresh) {
                            return;
                        }
                        if (!noticeWin_1) {
                            noticeWin_1 = Ext.create('Ext.window.Window', {
                                title: '系统待办事项',
                                id: 'NoticeAlertWindow',
                                width: 400,
                                height: 400,
                                layout: 'column',
                                closable: false,
                                constrain: true,
                                iconCls: 'extIcon extTip',
                                resizable: false,
                                scrollable: true,
                                tools: [
                                    {
                                        type: 'refresh',
                                        callback: function () {
                                            Ext.getStore("SystemWaitNoticeStore").loadPage(1);
                                            FastExt.System.startCheckSystemWait(true);
                                        }
                                    }, {
                                        type: 'close',
                                        callback: function () {
                                            FastExt.Dialog.showWait("正在清除中，请稍后……");
                                            FastExt.Server.clearWaitNotice(function (success, message) {
                                                FastExt.Dialog.hideWait();
                                                if (success) {
                                                    noticeWin_1.close();
                                                }
                                                else {
                                                    FastExt.Dialog.showAlert("系统提醒", message);
                                                }
                                            });
                                        }
                                    }
                                ],
                                collapsible: true,
                            });
                            noticeWin_1.showAt($(window).width() * 5, $(window).width() * 5);
                        }
                        if (justRefresh) {
                            noticeWin_1.removeAll();
                            noticeWin_1.add(winItems);
                        }
                        else {
                            noticeWin_1.insert(0, winItems);
                            noticeWin_1.setScrollY(0, true);
                        }
                        if (FastExt.Listeners.onSystemNoticeShow) {
                            FastExt.Listeners.onSystemNoticeShow();
                        }
                    }
                }
                finally {
                    if (FastExt.Base.toBool(FastExt.System["noticeListener"], false)) {
                        FastExt.Server.checkWaitNoticeTimer = setTimeout(function () {
                            FastExt.System.startCheckSystemWait();
                        }, 3000);
                    }
                }
            });
        };
        System.showBugReportDetails = function (id) {
            var store = Ext.getStore("SystemBugReportStore");
            var record = store.findRecord("reportId", id, 0, false, false, true);
            var buildData = function (data) {
                var array = [];
                var names = {
                    "a__managerName": "上报用户",
                    "funcTypeStr": "功能类型",
                    "funcName": "功能名称",
                    "bugContent": "问题描述",
                    "bugFlow": "操作步骤",
                    "bugImagesHtml": "问题截图",
                    "fixInfo": "修改意见",
                    "reportStateStr": "上报状态",
                    "reportDateTime": "上报时间"
                };
                for (var key in names) {
                    array.push({
                        "name": names[key],
                        "value": data[key]
                    });
                }
                return array;
            };
            var grid = FastExt.Grid.createDetailsGrid(buildData(record.getData()), {
                region: 'center',
                power: false,
                hideHeaders: true
            }, {
                width: 100,
                flex: 0,
            }, {
                align: 'left'
            });
            var win = Ext.create('Ext.window.Window', {
                title: "问题详情",
                height: 500,
                iconCls: 'extIcon extDetails',
                width: 500,
                layout: 'border',
                resizable: true,
                maximizable: true,
                items: [grid],
                modal: true,
                constrain: true,
                buttons: [
                    "->",
                    {
                        text: '删除问题',
                        iconCls: 'extIcon extDelete whiteColor',
                        handler: function () {
                            Ext.Msg.show({
                                title: "系统提醒",
                                icon: Ext.Msg.QUESTION,
                                message: "您确定这条问题吗？",
                                buttons: Ext.Msg.YESNO,
                                defaultFocus: "no",
                                callback: function (button, text) {
                                    if (button === "yes") {
                                        FastExt.Store.commitStoreDelete(store, [record]).then(function () {
                                            win.close();
                                        });
                                    }
                                }
                            });
                        }
                    },
                    {
                        text: '反馈修改意见',
                        iconCls: 'extIcon extEdit',
                        handler: function () {
                            FastExt.Dialog.showEditor(this, "提交修改意见", function (text) {
                                record.set("fixInfo", text);
                                record.set("reportState", 1);
                                record.set("reportStateStr", "已处理");
                                FastExt.Store.commitStoreUpdate(store);
                                grid.updateData(buildData(record.getData()));
                            });
                        }
                    }
                ]
            });
            win.show();
        };
        System.getSystemVersion = function (header) {
            var data = [
                {
                    "name": "项目名称",
                    "value": $("title").text()
                },
                {
                    "name": "项目版本",
                    "value": FastExt.System["version"].desc
                },
                {
                    "name": "项目位置",
                    "value": FastExt.System["root"].value
                },
                {
                    "name": "操作文档",
                    "value": "<a href='" + FastExt.System["doc-extjs"].href + "' target='_blank' >" + FastExt.System["doc-extjs"].value + "</a>"
                },
                {
                    "name": "本机IP地址",
                    "value": FastExt.System["host"].value
                },
                {
                    "name": "系统环境",
                    "value": FastExt.System["os"].value
                },
                {
                    "name": "系统启动时间",
                    "value": FastExt.System["startTime"].value
                },
                {
                    "name": "系统刷新时间",
                    "value": Ext.Date.format(new Date(), "Y-m-d H:i:s")
                },
                {
                    "name": "数据库",
                    "value": FastExt.System["db"].value
                },
                {
                    "name": "数据库连接池",
                    "value": FastExt.System["dbPool"].value
                },
                {
                    "name": "项目运行容器",
                    "value": FastExt.System["server"].value
                },
                {
                    "name": "运行容器位置",
                    "value": FastExt.System["catalina"].value
                },
                {
                    "name": "项目框架",
                    "value": "<a href='http://www.fastchar.com' target='_blank' >" + FastExt.System["fastchar"].value + "</a>"
                },
                {
                    "name": "开发语言",
                    "value": FastExt.System["java"].value + " + ExtJs6 + HTML5 + CSS3"
                },
                {
                    "name": "开发服务商",
                    "value": "<a href='" + FastExt.System["developer"].href + "' target='_blank'>" + FastExt.System["developer"].value + "</a>"
                }, {
                    "name": "版权归属",
                    "value": "<a href='" + FastExt.System.getExt("copyright").href + "' target='_blank'>" + FastExt.System.getExt("copyright").value + "</a>"
                }
            ];
            return FastExt.Grid.createDetailsGrid(data, {
                title: header ? '系统基本信息' : null,
                iconCls: header ? 'extIcon extVersion' : null,
                power: false,
                hideHeaders: true
            }, {}, {
                align: 'center'
            });
        };
        System.getSystemConfig = function (header) {
            var setPanel = Ext.create('Ext.form.FormPanel', {
                url: 'ext/config/saveSystemConfig',
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                power: false,
                border: 0,
                title: header ? '系统全局设置' : null,
                iconCls: header ? 'extIcon extSet' : null,
                autoScroll: true,
                defaults: {
                    labelWidth: 100,
                    margin: '5 5 5 5',
                    labelAlign: 'right',
                    emptyText: '请填写'
                },
                viewModel: {
                    data: null
                },
                layout: "column",
                items: [
                    {
                        xtype: 'fieldset',
                        title: '基本设置',
                        columnWidth: 1,
                        layout: "column",
                        defaults: {
                            anchor: '100%',
                            margin: '5 5 5 5',
                        },
                        items: [
                            {
                                name: 'theme-color',
                                xtype: 'colorfield',
                                fieldLabel: '系统主题颜色',
                                columnWidth: 1,
                                bind: '{theme_color}'
                            },
                            {
                                name: 'front-color',
                                xtype: 'colorfield',
                                fieldLabel: '系统前景颜色',
                                columnWidth: 1,
                                bind: '{front_color}'
                            },
                            {
                                name: 'system-layout',
                                fieldLabel: '系统布局方式',
                                columnWidth: 1,
                                xtype: 'combo',
                                displayField: 'text',
                                valueField: 'id',
                                editable: false,
                                readOnly: true,
                                value: 1,
                                bind: '{system_layout}',
                                store: FastExt.Store.getSystemLayoutDataStore()
                            },
                            {
                                name: 'theme',
                                fieldLabel: '系统主题风格',
                                columnWidth: 1,
                                xtype: 'combo',
                                displayField: 'text',
                                valueField: 'id',
                                editable: false,
                                value: 1,
                                bind: '{theme}',
                                store: FastExt.Store.getThemeDataStore()
                            },
                            {
                                name: 'window-anim',
                                fieldLabel: '系统窗体动画',
                                columnWidth: 1,
                                xtype: 'combo',
                                displayField: 'text',
                                valueField: 'id',
                                editable: false,
                                value: 1,
                                bind: '{window_anim}',
                                store: FastExt.Store.getYesOrNoDataStore()
                            },
                            {
                                name: 'tab-record',
                                fieldLabel: '标签记忆',
                                columnWidth: 1,
                                xtype: 'combo',
                                displayField: 'text',
                                valueField: 'id',
                                editable: false,
                                value: 1,
                                bind: '{tab_record}',
                                store: FastExt.Store.getYesOrNoDataStore()
                            },
                            {
                                name: 'tab-theme',
                                fieldLabel: '标签主题应用',
                                columnWidth: 1,
                                xtype: 'combo',
                                displayField: 'text',
                                valueField: 'id',
                                editable: false,
                                value: 1,
                                bind: '{tab_theme}',
                                store: FastExt.Store.getYesOrNoDataStore()
                            },
                            {
                                name: 'font-size',
                                fieldLabel: '系统字体大小',
                                columnWidth: 1,
                                xtype: 'combo',
                                displayField: 'text',
                                valueField: 'id',
                                editable: false,
                                bind: '{font_size}',
                                store: FastExt.Store.getFontSizeDataStore()
                            },
                            {
                                name: 'front-radius',
                                fieldLabel: '系统圆润大小',
                                columnWidth: 1,
                                xtype: 'combo',
                                displayField: 'text',
                                valueField: 'id',
                                editable: false,
                                bind: '{front_radius}',
                                store: FastExt.Store.getFrontRadiusDataStore()
                            },
                            {
                                xtype: 'button',
                                text: '恢复默认',
                                iconCls: 'extIcon extReset whiteColor',
                                columnWidth: 0.5,
                                handler: function () {
                                    Ext.Msg.confirm("系统提醒", "您确定恢复系统默认的配置吗？", function (button, text) {
                                        if (button === "yes") {
                                            FastExt.Dialog.showWait("请稍后……");
                                            setPanel.getForm().reset();
                                            FastExt.Server.deleteSystemConfig(function (success, message) {
                                                FastExt.Dialog.hideWait();
                                                if (success) {
                                                    location.reload();
                                                }
                                                else {
                                                    FastExt.Dialog.showAlert("系统提醒", message);
                                                }
                                            });
                                        }
                                    });
                                }
                            },
                            {
                                xtype: 'button',
                                text: '保存配置',
                                columnWidth: 0.5,
                                iconCls: 'extIcon extSave whiteColor',
                                margin: '5 5 5 0 ',
                                handler: function () {
                                    setPanel.doSubmit();
                                }
                            }
                        ]
                    },
                    {
                        xtype: 'fieldset',
                        title: '系统配置',
                        columnWidth: 1,
                        layout: "column",
                        defaults: {
                            anchor: '100%',
                            margin: '5 5 5 5',
                        },
                        items: [
                            {
                                xtype: 'button',
                                text: '初始化系统配置',
                                columnWidth: 1,
                                iconCls: 'extIcon extRefresh whiteColor',
                                handler: function () {
                                    Ext.Msg.confirm("系统提醒", "将初始化系统记忆配置，确定继续吗？", function (button, text) {
                                        if (button == "yes") {
                                            FastExt.System.startSilenceSaveConfig();
                                        }
                                    });
                                }
                            },
                            {
                                xtype: 'button',
                                text: '下载系统配置',
                                columnWidth: 0.5,
                                iconCls: 'extIcon extDownload whiteColor',
                                handler: function () {
                                    FastExt.Dialog.showWait("正在获取系统配置文件中……");
                                    $.post("downSystemConfig", function (result) {
                                        FastExt.Dialog.hideWait();
                                        if (result.success) {
                                            FastExt.Dialog.toast("获取成功！");
                                            FastExt.Base.openUrl(result.data, FastEnum.Target._self);
                                        }
                                        else {
                                            FastExt.Dialog.showAlert("系统提醒", result.message);
                                        }
                                    });
                                }
                            },
                            {
                                xtype: 'button',
                                text: '上传系统配置',
                                columnWidth: 0.5,
                                margin: '5 5 5 0 ',
                                iconCls: 'extIcon extUpload whiteColor',
                                handler: function () {
                                    FastExt.System.uploadSystemConfigData(this);
                                }
                            },
                            {
                                xtype: 'button',
                                text: '更新系统数据权限',
                                columnWidth: 1,
                                hidden: !FastExt.Base.toBool(FastExt.System["layer"], false),
                                iconCls: 'extIcon extPower whiteColor',
                                handler: function () {
                                    Ext.Msg.confirm("系统提醒", "确定更新系统所有表格的数据权限值吗？如果数据库数据量达到千万级别时，更新时间会较长，请谨慎操作！", function (button, text) {
                                        if (button == "yes") {
                                            FastExt.System.validOperate("更新所有表格的数据权限层级值", function () {
                                                FastExt.Dialog.showWait("正在更新中，请稍后……");
                                                FastExt.Server.updateAllLayer(function (success, message) {
                                                    FastExt.Dialog.hideWait();
                                                    FastExt.Dialog.showAlert("系统提醒", message);
                                                });
                                            }, 30);
                                        }
                                    });
                                }
                            },
                            {
                                xtype: 'button',
                                text: '更新系统数据同列值',
                                columnWidth: 1,
                                hidden: !FastExt.Base.toBool(FastExt.System["same"], true),
                                iconCls: 'extIcon extCopy2 whiteColor',
                                handler: function () {
                                    Ext.Msg.confirm("系统提醒", "确定更新系统所有表格之间有关联的相同字段值吗？", function (button, text) {
                                        if (button == "yes") {
                                            FastExt.System.validOperate("更新系统表格相同字段", function () {
                                                FastExt.Dialog.showWait("正在更新中，请稍后……");
                                                FastExt.Server.updateAllSame(function (success, message) {
                                                    FastExt.Dialog.hideWait();
                                                    FastExt.Dialog.showAlert("系统提醒", message);
                                                });
                                            }, 30);
                                        }
                                    });
                                }
                            }
                        ]
                    }
                ],
                doSubmit: function () {
                    var form = setPanel.form;
                    if (form.isValid()) {
                        form.submit({
                            waitMsg: '正在保存配置中……',
                            success: function (form, action) {
                                Ext.Msg.alert('系统设置', '设置保存成功！', function (btn) {
                                    if (btn === "ok") {
                                        location.reload();
                                    }
                                });
                            },
                            failure: function (form, action) {
                                if (action.result) {
                                    Ext.Msg.alert('保存失败', action.result.message);
                                }
                            }
                        });
                    }
                }
            });
            FastExt.Server.showSystemConfig(function (success, data) {
                if (success) {
                    var newData = {};
                    for (var dataKey in data) {
                        newData[dataKey.replace("-", "_")] = data[dataKey];
                    }
                    setPanel.getViewModel().setData(newData);
                }
            });
            return setPanel;
        };
        System.getSystemMonitor = function (header) {
            if (Ext.isEmpty(header)) {
                header = true;
            }
            var monitorPanel = Ext.create('Ext.panel.Panel', {
                layout: 'column',
                region: 'north',
                power: false,
                border: 0,
                bodyPadding: 5,
                title: header ? '系统监控信息' : null,
                iconCls: header ? 'extIcon extMonitor' : null,
                closable: false,
                autoScroll: true,
                listeners: {
                    afterrender: function () {
                        loadData(monitorPanel);
                    },
                }
            });
            var loadData = function (container) {
                if (!header) {
                    container.setLoading("获取系统信息中……");
                }
                FastExt.Server.loadMonitor(function (success, result) {
                    container.setLoading(false);
                    container.removeAll();
                    if (!result) {
                        return;
                    }
                    FastExt.System.monitor = result;
                    var desc = FastExt.System.monitor.desc;
                    var data = FastExt.System.monitor.data;
                    var alertCount = 0;
                    var _loop_6 = function (i) {
                        var objDesc = desc[i];
                        var objData = data[i];
                        var items = [];
                        for (var objDescKey in objDesc) {
                            if (objDescKey === 'title') {
                                continue;
                            }
                            var config = {
                                xtype: 'textfield',
                                fieldLabel: objDesc[objDescKey],
                                monitorIndex: i,
                                bind: '{' + objDescKey + '}'
                            };
                            items.push(config);
                        }
                        var title = objDesc.title;
                        var lastField = items[items.length - 1];
                        lastField["triggers"] = {
                            chart: {
                                cls: 'extIcon extReport2',
                                hideOnReadOnly: false,
                                handler: function () {
                                    FastExt.System.showMonitorChart(title, this.monitorIndex);
                                }
                            }
                        };
                        var cpuPanel = {
                            xtype: 'fieldset',
                            title: title,
                            columnWidth: 1,
                            collapsible: true,
                            id: "SystemMonitorFieldSet" + i,
                            viewModel: {
                                data: objData
                            },
                            defaults: {
                                anchor: '100%',
                                labelAlign: 'right',
                                labelWidth: 80,
                                columnWidth: 1,
                                editable: false,
                                disabledCls: ".x-item-disabled-normal"
                            },
                            items: items
                        };
                        container.add(cpuPanel);
                    };
                    for (var i = 0; i < desc.length; i++) {
                        _loop_6(i);
                    }
                    var button = {
                        xtype: 'button',
                        text: '刷新信息',
                        columnWidth: 1,
                        margin: '5 5 5 5',
                        handler: function (obj) {
                            obj.setText("正在刷新");
                            obj.setDisabled(true);
                            loadData(container);
                        }
                    };
                    container.add(button);
                });
            };
            return monitorPanel;
        };
        System.getMonitorData = function (index) {
            if (FastExt.System.monitor && FastExt.System.monitor.data
                && FastExt.System.monitor.data.length > index) {
                return FastExt.System.monitor.data[index];
            }
            return null;
        };
        System.showMonitorChart = function (title, index) {
            var monitorId = "SystemMonitorChart" + index;
            var targetMonitorWin = Ext.getCmp(monitorId);
            if (targetMonitorWin && Ext.isFunction(targetMonitorWin.updateChart)) {
                targetMonitorWin.updateChart();
                return;
            }
            var win = Ext.create('Ext.window.Window', {
                title: title,
                iconCls: "extIcon extReport2 whiteColor",
                height: 450,
                width: 450,
                id: monitorId,
                layout: 'border',
                resizable: true,
                maximizable: true,
                constrain: true,
                padding: "10 10 10 10",
                bodyStyle: {
                    background: "#ffffff"
                },
                refreshTimer: null,
                monitorIndex: index,
                monitorStopped: false,
                updateChart: function () {
                    if (this.monitorStopped) {
                        return false;
                    }
                    try {
                        var monitorData = FastExt.System.getMonitorData(this.monitorIndex);
                        if (!monitorData) {
                            return false;
                        }
                        var buildOption = function (minValue, maxValue, currValue, unit) {
                            var percent = currValue / maxValue;
                            var color = "green";
                            if (percent > 0.3) {
                                color = "purple";
                            }
                            if (percent > 0.8) {
                                color = "red";
                            }
                            var percentStr = " " + (percent * 100).toFixed(2) + "%";
                            if (unit === "%") {
                                percentStr = "";
                            }
                            return {
                                series: [
                                    {
                                        type: 'gauge',
                                        splitNumber: 10,
                                        min: minValue,
                                        max: maxValue,
                                        radius: '100%',
                                        itemStyle: {
                                            shadowColor: 'rgba(0,138,255,0.45)',
                                            shadowBlur: 10,
                                            shadowOffsetX: 2,
                                            shadowOffsetY: 2,
                                            color: color,
                                        },
                                        progress: {
                                            show: true,
                                            roundCap: true,
                                            width: 18,
                                            itemStyle: {
                                                color: {
                                                    type: 'linear',
                                                    x: 0,
                                                    y: 1,
                                                    x2: 1,
                                                    y2: 0,
                                                    colorStops: [
                                                        {
                                                            offset: 0, color: 'green'
                                                        },
                                                        {
                                                            offset: 1, color: color
                                                        }
                                                    ],
                                                }
                                            }
                                        },
                                        pointer: {
                                            icon: 'path://M2090.36389,615.30999 L2090.36389,615.30999 C2091.48372,615.30999 2092.40383,616.194028 2092.44859,617.312956 L2096.90698,728.755929 C2097.05155,732.369577 2094.2393,735.416212 2090.62566,735.56078 C2090.53845,735.564269 2090.45117,735.566014 2090.36389,735.566014 L2090.36389,735.566014 C2086.74736,735.566014 2083.81557,732.63423 2083.81557,729.017692 C2083.81557,728.930412 2083.81732,728.84314 2083.82081,728.755929 L2088.2792,617.312956 C2088.32396,616.194028 2089.24407,615.30999 2090.36389,615.30999 Z',
                                            length: '75%',
                                            width: 16,
                                            offsetCenter: [0, '5%'],
                                        },
                                        axisLine: {
                                            roundCap: true,
                                            lineStyle: {
                                                width: 18
                                            }
                                        },
                                        axisTick: {
                                            splitNumber: 5,
                                            lineStyle: {
                                                width: 2,
                                                color: '#999'
                                            }
                                        },
                                        splitLine: {
                                            length: 12,
                                            lineStyle: {
                                                width: 3,
                                                color: '#999'
                                            }
                                        },
                                        axisLabel: {
                                            distance: 30,
                                            color: '#999',
                                            formatter: function (value) {
                                                if (unit === "%") {
                                                    return value + "%";
                                                }
                                                return FastExt.Base.toByteUnit(value, 0);
                                            },
                                        },
                                        title: {
                                            show: true,
                                        },
                                        detail: {
                                            valueAnimation: true,
                                            formatter: function (value) {
                                                if (unit === "%") {
                                                    return value + "%";
                                                }
                                                return "{value|" + FastExt.Base.toByteUnit(value) + "}\n{percent|" + percentStr + "}";
                                            },
                                            rich: {
                                                percent: {
                                                    fontSize: 16,
                                                    padding: [0, 0, 0, 0],
                                                }
                                            },
                                            color: 'auto'
                                        },
                                        data: [
                                            {
                                                value: currValue
                                            }
                                        ]
                                    }
                                ]
                            };
                        };
                        var chartOption = buildOption(monitorData.min, monitorData.max, monitorData.value, FastExt.Base.toString(monitorData.unit, "byte"));
                        FastExt.ECharts.loadECharts(this, chartOption);
                        var fieldContainer = Ext.getCmp("SystemMonitorFieldSet" + this.monitorIndex);
                        if (fieldContainer) {
                            fieldContainer.getViewModel().setData(monitorData);
                        }
                        return true;
                    }
                    catch (e) {
                        console.error(e);
                    }
                    return false;
                },
                startTimer: function (first) {
                    var me = this;
                    if (me.monitorStopped) {
                        return;
                    }
                    if (first) {
                        this.setLoading("获取监控数据中，请稍后……");
                    }
                    this.stopTimer();
                    this.refreshTimer = setTimeout(function () {
                        FastExt.Server.loadMonitor(function (success, result) {
                            FastExt.System.monitor = result;
                            if (first) {
                                me.setLoading(false);
                            }
                            if (Ext.isFunction(me.updateChart) && me.updateChart()) {
                                me.startTimer(false);
                            }
                        });
                    }, first ? 0 : 1000);
                },
                stopTimer: function () {
                    if (this.refreshTimer) {
                        clearTimeout(this.refreshTimer);
                    }
                    this.refreshTimer = null;
                },
                listeners: {
                    show: function (obj) {
                        obj.startTimer(true);
                    },
                    beforedestroy: function (obj) {
                        obj.monitorStopped = true;
                        obj.stopTimer();
                    }
                }
            });
            win.show();
        };
        System.showLogin = function (container) {
            var loginTitle = $("title").text();
            var loginBgUrl = FastExt.System.getExt("login-background").value;
            var systemBgColor = FastExt.Color.toColor(FastExt.System.getExt("theme-color").value);
            var loginLogo = FastExt.System.getExt("login-logo").value;
            var loginNormal = FastExt.System.getExt("login-type").value === "normal";
            var copyright = FastExt.System.getExt("copyright").value;
            var copyrightUrl = FastExt.System.getExt("copyright").href;
            var indexUrl = FastExt.System.getExt("indexUrl").value;
            var version = FastExt.System.getExt("version").desc;
            var year = new Date().getFullYear();
            loginBgUrl = FastExt.System.formatUrl(loginBgUrl, { bg: systemBgColor, dot: systemBgColor });
            var panel = Ext.create('Ext.panel.Panel', {
                layout: 'fit',
                border: 0,
                iframePanel: true,
                html: "<iframe name='loginFrame'  src='" + loginBgUrl + "' width='100%' height='100%' style='border: 0px; overflow-x: hidden;background-color: " + systemBgColor + "'/>",
            });
            var headHtml = "<div align='center' class='headPanel' style='color:" + systemBgColor + ";'><img class='loginLogo'  width='50px' height='50px;' src='" + FastExt.System.formatUrlVersion(loginLogo) + "' /><h2>" + loginTitle + "</h2></div>";
            if (!loginLogo || loginLogo.length === 0) {
                headHtml = "<div align='center' class='headPanel' style='color:" + systemBgColor + ";'><h2>" + loginTitle + "</h2></div>";
            }
            var headPanel = Ext.create('Ext.panel.Panel', {
                region: 'north',
                layout: 'fit',
                bodyCls: 'bgNull',
                width: '100%',
                bodyStyle: {},
                border: 0,
                height: 'auto',
                html: headHtml
            });
            var loginName = Cookies.get("loginNameValue");
            var loginPassword = Cookies.get("loginPasswordValue");
            var loginMember = Cookies.get("loginMemberValue");
            if (Ext.isEmpty(loginMember)) {
                loginMember = "0";
            }
            var labelWidth = FastExt.Base.getNumberValue(FastExt.System.fontSize) * 3 + 8;
            var loginPanel = Ext.create('Ext.form.FormPanel', {
                url: FastExt.Server.loginUrl(),
                method: 'POST',
                fileUpload: true,
                bodyCls: 'bgNull',
                border: 0,
                width: '100%',
                layout: "anchor",
                region: 'center',
                bodyStyle: {},
                padding: '10 10 10 10',
                items: [
                    {
                        xtype: 'fieldset',
                        title: '',
                        layout: 'anchor',
                        padding: '10 10 0 10',
                        items: [
                            {
                                xtype: 'textfield',
                                fieldLabel: '登录名',
                                labelAlign: 'right',
                                labelWidth: labelWidth,
                                margin: '10 10 0 0',
                                name: 'loginName',
                                allowBlank: false,
                                blankText: '请输入登录名',
                                emptyText: '请输入登录名',
                                value: loginName,
                                anchor: "100%"
                            }, {
                                xtype: 'textfield',
                                fieldLabel: '密码',
                                labelAlign: 'right',
                                labelWidth: labelWidth,
                                inputType: 'password',
                                margin: '10 10 0 0',
                                allowBlank: false,
                                blankText: '请输入登录密码',
                                emptyText: '请输入登录密码',
                                value: loginPassword,
                                submitValue: false,
                                name: 'loginPassword',
                                anchor: "100%"
                            },
                            {
                                xtype: 'fieldcontainer',
                                labelWidth: 0,
                                anchor: "100%",
                                layout: {
                                    type: 'hbox',
                                    align: 'stretch'
                                },
                                hidden: loginNormal,
                                items: [{
                                        xtype: 'textfield',
                                        fieldLabel: '验证码',
                                        labelAlign: 'right',
                                        labelWidth: labelWidth,
                                        margin: '10 10 0 0',
                                        allowBlank: loginNormal,
                                        flex: 1,
                                        letterKeyboard: true,
                                        name: 'validateCode',
                                        emptyText: '请输入验证码',
                                        blankText: '请输入验证码'
                                    }, {
                                        xtype: 'image',
                                        margin: '10 10 0 0',
                                        width: 70,
                                        cls: 'validCodeImg',
                                        id: 'imgCode',
                                        height: 32
                                    }]
                            },
                            {
                                name: 'loginMember',
                                fieldLabel: '记住',
                                xtype: 'combo',
                                labelAlign: 'right',
                                labelWidth: labelWidth,
                                margin: '10 10 0 0',
                                displayField: 'text',
                                valueField: 'id',
                                editable: false,
                                anchor: "100%",
                                value: loginMember,
                                submitValue: false,
                                allowBlank: false,
                                store: Ext.create('Ext.data.Store', {
                                    data: [
                                        { "id": "0", "text": "用户名" },
                                        { "id": "1", "text": "用户名和密码" }
                                    ]
                                })
                            },
                            {
                                xtype: 'fieldcontainer',
                                labelWidth: 0,
                                anchor: "100%",
                                layout: {
                                    type: 'hbox',
                                    align: 'stretch'
                                },
                                items: [{
                                        xtype: 'button',
                                        text: '重置',
                                        iconCls: 'extIcon extReset',
                                        flex: 1,
                                        tipText: '重置数据',
                                        margin: '10 5 10 10',
                                        handler: function () {
                                            loginPanel.form.reset();
                                        }
                                    }, {
                                        xtype: 'button',
                                        text: '登录',
                                        id: 'btnLogin',
                                        tipText: '登录系统',
                                        margin: '10 10 10 5',
                                        iconCls: 'extIcon extOk',
                                        flex: 1,
                                        handler: function () {
                                            doLogin();
                                        }
                                    }]
                            }
                        ]
                    }
                ],
                listeners: {
                    'render': function (text) {
                        try {
                            new Ext.util.KeyMap({
                                target: text.getEl(),
                                key: 13,
                                fn: doLogin,
                                scope: Ext.getBody()
                            });
                        }
                        catch (e) {
                            console.error(e);
                        }
                    }
                }
            });
            var refreshCode = function () {
                try {
                    loginPanel.form.findField("validateCode").reset();
                    Ext.getCmp("imgCode").setSrc("showCaptcha?t=" + Math.random());
                }
                catch (e) {
                }
            };
            var doLogin = function () {
                var form = loginPanel.form;
                if (form.isValid()) {
                    if (FastExt.Listeners.onBeforeManagerLogin) {
                        FastExt.Listeners.onBeforeManagerLogin(form.getValues(), function () {
                            toLogin();
                        });
                    }
                    else {
                        toLogin();
                    }
                }
            };
            var toLogin = function () {
                var form = loginPanel.form;
                if (form.isValid()) {
                    var loginPassword_1 = loginPanel.form.findField("loginPassword").getValue();
                    var loginName_1 = loginPanel.form.findField("loginName").getValue();
                    var loginMember_1 = loginPanel.form.findField("loginMember").getValue();
                    Cookies.set("loginNameValue", loginName_1, { expires: 30 });
                    Cookies.set("loginMemberValue", loginMember_1, { expires: 30 });
                    if (parseInt(loginMember_1) === 1) {
                        Cookies.set("loginPasswordValue", loginPassword_1, { expires: 30 });
                    }
                    else {
                        Cookies.remove("loginPasswordValue");
                    }
                    form.submit({
                        params: {
                            loginPassword: $.md5(loginPassword_1)
                        },
                        waitMsg: '正在为您登录……',
                        success: function (form, action) {
                            FastExt.System.addScript({ src: indexUrl + '?v=' + FastExt.System.getExt("version").value });
                        },
                        failure: function (form, action) {
                            refreshCode();
                            if (action.result.code === -2) {
                                loginPanel.form.findField("loginPassword").reset();
                            }
                            if (action.result) {
                                Ext.Msg.alert('登录失败', action.result.message, function () {
                                    if (action.result.code === -3) {
                                        loginPanel.form.findField("validateCode").focus();
                                    }
                                });
                            }
                        }
                    });
                }
            };
            var targetValue = "_blank";
            if (copyrightUrl.startWith("javascript:")) {
                targetValue = "_self";
            }
            var bottomPanel = Ext.create('Ext.panel.Panel', {
                region: 'south',
                layout: 'fit',
                width: '100%',
                height: 50,
                bodyCls: 'bgNull',
                border: 0,
                html: "<div align='center'><a href='" + copyrightUrl + "' target='" + targetValue + "' style='font-size: xx-small;color:#aaa;text-decoration:none;'>" + copyright + "</a>" +
                    "</div><div align='center' style='font-size: xx-small;color:#aaa;margin-top: 5px;'>Copyright © " + year + " " + version + "</div>"
            });
            var win = Ext.create('Ext.window.Window', {
                title: '管理员登录',
                iconCls: 'extIcon extLogin',
                width: 420,
                resizable: false,
                layout: 'vbox',
                bodyCls: 'bgImage',
                closable: false,
                toFrontOnShow: true,
                constrain: true,
                items: [headPanel, loginPanel, bottomPanel]
            });
            win.show(null, function () {
                Ext.getCmp("btnLogin").focus();
                try {
                    if (!loginNormal) {
                        refreshCode();
                        Ext.get('imgCode').on({
                            click: function () {
                                refreshCode();
                            }
                        });
                    }
                }
                catch (e) {
                }
            });
            container.add(panel);
            container.add(win);
        };
        System.showLogin2 = function (container) {
            var loginTitle = $("title").text();
            var loginBgUrl = FastExt.System.getExt("login-background").value;
            var loginLottieJsonUrl = FastExt.System.getExt("login-lottie-json").value;
            var systemBgColor = FastExt.Color.toColor(FastExt.System.getExt("theme-color").value);
            var loginLogo = FastExt.System.getExt("login-logo").value;
            var loginNormal = FastExt.System.getExt("login-type").value === "normal";
            var copyright = FastExt.System.getExt("copyright").value;
            var copyrightUrl = FastExt.System.getExt("copyright").href;
            var indexUrl = FastExt.System.getExt("indexUrl").value;
            var version = FastExt.System.getExt("version").desc;
            var year = new Date().getFullYear();
            loginBgUrl = FastExt.System.formatUrl(loginBgUrl, { bg: systemBgColor, dot: systemBgColor });
            loginLottieJsonUrl = FastExt.System.formatUrl(loginLottieJsonUrl, { bg: systemBgColor });
            var panel = Ext.create('Ext.panel.Panel', {
                layout: 'fit',
                border: 0,
                iframePanel: true,
                html: "<iframe name='loginFrame'  src='" + loginBgUrl + "' width='100%' height='100%' style='border: 0px; overflow-x: hidden;background-color: " + systemBgColor + "'/>",
            });
            var headHtml = "<div align='center' class='headPanel' style='color:" + systemBgColor + ";'><img class='loginLogo'  width='80px' height='80px;' src='" + FastExt.System.formatUrlVersion(loginLogo) + "' /><h2>" + loginTitle + "</h2></div>";
            if (!loginLogo || loginLogo.length === 0) {
                headHtml = "<div align='center' class='headPanel' style='color:" + systemBgColor + ";'><h2>" + loginTitle + "</h2></div>";
            }
            var headPanel = Ext.create('Ext.panel.Panel', {
                region: 'north',
                layout: 'fit',
                bodyCls: 'bgNull',
                width: '100%',
                bodyStyle: {},
                border: 0,
                height: 'auto',
                html: headHtml
            });
            var loginName = Cookies.get("loginNameValue");
            var loginPassword = Cookies.get("loginPasswordValue");
            var loginMember = Cookies.get("loginMemberValue");
            if (Ext.isEmpty(loginMember)) {
                loginMember = "0";
            }
            var labelWidth = FastExt.Base.getNumberValue(FastExt.System.fontSize) * 2;
            var labelAlign = "right";
            var loginItems = [
                {
                    xtype: 'textfield',
                    fieldLabel: '<svg class="svgIcon" aria-hidden="true"><use xlink:href="#extLogin"></use></svg>',
                    margin: '10 10 0 0',
                    name: 'loginName',
                    allowBlank: false,
                    blankText: '请输入登录名',
                    emptyText: '请输入登录名',
                    value: loginName,
                    anchor: "100%"
                },
                {
                    xtype: 'textfield',
                    fieldLabel: '<svg class="svgIcon" aria-hidden="true"><use xlink:href="#extLogPwd"></use></svg>',
                    inputType: 'password',
                    margin: '10 10 0 0',
                    allowBlank: false,
                    blankText: '请输入登录密码',
                    emptyText: '请输入登录密码',
                    value: loginPassword,
                    submitValue: false,
                    name: 'loginPassword',
                    anchor: "100%"
                },
                FastExt.Captcha.getLoginCaptchaCmp(),
                {
                    name: 'loginMember',
                    xtype: 'combo',
                    fieldLabel: '<svg class="svgIcon" aria-hidden="true"><use xlink:href="#extLoginRemember2"></use></svg>',
                    margin: '10 10 0 0',
                    displayField: 'text',
                    valueField: 'id',
                    editable: false,
                    anchor: "100%",
                    value: loginMember,
                    submitValue: false,
                    allowBlank: false,
                    store: Ext.create('Ext.data.Store', {
                        data: [
                            { "id": "-1", "text": "不记住" },
                            { "id": "0", "text": "记住用户名" },
                            { "id": "1", "text": "记住用户名和密码" }
                        ]
                    })
                },
                {
                    xtype: 'fieldcontainer',
                    labelWidth: 0,
                    anchor: "100%",
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'button',
                            text: '立即登录',
                            itemId: 'btnLogin',
                            tipText: '登录系统',
                            margin: '10 10 10 10',
                            iconCls: 'extIcon extLogin2',
                            flex: 1,
                            handler: function () {
                                doLogin();
                            }
                        }
                    ]
                }
            ];
            var windowConfig = { height: 500, width: 988 };
            if (FastExt.Listeners.onInitLoginPanel) {
                FastExt.Listeners.onInitLoginPanel(loginItems, windowConfig);
            }
            var loginPanel = Ext.create('Ext.form.FormPanel', {
                url: FastExt.Server.loginUrl(),
                method: 'POST',
                bodyCls: 'bgNull',
                border: 0,
                width: '100%',
                layout: "anchor",
                region: 'center',
                bodyStyle: {},
                padding: '10 10 10 10',
                items: [
                    {
                        xtype: 'fieldset',
                        title: '',
                        layout: 'anchor',
                        padding: '10 10 0 10',
                        defaults: {
                            labelAlign: labelAlign,
                            labelWidth: labelWidth,
                            labelSeparator: '',
                            labelStyle: "font-size: 20px !important;color: #888888;"
                        },
                        items: loginItems,
                    }
                ],
                listeners: {
                    'render': function (text) {
                        try {
                            new Ext.util.KeyMap({
                                target: text.getEl(),
                                key: 13,
                                fn: doLogin,
                                scope: Ext.getBody()
                            });
                        }
                        catch (e) {
                            console.error(e);
                        }
                    }
                }
            });
            var refreshCode = function () {
                loginPanel.query("#captcha")[0].refreshCode();
            };
            var doLogin = function () {
                var form = loginPanel.form;
                if (form.isValid()) {
                    if (FastExt.Listeners.onBeforeManagerLogin) {
                        FastExt.Listeners.onBeforeManagerLogin(form.getValues(), function () {
                            toLogin();
                        });
                    }
                    else {
                        toLogin();
                    }
                }
            };
            var toLogin = function () {
                var form = loginPanel.form;
                if (form.isValid()) {
                    var loginPassword_2 = loginPanel.form.findField("loginPassword").getValue().trim();
                    var loginName_2 = loginPanel.form.findField("loginName").getValue().trim();
                    var loginMember_2 = loginPanel.form.findField("loginMember").getValue().trim();
                    Cookies.set("loginNameValue", loginName_2, { expires: 30 });
                    Cookies.set("loginMemberValue", loginMember_2, { expires: 30 });
                    if (parseInt(loginMember_2) === 1) {
                        Cookies.set("loginPasswordValue", loginPassword_2, { expires: 30 });
                    }
                    else if (parseInt(loginMember_2) === 0) {
                        Cookies.remove("loginPasswordValue");
                    }
                    else {
                        Cookies.remove("loginNameValue");
                        Cookies.remove("loginPasswordValue");
                    }
                    form.submit({
                        params: {
                            loginPassword: $.md5(loginPassword_2)
                        },
                        waitMsg: '正在为您登录……',
                        success: function (form, action) {
                            var nextRun = function (success) {
                                if (FastExt.Base.toBool(success, true)) {
                                    FastExt.System.addScript({ src: indexUrl + '?v=' + FastExt.System.getExt("version").value });
                                }
                                else {
                                    refreshCode();
                                }
                            };
                            if (FastExt.Listeners.onAfterManagerLogin) {
                                FastExt.Listeners.onAfterManagerLogin(nextRun);
                            }
                            else {
                                nextRun();
                            }
                        },
                        failure: function (form, action) {
                            refreshCode();
                            if (action.result.code === -2) {
                                loginPanel.form.findField("loginPassword").reset();
                            }
                            if (action.result) {
                                Ext.Msg.alert('登录失败', action.result.message, function () {
                                    if (action.result.code === -3) {
                                        loginPanel.form.findField("validateCode").focus();
                                    }
                                });
                            }
                        }
                    });
                }
            };
            var targetValue = "_blank";
            if (copyrightUrl.startWith("javascript:")) {
                targetValue = "_self";
            }
            var bottomPanel = Ext.create('Ext.panel.Panel', {
                region: 'south',
                width: '100%',
                height: 50,
                bodyCls: 'bgNull',
                border: 0,
                html: "<div align='center'><a href='" + copyrightUrl + "' target='" + targetValue + "' style='font-size: xx-small;color:#aaa;text-decoration:none;'>" + copyright + "</a>" +
                    "</div><div align='center' style='font-size: xx-small;color:#aaa;margin-top: 5px;'>Copyright © " + year + " " + version + "</div>"
            });
            var rightContainerPanel = Ext.create('Ext.panel.Panel', {
                region: 'center',
                layout: {
                    type: 'vbox',
                    align: 'stretch',
                    pack: 'center'
                },
                border: 0,
                items: [headPanel, loginPanel, bottomPanel]
            });
            var leftContainerPanel = Ext.create('Ext.panel.Panel', {
                region: 'west',
                layout: 'fit',
                width: 588,
                border: 0,
                bodyStyle: {
                    background: systemBgColor
                },
                listeners: {
                    render: function (obj) {
                        FastExt.Lottie.loadJsonAnim(obj, loginLottieJsonUrl);
                    },
                    beforedestroy: function (obj) {
                        FastExt.Lottie.unloadJsonAnim(obj);
                    }
                }
            });
            var win = Ext.create('Ext.window.Window', {
                resizable: false,
                header: false,
                layout: 'border',
                bodyCls: 'bgNull',
                closable: false,
                toFrontOnShow: true,
                constrain: true,
                width: windowConfig.width,
                height: windowConfig.height,
                items: [leftContainerPanel, rightContainerPanel]
            });
            win.show(null, function () {
                win.query("#btnLogin")[0].focus();
                if (!loginNormal) {
                    refreshCode();
                }
            });
            container.add(panel);
            container.add(win);
        };
        System.startSilenceSaveConfig = function (obj, message) {
            FastExt.System["allShowListMethodMenu"] = FastExt.System.getAllMethodMenu("showList");
            for (var i = 0; i < FastExt.System.entities.length; i++) {
                var entity = FastExt.System.entities[i];
                if (!entity.js) {
                    continue;
                }
                if (Ext.isEmpty(entity.menu)) {
                    var id = $.md5(entity.entityCode + entity.comment);
                    FastExt.System["allShowListMethodMenu"].push({
                        method: "showList('" + id + "','" + entity.entityCode + "')",
                        icon: "icons/icon_function.svg",
                        text: "",
                        id: id
                    });
                }
            }
            FastExt.System.closeAllTab();
            FastExt.System.silenceGlobalSave = true;
            Ext.MessageBox.show({
                justTop: true,
                modal: true,
                animateTarget: obj,
                title: '系统提醒',
                msg: message ? message : '初始化系统配置',
                iconCls: "extIcon extTimer",
                progressText: '请耐心等待，即将完成操作',
                progress: true,
                closable: false,
                closeAction: "destroy"
            });
            FastExt.System.doNextSilenceMenu();
        };
        System.doNextSilenceMenu = function () {
            if (Ext.isEmpty(FastExt.System["doNextSilenceMenuIndex"])) {
                FastExt.System["doNextSilenceMenuIndex"] = 0;
            }
            var allShowListMethodMenu = FastExt.System["allShowListMethodMenu"];
            var doNextSilenceMenuIndex = FastExt.System["doNextSilenceMenuIndex"];
            if (doNextSilenceMenuIndex >= allShowListMethodMenu.length) {
                FastExt.Dialog.showAlert("系统提醒", "系统配置已初始化完毕！", null, true, true);
                FastExt.System.silenceGlobalSave = false;
                FastExt.System["doNextSilenceMenuIndex"] = 0;
                if (FastExt.Listeners.onAfterInitSystem) {
                    FastExt.Listeners.onAfterInitSystem();
                }
                return;
            }
            Ext.MessageBox.updateProgress(parseFloat(String(doNextSilenceMenuIndex + 1)) / parseFloat(allShowListMethodMenu.length), '正在读取配置中，请耐心等待');
            var menu = allShowListMethodMenu[doNextSilenceMenuIndex];
            FastExt.System.showTab(menu.method, menu.id, menu.text, menu.icon);
            FastExt.System["doNextSilenceMenuIndex"] = doNextSilenceMenuIndex + 1;
        };
        System.uploadSystemConfigData = function (obj) {
            var formPanel = Ext.create('Ext.form.FormPanel', {
                url: 'loadSystemConfig',
                method: 'POST',
                margin: '5',
                fileUpload: true,
                width: 400,
                callBacked: false,
                border: 0,
                layout: 'column',
                items: [
                    {
                        xtype: 'filefield',
                        fieldLabel: '系统配置文件',
                        labelWidth: 120,
                        labelAlign: 'right',
                        buttonText: '选择文件',
                        allowBlank: false,
                        name: 'systemConfigFile',
                        columnWidth: 1
                    }
                ],
                doSubmit: function () {
                    var form = formPanel.form;
                    if (form.isValid()) {
                        var myMask_4 = new Ext.LoadMask({
                            msg: '正在上传文件中…',
                            target: uploadWin
                        });
                        myMask_4.show();
                        form.submit({
                            success: function (form, action) {
                                FastExt.Dialog.toast(action.result.message);
                                uploadWin.close();
                            },
                            failure: function (form, action) {
                                myMask_4.destroy();
                                if (action.result) {
                                    Ext.Msg.alert('系统提醒', "上传失败！" + action.result.message);
                                }
                            }
                        });
                    }
                },
                listeners: {
                    'render': function (obj) {
                        try {
                            new Ext.util.KeyMap({
                                target: obj.getEl(),
                                key: 13,
                                fn: formPanel.doSubmit,
                                scope: Ext.getBody()
                            });
                        }
                        catch (e) {
                            console.error(e);
                        }
                    }
                }
            });
            var btnSubmitId = "btnSubmit" + new Date().getTime();
            var uploadWin = Ext.create('Ext.window.Window', {
                title: "上传系统配置文件",
                layout: 'fit',
                resizable: false,
                scrollable: false,
                width: 500,
                items: formPanel,
                modal: true,
                iconCls: 'extIcon extUpload',
                animateTarget: obj,
                constrain: true,
                buttons: [
                    {
                        text: '重置',
                        width: 88,
                        iconCls: 'extIcon extReset',
                        handler: function () {
                            formPanel.form.reset();
                        }
                    },
                    {
                        text: '上传',
                        width: 88,
                        id: btnSubmitId,
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            formPanel.doSubmit();
                        }
                    }
                ],
                listeners: {
                    show: function (winObj, eOpts) {
                        formPanel.getForm().findField('systemConfigFile').fileInputEl.dom.click();
                        Ext.getCmp(btnSubmitId).focus();
                    },
                }
            });
            uploadWin.show();
        };
        System.addFilterByEntityCreate = function (entityCode, filterFunction) {
            if (Ext.isEmpty(FastExt.System.extCreateFilter[entityCode])) {
                FastExt.System.extCreateFilter[entityCode] = [];
            }
            FastExt.System.extCreateFilter[entityCode].push(filterFunction);
        };
        System.showGlobalSearch = function (obj, entityCodes, parentContainerCmp, extraParams) {
            if (Ext.isEmpty(entityCodes)) {
                entityCodes = [];
            }
            if (Ext.isEmpty(obj.code)) {
                obj.code = "GlobalSearchWin";
            }
            if (Ext.isEmpty(extraParams)) {
                extraParams = {};
            }
            var searchWinTitle = "系统全局搜索";
            var targetSearchWinId = "GlobalSearchWin" + $.md5(obj.code + entityCodes.join(","));
            var targetSearchWin = Ext.getCmp(targetSearchWinId);
            if (entityCodes.length > 0) {
                searchWinTitle = "全列搜索";
            }
            if (targetSearchWin) {
                if (targetSearchWin.isVisible()) {
                    FastExt.Component.shakeComment(targetSearchWin);
                    return;
                }
                targetSearchWin.show();
                return;
            }
            var dataStore = Ext.create('Ext.data.Store', {
                autoLoad: false,
                pageSize: 40,
                fields: [],
                entityCodes: entityCodes,
                searchType: entityCodes.length > 0 ? 1 : -1,
                proxy: {
                    type: 'ajax',
                    url: 'globalSearch',
                    actionMethods: {
                        create: 'POST',
                        read: 'POST',
                        update: 'POST',
                        destroy: 'POST'
                    },
                    listeners: {
                        exception: function (obj, request, operation, eOpts) {
                            try {
                                var data = eval("(" + request.responseText + ")");
                                if (!data.success) {
                                    FastExt.Dialog.showAlert("数据获取失败", data.message, null, true, true);
                                }
                            }
                            catch (e) {
                                FastExt.Dialog.showAlert("数据获取失败", request.responseText, null, true, true);
                            }
                        }
                    },
                    reader: {
                        type: 'json',
                        root: 'list',
                        totalProperty: 'totalRow'
                    }
                },
                listeners: {
                    beforeload: function (store, options, eOpts) {
                        var params = store.proxy.extraParams;
                        var newParams = {
                            "key": store.searchKey,
                            "type": store.searchType,
                            "entityCode": store.entityCodes,
                        };
                        newParams = FastExt.Json.mergeJson(newParams, extraParams);
                        store.getProxy().setExtraParams(FastExt.Json.mergeJson(params, newParams));
                        return true;
                    }
                },
            });
            var grid = Ext.create('Ext.grid.Panel', {
                border: 0,
                scrollable: 'y',
                store: dataStore,
                hideHeaders: true,
                deferRowRender: false,
                dataList: true,
                region: 'center',
                columns: [
                    {
                        header: '值',
                        dataIndex: 'searchKey',
                        flex: 1,
                        renderer: function (val, m, record) {
                            m.style = 'overflow:hidden;align-items: center; display:flex;line-height:24px;';
                            var clickFun = "";
                            var headText = "";
                            var type = parseInt(record.get("type"));
                            if (type === 0) {
                                clickFun = " FastExt.System.selectTab(\"" + record.get("id") + "\",true,true)";
                                headText = "<img alt='' height='20' src='icons/icon_system.svg'/>&nbsp;" + "系统菜单";
                            }
                            else if (type === 1) {
                                clickFun = "new " + record.get("entityCode") + "().showDetails(this,{\"" + record.get("dataIdName") + "\":\"" + record.get("dataId") + "\"})";
                                headText = "<img alt='' height='20' src='" + record.get("menuIcon") + "'/>&nbsp;" + record.get("entityInfo");
                            }
                            var tagHeadText = "<span style='" +
                                "display: inline-flex;" +
                                "background: #e3e3e3;" +
                                "color: black;" +
                                "border-radius: 3px;" +
                                "font-size:small;" +
                                "margin-right: 5px;" +
                                "padding: 2px 4px;" +
                                "align-items: center;" +
                                "justify-content: center;" +
                                "'>" + headText + "</span>";
                            return tagHeadText + "<a style='display: inline-flex;align-items: center;' href='javascript:" + clickFun + ";'>" + val + "</a>";
                        }
                    },
                ],
                emptyConfig: {
                    lottie: "base/lottie/global_search.json",
                    opacity: 1,
                    width: "70%",
                    height: "70%",
                    filter: "",
                },
                tbar: {
                    xtype: 'toolbar',
                    flex: 1,
                    style: {
                        background: "#ececec",
                    },
                    items: [
                        {
                            xtype: 'combo',
                            displayField: 'text',
                            valueField: 'id',
                            editable: false,
                            width: 120,
                            value: -1,
                            hidden: entityCodes.length > 0,
                            store: Ext.create('Ext.data.Store', {
                                data: [
                                    {
                                        id: -1,
                                        text: '全部'
                                    },
                                    {
                                        id: 0,
                                        text: '系统菜单'
                                    },
                                    {
                                        id: 1,
                                        text: '系统数据',
                                    }
                                ]
                            }),
                            listeners: {
                                change: function (obj, newValue, oldValue) {
                                    grid.getStore().searchType = newValue;
                                }
                            }
                        },
                        {
                            emptyText: '输入关键字，' + searchWinTitle + '（轻敲回车键）',
                            region: 'center',
                            flex: 1,
                            xtype: 'textfield',
                            itemId: 'searchInput',
                            name: 'searchInput',
                            code: 'searchInput' + $.md5(obj.code + entityCodes.join(",")),
                            useHistory: true,
                            doSearch: function () {
                                this.validate();
                                grid.getStore().loadPage(1);
                            },
                            listeners: {
                                render: function (obj, eOpts) {
                                    try {
                                        new Ext.util.KeyMap({
                                            target: obj.getEl(),
                                            key: 13,
                                            fn: function (keyCode, e) {
                                                this.doSearch();
                                            },
                                            scope: this
                                        });
                                    }
                                    catch (e) {
                                        console.error(e);
                                    }
                                },
                                change: function (obj, newValue, oldValue) {
                                    grid.getStore().searchKey = newValue;
                                },
                                selectHistoryValue: function (obj, history) {
                                    obj.doSearch();
                                },
                            },
                            triggers: {
                                search: {
                                    cls: 'text-search',
                                    handler: function () {
                                        this.doSearch();
                                    }
                                }
                            }
                        }
                    ]
                },
                viewConfig: {
                    loadingText: '正在努力搜索中…'
                }
            });
            var winWidth = parseInt((document.body.clientWidth * 0.5).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var searchWin = Ext.create('Ext.window.Window', {
                title: searchWinTitle,
                id: targetSearchWinId,
                height: winHeight,
                width: winWidth,
                iconCls: 'extIcon extSearch',
                layout: 'border',
                resizable: true,
                constrain: true,
                maximizable: true,
                animateTarget: obj,
                items: [grid],
                modal: false,
                firstShow: true,
                listeners: {
                    close: function (winObj, eOpts) {
                    },
                    show: function (winObj) {
                        setTimeout(function () {
                            winObj.down("#searchInput").focus();
                        }, 200);
                        grid.showEmptyTip();
                    },
                    hide: function () {
                        grid.hideEmptyTip();
                    },
                }
            });
            if (parentContainerCmp) {
                parentContainerCmp.add(searchWin);
            }
            searchWin.show();
        };
        System.takeIcon = function (icon, color) {
            if (Ext.isEmpty(color)) {
                return icon;
            }
            var regStr = /([^/]*.svg)/;
            if (icon && regStr.test(icon)) {
                return FastExt.Server.getIcon(regStr.exec(icon)[1].trim(), color);
            }
        };
        System._fontSize = "14px";
        System.lastTabId = -1;
        System.dateFormat = 'Y-m-d H:i:s';
        System.init = false;
        System.menus = null;
        System.cloneMenus = null;
        System.http = null;
        System.baseUrl = null;
        System.regByImage = /\.(jpg|png|gif|jpeg)$/i;
        System.regByMP4 = /\.(mp4)$/i;
        System.regByExcel = /\.(xls|xlsx)$/i;
        System.regByWord = /\.(doc)$/i;
        System.regByText = /\.(txt)$/i;
        System.fullscreen = false;
        System.sessionOutAlert = false;
        System.restoredTab = false;
        System.silenceGlobalSave = false;
        System.welcomeRightPanels = [];
        System.welcomeLeftPanels = [];
        System.currClickTarget = null;
        System.extCreateFilter = {};
        System.gridDefaultLinkButton = true;
        System.managerPowerCheckSameRole = true;
        System.menuSingleExpand = true;
        System.gridColumnRestore = true;
        System.monitor = {
            data: [],
            desc: [],
        };
        System.gridRowNumber = false;
        System.gridIDColumnHidden = false;
        System.gridRefreshData = false;
        System.powerVersion = "2.0";
        return System;
    }());
    FastExt.System = System;
    var SystemScript = (function () {
        function SystemScript() {
        }
        Object.defineProperty(SystemScript.prototype, "src", {
            get: function () {
                return this._src;
            },
            set: function (value) {
                this._src = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SystemScript.prototype, "href", {
            get: function () {
                return this._href;
            },
            set: function (value) {
                this._href = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SystemScript.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (value) {
                this._text = value;
            },
            enumerable: false,
            configurable: true
        });
        return SystemScript;
    }());
    FastExt.SystemScript = SystemScript;
    var SystemCompat = (function () {
        function SystemCompat() {
            window["getEntityDataStore"] = FastExt.Store.getEntityDataStore;
            window["commitStoreUpdate"] = FastExt.Store.commitStoreUpdate;
            window["getGridSelModel"] = FastExt.Grid.getGridSelModel;
            window["renders"] = FastExt.Renders;
            window["files"] = FastExt.FileModule;
            window["getPageToolBar"] = FastExt.Grid.getPageToolBar;
            window["getDetailsPanel"] = FastExt.Grid.getDetailsPanel;
            window["system"] = FastExt.System;
            window["toBool"] = FastExt.Base.toBool;
            window["deleteGridData"] = FastExt.Grid.deleteGridData;
            window["updateGridData"] = FastExt.Grid.updateGridData;
            window["runCallBack"] = FastExt.Base.runCallBack;
            window["showDetailsWindow"] = FastExt.Grid.showDetailsWindow;
            window["showWait"] = FastExt.Dialog.showWait;
            window["hideWait"] = FastExt.Dialog.hideWait;
            window["toast"] = FastExt.Dialog.toast;
            window["showAlert"] = FastExt.Dialog.showAlert;
            window["showLink"] = FastExt.Dialog.showLink;
            window["showCode"] = FastExt.Dialog.showCode;
            window["showEditorHtml"] = FastExt.Dialog.showEditorHtml;
            window["showException"] = FastExt.Dialog.showException;
            window["showJson"] = FastExt.Dialog.showJson;
            window["showVideo"] = FastExt.Dialog.showVideo;
            window["showImage"] = FastExt.Dialog.showImage;
            window["showText"] = FastExt.Dialog.showText;
            window["shakeComment"] = FastExt.Component.shakeComment;
            window["rotateOSSImgUrl"] = FastExt.Image.rotateOSSImgUrl;
            window["showRectangle"] = FastExt.Map.selRectangleInMap;
            window["MemoryCache"] = FastExt.Cache.memory;
            window["buildUUID8"] = FastExt.Base.buildUUID8;
            window["openUrl"] = FastExt.Base.openUrl;
            window["server"] = FastExt.Server;
        }
        return SystemCompat;
    }());
    FastExt.SystemCompat = SystemCompat;
    var ComponentInvokeInfo = (function () {
        function ComponentInvokeInfo() {
        }
        return ComponentInvokeInfo;
    }());
    FastExt.ComponentInvokeInfo = ComponentInvokeInfo;
    for (var subClass in FastExt) {
        if (Ext.isFunction(FastExt[subClass])) {
            FastExt[subClass]();
        }
    }
})(FastExt || (FastExt = {}));
