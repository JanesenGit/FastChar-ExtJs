var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var FastExt;
(function (FastExt) {
    var Animate = (function () {
        function Animate() {
        }
        Animate.loader = function (callBack) {
            FastExt.PluginLoader.loadPlugins("Animate", [FastExt.Animate.animateJsPath], callBack);
        };
        Animate.startValueAnimate = function (animateCode, animateConfig) {
            FastExt.Animate.clearAnimate(animateCode);
            FastExt.Animate.loader(function () {
                var params = ValueAnimateConfig.newParam(animateConfig);
                var animObj = {
                    value: params.from,
                };
                FastExt.Animate.animateMap[animateCode] = anime({
                    targets: animObj,
                    value: params.to,
                    easing: params.easing,
                    duration: params.duration,
                    delay: params.delay,
                    update: function () {
                        params.update(animObj.value);
                    },
                    changeBegin: function (anim) {
                        params.changeBegin(anim);
                    },
                    begin: function (anim) {
                        params.begin(anim);
                    },
                    complete: function (anim) {
                        params.complete(anim);
                        FastExt.Animate.clearAnimate(animateCode);
                    }
                });
            });
        };
        Animate.clearAnimate = function (animateCode) {
            var animObj = FastExt.Animate.animateMap[animateCode];
            if (animObj) {
                animObj.pause();
                delete FastExt.Animate.animateMap[animateCode];
            }
        };
        Animate.startHideAnimateByWidth = function (cmb) {
            var _this = this;
            if (!cmb) {
                return;
            }
            if (cmb.isHidden()) {
                return;
            }
            var lastWidth = cmb.getWidth();
            FastExt.Animate.startValueAnimate(cmb.getId(), {
                from: lastWidth,
                to: 0,
                update: function (value) {
                    cmb.setWidth(value);
                },
                complete: function () {
                    _this.clearAnimate(cmb);
                    cmb.setHidden(true);
                    cmb.setWidth(lastWidth);
                }
            });
        };
        ;
        Animate.startMinButtonAnimateByWidth = function (button, delay) {
            var _this = this;
            if (!button) {
                return;
            }
            var lastWidth = button.getWidth();
            var minWidth = button.getHeight();
            if (!button.fastAnimateFirstWidth) {
                button.fastAnimateFirstWidth = lastWidth;
            }
            FastExt.Animate.startValueAnimate(button.getId(), {
                delay: delay,
                from: lastWidth,
                to: minWidth,
                duration: 200,
                update: function (value) {
                    button.setWidth(value);
                },
                complete: function () {
                    _this.clearAnimate(button);
                    var txtEl = Ext.get(button.getId() + "-btnInnerEl");
                    if (txtEl) {
                        txtEl.setVisibilityMode(Ext.dom.Element.DISPLAY);
                        txtEl.setVisible(false);
                    }
                    button.setWidth(minWidth);
                }
            });
        };
        ;
        Animate.startMaxButtonAnimateByWidth = function (button, delay) {
            var _this = this;
            if (!button) {
                return;
            }
            var fromWidth = button.getWidth();
            var toWidth = button.fastAnimateFirstWidth;
            FastExt.Animate.startValueAnimate(button.getId(), {
                from: fromWidth,
                to: toWidth,
                duration: 200,
                delay: delay ? delay : 0,
                changeBegin: function () {
                    var txtEl = Ext.get(button.getId() + "-btnInnerEl");
                    if (txtEl) {
                        txtEl.setVisibilityMode(Ext.dom.Element.DISPLAY);
                        txtEl.setVisible(true);
                    }
                },
                update: function (value) {
                    button.setWidth(value);
                },
                complete: function () {
                    _this.clearAnimate(button);
                    button.setWidth(toWidth);
                }
            });
        };
        ;
        Animate.startCloseAnimateByWidth = function (cmb) {
            var _this = this;
            if (!cmb) {
                return;
            }
            if (cmb.destroyed) {
                return;
            }
            var lastWidth = cmb.getWidth();
            FastExt.Animate.startValueAnimate(cmb.getId(), {
                from: lastWidth,
                to: 0,
                update: function (value) {
                    cmb.setWidth(value);
                },
                complete: function () {
                    _this.clearAnimate(cmb);
                    cmb.destroy();
                }
            });
        };
        Animate.startCloseAnimateByHeight = function (cmb) {
            var _this = this;
            if (!cmb) {
                return;
            }
            if (cmb.destroyed) {
                return;
            }
            var lastHeight = cmb.getHeight();
            FastExt.Animate.startValueAnimate(cmb.getId(), {
                from: lastHeight,
                to: 0,
                duration: 200,
                update: function (value) {
                    cmb.setHeight(value);
                },
                complete: function () {
                    _this.clearAnimate(cmb);
                    cmb.destroy();
                }
            });
        };
        ;
        Animate.isAnimating = function (cmb) {
            return cmb.fastAnimate;
        };
        Animate.animateJsPath = "base/animejs/anime.min.js";
        Animate.animateMap = {};
        return Animate;
    }());
    FastExt.Animate = Animate;
    var ValueAnimateConfig = (function () {
        function ValueAnimateConfig() {
            this.duration = 500;
            this.easing = "linear";
            this.delay = 0;
            this.update = function (value) {
            };
            this.begin = function (anim) {
            };
            this.complete = function (anim) {
            };
            this.changeBegin = function (anim) {
            };
        }
        ValueAnimateConfig.newParam = function (param) {
            var newParam = new ValueAnimateConfig();
            if (param) {
                for (var paramKey in param) {
                    newParam[paramKey] = param[paramKey];
                }
            }
            return newParam;
        };
        return ValueAnimateConfig;
    }());
    FastExt.ValueAnimateConfig = ValueAnimateConfig;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Base = (function () {
        function Base() {
        }
        Base.getOS = function () {
            try {
                var sUserAgent = navigator.userAgent;
                var isWin = (navigator.platform === "Win32") || (navigator.platform === "Windows");
                var isMac = (navigator.platform === "Mac68K") || (navigator.platform === "MacPPC") || (navigator.platform === "Macintosh") || (navigator.platform === "MacIntel");
                if (isMac)
                    return "Mac";
                var isUnix = (navigator.platform === "X11") && !isWin && !isMac;
                if (isUnix)
                    return "Unix";
                var isLinux = (String(navigator.platform).indexOf("Linux") > -1);
                if (isLinux)
                    return "Linux";
                if (isWin) {
                    var isWin2K = sUserAgent.indexOf("Windows NT 5.0") > -1 || sUserAgent.indexOf("Windows 2000") > -1;
                    if (isWin2K)
                        return "Windows 2000";
                    var isWinXP = sUserAgent.indexOf("Windows NT 5.1") > -1 || sUserAgent.indexOf("Windows XP") > -1;
                    if (isWinXP)
                        return "Windows XP";
                    var isWin2003 = sUserAgent.indexOf("Windows NT 5.2") > -1 || sUserAgent.indexOf("Windows 2003") > -1;
                    if (isWin2003)
                        return "Windows 2003";
                    var isWinVista = sUserAgent.indexOf("Windows NT 6.0") > -1 || sUserAgent.indexOf("Windows Vista") > -1;
                    if (isWinVista)
                        return "Windows Vista";
                    var isWin7 = sUserAgent.indexOf("Windows NT 6.1") > -1 || sUserAgent.indexOf("Windows 7") > -1;
                    if (isWin7)
                        return "Windows 7";
                    var isWin8 = sUserAgent.indexOf("Windows NT 8.0") > -1 || sUserAgent.indexOf("Windows 8") > -1;
                    if (isWin8)
                        return "Windows 8";
                    var isWin10 = sUserAgent.indexOf("Windows NT 10.0") > -1 || sUserAgent.indexOf("Windows 10") > -1;
                    if (isWin10)
                        return "Windows 10";
                    return "Windows";
                }
            }
            catch (e) {
            }
            return "Other";
        };
        Base.deleteObjectAttr = function (attr) {
            var objects = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                objects[_i - 1] = arguments[_i];
            }
            for (var i = 0; i < objects.length; i++) {
                delete objects[i][attr];
            }
        };
        Base.toBool = function (obj, defaultValue) {
            if (Ext.isEmpty(defaultValue)) {
                defaultValue = false;
            }
            if (Ext.isEmpty(obj)) {
                return defaultValue;
            }
            if (Ext.isString(obj)) {
                if (obj === "0" || obj === "off" || obj.toLowerCase() === "false") {
                    return false;
                }
                if (obj === "1" || obj === "on" || obj.toLowerCase() === "true") {
                    return true;
                }
                return defaultValue;
            }
            if (Ext.isNumber(obj)) {
                if (obj === 0) {
                    return false;
                }
                if (obj === 1) {
                    return true;
                }
                return defaultValue;
            }
            if (Ext.isBoolean(obj)) {
                return obj;
            }
            return Boolean(obj);
        };
        Base.copyToBoard = function (content) {
            var oInput = document.createElement('input');
            oInput.value = content;
            document.body.appendChild(oInput);
            oInput.select();
            document.execCommand("Copy");
            oInput.style.display = 'none';
            $(oInput).remove();
        };
        Base.copy = function (obj) {
            var newObj = {};
            if (obj instanceof Array) {
                newObj = obj.concat();
            }
            else if (obj instanceof Function) {
                newObj = obj;
            }
            else {
                for (var key in obj) {
                    newObj[key] = obj[key];
                }
            }
            return newObj;
        };
        Base.download = function (url, fileName) {
            var name = url.split("?")[0].substring(url.lastIndexOf("/"));
            var a = document.createElement('a');
            var event = new MouseEvent('click');
            if (Ext.isEmpty(fileName)) {
                if (name.length === 0) {
                    fileName = "file" + name;
                }
                else {
                    fileName = name;
                }
            }
            a.download = fileName;
            a.href = url;
            a.dispatchEvent(event);
        };
        Base.openUrl = function (url, target) {
            FastExt.Windows.openUrl(url, target);
        };
        Base.runCallBack = function (fun, param) {
            if (!Ext.isFunction(fun)) {
                return;
            }
            if (fun.callBacked) {
                return;
            }
            var callBackParams = [];
            for (var i = 1; i < arguments.length; i++) {
                callBackParams[i - 1] = arguments[i];
            }
            fun.apply(this, callBackParams);
            fun.callBacked = true;
        };
        Base.buildOnlyCode = function (prefix) {
            return prefix + $.md5(this.buildUUID8());
        };
        Base.buildOnlyNumber = function (prefix) {
            if (FastExt.Base.onlyIterator > 99) {
                FastExt.Base.onlyIterator = 1;
            }
            return prefix + Ext.now() + (FastExt.Base.onlyIterator++);
        };
        Base.getNumberValue = function (value) {
            return parseFloat(value.replace(/[^0-9]/ig, ""));
        };
        Base.prefixInteger = function (num, length) {
            return (Array(length).join('0') + num).slice(-length);
        };
        Base.getSVGIcon = function (className) {
            return '<svg class="svgIcon fileIcon" aria-hidden="true"><use xlink:href="#' + className + '"></use></svg>';
        };
        Base.getSVGClassName = function () {
            var types = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                types[_i] = arguments[_i];
            }
            for (var i = 0; i < types.length; i++) {
                var type = types[i].toString().toLowerCase();
                var fileClassName = undefined;
                if (FastExt.File.isSuffixFile(type, "doc", "docx")) {
                    fileClassName = "extFileWord";
                }
                else if (FastExt.File.isSuffixFile(type, "xls", "xlsx")) {
                    fileClassName = "extFileExcel";
                }
                else if (FastExt.File.isSuffixFile(type, "pdf")) {
                    fileClassName = "extFilePDF";
                }
                else if (FastExt.File.isSuffixFile(type, "ppt")) {
                    fileClassName = "extFilePPT";
                }
                else if (FastExt.File.isSuffixFile(type, "zip", "rar", "gzip")) {
                    fileClassName = "extFileZIP";
                }
                else if (FastExt.File.isSuffixFile(type, "apk", "aar")) {
                    fileClassName = "extFileAPK";
                }
                else if (FastExt.File.isSuffixFile(type, "jpg", "jpeg")) {
                    fileClassName = "extFileJPG";
                }
                else if (FastExt.File.isSuffixFile(type, "png")) {
                    fileClassName = "extFilePNG";
                }
                else if (FastExt.File.isSuffixFile(type, "psd")) {
                    fileClassName = "extFilePSD";
                }
                else if (FastExt.File.isSuffixFile(type, "html", "shtml")) {
                    fileClassName = "extFileHTMl";
                }
                else if (FastExt.File.isSuffixFile(type, "txt")) {
                    fileClassName = "extFileTXT";
                }
                else if (FastExt.File.isSuffixFile(type, "ipa")) {
                    fileClassName = "extFileIOS";
                }
                if (!Ext.isEmpty(fileClassName)) {
                    return fileClassName;
                }
            }
            return "extFile";
        };
        Base.guessDateFormat = function (value) {
            return FastExt.Dates.guessDateFormat(value);
        };
        Base.parseDate = function (dateValue) {
            return FastExt.Dates.parseDate(dateValue);
        };
        Base.getUrlContentType = function (url, callback) {
            if (!url || !callback) {
                return;
            }
            var onlyCode = $.md5(url.toString());
            var cacheXhr = FastExt.Cache.getCache(onlyCode);
            if (cacheXhr) {
                callback(cacheXhr);
                return;
            }
            $.ajax({
                type: 'HEAD',
                url: url,
                complete: function (xhr, data) {
                    FastExt.Cache.setCache(onlyCode, xhr.getResponseHeader("content-type"));
                    callback(xhr.getResponseHeader("content-type"));
                },
                error: function () {
                    FastExt.Cache.setCache(onlyCode, "un-know");
                    callback("un-know");
                }
            });
        };
        Base.inputFocusEnd = function (obj) {
            try {
                obj.focus();
                var len = obj.value.length;
                if (document["selection"]) {
                    var sel = obj.createTextRange();
                    sel.moveStart('character', len);
                    sel.collapse();
                    sel.select();
                }
                else if (typeof obj.selectionStart == 'number' && typeof obj.selectionEnd == 'number') {
                    obj.selectionStart = obj.selectionEnd = len;
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        Base.randomInt = function (min, max) {
            if (min === max) {
                return min;
            }
            return Math.floor(Math.random() * (max - min + 1) + min);
        };
        Base.getTargetElement = function (target) {
            return FastExt.Component.getTargetElement(target);
        };
        Base.getTargetBodyElement = function (target) {
            return FastExt.Component.getTargetBodyElement(target);
        };
        Base.isElementInViewport = function (element) {
            try {
                var rect = element.getBoundingClientRect();
                if (rect.width <= 0 && rect.height <= 0) {
                    return false;
                }
                return (rect.top >= 0 &&
                    rect.left >= 0 &&
                    rect.bottom <=
                        (window.innerHeight || document.documentElement.clientHeight) &&
                    rect.right <=
                        (window.innerWidth || document.documentElement.clientWidth));
            }
            catch (e) {
            }
            return false;
        };
        Base.loadCssCode = function (style, callBack) {
            var oHead = document.getElementsByTagName('head').item(0);
            var oStyle = document.createElement("style");
            oStyle.type = "text/css";
            if (oStyle["styleSheet"]) {
                oStyle["styleSheet"].cssText = style;
            }
            else {
                oStyle.innerHTML = style;
            }
            if (callBack != null) {
                callBack();
            }
            oHead.appendChild(oStyle);
        };
        Base.dispatchTargetEvent = function (targetDocument, targetElement, eventName) {
            if (!targetElement || !targetDocument) {
                return;
            }
            if (targetDocument.createEvent) {
                var event_1 = targetDocument.createEvent('MouseEvents');
                event_1.initEvent(eventName, true, false);
                targetElement.dispatchEvent(event_1);
            }
            else if (targetDocument.createEventObject) {
                targetElement.fireEvent('on' + eventName);
            }
        };
        Base.buildUUID4 = function () {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        };
        Base.buildUUID8 = function () {
            return (((1 + Math.random()) * 0x100000000) | 0).toString(16).substring(1);
        };
        Base.buildUUID12 = function () {
            return FastExt.Base.buildUUID4() + FastExt.Base.buildUUID8();
        };
        Base.buildUUID16 = function () {
            return FastExt.Base.buildUUID8() + FastExt.Base.buildUUID8();
        };
        Base.getUrlParams = function (url, paramName) {
            var re = new RegExp(paramName + '=([^&]*)(?:&)?');
            return url.match(re) && url.match(re)[1];
        };
        Base.toString = function (value, defaultValue) {
            if (defaultValue === undefined || defaultValue === null) {
                defaultValue = value;
            }
            if (Ext.isEmpty(value)) {
                return defaultValue;
            }
            return value.toString();
        };
        Base.toInt = function (value, defaultValue) {
            if (defaultValue === undefined || defaultValue === null) {
                defaultValue = value;
            }
            if (Ext.isEmpty(value) || isNaN(value)) {
                return defaultValue;
            }
            return parseInt(value);
        };
        Base.toMaxString = function (value, maxLength) {
            var realString = FastExt.Base.toString(value, "");
            if (realString.length > maxLength) {
                return realString.substring(0, maxLength) + "…";
            }
            return realString;
        };
        Base.toPlanParams = function (params) {
            var paramArray = [];
            for (var i = 0; i < params.length; i++) {
                var value = params[i];
                if (Ext.isString(value)) {
                    paramArray.push("\"" + value + "\"");
                }
                else {
                    paramArray.push(value);
                }
            }
            return paramArray.join(",");
        };
        Base.getEmptyPromise = function () {
            return new Ext.Promise(function (resolve, reject) {
                resolve();
            });
        };
        Base.toByteUnit = function (value, digits) {
            if (Ext.isEmpty(digits)) {
                digits = 2;
            }
            var aLong = parseInt(value);
            if (aLong === 0) {
                return "0";
            }
            var aG = 1024.0 * 1024.0 * 1024.0;
            if (aLong > aG) {
                return (aLong / aG).toFixed(digits) + "G";
            }
            var aM = 1024.0 * 1024.0;
            if (aLong > aM) {
                return (aLong / aM).toFixed(digits) + "M";
            }
            var aKb = 1024.0;
            if (aLong > aKb) {
                return (aLong / aKb).toFixed(digits) + "KB";
            }
            return aLong + "B";
        };
        Base.replacePlaceholder = function (mapValue, content) {
            var reg_str = /(\$[{\[][^{}\[\]]+[}\]])/g;
            var result = content.match(reg_str);
            if (!result) {
                return;
            }
            var keyMap = {};
            for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {
                var regKey = result_1[_i];
                var runKey = regKey.replace("[", "").replace("]", "").replace("{", "").replace("}", "").replace("$", "");
                keyMap[regKey] = mapValue[runKey];
            }
            for (var keyMapKey in keyMap) {
                content = content.replaceAll(keyMapKey, keyMap[keyMapKey]);
            }
            return content;
        };
        Base.computeMaxDivisor = function (num1, num2) {
            if ((num1 - num2) < 0) {
                var k = num1;
                num1 = num2;
                num2 = k;
            }
            while (num2 !== 0) {
                var remainder = num1 % num2;
                num1 = num2;
                num2 = remainder;
            }
            return num1;
        };
        Base.formatUrlVersion = function (url, params) {
            if (Ext.isEmpty(url)) {
                return url;
            }
            var urlArray = url.split("@");
            url = urlArray[0];
            var newUrl = url;
            if (url.indexOf("v=") < 0) {
                if (url.indexOf("?") > 0) {
                    newUrl = url + "&v=" + FastExt.System.ConfigHandler.getSystemVersionInt();
                }
                else {
                    newUrl = url + "?v=" + FastExt.System.ConfigHandler.getSystemVersionInt();
                }
            }
            if (params) {
                for (var key in params) {
                    if (params.hasOwnProperty(key)) {
                        newUrl = newUrl + "&" + key + "=" + params[key];
                    }
                }
            }
            urlArray[0] = newUrl;
            return urlArray.join("@");
        };
        Base.formatUrl = function (url, params) {
            if (Ext.isEmpty(url)) {
                return url;
            }
            if (url.startWith("http://") || url.startWith("https://")) {
                return this.formatUrlVersion(url, params);
            }
            if (FastExt.System.ConfigHandler.getSystemHttp()) {
                return this.formatUrlVersion(FastExt.System.ConfigHandler.getSystemHttp() + url, params);
            }
            return this.formatUrlVersion(url, params);
        };
        Base.guessTextWidth = function (text, space) {
            if (Ext.isEmpty(space)) {
                space = 2.5;
            }
            return (text.length + space) * FastExt.System.ConfigHandler.getFontSizeNumber();
        };
        Base.onlyIterator = 1;
        return Base;
    }());
    FastExt.Base = Base;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Button = (function () {
        function Button() {
        }
        Button.buttonToMenuItem = function (button) {
            if (button.hidden || Ext.isEmpty(button.text) || button.text === "&#160;") {
                return null;
            }
            var child = {
                icon: button.icon,
                iconCls: button.iconCls,
                text: button.text,
                sourceBtn: button,
                subtext: button.subtext,
                handler: function () {
                    this.sourceBtn.handler.apply(this.sourceBtn);
                },
                disabled: button.disabled
            };
            if (button.getMenu() != null) {
                var menus_1 = [];
                button.getMenu().items.each(function (item, index) {
                    var items = FastExt.Button.buttonToMenuItem(item);
                    if (items) {
                        menus_1.push(items);
                    }
                });
                child["menu"] = menus_1;
            }
            return child;
        };
        Button.checkGridToolbarButton = function (button) {
            var grid = button.up('grid,treepanel');
            if (grid) {
                FastExt.Button.buttonToBind(grid, button);
            }
        };
        Button.checkButtonBind = function (array, button) {
            if (!array) {
                return false;
            }
            if (!button) {
                return false;
            }
            for (var i = 0; i < array.length; i++) {
                if (array[i].getId() === button.getId()) {
                    return true;
                }
            }
            return false;
        };
        Button.setDisabled = function (button, disabled) {
            if (button) {
                button.setDisabled(disabled);
                if (button.overflowClone) {
                    button.overflowClone.setDisabled(disabled);
                }
            }
        };
        Button.buttonToBind = function (grid, button) {
            if (!grid.selectButtons) {
                grid.selectButtons = [];
            }
            if (!grid.updateButtons) {
                grid.updateButtons = [];
            }
            if (!grid.addButtons) {
                grid.addButtons = [];
            }
            if (!grid.deleteButtons) {
                grid.deleteButtons = [];
            }
            if (!grid.bindDetailButtons) {
                grid.bindDetailButtons = [];
            }
            if (!grid.entityCodeButtons) {
                grid.entityCodeButtons = [];
            }
            var buttonHidden = button.isHidden();
            if (FastExt.Base.toBool(button.hiddenValid)) {
                buttonHidden = false;
            }
            if (button.checkSelect && !buttonHidden) {
                FastExt.Button.setDisabled(button, true);
                if (!FastExt.Button.checkButtonBind(grid.selectButtons, button)) {
                    grid.selectButtons.push(button);
                }
            }
            if ((button.checkUpdate || button.entityUpdateButton || button.text === "提交修改") && !buttonHidden) {
                FastExt.Button.setDisabled(button, true);
                if (!FastExt.Button.checkButtonBind(grid.updateButtons, button)) {
                    grid.updateButtons.push(button);
                }
            }
            if ((button.entityAddButton) && !buttonHidden) {
                if (!FastExt.Button.checkButtonBind(grid.addButtons, button)) {
                    grid.addButtons.push(button);
                }
            }
            if ((button.entityDeleteButton) && !buttonHidden) {
                if (!FastExt.Button.checkButtonBind(grid.deleteButtons, button)) {
                    grid.deleteButtons.push(button);
                }
            }
            if (button.bindDetail && Ext.isFunction(button.handler) && !buttonHidden) {
                if (!FastExt.Button.checkButtonBind(grid.bindDetailButtons, button)) {
                    grid.bindDetailButtons.push(button);
                }
            }
            if (button.entityCode) {
                if (!FastExt.Button.checkButtonBind(grid.entityCodeButtons, button)) {
                    grid.entityCodeButtons.push(button);
                }
            }
            if (Ext.isFunction(button.getMenu) && button.getMenu() != null) {
                button.getMenu().items.each(function (item, index) {
                    FastExt.Button.buttonToBind(grid, item);
                });
            }
            if (button.items != null) {
                button.items.each(function (item, index) {
                    FastExt.Button.buttonToBind(grid, item);
                });
            }
        };
        return Button;
    }());
    FastExt.Button = Button;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Cache = (function () {
        function Cache() {
        }
        Cache.setCache = function (key, data) {
            try {
                localStorage.setItem(key, JSON.stringify(data));
            }
            catch (e) {
            }
        };
        Cache.getCache = function (key) {
            try {
                return JSON.parse(localStorage.getItem(key));
            }
            catch (e) {
            }
            return null;
        };
        Cache.removeCache = function (key) {
            localStorage.removeItem(key);
        };
        Cache.setEnumCache = function (enumName, cacheKey, data) {
            if (!this.memory.hasOwnProperty(enumName)) {
                this.memory[enumName] = {};
            }
            if (!this.memory[enumName]) {
                this.memory[enumName] = {};
            }
            this.memory[enumName][cacheKey] = data;
        };
        Cache.getEnumCache = function (enumName, cacheKey) {
            if (!this.memory.hasOwnProperty(enumName)) {
                this.memory[enumName] = {};
            }
            if (!this.memory[enumName]) {
                this.memory[enumName] = {};
            }
            return this.memory[enumName][cacheKey];
        };
        Cache.getEnumAllCache = function (enumName) {
            if (!this.memory.hasOwnProperty(enumName)) {
                this.memory[enumName] = {};
            }
            if (!this.memory[enumName]) {
                this.memory[enumName] = {};
            }
            return this.memory[enumName];
        };
        Cache.existEnumCache = function (enumName, cacheKey) {
            if (!this.memory.hasOwnProperty(enumName)) {
                return false;
            }
            if (!this.memory[enumName]) {
                return false;
            }
            var cacheData = this.getEnumCache(enumName, cacheKey);
            return !Ext.isEmpty(cacheData);
        };
        Cache.clearEnumCache = function (enumName) {
            delete this.memory[enumName];
            this.memory[enumName] = null;
        };
        Cache.clearEnumCacheBySearch = function (enumName) {
            var waitRemoveKey = [];
            for (var memoryKey in this.memory) {
                if (memoryKey.indexOf(enumName) >= 0) {
                    waitRemoveKey.push(memoryKey);
                }
            }
            for (var _i = 0, waitRemoveKey_1 = waitRemoveKey; _i < waitRemoveKey_1.length; _i++) {
                var waitRemoveKeyElement = waitRemoveKey_1[_i];
                delete this.memory[waitRemoveKeyElement];
                this.memory[waitRemoveKeyElement] = null;
            }
        };
        Cache.memory = {};
        return Cache;
    }());
    FastExt.Cache = Cache;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var CallSites = (function () {
        function CallSites() {
        }
        CallSites.getStack = function () {
            var _prepareStackTrace = Error.prepareStackTrace;
            try {
                var result_2 = [];
                Error.prepareStackTrace = function (_, callSites) {
                    var callSitesWithoutCurrent = callSites.slice(1);
                    result_2 = callSitesWithoutCurrent;
                    return callSitesWithoutCurrent;
                };
                new Error().stack;
                return result_2;
            }
            finally {
                Error.prepareStackTrace = _prepareStackTrace;
            }
        };
        CallSites.isFastExtUtilsCall = function () {
            var stack = FastExt.CallSites.getStack();
            if (stack.length >= 3) {
                var callStack = stack[2];
                var fileName = callStack.getFileName();
                if (Ext.isEmpty(fileName)) {
                    return false;
                }
                var realFileName = fileName.split("?")[0];
                if (realFileName.endWith("fast-ext-utils.min.js") || realFileName.endWith("fast-ext-utils.js")) {
                    return true;
                }
            }
            return false;
        };
        return CallSites;
    }());
    FastExt.CallSites = CallSites;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Captcha = (function () {
        function Captcha() {
        }
        Captcha.getLoginCaptchaCmp = function () {
            var loginType = FastExt.System.ConfigHandler.getLoginType();
            if (loginType === "normal") {
                return {
                    xtype: "label",
                    hidden: true,
                };
            }
            if (window["showValidCaptcha"] && Ext.isFunction(window["showValidCaptcha"])) {
                return this.getClickCaptchaCmp();
            }
            return this.getClickVerifyCmp();
        };
        Captcha.getNormalCaptchaCmp = function () {
            var labelWidth = FastExt.System.ConfigHandler.getFontSizeNumber() * 2;
            return {
                xtype: 'fieldcontainer',
                labelWidth: 0,
                anchor: "100%",
                itemId: "captcha",
                layout: {
                    type: 'hbox',
                    align: 'stretch'
                },
                refreshCode: function () {
                    try {
                        var imgCmp_1 = this.query("#imgCode")[0];
                        var inputCmp = this.query("#validateCode")[0];
                        if (inputCmp) {
                            inputCmp.setValue(null);
                            var request_1 = new XMLHttpRequest();
                            request_1.responseType = 'blob';
                            request_1.open('get', FastExt.Server.showCaptchaUrl(), true);
                            var sessionId = FastExt.Server.getSessionId();
                            if (!Ext.isEmpty(sessionId)) {
                                request_1.setRequestHeader('SessionId', sessionId);
                            }
                            request_1.onreadystatechange = function (e) {
                                if (request_1.readyState == XMLHttpRequest.DONE && request_1.status == 200) {
                                    imgCmp_1.setSrc(URL.createObjectURL(request_1.response));
                                }
                            };
                            request_1.send(null);
                        }
                    }
                    catch (e) {
                        console.error(e);
                    }
                },
                items: [
                    {
                        xtype: 'textfield',
                        fieldLabel: '<svg class="svgIcon" aria-hidden="true"><use xlink:href="#extLoginCode"></use></svg>',
                        labelAlign: "right",
                        labelWidth: labelWidth,
                        labelSeparator: '',
                        labelStyle: "font-size: 22px !important;color: #666666;",
                        margin: '10 10 0 0',
                        allowBlank: false,
                        flex: 1,
                        name: 'validateCode',
                        itemId: "validateCode",
                        letterKeyboard: true,
                        emptyText: '请输入验证码',
                        blankText: '请输入验证码'
                    }, {
                        xtype: 'image',
                        margin: '10 10 0 0',
                        width: 74,
                        cls: 'fast-system-valid-code-img',
                        itemId: 'imgCode',
                        height: 34,
                        listeners: {
                            click: {
                                element: 'el',
                                fn: function () {
                                    this.component.up("#captcha").refreshCode();
                                }
                            }
                        },
                    }
                ],
            };
        };
        Captcha.getClickCaptchaCmp = function () {
            var labelWidth = FastExt.System.ConfigHandler.getFontSizeNumber() * 2;
            var captchaKey = FastExt.Base.buildOnlyCode("CK");
            return {
                xtype: 'fieldcontainer',
                labelWidth: 0,
                anchor: "100%",
                itemId: "captcha",
                layout: {
                    type: 'hbox',
                    align: 'stretch'
                },
                refreshCode: function () {
                    var validateCodeTip = this.down("#validateCodeTip");
                    if (validateCodeTip) {
                        validateCodeTip.setValue(null);
                        validateCodeTip.removeCls("validSuccess");
                        validateCodeTip.setFieldLabel('<svg class="svgIcon" aria-hidden="true"><use xlink:href="#extPower"></use></svg>');
                    }
                },
                showValid: function () {
                    var me = this;
                    window["showValidCaptcha"](me, function (result) {
                        var validateCodeTip = me.down("#validateCodeTip");
                        if (result.success) {
                            validateCodeTip.setValue("安全验证通过！");
                            validateCodeTip.setFieldLabel('<svg class="svgIcon extRole" aria-hidden="true"><use xlink:href="#extLoginCode"></use></svg>');
                            validateCodeTip.addCls("validSuccess");
                            validateCodeTip.clearInvalid();
                        }
                        else {
                            me.refreshCode();
                        }
                    }, captchaKey);
                },
                items: [
                    {
                        xtype: "hiddenfield",
                        name: "captchaKey",
                        value: captchaKey,
                    },
                    {
                        xtype: 'textfield',
                        fieldLabel: '<svg class="svgIcon" aria-hidden="true"><use xlink:href="#extPower"></use></svg>',
                        labelAlign: "right",
                        labelWidth: labelWidth,
                        labelSeparator: '',
                        labelStyle: "font-size: 22px !important;color: #666666;",
                        margin: '10 10 0 0',
                        allowBlank: false,
                        flex: 1,
                        name: '@',
                        itemId: "validateCodeTip",
                        letterKeyboard: true,
                        emptyText: '请您完成安全验证',
                        blankText: '请您先完成安全验证',
                        triggers: {
                            openValide: {
                                cls: 'extIcon extMouseClick',
                                hideOnReadOnly: false,
                                handler: function () {
                                    if (Ext.isEmpty(this.getValue())) {
                                        this.up("#captcha").showValid();
                                    }
                                    else {
                                        FastExt.Dialog.toast("您已通过安全验证，无需再次验证！");
                                    }
                                }
                            }
                        },
                        listeners: {
                            render: function () {
                                if (Ext.isFunction(this.setReadOnlyAttr)) {
                                    this.setReadOnlyAttr(true);
                                }
                            },
                        },
                    }
                ],
            };
        };
        Captcha.getClickVerifyCmp = function () {
            var labelWidth = FastExt.System.ConfigHandler.getFontSizeNumber() * 2;
            var captchaKey = FastExt.Base.buildOnlyCode("CK");
            return {
                xtype: 'fieldcontainer',
                labelWidth: 0,
                anchor: "100%",
                itemId: "captcha",
                layout: {
                    type: 'hbox',
                    align: 'stretch'
                },
                refreshCode: function () {
                    if (this.verifSuccess) {
                        return;
                    }
                    var validateCodeTip = this.down("#validateCodeTip");
                    if (validateCodeTip) {
                        validateCodeTip.setValue(null);
                        validateCodeTip.removeCls("fast-valid-success");
                        validateCodeTip.setFieldLabel('<svg class="svgIcon" aria-hidden="true"><use xlink:href="#extPower"></use></svg>');
                    }
                },
                showValid: function () {
                    var loginName = Ext.getCmp("loginName");
                    var value = loginName.getValue();
                    if (Ext.isEmpty(value)) {
                        FastExt.Dialog.toast("请您先输入登录名！");
                        loginName.validate();
                        FastExt.Component.shakeComment(loginName);
                        return;
                    }
                    var me = this;
                    if (me.verifing) {
                        return;
                    }
                    me.verifing = true;
                    me.verifSuccess = false;
                    var validateCodeTip = me.down("#validateCodeTip");
                    validateCodeTip.setEmptyText("正在验证中，请稍后…");
                    validateCodeTip.verifing = true;
                    var mouseClickXY = FastExt.SystemLayout.getMouseClickXY();
                    FastExt.Server.clickVerify(value, mouseClickXY.x, mouseClickXY.y, captchaKey, function (success, message) {
                        validateCodeTip.setValue(null);
                        validateCodeTip.verifing = false;
                        me.verifing = false;
                        if (success) {
                            validateCodeTip.setValue("安全验证通过！");
                            validateCodeTip.setFieldLabel('<svg class="svgIcon extRole" aria-hidden="true"><use xlink:href="#extLoginCode"></use></svg>');
                            validateCodeTip.addCls("fast-valid-success");
                            validateCodeTip.clearInvalid();
                            me.verifSuccess = true;
                        }
                        else {
                            FastExt.Dialog.toast(message);
                        }
                    });
                },
                items: [
                    {
                        xtype: "hiddenfield",
                        name: "captchaKey",
                        value: captchaKey,
                    },
                    {
                        xtype: 'textfield',
                        fieldLabel: '<svg class="svgIcon" aria-hidden="true"><use xlink:href="#extPower"></use></svg>',
                        labelAlign: "right",
                        labelWidth: labelWidth,
                        labelSeparator: '',
                        labelStyle: "font-size: 22px !important;color: #666666;",
                        margin: '10 10 0 0',
                        allowBlank: false,
                        flex: 1,
                        name: '@',
                        itemId: "validateCodeTip",
                        letterKeyboard: true,
                        emptyText: '请点击右侧按钮，完成安全验证',
                        blankText: '请您先完成安全验证！',
                        editable: false,
                        triggers: {
                            openVerify: {
                                cls: 'extIcon extMouseClick',
                                hideOnReadOnly: false,
                                handler: function () {
                                    if (!this.mouseovered) {
                                        FastExt.Dialog.toast("非人为操作！");
                                        return;
                                    }
                                    if (this.verifing) {
                                        return;
                                    }
                                    if (Ext.isEmpty(this.getValue())) {
                                        this.up("#captcha").showValid();
                                    }
                                    else {
                                        FastExt.Dialog.toast("您已通过安全验证，无需再次验证！");
                                    }
                                }
                            }
                        },
                        listeners: {
                            render: function () {
                                if (Ext.isFunction(this.setReadOnlyAttr)) {
                                    this.setReadOnlyAttr(true);
                                }
                            },
                            afterrender: function () {
                                var _this = this;
                                this.getEl().on("mouseover", function () {
                                    _this.mouseovered = true;
                                }, this);
                                this.getEl().on("touchstart", function () {
                                    _this.mouseovered = true;
                                }, this);
                            }
                        },
                    }
                ],
            };
        };
        Captcha.showGoogleAuthentication = function (step, callBack) {
            var size = parseInt((document.body.clientHeight * 0.35).toFixed(0));
            var bindStep = {
                xtype: 'panel',
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                },
                border: 0,
                items: [
                    {
                        xtype: 'label',
                        height: 34,
                        html: "<div style='display: flex;" +
                            "align-items: center;" +
                            "justify-content: center;" +
                            "color: black;" +
                            "font-size: 18px;" +
                            "font-weight: bold;'>" +
                            "请使用谷歌验证器扫码绑定</div>"
                    },
                    {
                        xtype: "image",
                        width: size,
                        height: size,
                        src: FastExt.Server.getGoogleBindUrl(),
                    }
                ]
            };
            var confirmStep = {
                xtype: 'form',
                itemId: "validForm",
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                },
                border: 0,
                items: [
                    {
                        xtype: 'lottie',
                        width: size,
                        height: size,
                        jsonPath: 'base/lottie/google.json',
                    },
                    {
                        xtype: 'textfield',
                        margin: '0',
                        name: "code",
                        itemId: "code",
                        allowBlank: false,
                        emptyText: '请输入谷歌验证器的验证码',
                    }
                ]
            };
            var downAppUrl = FastExt.System.ConfigHandler.getGoogleAuthenticationAppDownloadUrl();
            var steps = [];
            if (step >= 2) {
                steps.push(bindStep);
            }
            steps.push(confirmStep);
            Ext.create('Ext.window.Window', {
                title: "谷歌双向安全验证",
                iconCls: 'extIcon extLoginCode',
                itemId: "validWindow",
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                },
                cacheUISize: false,
                resizable: false,
                maximizable: false,
                constrain: true,
                modal: true,
                padding: '10 10 10 10',
                items: [
                    {
                        xtype: "panel",
                        layout: {
                            type: 'vbox',
                            align: 'stretch'
                        },
                        itemId: "stepContainer",
                        border: 0,
                        refreshButton: function () {
                            var panel = this.down("#containerPanel");
                            this.down("#btnPrev").setHidden(!panel.getLayout().getPrev());
                            this.down("#btnNext").setHidden(!panel.getLayout().getNext());
                            this.down("#btnConfirm").setHidden(panel.getLayout().getNext());
                        },
                        next: function () {
                            var panel = this.down("#containerPanel");
                            panel.getLayout().next();
                            this.refreshButton();
                        },
                        prev: function () {
                            var panel = this.down("#containerPanel");
                            panel.getLayout().prev();
                            this.refreshButton();
                        },
                        items: [
                            {
                                xtype: "panel",
                                layout: "card",
                                border: 0,
                                itemId: "containerPanel",
                                padding: '10 10 0 10',
                                style: {
                                    background: "#ffffff",
                                },
                                items: steps,
                            },
                            {
                                xtype: "panel",
                                layout: {
                                    type: 'hbox',
                                    align: 'stretch',
                                    pack: 'center',
                                },
                                border: 0,
                                padding: '5 5 5 5',
                                items: [
                                    {
                                        xtype: 'button',
                                        flex: 1,
                                        text: "下一步",
                                        itemId: "btnNext",
                                        margin: '5 5 5 5',
                                        iconCls: "extIcon extArrowRight3",
                                        handler: function () {
                                            var stepContainer = this.up("#stepContainer");
                                            if (stepContainer) {
                                                stepContainer.next();
                                            }
                                        },
                                    },
                                    {
                                        xtype: 'button',
                                        flex: 1,
                                        text: "上一步",
                                        itemId: "btnPrev",
                                        margin: '5 5 5 5',
                                        iconCls: "extIcon extArrowLeft3",
                                        handler: function () {
                                            var stepContainer = this.up("#stepContainer");
                                            if (stepContainer) {
                                                stepContainer.prev();
                                            }
                                        }
                                    },
                                    {
                                        xtype: 'button',
                                        flex: 1,
                                        text: "立即验证",
                                        itemId: "btnConfirm",
                                        margin: '5 5 5 5',
                                        iconCls: "extIcon extManager",
                                        handler: function () {
                                            var validWindow = this.up("#validWindow");
                                            if (validWindow) {
                                                var validForm = validWindow.down("#validForm");
                                                if (validForm.isValid()) {
                                                    var code = validForm.getFieldValue("code");
                                                    validWindow.setLoading("正在验证中，请稍后……");
                                                    FastExt.Server.googleVerify(code, function (success, message) {
                                                        validWindow.setLoading(false);
                                                        if (success) {
                                                            if (Ext.isFunction(callBack)) {
                                                                callBack(true);
                                                            }
                                                            FastExt.Dialog.toast("谷歌身份验证器，验证成功！");
                                                            validWindow.close();
                                                        }
                                                        else {
                                                            FastExt.Dialog.showAlert("系统提醒", message);
                                                        }
                                                    });
                                                }
                                            }
                                        }
                                    },
                                ]
                            },
                            {
                                xtype: "tipline",
                                height: 25,
                                margin: '10 10 10 10',
                                lineText: "友情支持",
                                hidden: Ext.isEmpty(downAppUrl),
                                lineTextColor: "#9d9d9d",
                                lineColor: "#cccccc"
                            },
                            {
                                xtype: 'button',
                                flex: 1,
                                text: "下载谷歌身份验证器APP",
                                itemId: "btnDownload",
                                margin: '10 10 10 10',
                                iconCls: "extIcon extDownload",
                                hidden: Ext.isEmpty(downAppUrl),
                                handler: function () {
                                    FastExt.Base.openUrl(downAppUrl, FastEnum.Target._blank);
                                },
                            }
                        ],
                    }
                ],
                listeners: {
                    show: function () {
                        var stepContainer = this.down("#stepContainer");
                        if (stepContainer) {
                            stepContainer.refreshButton();
                        }
                    }
                }
            }).show();
        };
        return Captcha;
    }());
    FastExt.Captcha = Captcha;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Color = (function () {
        function Color() {
        }
        Color.toColor = function (obj, defaultValue) {
            if (Ext.isEmpty(defaultValue)) {
                defaultValue = "#FFFFFF";
            }
            if (Ext.isEmpty(obj)) {
                return defaultValue;
            }
            if (obj.toString().startWith("#")) {
                return obj.toString();
            }
            try {
                obj = obj.toString().replaceAll(" ", "");
                var color = Ext.ux.colorpick.ColorUtils.parseColor(obj);
                return "#" + Ext.ux.colorpick.ColorUtils.formats.HEX8(color);
            }
            catch (e) {
            }
            return "#" + obj;
        };
        Color.showColorPicker = function (obj, defaultValue, onColorChange) {
            if (Ext.isEmpty(defaultValue)) {
                defaultValue = "#42445a";
            }
            return new Ext.Promise(function (resolve, reject) {
                var doShowPicker = function () {
                    var menu = Ext.create('Ext.menu.Menu', {
                        showSeparator: false,
                        layout: 'border',
                        padding: '0 0 0 0',
                        style: {
                            background: "#ffffff"
                        },
                        alwaysOnTop: true,
                        width: 250,
                        height: 320,
                        listeners: {
                            hide: function (obj, epts) {
                                obj.close();
                                FastExt.Base.runCallBack(resolve);
                            }
                        },
                        items: [
                            {
                                xtype: 'container',
                                region: 'center',
                                margin: '0 0 0 0',
                                border: 0,
                                listeners: {
                                    afterrender: function () {
                                        var colorPicker = new Pickr({
                                            el: FastExt.Base.getTargetBodyElement(this),
                                            theme: 'monolith',
                                            inline: true,
                                            default: defaultValue,
                                            showAlways: true,
                                            useAsButton: true,
                                            swatches: [
                                                'rgba(244, 67, 54, 1)',
                                                'rgba(233, 30, 99, 0.95)',
                                                'rgba(156, 39, 176, 0.9)',
                                                'rgba(103, 58, 183, 0.85)',
                                                'rgba(63, 81, 181, 0.8)',
                                                'rgba(33, 150, 243, 0.75)',
                                                'rgba(3, 169, 244, 0.7)',
                                                'rgba(0, 188, 212, 0.7)',
                                                'rgba(0, 150, 136, 0.75)',
                                                'rgba(76, 175, 80, 0.8)',
                                                'rgba(139, 195, 74, 0.85)',
                                                'rgba(205, 220, 57, 0.9)',
                                                'rgba(255, 235, 59, 0.95)',
                                                'rgba(255, 193, 7, 1)'
                                            ],
                                            components: {
                                                preview: true,
                                                opacity: true,
                                                hue: true,
                                                interaction: {
                                                    hex: true,
                                                    input: true,
                                                    rgba: true
                                                }
                                            }
                                        });
                                        colorPicker.on('change', function (color, source, instance) {
                                            if (Ext.isFunction(onColorChange)) {
                                                onColorChange(color, source, instance);
                                            }
                                        });
                                    },
                                }
                            }
                        ]
                    });
                    menu.showBy(obj);
                };
                FastExt.PluginLoader.loadPlugins("ColorPicker", [FastExt.Color.pickrJsPath, FastExt.Color.pickrStylePath], doShowPicker);
            });
        };
        Color.colorToLight = function (color, level) {
            var newColor = "#";
            var regStr = /([0-9a-f]{2})/g;
            color = color.replace("#", "").toLowerCase();
            var result = color.match(regStr);
            if (!result) {
                return undefined;
            }
            for (var _i = 0, result_3 = result; _i < result_3.length; _i++) {
                var resultElement = result_3[_i];
                var intValue = parseInt(resultElement, 16);
                var fixIntValue = (Math.floor((255 - intValue) * level) + intValue);
                newColor += fixIntValue.toString(16);
            }
            return newColor;
        };
        Color.colorToDarken = function (color, level) {
            var rgb = tinycolor(color).toRgb();
            var red = rgb.r;
            var green = rgb.g;
            var blue = rgb.b;
            var maxColor = "red";
            if (green >= red && green >= blue) {
                maxColor = "green";
            }
            else if (blue >= red) {
                maxColor = "blue";
            }
            switch (maxColor) {
                case "red":
                    red -= level;
                    break;
                case "green":
                    green -= level;
                    break;
                case "blue":
                    blue -= level;
                    break;
            }
            if (red < 0) {
                red = 0;
            }
            if (green < 0) {
                green = 0;
            }
            if (blue < 0) {
                blue = 0;
            }
            return tinycolor({ r: red, g: green, b: blue }).toHexString();
        };
        Color.pickrJsPath = "base/colorpicker/pickr.es5.min.js";
        Color.pickrStylePath = "base/colorpicker/monolith.min.css";
        return Color;
    }());
    FastExt.Color = Color;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Component = (function () {
        function Component() {
        }
        Component.shakeComment = function (cmb, callBack, shakeCount) {
            if (!cmb) {
                return;
            }
            if (cmb.zIndexManager) {
                cmb.toFront(true);
            }
            if (!shakeCount) {
                shakeCount = 1588;
            }
            try {
                var currX_1 = cmb.getX();
                var currY_1 = cmb.getY();
                var interval_1, t_1 = 0, z_1 = 6, stopShake_1 = function () {
                    clearInterval(interval_1);
                    cmb.setX(currX_1);
                    cmb.setY(currY_1);
                    if (Ext.isFunction(callBack)) {
                        callBack();
                    }
                };
                interval_1 = setInterval(function () {
                    try {
                        var i = t_1 / 180 * Math.PI, x = Math.sin(i) * z_1, y = Math.cos(i) * z_1;
                        cmb.setX(currX_1 + x);
                        cmb.setY(currY_1 + y);
                        if ((t_1 += 90) > shakeCount) {
                            stopShake_1();
                        }
                    }
                    catch (e) {
                        stopShake_1();
                    }
                }, 30);
            }
            catch (e) {
            }
        };
        Component.isCenterByContainer = function (cmb) {
            var parentCmb = cmb.ownerCt;
            if (Ext.isEmpty(parentCmb)) {
                parentCmb = cmb.container;
            }
            if (cmb.constrain) {
                parentCmb = cmb.constrainTo;
            }
            if (parentCmb) {
                var preX = parseInt(((parentCmb.getWidth() - cmb.getWidth()) / 2).toFixed(0));
                var preY = parseInt(((parentCmb.getHeight() - cmb.getHeight()) / 2).toFixed(0));
                console.log("preX", preX, "preY", preY);
                console.log("X", cmb.x, "Y", cmb.y);
                if (preX == cmb.x && preY == cmb.y) {
                    return true;
                }
            }
            return false;
        };
        Component.isSameByContainer = function (cmb1, cmb2) {
            var parentCmb1 = cmb1.ownerCt;
            if (Ext.isEmpty(parentCmb1)) {
                parentCmb1 = cmb1.container;
            }
            if (cmb1.constrain) {
                parentCmb1 = cmb1.constrainTo;
            }
            var parentCmb2 = cmb2.ownerCt;
            if (Ext.isEmpty(parentCmb2)) {
                parentCmb2 = cmb2.container;
            }
            if (cmb2.constrain) {
                parentCmb2 = cmb2.constrainTo;
            }
            if (parentCmb1 && parentCmb2) {
                return parentCmb1.id == parentCmb2.id;
            }
            return false;
        };
        Component.futureQuery = function (selector, callback, timeout, queryOwner) {
            if (Ext.isEmpty(timeout)) {
                timeout = -1;
            }
            if (Ext.isEmpty(queryOwner)) {
                queryOwner = Ext.ComponentQuery;
            }
            var timeoutCode = "FutureQueryTimeout" + $.md5(selector);
            var doQuery = function (count, waitTime) {
                if (FastExt.Component[timeoutCode]) {
                    clearTimeout(FastExt.Component[timeoutCode]);
                }
                if (count * waitTime >= timeout && timeout > 0) {
                    callback();
                    return;
                }
                FastExt.Component[timeoutCode] = setTimeout(function () {
                    var queryCmp = queryOwner.query(selector);
                    if (queryCmp && queryCmp.length > 0) {
                        if (callback(queryCmp)) {
                            return;
                        }
                    }
                    doQuery(count + 1, waitTime + count * 10);
                }, waitTime);
            };
            doQuery(1, 0);
        };
        Component.countVisible = function (cmpArray) {
            var visibleCount = 0;
            for (var _i = 0, cmpArray_1 = cmpArray; _i < cmpArray_1.length; _i++) {
                var cmp = cmpArray_1[_i];
                if (cmp.isHidden()) {
                    continue;
                }
                visibleCount++;
            }
            return visibleCount;
        };
        Component.getMaxZIndex = function (defaultIndex) {
            var maxZIndex = defaultIndex;
            var allDialog = $("body").children();
            for (var i = 0; i < allDialog.length; i++) {
                if (!$(allDialog[i]).is(":visible")) {
                    continue;
                }
                var currIndex = parseInt(allDialog[i].style.zIndex || 0);
                if (currIndex === FastExt.Component.maxZIndex) {
                    continue;
                }
                maxZIndex = Math.max(maxZIndex, currIndex);
            }
            return maxZIndex;
        };
        Component.getTargetElement = function (target) {
            if (target) {
                if (Ext.isElement(target)) {
                    return target;
                }
                if (!Ext.isEmpty(target.xtype)) {
                    if (target.getEl()) {
                        return target.getEl().dom;
                    }
                }
            }
            return null;
        };
        Component.getTargetBodyElement = function (target) {
            if (target) {
                if (!Ext.isEmpty(target.xtype) && target.body) {
                    return target.body.dom;
                }
            }
            return this.getTargetElement(target);
        };
        Component.holdEditorMenu = function (target) {
            if (target && target.getEditorMenu) {
                var editorMenu = target.getEditorMenu();
                if (editorMenu) {
                    editorMenu.holdShow = true;
                }
            }
        };
        Component.resumeEditorMenu = function (target) {
            if (target && target.getEditorMenu) {
                var editorMenu = target.getEditorMenu();
                if (editorMenu) {
                    editorMenu.holdShow = false;
                }
            }
        };
        Component.simpleReadOnly = function (field, readOnly) {
            if (Ext.isFunction(field.setReadOnlyAttr)) {
                field.setReadOnlyAttr(readOnly);
            }
        };
        Component.isRealReadOnly = function (field) {
            if (field.readOnly) {
                return true;
            }
            if (field.inputEl && field.inputEl.dom) {
                var attrReadonly = field.inputEl.dom.getAttribute("readonly");
                if (attrReadonly) {
                    return true;
                }
            }
            return false;
        };
        Component.maxZIndex = 2147483647;
        return Component;
    }());
    FastExt.Component = Component;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Dates = (function () {
        function Dates() {
        }
        Dates.__onLoaded = function () {
            Dates.initDateFormatStore();
        };
        Dates.initDateFormatStore = function () {
            Dates.dateFormatStore["[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}"] = "Y-m-d H:i:s";
            Dates.dateFormatStore["[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}"] = "Y-m-d H:i";
            Dates.dateFormatStore["[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}"] = "Y-m-d H";
            Dates.dateFormatStore["[0-9]{4}-[0-9]{2}-[0-9]{2}"] = "Y-m-d";
            Dates.dateFormatStore["[0-9]{4}/[0-9]{2}/[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}"] = "Y/m/d H:i:s";
            Dates.dateFormatStore["[0-9]{4}/[0-9]{2}/[0-9]{2} [0-9]{2}:[0-9]{2}"] = "Y/m/d H:i";
            Dates.dateFormatStore["[0-9]{4}/[0-9]{2}/[0-9]{2} [0-9]{2}"] = "Y/m/d H";
            Dates.dateFormatStore["[0-9]{4}/[0-9]{2}/[0-9]{2}"] = "Y/m/d";
            Dates.dateFormatStore["[0-9]{4}年[0-9]{2}月[0-9]{2}日 [0-9]{2}:[0-9]{2}:[0-9]{2}"] = "Y年m月d日 H:i:s";
            Dates.dateFormatStore["[0-9]{4}年[0-9]{2}月[0-9]{2}日 [0-9]{2}:[0-9]{2}"] = "Y年m月d日 H:i";
            Dates.dateFormatStore["[0-9]{4}年[0-9]{2}月[0-9]{2}日 [0-9]{2}"] = "Y年m月d日 H";
            Dates.dateFormatStore["[0-9]{4}年[0-9]{2}月[0-9]{2}日"] = "Y年m月d日";
        };
        Dates.formatMillisecond = function (millisecond, formatStr) {
            return Ext.Date.format(new Date(millisecond), formatStr);
        };
        Dates.formatDateStr = function (dateStr, formatStr) {
            return Ext.Date.format(FastExt.Dates.parseDate(dateStr), formatStr);
        };
        Dates.guessDateFormat = function (value) {
            if (!value || Ext.isDate(value)) {
                return '';
            }
            value = value.toString().trim();
            value = value.trim('/');
            value = value.trim('-');
            for (var key in Dates.dateFormatStore) {
                var regPattern = new RegExp("^" + key + "$");
                if (regPattern.test(value)) {
                    return Dates.dateFormatStore[key];
                }
            }
            return '';
        };
        Dates.parseDate = function (dateValue) {
            if (Ext.isEmpty(dateValue)) {
                return null;
            }
            var guessDateFormat = FastExt.Dates.guessDateFormat(dateValue);
            return Ext.Date.parse(dateValue, guessDateFormat);
        };
        Dates.showDatePicker = function (obj, defaultValue, dateFormat) {
            return new Ext.Promise(function (resolve, reject) {
                var token = new Date().getTime();
                if (Ext.isEmpty(dateFormat)) {
                    dateFormat = "Y-m-d H:i:s";
                }
                var hourStoreValue = [];
                for (var i = 0; i < 24; i++) {
                    var value = FastExt.Base.prefixInteger(i, 2);
                    hourStoreValue.push({
                        text: value
                    });
                }
                var secondStoreValue = [];
                for (var i = 0; i < 60; i++) {
                    var value = FastExt.Base.prefixInteger(i, 2);
                    secondStoreValue.push({
                        text: value
                    });
                }
                var defaultDate;
                if (!Ext.isEmpty(defaultValue)) {
                    defaultDate = Ext.Date.parse(defaultValue, FastExt.Dates.guessDateFormat(defaultValue));
                }
                if (!defaultDate) {
                    defaultDate = new Date();
                }
                var hour = Ext.Date.format(defaultDate, 'H');
                var minute = Ext.Date.format(defaultDate, 'i');
                var second = Ext.Date.format(defaultDate, 's');
                var countItem = 0;
                var dateShow = dateFormat.indexOf("d") !== -1;
                var hourShow = dateFormat.indexOf("H") !== -1;
                var minuteShow = dateFormat.indexOf("i") !== -1;
                var secondShow = dateFormat.indexOf("s") !== -1;
                if (hourShow) {
                    countItem++;
                }
                if (minuteShow) {
                    countItem++;
                }
                if (secondShow) {
                    countItem++;
                }
                var pickerCmp = {
                    xtype: 'datepicker',
                    id: 'dateValue' + token,
                    region: 'center',
                    showToday: false,
                    margin: '0 0 0 0',
                    border: 0,
                    value: defaultDate
                };
                if (!dateShow) {
                    pickerCmp = {
                        xtype: 'monthpicker',
                        id: 'dateValue' + token,
                        region: 'center',
                        showButtons: false,
                        margin: '0 0 0 0',
                        border: 0,
                        value: defaultDate
                    };
                }
                var menu = Ext.create('Ext.menu.Menu', {
                    showSeparator: false,
                    layout: 'border',
                    padding: '0 0 0 0',
                    style: {
                        background: "#ffffff"
                    },
                    alwaysOnTop: true,
                    width: 330,
                    height: 400,
                    listeners: {
                        hide: function (obj, epts) {
                            FastExt.Base.runCallBack(resolve);
                            obj.close();
                        }
                    },
                    items: [
                        pickerCmp,
                        {
                            xtype: 'container',
                            layout: 'column',
                            margin: '0 0 0 0',
                            region: 'south',
                            border: 0,
                            items: [
                                {
                                    xtype: 'container',
                                    columnWidth: 1,
                                    layout: 'column',
                                    border: 0,
                                    margin: '10 0 0 0',
                                    items: [
                                        {
                                            id: 'hourValue' + token,
                                            columnWidth: 1.0 / countItem,
                                            emptyText: '时',
                                            minValue: 0,
                                            margin: '0 0 0 5',
                                            maxValue: 23,
                                            displayField: 'text',
                                            valueField: 'text',
                                            editable: true,
                                            searchable: true,
                                            hidden: !hourShow,
                                            value: hour,
                                            store: Ext.create('Ext.data.Store', {
                                                autoLoad: true,
                                                data: hourStoreValue
                                            }),
                                            xtype: 'combo'
                                        }, {
                                            xtype: 'displayfield',
                                            width: 30,
                                            hidden: !hourShow,
                                            value: "<div align='center'>时</div>"
                                        }, {
                                            id: 'minuteValue' + token,
                                            columnWidth: 1.0 / countItem,
                                            emptyText: '分',
                                            minValue: 0,
                                            maxValue: 59,
                                            displayField: 'text',
                                            valueField: 'text',
                                            editable: true,
                                            searchable: true,
                                            value: minute,
                                            hidden: !minuteShow,
                                            store: Ext.create('Ext.data.Store', {
                                                autoLoad: true,
                                                data: secondStoreValue
                                            }),
                                            xtype: 'combo'
                                        }, {
                                            xtype: 'displayfield',
                                            width: 30,
                                            hidden: !minuteShow,
                                            value: "<div align='center'>分</div>"
                                        }, {
                                            id: 'secondsValue' + token,
                                            columnWidth: 1.0 / countItem,
                                            emptyText: '秒',
                                            minValue: 0,
                                            maxValue: 59,
                                            displayField: 'text',
                                            valueField: 'text',
                                            editable: true,
                                            searchable: true,
                                            value: second,
                                            hidden: !secondShow,
                                            store: Ext.create('Ext.data.Store', {
                                                autoLoad: true,
                                                data: secondStoreValue
                                            }),
                                            xtype: 'combo'
                                        }, {
                                            xtype: 'displayfield',
                                            width: 30,
                                            hidden: !secondShow,
                                            value: "<div align='center'>秒</div>"
                                        },
                                    ]
                                },
                                {
                                    xtype: 'button',
                                    columnWidth: 0.3,
                                    margin: '5 0 5 5',
                                    iconCls: "extIcon extClose",
                                    text: '取消',
                                    handler: function () {
                                        menu.hide();
                                    }
                                },
                                {
                                    xtype: 'button',
                                    columnWidth: 0.7,
                                    margin: '5 5 5 5',
                                    iconCls: "extIcon extOk",
                                    text: '确定',
                                    handler: function () {
                                        var datePicker = Ext.getCmp("dateValue" + token);
                                        var hourCombo = Ext.getCmp("hourValue" + token);
                                        var minuteCombo = Ext.getCmp("minuteValue" + token);
                                        var secondsCombo = Ext.getCmp("secondsValue" + token);
                                        var dateValue = datePicker.getValue();
                                        if (Ext.isDate(dateValue)) {
                                            dateValue.setHours(parseInt(hourCombo.getValue()));
                                            dateValue.setMinutes(parseInt(minuteCombo.getValue()));
                                            dateValue.setSeconds(parseInt(secondsCombo.getValue()));
                                            FastExt.Base.runCallBack(resolve, Ext.Date.format(dateValue, dateFormat));
                                        }
                                        else {
                                            var newDate = new Date();
                                            newDate.setMonth(dateValue[0]);
                                            newDate.setFullYear(dateValue[1]);
                                            newDate.setDate(1);
                                            FastExt.Base.runCallBack(resolve, Ext.Date.format(newDate, dateFormat));
                                        }
                                        menu.close();
                                    }
                                }
                            ]
                        }
                    ]
                });
                menu.showBy(obj);
            });
        };
        Dates.formatDateTip = function (sourceDate, dateFormat, appendWeek) {
            if (Ext.isEmpty(dateFormat)) {
                dateFormat = "Y-m-d H:i:s";
            }
            var seconds = 1000;
            var minute = seconds * 60;
            var hour = minute * 60;
            var day = hour * 24;
            var week = day * 7;
            var month = day * 30;
            var time1 = new Date().getTime();
            if (!sourceDate) {
                return null;
            }
            var time2 = sourceDate.getTime();
            var time = Math.abs(time1 - time2);
            var directionSuffix = time1 < time2 ? "后" : "前";
            var weekSuffix = "";
            var hourSuffix = Ext.Date.format(sourceDate, " H时i分");
            if (appendWeek) {
                var weekTip = ["日", "一", "二", "三", "四", "五", "六"];
                weekSuffix = "（周" + weekTip[sourceDate.getDay()] + "）";
            }
            if (time <= minute) {
                return "刚刚";
            }
            if (time / month >= 2) {
                return Ext.Date.format(sourceDate, dateFormat);
            }
            if (time / month >= 1) {
                return parseInt(String(time / month)) + "个月" + directionSuffix + weekSuffix;
            }
            if (time / week >= 1) {
                var real = parseInt(String(time / week));
                return real + "周" + directionSuffix + weekSuffix;
            }
            if (time / day >= 1) {
                var real = parseInt(String(time / day));
                if (real == 1) {
                    if (directionSuffix == "前") {
                        return "昨天" + hourSuffix + weekSuffix;
                    }
                    if (directionSuffix == "后") {
                        return "明天" + hourSuffix + weekSuffix;
                    }
                }
                return real + "天" + directionSuffix + weekSuffix;
            }
            if (time / hour >= 1) {
                return parseInt(String(time / hour)) + "小时" + directionSuffix + weekSuffix;
            }
            if (time / minute >= 1) {
                return parseInt(String(time / minute)) + "分钟" + directionSuffix + weekSuffix;
            }
            return Ext.Date.format(sourceDate, dateFormat);
        };
        Dates.getNowDateString = function (format, diffDay) {
            if (Ext.isEmpty(diffDay)) {
                diffDay = 0;
            }
            var nowDate = Ext.Date.add(new Date(), Ext.Date.DAY, diffDay);
            return Ext.Date.format(nowDate, format);
        };
        Dates.dateFormatStore = {};
        return Dates;
    }());
    FastExt.Dates = Dates;
})(FastExt || (FastExt = {}));
var FastDefine;
(function (FastDefine) {
    var EnumComboBox = (function () {
        function EnumComboBox() {
        }
        EnumComboBox.__onLoaded = function () {
            Ext.define("Fast.ext.EnumComboBox", {
                alias: ['widget.enumcombobox', 'widget.enumcombo'],
                extend: 'Ext.form.field.ComboBox',
                enumName: 'NONE',
                enumValue: 'id',
                enumText: 'text',
                exclude: [],
                include: [],
                params: {},
                firstData: null,
                lastData: null,
                editable: false,
                useCache: true,
                searchable: false,
                newable: false,
                onFastContainerShow: function () {
                    this.reloadEnum(false);
                },
                onFastInputClick: function () {
                    if (this.readOnly || this.disabled) {
                        return;
                    }
                    this.toggle();
                },
                onFastEnumFilter: function (record) {
                    if (this.exclude.exists(record.get(this.enumValue))) {
                        return false;
                    }
                    if (this.include.length > 0) {
                        return !!this.include.exists(record.get(this.enumValue));
                    }
                    return true;
                },
                reloadEnum: function (reloadData) {
                    var me = this;
                    if (Ext.isEmpty(reloadData)) {
                        reloadData = true;
                    }
                    if (me.hasListener("beforeloadenum")) {
                        if (!me.fireEvent("beforeloadenum", me)) {
                            return false;
                        }
                    }
                    if (Ext.isEmpty(me.enumName)) {
                        console.warn("enumName属性为空，跳过加载！", this);
                        return false;
                    }
                    FastExt.Store.getEnumDataStore(me.enumName, me.firstData, me.lastData, me.params, me.useCache, reloadData).then(function (enumStore) {
                        me.setStore(enumStore);
                        enumStore.filterBy(me.onFastEnumFilter, me);
                    });
                },
                initComponent: function () {
                    var me = this;
                    me.displayField = me.enumText;
                    me.valueField = me.enumValue;
                    me.emptyText = "请选择";
                    if (!me.exclude) {
                        me.exclude = [];
                    }
                    if (!me.include) {
                        me.include = [];
                    }
                    me.callParent(arguments);
                },
                finishRender: function () {
                    this.callParent(arguments);
                    this.inputEl.on('click', this.onFastInputClick, this);
                    var me = this;
                    var container = this.up("window");
                    if (container && !FastExt.Base.toBool(container.shown)) {
                        container.on("show", me.onFastContainerShow, this, { single: true });
                    }
                    else {
                        me.reloadEnum(false);
                    }
                }
            });
        };
        return EnumComboBox;
    }());
    FastDefine.EnumComboBox = EnumComboBox;
    var TagEnumComboBox = (function () {
        function TagEnumComboBox() {
        }
        TagEnumComboBox.__onLoaded = function () {
            Ext.define("Fast.ext.TagEnumComboBox", {
                alias: ['widget.tagenumcombobox', 'widget.tagenumcombo'],
                extend: 'Ext.form.field.Tag',
                enumName: 'NONE',
                enumValue: 'id',
                enumText: 'text',
                exclude: [],
                include: [],
                params: {},
                firstData: null,
                lastData: null,
                queryMode: 'local',
                reloadEnum: function (reloadData) {
                    var me = this;
                    if (Ext.isEmpty(reloadData)) {
                        reloadData = true;
                    }
                    FastExt.Store.getEnumDataStore(me.enumName, me.firstData, me.lastData, me.params, me.useCache, reloadData).then(function (enumStore) {
                        me.setStore(enumStore);
                        me.getStore().filterBy(function (record) {
                            if (me.exclude.exists(record.get(me.enumValue))) {
                                return false;
                            }
                            if (me.include.length > 0) {
                                return !!me.include.exists(record.get(me.enumValue));
                            }
                            return true;
                        });
                    });
                },
                initComponent: function () {
                    var me = this;
                    me.displayField = me.enumText;
                    me.valueField = me.enumValue;
                    me.emptyText = "请选择";
                    if (!me.exclude) {
                        me.exclude = [];
                    }
                    if (!me.include) {
                        me.include = [];
                    }
                    me.callParent(arguments);
                },
                onFastContainerShow: function () {
                    this.reloadEnum(false);
                },
                finishRender: function () {
                    this.callParent(arguments);
                    var me = this;
                    var container = this.up("window");
                    if (container && !FastExt.Base.toBool(container.shown)) {
                        container.on("show", me.onFastContainerShow, this, { single: true });
                    }
                    else {
                        me.reloadEnum(false);
                    }
                }
            });
        };
        return TagEnumComboBox;
    }());
    FastDefine.TagEnumComboBox = TagEnumComboBox;
    var FastFileField = (function () {
        function FastFileField() {
        }
        FastFileField.__onLoaded = function () {
            Ext.define("Fast.ext.FastFile", {
                extend: 'Ext.form.field.Text',
                alias: ['widget.fastfile', 'widget.fastfilefield'],
                fileModules: [],
                editable: false,
                onFileChange: function (fileObj) {
                },
                onFastInputClick: function () {
                    if (this.readOnly || this.disabled) {
                        return;
                    }
                    this.selectData();
                },
                finishRender: function () {
                    this.callParent(arguments);
                    this.inputEl.on('click', this.onFastInputClick, this);
                    this.refreshTrigger();
                },
                onChange: function (newVal, oldVal) {
                    this.callParent(arguments);
                    this.refreshTrigger();
                },
                refreshTrigger: function () {
                    var val = this.getValue();
                    if (Ext.isEmpty(val)) {
                        this.getTrigger('open').hide();
                        this.getTrigger('close').hide();
                    }
                    else {
                        this.getTrigger('open').show();
                        this.getTrigger('close').show();
                    }
                },
                initComponent: function () {
                    var errorMsg = "";
                    for (var i = 0; i < this.fileModules.length; i++) {
                        var fileModule = this.fileModules[i];
                        errorMsg = errorMsg + "或" + fileModule.tipMsg;
                    }
                    this.emptyText = '请上传' + errorMsg.substring(1);
                    this.editable = false;
                    this.callParent(arguments);
                },
                triggers: {
                    open: {
                        cls: 'extIcon extEye',
                        hidden: true,
                        handler: function () {
                            var me = this;
                            if (me.fileModules.length === 1) {
                                if (me.fileModules[0].type === 'images') {
                                    FastExt.Component.holdEditorMenu(me);
                                    me.blur();
                                    FastExt.Dialog.showImage(me, me.getValue(), function () {
                                        FastExt.Component.resumeEditorMenu(me);
                                    }, true);
                                    return;
                                }
                                if (me.fileModules[0].type === 'videos') {
                                    FastExt.Dialog.showVideo(this, me.getValue());
                                    return;
                                }
                            }
                            if (me.fileObj) {
                                var name_1 = me.fileObj.name;
                                if (FastExt.FileModule.image().match(name_1)) {
                                    FastExt.Dialog.showImage(me, me.getValue(), null, true);
                                    return;
                                }
                                if (FastExt.FileModule.mp4().match(name_1)) {
                                    FastExt.Dialog.showVideo(this, me.getValue());
                                    return;
                                }
                                if (FastExt.FileModule.pdf().match(name_1) ||
                                    FastExt.FileModule.word().match(name_1) ||
                                    FastExt.FileModule.excel().match(name_1) ||
                                    FastExt.FileModule.ppt().match(name_1)) {
                                    FastExt.File.officeViewer(me.getValue());
                                    return;
                                }
                            }
                            location.href = me.getValue();
                        }
                    },
                    search: {
                        cls: 'extIcon extUpload',
                        handler: function () {
                            this.selectData();
                        }
                    },
                    close: {
                        cls: 'text-clear',
                        hidden: true,
                        handler: function () {
                            this.clearData();
                        }
                    }
                },
                selectData: function () {
                    var me = this;
                    FastExt.Component.holdEditorMenu(me);
                    FastExt.File.uploadFile(me, me.fileModules).then(function (result) {
                        FastExt.Component.resumeEditorMenu(me);
                        if (result) {
                            me.fileObj = result;
                            me.setValue(result.url);
                            me.onFileChange(result);
                        }
                    });
                },
                clearData: function () {
                    var me = this;
                    me.setValue(null);
                }
            });
        };
        return FastFileField;
    }());
    FastDefine.FastFileField = FastFileField;
    var FastFilesField = (function () {
        function FastFilesField() {
        }
        FastFilesField.__onLoaded = function () {
            Ext.define("Fast.ext.FastFiles", {
                alias: ['widget.fastfiles', 'widget.fastfilesfield'],
                extend: 'Ext.form.field.Text',
                editable: false,
                fileModules: [],
                allowBlank: true,
                autoUpdate: false,
                showFileName: false,
                showFileLength: false,
                autoFileName: true,
                submitArray: false,
                triggers: {
                    search: {
                        cls: 'text-search',
                        handler: function () {
                            this.showWindow(this);
                        }
                    }
                },
                finishRender: function () {
                    this.callParent(arguments);
                    this.inputEl.on('click', this.onFastInputClick, this);
                },
                onFastInputClick: function () {
                    if (this.readOnly || this.disabled) {
                        return;
                    }
                    this.showWindow(this);
                },
                initComponent: function () {
                    var errorMsg = "";
                    for (var i = 0; i < this.fileModules.length; i++) {
                        var fileModule = this.fileModules[i];
                        errorMsg = errorMsg + "或" + fileModule.tipMsg;
                    }
                    this.emptyText = '请上传' + errorMsg.substring(1);
                    this.editable = false;
                    if (this.submitArray) {
                        var formPanel = this.up("form");
                        if (formPanel) {
                            formPanel.add({
                                xtype: "hiddenfield",
                                name: this.name + "@JsonArray",
                                value: true
                            });
                        }
                    }
                    this.callParent(arguments);
                },
                showWindow: function (obj, callBack, title) {
                    var me = this;
                    FastExt.File.showFiles(this, function (result) {
                        me.setValue(result);
                        if (Ext.isFunction(callBack)) {
                            callBack(me);
                        }
                    }, me.fileModules, me.getValue(), title, me.readOnly);
                }
            });
        };
        return FastFilesField;
    }());
    FastDefine.FastFilesField = FastFilesField;
    var ContentField = (function () {
        function ContentField() {
        }
        ContentField.__onLoaded = function () {
            Ext.define("Fast.ext.Content", {
                alias: ['widget.content', 'widget.contentfield'],
                extend: 'Ext.form.field.TextArea',
                height: 220,
                emptyText: '请填写……',
                allowBlank: true,
                buttons: [],
                getCode: function () {
                    return $.md5(this.getName() + this.dataIndex + this.getFieldLabel());
                },
                showWindow: function (obj, callBack, title) {
                    if (Ext.isEmpty(title)) {
                        title = "编辑内容";
                    }
                    var me = this.cloneConfig({});
                    me.setValue(this.getValue());
                    me.oldValue = me.getValue();
                    me.userCls = "fast-radius-null-field";
                    var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
                    var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
                    var winButtons = [
                        {
                            text: '清除暂存',
                            iconCls: 'extIcon extDelete whiteColor',
                            handler: function () {
                                FastExt.Dialog.showWait("正在清除中，请稍后……");
                                FastExt.Server.deleteExtConfig(me.getCode(), "TextEditorCache", function (success) {
                                    FastExt.Dialog.hideWait();
                                    if (success) {
                                        FastExt.Dialog.toast("清除成功！");
                                    }
                                });
                            }
                        },
                        '->',
                        {
                            text: '暂存',
                            iconCls: 'extIcon extSave whiteColor',
                            handler: function () {
                                FastExt.Dialog.showWait("暂存中，请稍后……");
                                FastExt.Server.saveExtConfig(me.getCode(), "TextEditorCache", me.getValue(), function (success, message) {
                                    FastExt.Dialog.hideWait();
                                    if (success) {
                                        FastExt.Dialog.toast("暂存成功！");
                                    }
                                    else {
                                        FastExt.Dialog.showAlert("系统提醒", message);
                                    }
                                });
                            }
                        },
                        {
                            text: '重置',
                            iconCls: 'extIcon extReset',
                            handler: function () {
                                me.setValue(me.oldValue);
                                FastExt.Server.deleteExtConfig(me.getCode(), "TextEditorCache");
                            }
                        },
                        {
                            text: '确定',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                FastExt.Dialog.showWait("请稍后……");
                                FastExt.Server.deleteExtConfig(me.getCode(), "TextEditorCache", function (success) {
                                    FastExt.Dialog.hideWait();
                                    if (Ext.isFunction(callBack)) {
                                        callBack(me);
                                    }
                                    me.editorWin.close();
                                });
                            }
                        }
                    ];
                    for (var _i = 0, _a = me.buttons; _i < _a.length; _i++) {
                        var button = _a[_i];
                        button.field = me;
                    }
                    me.editorWin = Ext.create('Ext.window.Window', {
                        title: title,
                        iconCls: 'extIcon extEdit',
                        resizable: true,
                        maximizable: true,
                        height: winHeight,
                        width: winWidth,
                        minHeight: 500,
                        minWidth: 600,
                        layout: 'fit',
                        animateTarget: obj,
                        items: [me],
                        modal: true,
                        unpin: true,
                        constrain: true,
                        listeners: {
                            show: function (obj) {
                                FastExt.Server.showExtConfig(me.getCode(), "TextEditorCache", function (success, value) {
                                    if (success) {
                                        me.setValue(value);
                                        FastExt.Dialog.toast("已恢复暂存的数据！");
                                    }
                                });
                            }
                        },
                        buttons: Ext.Array.insert(winButtons, 2, this.buttons),
                    });
                    me.editorWin.show();
                }
            });
        };
        return ContentField;
    }());
    FastDefine.ContentField = ContentField;
    var HtmlContentField = (function () {
        function HtmlContentField() {
        }
        HtmlContentField.__onLoaded = function () {
            Ext.define("Fast.ext.HtmlContent", {
                alias: ['widget.htmlcontent', 'widget.htmlcontentfield'],
                extend: 'Ext.form.field.TextArea',
                buttons: [],
                initEditorConfig: function (config) {
                    return config;
                },
                height: 420,
                getCode: function () {
                    return $.md5(this.getName() + this.dataIndex + this.getFieldLabel());
                },
                getValue: function () {
                    if (this.tinyEditor) {
                        this.tinyEditor.save();
                    }
                    return this.callParent(arguments);
                },
                getRawValue: function () {
                    if (this.tinyEditor) {
                        return this.tinyEditor.getContent();
                    }
                    return this.callParent(arguments);
                },
                setValue: function (val) {
                    this.callParent(arguments);
                    if (this.tinyEditor) {
                        this.tinyEditor.setContent(val);
                    }
                    return this;
                },
                beforeDestroy: function () {
                    try {
                        this.releaseEditor();
                    }
                    finally {
                        this.callParent(arguments);
                    }
                },
                releaseEditor: function () {
                    if (this.tinyEditor) {
                        this.tinyEditor.destroy();
                        this.tinyEditor = null;
                    }
                },
                onEditorWindowShow: function (window) {
                    $(".tox-tinymce-aux").prependTo(window.getEl().dom);
                },
                onEditorWindowClose: function () {
                    $(".tox-tinymce-aux").prependTo($("body")[0]);
                },
                onEditorFullscreenChange: function (e) {
                    var upWindow = this.up("window");
                    if (!upWindow) {
                        return;
                    }
                    if (e.state) {
                        upWindow.maximize(false);
                    }
                    else {
                        upWindow.restore(false);
                    }
                },
                initEditor: function () {
                    var me = this;
                    var tinyConfig = {
                        selector: '#' + me.getInputId(),
                        language: 'zh-Hans',
                        menubar: 'file edit view insert format tools table tc',
                        toolbar1: 'fullscreen searchreplace undo redo ' +
                            ' bold italic underline strikethrough ' +
                            ' fontfamily fontsize blocks ' +
                            ' alignleft aligncenter alignright alignjustify ' +
                            ' outdent indent ' +
                            ' numlist bullist checklist ' +
                            ' forecolor backcolor casechange permanentpen formatpainter removeformat ' +
                            ' pagebreak charmap emoticons ' +
                            ' preview save print ' +
                            ' image media pageembed template link anchor codesample insertdatetime ' +
                            ' a11ycheck ltr rtl showcomments addcomment ',
                        toolbar_sticky: true,
                        forced_root_block: "div",
                        branding: false,
                        resize: false,
                        convert_urls: false,
                        height: "100%",
                        width: "100%",
                        autosave_ask_before_unload: false,
                        powerpaste_allow_local_images: true,
                        spellchecker_dialog: true,
                        a11y_advanced_options: true,
                        image_advtab: true,
                        font_size_formats: "8pt 9pt 10pt 11pt 12pt 13pt 14pt 15pt 16pt 17pt 18pt 19pt 20pt 21pt 22pt 23pt 24pt 36pt",
                        font_family_formats: "微软雅黑='微软雅黑';宋体='宋体';黑体='黑体';仿宋='仿宋';楷体='楷体';隶书='隶书';幼圆='幼圆';方正小标宋体='方正小标宋体';Andale Mono=andale mono,times;Arial=arial,helvetica,sans-serif;Arial Black=arial black,avant garde;Book Antiqua=book antiqua,palatino;Comic Sans MS=comic sans ms,sans-serif;Courier New=courier new,courier;Georgia=georgia,palatino;Helvetica=helvetica;Impact=impact,chicago;Symbol=symbol;Tahoma=tahoma,arial,helvetica,sans-serif;Terminal=terminal,monaco;Times New Roman=times new roman,times;Trebuchet MS=trebuchet ms,geneva;Verdana=verdana,geneva;Webdings=webdings;Wingdings=wingdings",
                        pagebreak_separator: "<div style=\"page-break-before: always;\"></div>",
                        pagebreak_split_block: true,
                        file_picker_types: 'file image media',
                        automatic_uploads: false,
                        content_style: 'tr {  page-break-inside: avoid; }',
                        file_picker_callback: function (callback, value, meta) {
                            if (meta.filetype === 'file') {
                                FastExt.File.uploadFile(null, [FastExt.FileModule.file()], false, false).then(function (result) {
                                    if (result) {
                                        callback(result.url, { text: result.name });
                                    }
                                });
                            }
                            else if (meta.filetype === 'image') {
                                FastExt.File.uploadFile(null, [FastExt.FileModule.image()], false, false).then(function (result) {
                                    if (result) {
                                        callback(result.url, { alt: result.name });
                                    }
                                });
                            }
                            else if (meta.filetype === 'media') {
                                FastExt.File.uploadFile(null, [FastExt.FileModule.mp4()], false, false).then(function (result) {
                                    if (result) {
                                        callback(result.url, { text: result.name });
                                    }
                                });
                            }
                        },
                        plugins: ['advlist',
                            'anchor',
                            'autolink',
                            'charmap',
                            'emoticons',
                            'importcss',
                            'nonbreaking',
                            'pagebreak',
                            'visualchars',
                            'codesample', 'fullscreen',
                            'image', 'lists', 'link', 'media', 'preview',
                            'searchreplace', 'table',
                            'visualblocks', 'wordcount',
                            'insertdatetime',
                            'directionality',
                            'code'],
                    };
                    tinyConfig = me.initEditorConfig(tinyConfig);
                    FastExt.Tinymce.initTinymce(tinyConfig, function (editors) {
                        me.tinyEditor = editors[0];
                        me.tinyEditor.on('FullscreenStateChanged', function (e) {
                            me.onEditorFullscreenChange(e);
                        });
                        var upWindow = me.up("window");
                        if (upWindow) {
                            me.onEditorWindowShow(upWindow);
                            upWindow.on("beforeactivate", me.onEditorWindowShow);
                            upWindow.on("close", me.onEditorWindowClose);
                        }
                        if (me.ownerCt) {
                            me.ownerCt.updateLayout();
                        }
                        if (me.needFocus) {
                            me.tinyEditor.focus(false);
                            me.needFocus = false;
                        }
                        me.fireEvent("editorrender", me, me.tinyEditor);
                    });
                },
                finishRender: function () {
                    this.callParent(arguments);
                    var container = this.up("window");
                    if (container && !FastExt.Base.toBool(container.shown)) {
                        container.on("show", this.onFastContainerShow, this, { single: true });
                    }
                    else {
                        this.initEditor();
                    }
                },
                onFastContainerShow: function () {
                    this.initEditor();
                },
                initComponent: function () {
                    var me = this;
                    me.callParent(arguments);
                },
                showWindow: function (obj, callBack, title) {
                    if (Ext.isEmpty(title)) {
                        title = "编辑内容";
                    }
                    var me = this.cloneConfig({});
                    me.setValue(this.getValue());
                    me.oldValue = me.value;
                    me.userCls = "fast-radius-null-field";
                    var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
                    var winHeight = parseInt((document.body.clientHeight * 0.8).toFixed(0));
                    var winButtons = [
                        {
                            text: '清除暂存',
                            iconCls: 'extIcon extDelete whiteColor',
                            handler: function () {
                                FastExt.Dialog.showWait("正在清除中，请稍后……");
                                FastExt.Server.deleteExtConfig(me.getCode(), "HtmlEditorCache", function (success) {
                                    FastExt.Dialog.hideWait();
                                    if (success) {
                                        FastExt.Dialog.toast("清除成功！");
                                    }
                                });
                            }
                        },
                        '->',
                        {
                            text: '暂存',
                            iconCls: 'extIcon extSave whiteColor',
                            handler: function () {
                                FastExt.Dialog.showWait("暂存中，请稍后……");
                                FastExt.Server.saveExtConfig(me.getCode(), "HtmlEditorCache", me.getValue(), function (succes, message) {
                                    FastExt.Dialog.hideWait();
                                    if (succes) {
                                        FastExt.Dialog.toast("暂存成功！");
                                    }
                                    else {
                                        FastExt.Dialog.showAlert("系统提醒", message);
                                    }
                                });
                            }
                        },
                        {
                            text: '重置',
                            iconCls: 'extIcon extReset',
                            handler: function () {
                                me.setValue(me.oldValue);
                                FastExt.Server.deleteExtConfig(me.getCode(), "HtmlEditorCache");
                            }
                        },
                        {
                            text: '确定',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                FastExt.Dialog.showWait("请稍后……");
                                FastExt.Server.deleteExtConfig(me.getCode(), "HtmlEditorCache", function (success) {
                                    FastExt.Dialog.hideWait();
                                    if (Ext.isFunction(callBack)) {
                                        callBack(me);
                                    }
                                    me.editorWin.close();
                                });
                            }
                        }
                    ];
                    for (var _i = 0, _a = me.buttons; _i < _a.length; _i++) {
                        var button = _a[_i];
                        button.field = me;
                    }
                    me.editorWin = Ext.create('Ext.window.Window', {
                        title: title,
                        iconCls: 'extIcon extEdit',
                        resizable: true,
                        maximizable: true,
                        height: winHeight,
                        width: winWidth,
                        minHeight: 500,
                        minWidth: 600,
                        layout: 'fit',
                        animateTarget: obj,
                        items: [me],
                        modal: true,
                        constrain: true,
                        unpin: true,
                        listeners: {
                            show: function () {
                                FastExt.Server.showExtConfig(me.getCode(), "HtmlEditorCache", function (success, value) {
                                    if (success) {
                                        me.setValue(value);
                                        FastExt.Dialog.toast("已恢复暂存的数据！");
                                    }
                                });
                            },
                        },
                        buttons: Ext.Array.insert(winButtons, 2, me.buttons),
                    });
                    me.editorWin.show();
                },
                focus: function () {
                    this.needFocus = true;
                    return this.callParent(arguments);
                },
            });
        };
        return HtmlContentField;
    }());
    FastDefine.HtmlContentField = HtmlContentField;
    var LinkField = (function () {
        function LinkField() {
        }
        LinkField.__onLoaded = function () {
            Ext.define("Fast.ext.Link", {
                alias: ['widget.link', 'widget.linkfield'],
                extend: 'Ext.form.FieldContainer',
                entityId: null,
                entityIdDefaultValue: -1,
                entityText: null,
                entityCode: null,
                linkValue: null,
                editable: false,
                allowBlank: true,
                layout: 'fit',
                multiSelect: false,
                autoDisabled: true,
                submitValue: true,
                onBeforeSelect: null,
                onAfterSelect: null,
                onClearSelect: null,
                nullEntityCodeError: "请配置组件的entityCode属性值！",
                nullEntityIdError: "请配置组件的entityId属性值！",
                nullEntityTextError: "请配置组件的entityText属性值！",
                binds: [],
                isValid: function () {
                    var me = this;
                    var display = me.down("[name=" + me.name + "Display]");
                    if (display) {
                        display.allowBlank = me.allowBlank;
                        return display.isValid();
                    }
                    return true;
                },
                validate: function () {
                    var display = this.down("[name=" + this.name + "Display]");
                    if (display) {
                        display.allowBlank = this.allowBlank;
                        return display.validate();
                    }
                    return true;
                },
                getName: function () {
                    return this.name;
                },
                getValue: function () {
                    var me = this;
                    if (me.submitValue) {
                        var value = me.down("[name=" + me.name + "]");
                        return value.getValue();
                    }
                    return me.getText();
                },
                getText: function () {
                    var me = this;
                    var display = me.down("[name=" + me.name + "Display]");
                    if (display) {
                        return display.getValue();
                    }
                    return null;
                },
                setRecordValue: function (record) {
                    var me = this;
                    if (record) {
                        if (Ext.isEmpty(me.getText()) && Ext.isEmpty(record.get(me.dataIndex))) {
                            return;
                        }
                        if (record.store) {
                            record.store.holdUpdate = true;
                        }
                        record.set(me.name, me.getValue());
                        record.set(me.dataIndex, me.getText());
                        if (me.record) {
                            for (var i = 0; i < me.binds.length; i++) {
                                var bindSet = me.binds[i];
                                var setArray = bindSet.toString().split("@");
                                if (setArray.length > 1) {
                                    var linkFieldName = setArray[0];
                                    var linkValue = me.record.get(linkFieldName);
                                    for (var j = 1; j < setArray.length; j++) {
                                        record.set(setArray[j], linkValue);
                                    }
                                }
                            }
                        }
                        if (record.store) {
                            record.store.holdUpdate = false;
                            record.store.fireEvent("endupdate");
                        }
                    }
                },
                setValue: function (val, record) {
                    var me = this;
                    var display = me.down("[name=" + me.name + "Display]");
                    if (display) {
                        display.setValue(val);
                    }
                    if (record) {
                        me.setRawValue(record.get(me.name));
                    }
                    if (!val) {
                        me.setRawValue(-1);
                        var moreFieldContainer = me.down("[name=" + me.name + "MoreFields]");
                        if (moreFieldContainer) {
                            moreFieldContainer.removeAll(true);
                        }
                    }
                    return me;
                },
                setHtml: function (val) {
                    this.setValue(val);
                },
                setMultiValue: function (idValues, textValues) {
                    this.setRawValue(idValues[0], idValues.slice(1));
                    this.setValue(textValues.join("#"));
                    if (this.autoDisabled) {
                        var display = this.down("[name=" + this.name + "Display]");
                        if (display) {
                            display.setDisabled(true);
                        }
                    }
                },
                getMultiValue: function () {
                    var me = this;
                    var values = [];
                    var value = me.down("[name=" + me.name + "]");
                    if (value) {
                        values.push(value.getValue());
                    }
                    var moreFieldContainer = me.down("[name=" + me.name + "MoreFields]");
                    if (moreFieldContainer) {
                        moreFieldContainer.items.each(function (field) {
                            values.push(field.getValue());
                        });
                    }
                    return values;
                },
                setRawValue: function (val, moreValues) {
                    var me = this;
                    var value = me.down("[name=" + me.name + "]");
                    if (value) {
                        value.setValue(val);
                    }
                    var moreFieldContainer = me.down("[name=" + me.name + "MoreFields]");
                    if (moreFieldContainer) {
                        moreFieldContainer.removeAll(true);
                    }
                    if (moreValues) {
                        for (var i = 0; i < moreValues.length; i++) {
                            var newField = Ext.create({
                                xtype: 'hiddenfield',
                                name: me.name
                            });
                            newField.setValue(moreValues[i]);
                            if (moreFieldContainer) {
                                moreFieldContainer.add(newField);
                            }
                        }
                    }
                    if (me.record) {
                        for (var i = 0; i < me.binds.length; i++) {
                            var bindSet = me.binds[i];
                            var setArray = bindSet.toString().split("@");
                            if (setArray.length > 1) {
                                var linkFieldName = setArray[0];
                                var linkValue = me.record.get(linkFieldName);
                                for (var j = 1; j < setArray.length; j++) {
                                    var newField = Ext.create({
                                        xtype: 'hiddenfield',
                                        name: setArray[j]
                                    });
                                    newField.setValue(linkValue);
                                    moreFieldContainer.add(newField);
                                }
                            }
                        }
                    }
                },
                getRawValue: function () {
                    var me = this;
                    var value = me.down("[name=" + me.name + "]");
                    if (value) {
                        return value.getValue();
                    }
                    return null;
                },
                getTriggers: function () {
                    var me = this;
                    var display = me.down("[name=" + me.name + "Display]");
                    if (display) {
                        return display.getTriggers();
                    }
                    return {};
                },
                selectData: function (callback) {
                    var me = this;
                    if (Ext.isFunction(me.onBeforeSelect)) {
                        if (!me.onBeforeSelect(me)) {
                            return;
                        }
                    }
                    FastExt.Component.holdEditorMenu(me);
                    if (!me.entityCode) {
                        FastExt.Dialog.showAlert("系统提醒", me.nullEntityCodeError, function () {
                            FastExt.Component.resumeEditorMenu(me);
                        });
                        return;
                    }
                    if (!me.entityId) {
                        FastExt.Dialog.showAlert("系统提醒", me.nullEntityIdError, function () {
                            FastExt.Component.resumeEditorMenu(me);
                        });
                        return;
                    }
                    if (!me.entityText) {
                        FastExt.Dialog.showAlert("系统提醒", me.nullEntityTextError, function () {
                            FastExt.Component.resumeEditorMenu(me);
                        });
                        return;
                    }
                    var entity = FastExt.System.EntitiesHandler.getEntity(me.entityCode);
                    if (!entity) {
                        FastExt.Dialog.showAlert("系统提醒", "未获取到 '" + me.entityCode + "' 实体类！", function () {
                            FastExt.Component.resumeEditorMenu(me);
                        });
                        return;
                    }
                    if (!entity.js) {
                        FastExt.Dialog.showAlert("系统提醒", "未获取到 '" + me.entityCode + "' JS对象！", function () {
                            FastExt.Component.resumeEditorMenu(me);
                        });
                        return;
                    }
                    var entityObj = eval("new " + me.entityCode + "()");
                    if (!Ext.isFunction(entityObj.showSelect)) {
                        FastExt.Dialog.showAlert("系统提醒", "'" + me.entityCode + "' JS对象不存在函数showSelect(obj,callBack)！", function () {
                            FastExt.Component.resumeEditorMenu(me);
                        });
                        return;
                    }
                    var display = me.down("[name=" + me.name + "Display]");
                    if (display) {
                        display.blur();
                    }
                    var selectTitle = entity.shortName;
                    if (me.fieldLabel) {
                        selectTitle = me.fieldLabel;
                    }
                    if (me.config && me.config.fieldLabel) {
                        selectTitle = me.config.fieldLabel;
                    }
                    if (me.labelTitle) {
                        selectTitle = me.labelTitle;
                    }
                    if (Ext.isEmpty(me.selectGridTitle)) {
                        me.selectGridTitle = "选择" + selectTitle;
                    }
                    var doMultiSelect = me.multiSelect;
                    if (FastExt.Base.toBool(me.fromColumn)) {
                        doMultiSelect = false;
                    }
                    FastExt.Cache.memory["GridSelectHistory" + $.md5(me.selectGridTitle)] = me.records;
                    entityObj.showSelect(this, me.selectGridTitle, me.linkValue.where, doMultiSelect).then(function (result) {
                        try {
                            if (result) {
                                if (Ext.isFunction(callback)) {
                                    callback(result);
                                    return;
                                }
                                me.records = result;
                                if (result.length === 1) {
                                    var data = result[0];
                                    me.record = data;
                                    var textValue = data.get(me.entityText);
                                    var idValue = data.get(me.entityId);
                                    if (Ext.isEmpty(textValue)) {
                                        textValue = idValue;
                                    }
                                    me.setValue(textValue);
                                    me.setRawValue(idValue);
                                }
                                else if (result.length > 1) {
                                    me.record = result[0];
                                    var newText = "";
                                    var moreValues = [];
                                    for (var i = 0; i < result.length; i++) {
                                        var textValue = result[i].get(me.entityText);
                                        var idValue = result[i].get(me.entityId);
                                        if (Ext.isEmpty(textValue)) {
                                            textValue = idValue;
                                        }
                                        newText += "#" + textValue;
                                        moreValues.push(idValue);
                                    }
                                    me.setRawValue(moreValues[0], moreValues.slice(1));
                                    me.setValue(newText.substring(1));
                                }
                                if (Ext.isFunction(me.onAfterSelect)) {
                                    me.onAfterSelect(me);
                                }
                            }
                        }
                        finally {
                            FastExt.Component.resumeEditorMenu(me);
                        }
                    });
                },
                clearData: function () {
                    var me = this;
                    me.setValue(null);
                    me.setRawValue(-1);
                    var moreFieldContainer = me.down("[name=" + me.name + "MoreFields]");
                    if (moreFieldContainer) {
                        moreFieldContainer.removeAll(true);
                    }
                    me.records = null;
                    me.record = null;
                    if (Ext.isFunction(me.onClearSelect)) {
                        me.onClearSelect(me);
                    }
                },
                onFastInputClick: function () {
                    if (this.readOnly || this.disabled || this.editable) {
                        return;
                    }
                    this.selectData();
                },
                initComponent: function () {
                    var me = this;
                    var defaultLinkValue = FastExt.Listeners.getFire().onInitLinkFieldDefaultValue(me);
                    if (defaultLinkValue) {
                        if (me.linkValue) {
                            me.linkValue = FastExt.Json.mergeJson(me.linkValue, defaultLinkValue);
                        }
                        else {
                            me.linkValue = defaultLinkValue;
                        }
                    }
                    if (!me.linkValue) {
                        me.linkValue = {};
                        me.linkValue[me.entityId] = me.entityIdDefaultValue;
                        me.linkValue[me.entityText] = null;
                    }
                    if (!me.linkValue.hasOwnProperty(me.entityId)) {
                        me.linkValue[me.entityId] = me.entityIdDefaultValue;
                    }
                    if (Ext.isEmpty(me.linkValue[me.entityId])) {
                        me.linkValue[me.entityId] = me.entityIdDefaultValue;
                    }
                    if (Ext.isEmpty(me.name)) {
                        me.name = "LinkField" + Ext.now();
                    }
                    var displayValue = me.linkValue[me.entityText];
                    if (displayValue === this.entityIdDefaultValue) {
                        displayValue = "";
                    }
                    if (Ext.isEmpty(displayValue)) {
                        displayValue = me.value;
                    }
                    var moreFieldItems = [];
                    for (var i = 0; i < me.binds.length; i++) {
                        var bindSet = me.binds[i];
                        var setArray = bindSet.toString().split("@");
                        if (setArray.length > 1) {
                            var linkFieldName = setArray[0];
                            var linkValue = me.linkValue[linkFieldName];
                            for (var j = 1; j < setArray.length; j++) {
                                moreFieldItems.push({
                                    xtype: 'hiddenfield',
                                    name: setArray[j],
                                    value: linkValue
                                });
                            }
                        }
                    }
                    me.items = [
                        {
                            xtype: 'hiddenfield',
                            name: me.name,
                            value: me.linkValue[me.entityId]
                        },
                        {
                            xtype: 'fieldcontainer',
                            name: me.name + "MoreFields",
                            hidden: true,
                            items: moreFieldItems
                        },
                        {
                            xtype: 'textfield',
                            code: me.code,
                            name: me.name + "Display",
                            editable: me.editable,
                            parentXtype: me.xtype,
                            value: displayValue,
                            useHistory: me.useHistory,
                            letterKeyboard: me.letterKeyboard,
                            disabled: !Ext.isEmpty(displayValue) && me.autoDisabled && !FastExt.Base.toBool(me.fromHeadSearch, false),
                            hideLabel: true,
                            fieldLabel: me.fieldLabel,
                            allowBlank: me.allowBlank,
                            emptyText: me.selectGridTitle ? me.selectGridTitle : "请选择" + FastExt.Base.toString(me.config.fieldLabel, ""),
                            listeners: {
                                afterrender: function (obj) {
                                    obj.inputEl.on('click', me.onFastInputClick, me);
                                }
                            },
                            triggers: {
                                close: {
                                    cls: 'text-clear',
                                    weight: FastExt.Base.toBool(me.fromHeadSearch, false) ? 99 : 0,
                                    handler: function () {
                                        me.clearData();
                                        if (Ext.isFunction(me.onClearValue)) {
                                            me.onClearValue();
                                        }
                                    }
                                },
                                search: {
                                    cls: 'text-search',
                                    handler: function () {
                                        me.selectData();
                                        this.inputEl.blur();
                                    }
                                }
                            }
                        }
                    ];
                    me.callParent(arguments);
                }
            });
        };
        return LinkField;
    }());
    FastDefine.LinkField = LinkField;
    var TargetField = (function () {
        function TargetField() {
        }
        TargetField.__onLoaded = function () {
            Ext.define("Fast.ext.Target", {
                alias: ['widget.target', 'widget.targetfield'],
                extend: 'Ext.form.FieldContainer',
                layout: "column",
                labelWidth: null,
                targetType: null,
                targetTypeReadOnly: false,
                targetTypeEnum: null,
                targetId: null,
                targetValue: {},
                targetFunction: 'getTargetEntity',
                targetEnumValue: 'id',
                targetEnumText: 'text',
                include: [],
                exclude: [],
                onChangeTypeSelect: null,
                linkfieldConfig: {},
                enumcomboConfig: {},
                defaults: {
                    labelWidth: 84,
                    margin: '5 5 5 5',
                    labelAlign: 'right',
                    allowBlankTip: true,
                    allowBlank: false,
                    emptyText: 'default'
                },
                hideLabel: true,
                getValue: function () {
                    var me = this;
                    var targetIdCmp = me.down("[name=" + me.targetId + "]");
                    return targetIdCmp.getText();
                },
                setValue: function (val, record) {
                    var me = this;
                    var targetIdCmp = me.down("[name=" + me.targetId + "]");
                    if (targetIdCmp) {
                        targetIdCmp.setValue(val);
                    }
                    if (record) {
                        me.targetValue = {};
                        me.targetValue[me.targetType] = record.get(me.targetType);
                        me.targetValue[me.targetId] = record.get(me.targetId);
                        me.holdIdValue = me.getTargetTypeValue() != record.get(me.targetType);
                        me.setTargetIdValue(record.get(me.targetId));
                        me.setTargetTypeValue(record.get(me.targetType));
                    }
                },
                setHtml: function (val) {
                    this.setValue(val);
                },
                getSearchField: function () {
                },
                setRecordValue: function (record) {
                    var me = this;
                    if (record) {
                        if (record.store) {
                            record.store.holdUpdate = true;
                        }
                        if (me.targetId) {
                            record.set(me.targetId, me.getTargetIdValue());
                        }
                        if (me.targetType) {
                            record.set(me.targetType, me.getTargetTypeValue());
                        }
                        if (me.targetText && me.targetText != me.dataIndex) {
                            record.set(me.targetText, me.getValue());
                        }
                        record.set(me.dataIndex, me.getValue());
                        if (record.store) {
                            record.store.holdUpdate = false;
                            record.store.fireEvent("endupdate");
                        }
                    }
                },
                setTargetTypeValue: function (value) {
                    var me = this;
                    var targetTypeCmp = me.down("[name=" + me.targetType + "]");
                    if (targetTypeCmp) {
                        targetTypeCmp.setValue(value);
                    }
                },
                getTargetTypeValue: function () {
                    var me = this;
                    var targetTypeCmp = me.down("[name=" + me.targetType + "]");
                    if (targetTypeCmp) {
                        return targetTypeCmp.getValue();
                    }
                    return 0;
                },
                setTargetIdValue: function (value) {
                    var me = this;
                    var targetIdCmp = me.down("[name=" + me.targetId + "]");
                    if (targetIdCmp) {
                        targetIdCmp.setRawValue(value);
                    }
                },
                getTargetIdValue: function () {
                    var me = this;
                    var targetIdCmp = me.down("[name=" + me.targetId + "]");
                    if (targetIdCmp) {
                        return targetIdCmp.getRawValue();
                    }
                    return -1;
                },
                getTargetEntity: function (targetType) {
                    if (targetType < 0) {
                        return null;
                    }
                    if (Ext.isEmpty(targetType)) {
                        targetType = 0;
                    }
                    var me = this;
                    var targetEntity = window[me.targetFunction](targetType, me.targetType);
                    if (!targetEntity) {
                        console.error("未获取到TargetType为：" + targetType + "的实体配置！");
                        return null;
                    }
                    return targetEntity;
                },
                showWindow: function (obj, callBack, title) {
                    if (Ext.isEmpty(title)) {
                        title = "编辑目标数据";
                    }
                    var me = this.cloneConfig({});
                    me.setValue(this.getValue());
                    me.editorWin = Ext.create('Ext.window.Window', {
                        title: title,
                        height: 200,
                        width: 400,
                        layout: 'fit',
                        resizable: false,
                        modal: true,
                        constrain: true,
                        iconCls: 'extIcon extLink',
                        items: [me],
                        animateTarget: obj,
                        buttons: [
                            {
                                text: '取消',
                                iconCls: 'extIcon extClose',
                                handler: function () {
                                    me.editorWin.close();
                                }
                            },
                            {
                                text: '确定',
                                iconCls: 'extIcon extOk',
                                handler: function () {
                                    me.editorWin.close();
                                    if (Ext.isFunction(callBack)) {
                                        callBack(me);
                                    }
                                }
                            }
                        ]
                    });
                    me.editorWin.show();
                },
                initComponent: function () {
                    var me = this;
                    var configLabel = me.fieldLabel;
                    if (Ext.isEmpty(configLabel)) {
                        configLabel = "目标类型";
                    }
                    me.fieldLabel = "";
                    me.margin = '0 0 0 0';
                    var linkValue = {};
                    if (!Ext.isFunction(window[me.targetFunction])) {
                        FastExt.Dialog.showAlert("目标组件错误", "未检测到方法" + me.targetFunction + "!");
                        me.callParent(arguments);
                        return;
                    }
                    if (!me.targetValue) {
                        me.targetValue = {};
                        me.targetValue[me.targetType] = -1;
                    }
                    if (!me.targetValue[me.targetType]) {
                        me.targetValue[me.targetType] = -1;
                    }
                    if (me.targetEnum) {
                        me.targetTypeEnum = me.targetEnum;
                    }
                    if (!me.targetTypeEnum) {
                        me.targetTypeEnum = me.targetType.replace(me.targetType[0], me.targetType[0].toUpperCase()) + "Enum";
                    }
                    var targetTypeValue = me.targetValue[me.targetType];
                    var targetEntity = me.getTargetEntity(targetTypeValue);
                    var targetTypeDisplay = "";
                    if (targetEntity) {
                        targetTypeDisplay = targetEntity["entityComment"];
                        linkValue[targetEntity.entityId] = me.targetValue[me.targetId];
                        linkValue[targetEntity.entityText] = me.targetValue["targetText"];
                    }
                    if (Ext.isEmpty(targetTypeDisplay)) {
                        targetTypeDisplay = "";
                    }
                    var targetTypeCmp = {
                        name: me.targetType,
                        xtype: "enumcombo",
                        fieldLabel: configLabel,
                        columnWidth: 1,
                        value: targetTypeValue >= 0 ? targetTypeValue : null,
                        emptyText: '请选择' + configLabel,
                        enumValue: me.targetEnumValue,
                        enumText: me.targetEnumText,
                        readOnly: me.targetTypeReadOnly,
                        enumName: me.targetTypeEnum,
                        exclude: me.exclude,
                        include: me.include,
                        parentXtype: me.xtype,
                        listeners: {
                            change: function (obj, newValue, oldValue) {
                                var newEntity = me.getTargetEntity(newValue);
                                if (newEntity) {
                                    var targetIdCmp_1 = me.down("[name=" + me.targetId + "]");
                                    targetIdCmp_1.entityCode = newEntity.entityCode;
                                    targetIdCmp_1.entityId = newEntity.entityId;
                                    targetIdCmp_1.entityText = newEntity.entityText;
                                    if (me.holdIdValue) {
                                        me.holdIdValue = false;
                                        return;
                                    }
                                    var targetIdDisplay = me.down("[name=" + me.targetId + "Display]");
                                    if (targetIdDisplay) {
                                        targetIdDisplay.setEmptyText("请选择" + obj.getDisplayValue());
                                    }
                                    targetIdCmp_1.selectGridTitle = "请选择" + obj.getDisplayValue();
                                    targetIdCmp_1.clearData();
                                }
                                if (Ext.isFunction(me.onChangeTypeSelect)) {
                                    me.onChangeTypeSelect(me);
                                }
                                if (me.hasListener("change")) {
                                    me.fireEvent("change");
                                }
                            }
                        }
                    };
                    var configLabel2 = me.fieldLabel2;
                    if (Ext.isEmpty(configLabel2)) {
                        configLabel2 = "目标数据";
                    }
                    var targetIdCmp = {
                        name: me.targetId,
                        xtype: "linkfield",
                        fieldLabel: configLabel2,
                        columnWidth: 1,
                        nullEntityCodeError: '请先选择' + configLabel,
                        entityCode: targetEntity ? targetEntity.entityCode : null,
                        entityId: targetEntity ? targetEntity.entityId : null,
                        entityText: targetEntity ? targetEntity.entityText : null,
                        linkValue: linkValue,
                        selectGridTitle: "请选择" + targetTypeDisplay,
                        multiSelect: me.multiSelect,
                    };
                    me.items = [FastExt.Json.mergeJson(targetTypeCmp, me.enumcomboConfig), FastExt.Json.mergeJson(targetIdCmp, me.linkfieldConfig)];
                    me.callParent(arguments);
                }
            });
        };
        return TargetField;
    }());
    FastDefine.TargetField = TargetField;
    var MapField = (function () {
        function MapField() {
        }
        MapField.__onLoaded = function () {
            Ext.define("Fast.ext.Map", {
                alias: ['widget.map', 'widget.mapfield'],
                extend: 'Ext.form.FieldContainer',
                lngName: 'lnt',
                latName: 'lat',
                proName: null,
                cityName: null,
                areaName: null,
                editable: false,
                allowBlank: true,
                layout: 'fit',
                submitValue: true,
                isValid: function () {
                    var me = this;
                    var value = me.down("[name=" + me.name + "]");
                    return value.isValid();
                },
                getName: function () {
                    return this.name;
                },
                getValue: function () {
                    var me = this;
                    var value = me.down("[name=" + me.name + "]");
                    return value.getValue();
                },
                setValue: function (val, record) {
                    var me = this;
                    var value = me.down("[name=" + me.name + "]");
                    if (value) {
                        value.setValue(val);
                    }
                    if (record) {
                        if (me.latName) {
                            me.setLatValue(record.get(me.latName));
                        }
                        if (me.lngName) {
                            me.setLngValue(record.get(me.lngName));
                        }
                        if (me.proName) {
                            me.setProValue(record.get(me.proName));
                        }
                        if (me.cityName) {
                            me.setCityValue(record.get(me.cityName));
                        }
                        if (me.areaName) {
                            me.setAreaValue(record.get(me.areaName));
                        }
                    }
                },
                setRecordValue: function (record) {
                    var me = this;
                    if (record) {
                        if (record.store) {
                            record.store.holdUpdate = true;
                        }
                        if (me.latName) {
                            record.set(me.latName, me.getLatValue());
                        }
                        if (me.lngName) {
                            record.set(me.lngName, me.getLngValue());
                        }
                        if (me.proName) {
                            record.set(me.proName, me.getProValue());
                        }
                        if (me.cityName) {
                            record.set(me.cityName, me.getCityValue());
                        }
                        if (me.areaName) {
                            record.set(me.areaName, me.getAreaValue());
                        }
                        record.set(me.name, me.getValue());
                        if (record.store) {
                            record.store.holdUpdate = false;
                            record.store.fireEvent("endupdate");
                        }
                    }
                },
                setLatValue: function (val) {
                    var me = this;
                    var lat = me.down("[name=" + me.latName + "]");
                    if (lat) {
                        lat.setValue(val);
                    }
                },
                setLngValue: function (val) {
                    var me = this;
                    var lng = me.down("[name=" + me.lngName + "]");
                    if (lng) {
                        lng.setValue(val);
                    }
                },
                setProValue: function (val) {
                    var me = this;
                    var pro = me.down("[name=" + me.proName + "]");
                    if (pro) {
                        pro.setValue(val);
                    }
                },
                setCityValue: function (val) {
                    var me = this;
                    var city = me.down("[name=" + me.cityName + "]");
                    if (city) {
                        city.setValue(val);
                    }
                },
                setAreaValue: function (val) {
                    var me = this;
                    var area = me.down("[name=" + me.areaName + "]");
                    if (area) {
                        area.setValue(val);
                    }
                },
                getLatValue: function () {
                    var me = this;
                    var lat = me.down("[name=" + me.latName + "]");
                    if (lat) {
                        return lat.getValue();
                    }
                    return 0;
                },
                getLngValue: function () {
                    var me = this;
                    var lng = me.down("[name=" + me.lngName + "]");
                    if (lng) {
                        return lng.getValue();
                    }
                    return 0;
                },
                getProValue: function () {
                    var me = this;
                    var pro = me.down("[name=" + me.proName + "]");
                    if (pro) {
                        return pro.getValue();
                    }
                    return null;
                },
                getCityValue: function () {
                    var me = this;
                    var city = me.down("[name=" + me.cityName + "]");
                    if (city) {
                        return city.getValue();
                    }
                    return null;
                },
                getAreaValue: function () {
                    var me = this;
                    var area = me.down("[name=" + me.areaName + "]");
                    if (area) {
                        return area.getValue();
                    }
                    return null;
                },
                selectData: function () {
                    var me = this;
                    FastExt.Component.holdEditorMenu(me);
                    var value = me.down("[name=" + me.name + "]");
                    value.blur();
                    FastExt.AMapDialog.select(me, FastExt.AMapMapParams.newParam({
                        title: "请选择在地图上选择坐标位置",
                        items: [
                            {
                                type: FastEnum.MapItemType.marker_overlay,
                                enabledEditor: true,
                                title: "SelectPosition",
                                lng: me.getLngValue(),
                                lat: me.getLatValue(),
                                address: me.getValue(),
                                zoom: 15,
                            }
                        ],
                    })).then(function (resultArray) {
                        if (resultArray && resultArray.length > 0) {
                            var result = resultArray[0];
                            me.setLatValue(result.lat);
                            me.setLngValue(result.lng);
                            me.setProValue(result.province);
                            me.setAreaValue(result.district);
                            me.setCityValue(result.city);
                            me.setValue(result.address);
                        }
                        FastExt.Component.resumeEditorMenu(me);
                    });
                },
                clearData: function () {
                    var me = this;
                    me.setValue(null);
                    me.setLatValue(0);
                    me.setLngValue(0);
                },
                onFastInputClick: function () {
                    if (this.readOnly || this.disabled || this.editable) {
                        return;
                    }
                    this.selectData();
                },
                initComponent: function () {
                    var me = this;
                    if (!me.name) {
                        me.name = me.dataIndex;
                    }
                    if (Ext.isEmpty(me.name)) {
                        me.name = "MapField" + Ext.now();
                    }
                    me.items = [
                        {
                            xtype: 'hiddenfield',
                            name: me.lngName,
                            value: 0
                        },
                        {
                            xtype: 'hiddenfield',
                            name: me.latName,
                            value: 0
                        },
                        {
                            xtype: 'hiddenfield',
                            name: me.proName
                        },
                        {
                            xtype: 'hiddenfield',
                            name: me.cityName
                        },
                        {
                            xtype: 'hiddenfield',
                            name: me.areaName
                        },
                        {
                            xtype: 'textfield',
                            name: me.name,
                            editable: me.editable,
                            fieldLabel: me.fieldLabel,
                            hideLabel: true,
                            allowBlank: me.allowBlank,
                            emptyText: me.emptyText,
                            parentXtype: me.xtype,
                            listeners: {
                                afterrender: function (obj) {
                                    obj.inputEl.on('click', me.onFastInputClick, me);
                                }
                            },
                            triggers: {
                                close: {
                                    cls: 'text-clear',
                                    handler: function () {
                                        me.clearData();
                                        if (Ext.isFunction(me.onClearValue)) {
                                            me.onClearValue();
                                        }
                                    }
                                },
                                search: {
                                    cls: 'text-search',
                                    handler: function () {
                                        me.selectData();
                                        this.inputEl.blur();
                                    }
                                }
                            }
                        }
                    ];
                    me.callParent(arguments);
                }
            });
        };
        return MapField;
    }());
    FastDefine.MapField = MapField;
    var DateRangeField = (function () {
        function DateRangeField() {
        }
        DateRangeField.__onLoaded = function () {
            Ext.define("Fast.ext.DateRange", {
                alias: ['widget.daterange', 'widget.daterangefield'],
                extend: 'Ext.form.field.Text',
                beginDate: null,
                endDate: null,
                editable: true,
                allowBlank: true,
                maxRangeDate: -1,
                maxRangeMonth: -1,
                maxRangeYear: -1,
                layout: 'column',
                format: 'Y-m-d',
                submitValue: true,
                onAfterSelect: null,
                onClearValue: null,
                selectData: function () {
                    var me = this;
                    FastExt.Component.holdEditorMenu(me);
                    var time = Ext.now();
                    var dateRangeMenu = Ext.create('Ext.menu.Menu', {
                        floating: true,
                        editorMenu: true,
                        items: [{
                                xtype: 'container',
                                padding: '10 10 10 10',
                                layout: 'column',
                                style: {
                                    background: "#ffffff",
                                    borderWidth: 1,
                                    borderColor: "#ffffff",
                                    color: '#eeeee'
                                },
                                border: 0,
                                items: [
                                    {
                                        xtype: 'combo',
                                        fieldLabel: '快速选择',
                                        valueField: 'value',
                                        labelWidth: 60,
                                        margin: '5 5 5 5',
                                        editable: false,
                                        columnWidth: 1,
                                        triggers: {
                                            close: {
                                                cls: 'text-clear',
                                                handler: function () {
                                                    this.setValue(null);
                                                    me.clearData();
                                                }
                                            }
                                        },
                                        listeners: {
                                            change: function (obj, newValue, oldValue, eOpts) {
                                                if (!newValue) {
                                                    return;
                                                }
                                                me.endDate = Ext.Date.format(new Date(), me.format);
                                                if (newValue === 6) {
                                                    me.beginDate = Ext.Date.format(new Date(), me.format);
                                                }
                                                else if (newValue === 1) {
                                                    me.beginDate = Ext.Date.format(Ext.Date.add(new Date(), Ext.Date.DAY, -7), me.format);
                                                }
                                                else if (newValue === 2) {
                                                    me.beginDate = Ext.Date.format(Ext.Date.add(new Date(), Ext.Date.MONTH, -1), me.format);
                                                }
                                                else if (newValue === 3) {
                                                    me.beginDate = Ext.Date.format(Ext.Date.add(new Date(), Ext.Date.MONTH, -3), me.format);
                                                }
                                                else if (newValue === 4) {
                                                    me.beginDate = Ext.Date.format(Ext.Date.add(new Date(), Ext.Date.MONTH, -6), me.format);
                                                }
                                                else if (newValue === 5) {
                                                    me.beginDate = Ext.Date.format(Ext.Date.add(new Date(), Ext.Date.YEAR, -1), me.format);
                                                }
                                                else if (newValue === 7) {
                                                    me.beginDate = Ext.Date.format(Ext.Date.add(new Date(), Ext.Date.DAY, -3), me.format);
                                                }
                                                else if (newValue === 8) {
                                                    me.beginDate = Ext.Date.format(Ext.Date.add(new Date(), Ext.Date.DAY, -1), me.format);
                                                }
                                                var error = me.refreshValue();
                                                if (error) {
                                                    FastExt.Dialog.toast(error);
                                                    obj.setValue(null);
                                                    me.clearData();
                                                    FastExt.Component.shakeComment(dateRangeMenu);
                                                    return;
                                                }
                                                var beginDateTimeField = Ext.getCmp("beginDate" + time);
                                                if (beginDateTimeField) {
                                                    beginDateTimeField.setValue(me.beginDate);
                                                }
                                                var endDateTimeField = Ext.getCmp("endDate" + time);
                                                if (endDateTimeField) {
                                                    endDateTimeField.setValue(me.endDate);
                                                }
                                            }
                                        },
                                        store: Ext.create('Ext.data.Store', {
                                            data: [
                                                {
                                                    'text': '昨天',
                                                    'value': 8
                                                },
                                                {
                                                    'text': '今天',
                                                    'value': 6
                                                },
                                                {
                                                    'text': '近三天',
                                                    'value': 7
                                                },
                                                {
                                                    'text': '近一周',
                                                    'value': 1
                                                },
                                                {
                                                    'text': '近一个月',
                                                    "value": 2
                                                },
                                                {
                                                    'text': '近三个月',
                                                    "value": 3
                                                },
                                                {
                                                    'text': '近六个月',
                                                    "value": 4
                                                },
                                                {
                                                    'text': '近一年',
                                                    "value": 5
                                                }
                                            ]
                                        })
                                    },
                                    {
                                        fieldLabel: '开始日期',
                                        margin: '5 5 5 5',
                                        xtype: 'datefield',
                                        id: 'beginDate' + time,
                                        columnWidth: 1,
                                        labelWidth: 60,
                                        format: me.format,
                                        value: me.beginDate,
                                        emptyText: '开始日期'
                                    }, {
                                        fieldLabel: '结束日期',
                                        margin: '5 5 5 5',
                                        xtype: 'datefield',
                                        id: 'endDate' + time,
                                        columnWidth: 1,
                                        labelWidth: 60,
                                        format: me.format,
                                        value: me.endDate,
                                        emptyText: '结束日期'
                                    },
                                    {
                                        xtype: 'container',
                                        layout: 'hbox',
                                        columnWidth: 1,
                                        border: 0,
                                        items: [
                                            {
                                                xtype: 'button',
                                                text: '确定',
                                                margin: '5 5 5 5',
                                                flex: 0.42,
                                                handler: function () {
                                                    var bDate = Ext.getCmp("beginDate" + time).getValue();
                                                    var eDate = Ext.getCmp("endDate" + time).getValue();
                                                    me.beginDate = Ext.util.Format.date(bDate, me.format);
                                                    me.endDate = Ext.util.Format.date(eDate, me.format);
                                                    if (Ext.isEmpty(me.beginDate)) {
                                                        me.beginDate = Ext.Date.format(new Date(0), me.format);
                                                    }
                                                    if (Ext.isEmpty(me.endDate)) {
                                                        me.endDate = Ext.Date.format(new Date(), me.format);
                                                    }
                                                    var error = me.refreshValue();
                                                    if (error) {
                                                        FastExt.Dialog.toast(error);
                                                        FastExt.Component.shakeComment(dateRangeMenu);
                                                        return;
                                                    }
                                                    if (Ext.isFunction(me.onAfterSelect)) {
                                                        me.onAfterSelect(me);
                                                    }
                                                    dateRangeMenu.close();
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }],
                        listeners: {
                            hide: function (obj, epts) {
                                obj.close();
                            },
                            close: function () {
                                FastExt.Component.resumeEditorMenu(me);
                                me.pickerShown = false;
                                console.log("关闭日期范围选择菜单！");
                            }
                        }
                    });
                    dateRangeMenu.setWidth(this.bodyEl.getWidth());
                    dateRangeMenu.showBy(this.bodyEl, "tl-bl?");
                    this.pickerShown = true;
                },
                clearData: function () {
                    var me = this;
                    me.setValue(null);
                    me.beginDate = null;
                    me.endDate = null;
                },
                refreshValue: function () {
                    var me = this;
                    me.setValue(null);
                    if (Ext.isEmpty(me.beginDate) || Ext.isEmpty(me.beginDate)) {
                        return null;
                    }
                    var bDate = Ext.Date.parse(me.beginDate, me.format);
                    var eDate = Ext.Date.parse(me.endDate, me.format);
                    if (bDate > eDate) {
                        me.clearData();
                        return "开始日期必须小于等于结束日期！";
                    }
                    if (me.maxRangeDate > 0) {
                        var maxEndDate = Ext.Date.add(bDate, Ext.Date.DAY, me.maxRangeDate);
                        if (!Ext.Date.between(eDate, bDate, maxEndDate)) {
                            me.clearData();
                            return "日期范围区间必须在" + me.maxRangeDate + "天以内！";
                        }
                    }
                    if (me.maxRangeMonth > 0) {
                        var maxEndDate = Ext.Date.add(bDate, Ext.Date.MONTH, me.maxRangeMonth);
                        if (!Ext.Date.between(eDate, bDate, maxEndDate)) {
                            me.clearData();
                            return "日期范围区间必须在" + me.maxRangeMonth + "个月以内！";
                        }
                    }
                    if (me.maxRangeYear > 0) {
                        var maxEndDate = Ext.Date.add(bDate, Ext.Date.YEAR, me.maxRangeYear);
                        if (!Ext.Date.between(eDate, bDate, maxEndDate)) {
                            me.clearData();
                            return "日期范围区间必须在" + me.maxRangeYear + "年以内！";
                        }
                    }
                    me.setValue(me.beginDate + " 至 " + me.endDate);
                    if (Ext.Date.isEqual(bDate, eDate)) {
                        me.setValue("今天");
                    }
                    return null;
                },
                triggers: {
                    close: {
                        cls: 'text-clear',
                        handler: function () {
                            this.clearData();
                            if (Ext.isFunction(this.onClearValue)) {
                                this.onClearValue();
                            }
                        }
                    },
                    search: {
                        cls: 'text-search',
                        handler: function () {
                            this.selectData();
                            this.inputEl.blur();
                        }
                    }
                },
                toggleSelectData: function () {
                    if (this.pickerShown) {
                        this.pickerShown = false;
                        return;
                    }
                    this.selectData();
                },
                onFastInputClick: function () {
                    if (this.disabled) {
                        return;
                    }
                    this.toggleSelectData();
                },
                finishRender: function () {
                    this.callParent(arguments);
                    this.inputEl.on('click', this.onFastInputClick, this);
                },
                initComponent: function () {
                    this.editable = false;
                    this.refreshValue();
                    this.callParent(arguments);
                }
            });
        };
        return DateRangeField;
    }());
    FastDefine.DateRangeField = DateRangeField;
    var DateField = (function () {
        function DateField() {
        }
        DateField.__onLoaded = function () {
            Ext.define("Fast.ext.Date", {
                alias: ['widget.date', 'widget.datefield'],
                extend: 'Ext.form.field.Text',
                format: 'Y-m-d H:i:s',
                strict: true,
                isValid: function () {
                    var me = this;
                    if (me.callParent(arguments)) {
                        if (!Ext.isEmpty(me.getValue()) && !FastExt.Base.toBool(me.fromHeadSearch, false)) {
                            var date = Ext.Date.parse(me.getValue(true), this.format);
                            if (!date) {
                                me.invalidText = "日期格式错误！格式必须为：" + this.format;
                                me.markInvalid(this.invalidText);
                                return false;
                            }
                        }
                        return true;
                    }
                    return false;
                },
                setValue: function (dateValue) {
                    var me = this;
                    if (me.strict) {
                        if (!Ext.isEmpty(dateValue)) {
                            var guessDateFormat = FastExt.Base.guessDateFormat(dateValue);
                            var date = Ext.Date.parse(dateValue, guessDateFormat);
                            if (date) {
                                arguments[0] = Ext.Date.format(date, me.format);
                            }
                        }
                    }
                    return me.callParent(arguments);
                },
                getValue: function (fromValid) {
                    var me = this;
                    var rawValue = me.callParent(arguments);
                    if (me.strict) {
                        if (!FastExt.Base.toBool(fromValid, false)) {
                            var guessDateFormat = FastExt.Base.guessDateFormat(rawValue);
                            if (guessDateFormat === "Y-m") {
                                return rawValue + "-01";
                            }
                            else if (guessDateFormat === "Y/m") {
                                return rawValue + "/01";
                            }
                            else if (guessDateFormat === "Y") {
                                return rawValue + "-01-01";
                            }
                        }
                    }
                    return rawValue;
                },
                selectData: function () {
                    var me = this;
                    FastExt.Component.holdEditorMenu(me);
                    me.pickerShown = true;
                    FastExt.Dialog.showFastDatePicker(me.bodyEl, me.getValue(), this.format).then(function (dateValue) {
                        FastExt.Component.resumeEditorMenu(me);
                        me.resetPickerShowTask.delay(100);
                        if (dateValue) {
                            me.setValue(dateValue);
                        }
                    });
                },
                toggleSelectData: function () {
                    if (this.pickerShown) {
                        this.pickerShown = false;
                        return;
                    }
                    this.selectData();
                },
                endEdit: function () {
                    this.firstValue = null;
                },
                onFastInputClick: function () {
                    if (this.readOnly || this.disabled) {
                        return;
                    }
                    if (this.strict) {
                        this.toggleSelectData();
                    }
                },
                triggers: {
                    search: {
                        cls: 'extIcon extDatePicker',
                        handler: function () {
                            this.toggleSelectData();
                        }
                    }
                },
                finishRender: function () {
                    this.callParent(arguments);
                    this.inputEl.on('click', this.onFastInputClick, this);
                },
                initComponent: function () {
                    var me = this;
                    me.resetPickerShowTask = new Ext.util.DelayedTask(function () {
                        this.pickerShown = false;
                    }, me);
                    me.callParent(arguments);
                }
            });
        };
        return DateField;
    }());
    FastDefine.DateField = DateField;
    var ColorField = (function () {
        function ColorField() {
        }
        ColorField.__onLoaded = function () {
            Ext.define("Fast.ext.ColorField", {
                extend: 'Ext.form.field.Text',
                alias: ['widget.colorfield'],
                editable: false,
                beforeBodyEl: [
                    '<div class="' + Ext.baseCSSPrefix + 'colorpicker-field-swatch" style="z-index: 9;">' +
                        '<div id="{id}-swatchEl" data-ref="swatchEl" class="' + Ext.baseCSSPrefix +
                        'colorpicker-field-swatch-inner"></div>' +
                        '</div>'
                ],
                cls: Ext.baseCSSPrefix + 'colorpicker-field',
                childEls: [
                    'swatchEl'
                ],
                setValue: function (val) {
                    var me = this;
                    if (me.swatchEl) {
                        me.swatchEl.setStyle('background', val);
                    }
                    me.callParent(arguments);
                    return me;
                },
                triggers: {
                    search: {
                        cls: 'extIcon extSearch',
                        handler: function () {
                            this.toggleSelectData();
                        }
                    }
                },
                onFastInputClick: function () {
                    if (this.readOnly || this.disabled) {
                        return;
                    }
                    this.toggleSelectData();
                },
                selectData: function () {
                    var me = this;
                    FastExt.Component.holdEditorMenu(me);
                    me.pickerShown = true;
                    FastExt.Dialog.showFastColorPicker(me.inputEl, me.getValue(), function (color) {
                        me.setValue(color.toRGBA().toString(0));
                    }).then(function (dateValue) {
                        FastExt.Component.resumeEditorMenu(me);
                        me.resetPickerShowTask.delay(100);
                    });
                },
                clearData: function () {
                    var me = this;
                    me.setValue(null);
                },
                toggleSelectData: function () {
                    if (this.pickerShown) {
                        this.pickerShown = false;
                        return;
                    }
                    this.selectData();
                },
                initComponent: function () {
                    var me = this;
                    me.resetPickerShowTask = new Ext.util.DelayedTask(function () {
                        this.pickerShown = false;
                    }, me);
                    me.callParent(arguments);
                },
                finishRender: function () {
                    this.callParent(arguments);
                    this.inputEl.on('click', this.onFastInputClick, this);
                    var toColor = FastExt.Color.toColor(this.getValue(), "#00000000");
                    this.setValue(toColor);
                }
            });
        };
        return ColorField;
    }());
    FastDefine.ColorField = ColorField;
    var SVGIcon = (function () {
        function SVGIcon() {
        }
        SVGIcon.__onLoaded = function () {
            Ext.define("Fast.ext.SVGIcon", {
                extend: 'Ext.Component',
                alias: ['widget.svgicon'],
                iconId: "",
                iconCls: "",
                initComponent: function () {
                    var me = this;
                    me.callParent(arguments);
                },
                finishRender: function () {
                    this.callParent(arguments);
                    var template = new Ext.Template('<svg class="svgIconFill {iconClass}" aria-hidden="true"><use xlink:href="{iconId}"></use></svg>');
                    this.update(template.apply({
                        iconId: this.iconId,
                        iconCls: this.iconCls,
                    }));
                }
            });
        };
        return SVGIcon;
    }());
    FastDefine.SVGIcon = SVGIcon;
    var Lottie = (function () {
        function Lottie() {
        }
        Lottie.__onLoaded = function () {
            Ext.define("Fast.ext.Lottie", {
                extend: 'Ext.Component',
                alias: ['widget.lottie'],
                jsonPath: '',
                focusOnToFront: false,
                initComponent: function () {
                    var me = this;
                    me.callParent(arguments);
                },
                destroy: function () {
                    FastExt.Lottie.unloadJsonAnim(this);
                    this.callParent(arguments);
                },
                finishRender: function () {
                    this.callParent(arguments);
                    var container = this.up("window");
                    if (container && !FastExt.Base.toBool(container.shown)) {
                        container.on("show", this.onFastContainerShow, this, { single: true });
                    }
                    else {
                        this.loadJson();
                    }
                },
                onFastContainerShow: function () {
                    this.loadJson();
                },
                loadJson: function () {
                    FastExt.Lottie.loadJsonAnim(this, this.jsonPath);
                }
            });
        };
        return Lottie;
    }());
    FastDefine.Lottie = Lottie;
    var MonacoField = (function () {
        function MonacoField() {
        }
        MonacoField.__onLoaded = function () {
            Ext.define("Fast.ext.FastMonaco", {
                extend: 'Ext.form.field.TextArea',
                alias: ['widget.fastmonaco', 'widget.fastmonacofield'],
                editable: false,
                language: "plaintext",
                finishRender: function () {
                    this.callParent(arguments);
                    this.inputEl.on('click', this.onFastInputClick, this);
                },
                onFastInputClick: function () {
                    if (this.readOnly || this.disabled) {
                        return;
                    }
                    this.showMonacoEditor();
                },
                initComponent: function () {
                    this.editable = false;
                    this.callParent(arguments);
                },
                showMonacoEditor: function () {
                    var me = this;
                    FastExt.Component.holdEditorMenu(me);
                    FastExt.MonacoEditor.showEditor(this, me.getValue(), me.language).then(function (result) {
                        if (result) {
                            me.setValue(result);
                        }
                        FastExt.Component.resumeEditorMenu(me);
                    });
                },
                clearData: function () {
                    var me = this;
                    me.setValue(null);
                },
                showWindow: function (obj, callBack, title) {
                    var me = this;
                    FastExt.Component.holdEditorMenu(me);
                    FastExt.MonacoEditor.showEditor(obj, me.getValue(), me.language).then(function (result) {
                        if (result) {
                            if (Ext.isFunction(callBack)) {
                                callBack(me);
                            }
                        }
                        FastExt.Component.resumeEditorMenu(me);
                    });
                }
            });
        };
        return MonacoField;
    }());
    FastDefine.MonacoField = MonacoField;
    var TipLineField = (function () {
        function TipLineField() {
        }
        TipLineField.__onLoaded = function () {
            Ext.define("Fast.ext.TipLine", {
                extend: 'Ext.Component',
                alias: ['widget.tipline'],
                lineText: '',
                lineColor: "#cccccc",
                lineTextColor: "#cccccc",
                focusOnToFront: false,
                initComponent: function () {
                    var me = this;
                    me.callParent(arguments);
                },
                finishRender: function () {
                    this.callParent(arguments);
                    var bgColor = "#ffffff";
                    if (this.config.style && this.config.style.background) {
                        bgColor = this.config.style.background;
                    }
                    var template = new Ext.Template('<div style="display: flex;align-items: center;justify-content: center;width: 100%;position: relative;">' +
                        '<div style="padding: 5px 10px;background: {bgColor};z-index: 9;color:{lineTextColor}">' +
                        '{lineText}' +
                        '</div>' +
                        '<div style="height: 1px;background: {lineColor};width: 100%;position: absolute;"></div>' +
                        '</div>');
                    this.update(template.apply({
                        lineText: this.lineText,
                        lineColor: this.lineColor,
                        lineTextColor: this.lineTextColor,
                        bgColor: bgColor,
                    }));
                }
            });
        };
        return TipLineField;
    }());
    FastDefine.TipLineField = TipLineField;
    var RowPlaceholderColumn = (function () {
        function RowPlaceholderColumn() {
        }
        RowPlaceholderColumn.__onLoaded = function () {
            Ext.define('Ext.grid.column.RowPlaceholder', {
                extend: 'Ext.grid.column.RowNumberer',
                alias: 'widget.rowplaceholder',
                width: 30,
                align: 'center',
                autoLock: false,
                editable: false,
                excelHeader: false,
                stopSelection: true,
                resizable: false,
                cellFocusable: false,
                cls: Ext.baseCSSPrefix + 'row-place-holder',
                tdCls: Ext.baseCSSPrefix + 'grid-cell-row-place-holder ' + Ext.baseCSSPrefix + 'grid-cell-special',
                innerCls: Ext.baseCSSPrefix + 'grid-cell-inner-row-place-holder',
                defaultRenderer: function (value, metaData, record, rowIdx, colIdx, dataSource, view) {
                    return "";
                },
            });
        };
        return RowPlaceholderColumn;
    }());
    FastDefine.RowPlaceholderColumn = RowPlaceholderColumn;
    var MarkdownDisplay = (function () {
        function MarkdownDisplay() {
        }
        MarkdownDisplay.__onLoaded = function () {
            Ext.define("Fast.ext.MarkdownDisplay", {
                extend: 'Ext.Component',
                alias: ['widget.markdowndisplay'],
                filePath: "",
                initComponent: function () {
                    var me = this;
                    me.callParent(arguments);
                },
                finishRender: function () {
                    var _this = this;
                    this.callParent(arguments);
                    this.setLoading("加载数据中，请稍后……");
                    $.get(this.filePath, function (result) {
                        FastExt.Markdown.parseMarkdown(result, function (htmlValue) {
                            _this.setLoading(false);
                            _this.update(htmlValue);
                        });
                    });
                }
            });
        };
        return MarkdownDisplay;
    }());
    FastDefine.MarkdownDisplay = MarkdownDisplay;
})(FastDefine || (FastDefine = {}));
var FastExt;
(function (FastExt) {
    var Dialog = (function () {
        function Dialog() {
        }
        Dialog.showWait = function (message) {
            Ext.MessageBox.show({
                modal: true,
                title: '系统提醒',
                msg: message,
                iconCls: "extIcon extTimer",
                progressText: '请耐心等待，即将完成操作',
                progress: true,
                justTop: true,
                closable: false,
            });
            var i = 0;
            var max = 100;
            var fn = function () {
                if (Ext.MessageBox.isHidden())
                    return;
                i = i + 0.5;
                if (i === max + 30) {
                    i = 0;
                }
                var val = i / max;
                Ext.MessageBox.updateProgress(val, '请耐心等待，即将完成操作');
                Ext.MessageBox.timeoutProcess = setTimeout(fn, 5);
            };
            if (Ext.MessageBox.timeoutProcess) {
                clearTimeout(Ext.MessageBox.timeoutProcess);
            }
            Ext.MessageBox.timeoutProcess = setTimeout(fn, 5);
        };
        Dialog.hideWait = function () {
            if (Ext.MessageBox.isVisible()) {
                Ext.MessageBox.close();
            }
        };
        Dialog.toast = function (message) {
            var maxWidth = parseInt((document.body.clientWidth * 0.7).toFixed(0));
            var defaultAutoCloseDelay = 2000;
            var textLength = $("<div>" + message + "</div>").text().length;
            if (textLength > 8) {
                defaultAutoCloseDelay = 3000;
            }
            if (textLength > 50) {
                defaultAutoCloseDelay = 5000;
            }
            if (textLength > 80) {
                defaultAutoCloseDelay = 8000;
            }
            Ext.toast({
                html: "<div class='fast-dialog-message'>" + message + "</div>",
                closable: true,
                align: 't',
                slideInDuration: 200,
                slideBackDuration: 200,
                minWidth: 180,
                autoCloseDelay: defaultAutoCloseDelay,
                maxWidth: maxWidth,
                justTop: true,
                unpin: false,
                slideBackAnimation: 'easeOut',
                iconCls: 'extIcon extInfo',
                title: '消息提示'
            });
        };
        Dialog.showHtml = function (obj, title, content, modal) {
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            if (Ext.isEmpty(modal)) {
                modal = true;
            }
            FastExt.Component.holdEditorMenu(obj);
            var win = Ext.create('Ext.window.Window', {
                title: title,
                layout: 'fit',
                animateTarget: obj,
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 600,
                constrain: true,
                resizable: true,
                maximizable: true,
                modal: modal,
                maximized: false,
                iconCls: 'extIcon extSee',
                draggable: true,
                scrollable: true,
                bodyStyle: {
                    background: "#ffffff",
                },
                html: '<div class="fast-show-html-content">' + content + '</div>',
                toFrontOnShow: true,
                listeners: {
                    close: function () {
                        FastExt.Component.resumeEditorMenu(obj);
                    },
                },
                buttons: [
                    {
                        text: '打印',
                        iconCls: 'extIcon extPrint',
                        handler: function () {
                            FastExt.JqueryPrintArea.print(".fast-show-html-content");
                        },
                    }
                ]
            });
            win.show();
        };
        Dialog.showSafeHtml = function (obj, title, content, modal) {
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.8).toFixed(0));
            if (Ext.isEmpty(modal)) {
                modal = true;
            }
            var iframeName = "ShowEditorFrame" + new Date().getTime();
            var iframePanel = Ext.create('Ext.container.Container', {
                layout: 'border',
                region: 'center',
                border: 0,
                iframePanel: true,
            });
            FastExt.Component.holdEditorMenu(obj);
            var win = Ext.create('Ext.window.Window', {
                title: title,
                layout: 'fit',
                animateTarget: obj,
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 600,
                resizable: true,
                maximizable: true,
                modal: modal,
                constrain: true,
                maximized: false,
                iconCls: 'extIcon extSee',
                bodyStyle: {
                    background: "#ffffff",
                },
                draggable: true,
                scrollable: false,
                toFrontOnShow: true,
                items: [iframePanel],
                listeners: {
                    show: function (obj, eOpts) {
                        var url = FastExt.Base.formatUrlVersion("base/content/show_html.html");
                        window[iframeName + "ShowHtmlDone"] = function () {
                            window[iframeName].window.showContent(content);
                        };
                        var html = "<iframe name='" + iframeName + "' src='" + url + "'  width='100%' height='100%' frameborder='0'>";
                        iframePanel.update(html);
                    },
                    close: function () {
                        FastExt.Component.resumeEditorMenu(obj);
                        window[iframeName] = null;
                        window[iframeName + "ShowHtmlDone"] = null;
                    },
                },
                buttons: [
                    {
                        text: '打印',
                        iconCls: 'extIcon extPrint',
                        handler: function () {
                            window[iframeName].window.print();
                        }
                    }
                ]
            });
            win.show();
        };
        Dialog.showLink = function (obj, title, url, config, loadDoneCallBack) {
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var iframeName = "iFrameLink" + new Date().getTime();
            var loadFunName = "iFrameLoadDone" + new Date().getTime();
            var iframePanel = Ext.create('Ext.container.Container', {
                layout: 'border',
                region: 'center',
                border: 0,
                iframePanel: true
            });
            window[loadFunName] = function () {
                iframePanel.setLoading(false);
                if (Ext.isFunction(loadDoneCallBack)) {
                    loadDoneCallBack(iframeName);
                }
                window[loadFunName] = null;
            };
            FastExt.Component.holdEditorMenu(obj);
            var defaultConfig = {
                title: title,
                layout: 'fit',
                animateTarget: obj,
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 600,
                resizable: true,
                maximizable: true,
                modal: true,
                constrain: true,
                maximized: false,
                iconCls: 'extIcon extSee',
                draggable: true,
                scrollable: false,
                toFrontOnShow: true,
                items: [iframePanel],
                listeners: {
                    show: function () {
                        iframePanel.setLoading("正在努力加载中，请稍后……");
                        var html = "<iframe name='" + iframeName + "' onload='" + loadFunName + "()' src='" + url + "'  width='100%' height='100%' frameborder='0'>";
                        iframePanel.update(html);
                    },
                    close: function () {
                        FastExt.Component.resumeEditorMenu(obj);
                        window[loadFunName] = null;
                    }
                }
            };
            var win = Ext.create('Ext.window.Window', FastExt.Json.mergeJson(defaultConfig, config));
            win.show();
        };
        Dialog.showEditorHtml = function (obj, title, content) {
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.8).toFixed(0));
            FastExt.Component.holdEditorMenu(obj);
            var win = Ext.create('Ext.window.Window', {
                title: title,
                layout: 'fit',
                animateTarget: obj,
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 600,
                resizable: true,
                maximizable: true,
                modal: true,
                constrain: true,
                maximized: false,
                iconCls: 'extIcon extSee',
                draggable: true,
                scrollable: false,
                toFrontOnShow: true,
                bodyStyle: {
                    background: "#ffffff",
                },
                html: '<div class="fast-show-tinymce-editor-show-content">' + content + '</div>',
                listeners: {
                    close: function () {
                        FastExt.Component.resumeEditorMenu(obj);
                    },
                },
                buttons: [
                    {
                        text: '打印',
                        iconCls: 'extIcon extPrint',
                        handler: function () {
                            FastExt.JqueryPrintArea.print(".fast-show-tinymce-editor-show-content");
                        },
                    }
                ]
            });
            win.show();
        };
        Dialog.showContent = function (obj, title, text, modal) {
            this.showText(obj, null, title, text, modal);
        };
        Dialog.showText = function (obj, icon, title, text, modal) {
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            if (Ext.isEmpty(icon)) {
                icon = 'extIcon extSee';
            }
            if (Ext.isEmpty(modal)) {
                modal = true;
            }
            FastExt.Component.holdEditorMenu(obj);
            var win = Ext.create('Ext.window.Window', {
                title: title,
                icon: icon,
                iconCls: icon,
                maximizable: true,
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 600,
                resizable: true,
                layout: 'fit',
                animateTarget: obj,
                items: [
                    {
                        xtype: 'textarea',
                        value: text
                    }
                ],
                modal: modal,
                constrain: true,
                bodyStyle: {
                    background: "#ffffff",
                },
                listeners: {
                    close: function () {
                        FastExt.Component.resumeEditorMenu(obj);
                    },
                },
            });
            win.show();
        };
        Dialog.showCode = function (obj, value, linenumber, lang) {
            try {
                if (obj && Ext.isFunction(obj.blur)) {
                    obj.blur();
                }
                if (Ext.isEmpty(lang)) {
                    lang = "";
                }
                FastExt.Component.holdEditorMenu(obj);
                var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
                var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
                var win = Ext.create('Ext.window.Window', {
                    title: "查看内容",
                    height: winHeight,
                    width: winWidth,
                    minHeight: 500,
                    minWidth: 600,
                    animateTarget: obj,
                    resizable: true,
                    layout: 'fit',
                    maximizable: true,
                    iconCls: 'extIcon extSee',
                    autoScroll: true,
                    modal: true,
                    constrain: true,
                    bodyStyle: {
                        background: "#000000"
                    },
                    listeners: {
                        show: function (obj) {
                            PR.prettyPrint();
                        },
                        close: function () {
                            FastExt.Component.resumeEditorMenu(obj);
                        }
                    },
                });
                if (linenumber) {
                    win.update("<pre class='prettyprint " + lang + " linenums windowpre'>" + value + "</pre>");
                }
                else {
                    win.update("<pre class='prettyprint " + lang + " windowpre'>" + value + "</pre>");
                }
                win.show();
            }
            catch (e) {
                FastExt.Dialog.showText(obj, null, "查看内容", value);
            }
        };
        Dialog.showSql = function (obj, value) {
            try {
                value = sqlFormatter.format(value);
                FastExt.Dialog.showCode(obj, value, false, "lang-sql");
            }
            catch (e) {
                FastExt.Dialog.showText(obj, null, "查看内容", value);
            }
        };
        Dialog.showException = function (e, from) {
            if (!e)
                return;
            FastExt.Dialog.hideWait();
            var isDebug = FastExt.System.ConfigHandler.isDebug();
            if (isDebug) {
                var message_1 = e;
                if (e instanceof Error) {
                    message_1 = e.stack;
                    message_1 = message_1.replace(/\n/g, "<br/>")
                        .replace(/\t/g, "&nbsp;&nbsp;&nbsp;&nbsp;")
                        .replace(/ /g, "&nbsp;&nbsp;");
                }
                if (from != null) {
                    from += "，来自" + from;
                }
                else {
                    from = "";
                }
                var win_1 = Ext.create('Ext.window.Window', {
                    title: '系统异常',
                    height: 180,
                    width: 270,
                    layout: 'fit',
                    resizable: false,
                    maximizable: false,
                    constrain: true,
                    fixed: true,
                    modal: true,
                    draggable: false,
                    iconCls: 'extIcon extError',
                    html: "<div  style='padding:15px;background: #fff;' align='center'>【" + from + "】系统发生异常，请及时告知系统管理员！</div>",
                    buttons: [
                        {
                            text: '下次再说',
                            flex: 1,
                            iconCls: 'extIcon extClose whiteColor',
                            handler: function () {
                                win_1.close();
                            }
                        }, {
                            text: '查看错误',
                            flex: 1,
                            iconCls: 'extIcon extException whiteColor',
                            handler: function () {
                                FastExt.Dialog.showCode(this, message_1, true);
                            }
                        }
                    ]
                });
                win_1.show();
            }
            if (FastExt.Base.toString(from, "").indexOf("请求异常") >= 0) {
                return;
            }
            console.error(e);
        };
        Dialog.showAlert = function (title, message, callback, modal, animateDisable) {
            if (Ext.isEmpty(modal)) {
                modal = true;
            }
            FastExt.Dialog.hideWait();
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                defaults: {
                    margin: '10 10 10 10',
                },
                border: 0,
                items: [
                    {
                        xtype: "label",
                        maxWidth: 380,
                        userCls: "fast-dialog-message",
                        html: message,
                    }
                ],
            });
            var alertWindow = Ext.create('Ext.window.Window', {
                title: title,
                iconCls: 'extIcon extInfo2',
                maxWidth: 500,
                maxHeight: 800,
                minWidth: 220,
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                constrain: true,
                resizable: false,
                justTop: true,
                unpin: false,
                items: [formPanel],
                modal: modal,
                animateDisable: animateDisable,
                listeners: {
                    show: function (obj) {
                        obj.focus();
                    },
                    render: function (obj, eOpts) {
                        new Ext.util.KeyMap({
                            target: obj.getEl(),
                            key: 13,
                            fn: function (keyCode, e) {
                                alertWindow.close();
                                if (Ext.isFunction(callback)) {
                                    callback("ok");
                                }
                            },
                            scope: this
                        });
                    }
                },
                buttons: [
                    '->',
                    {
                        text: "确定",
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            if (Ext.isFunction(callback)) {
                                callback("ok");
                            }
                            var parentWindow = this.up("window");
                            if (parentWindow) {
                                parentWindow.close();
                            }
                        }
                    },
                    '->'
                ],
            });
            alertWindow.show();
        };
        Dialog.showImage = function (obj, url, callBack, modal) {
            if (FastExt.Cache.memory.hasOwnProperty(url)) {
                url = FastExt.Cache.memory[url];
            }
            FastExt.Image.showImage(obj, url, callBack, modal);
        };
        Dialog.showVideo = function (obj, videoUrl) {
            if (obj && Ext.isFunction(obj.blur)) {
                obj.blur();
            }
            var win = Ext.create('Ext.window.Window', {
                title: '播放视频',
                layout: 'fit',
                height: 620,
                width: 700,
                resizable: false,
                constrain: true,
                maximizable: false,
                modal: true,
                maximized: false,
                animateTarget: obj,
                iconCls: 'extIcon extSee',
                draggable: true,
                scrollable: false,
                toFrontOnShow: true,
                listeners: {
                    show: function () {
                        var url = FastExt.Base.formatUrlVersion("base/video/player.html");
                        window["getVideoUrl"] = function () {
                            return videoUrl;
                        };
                        var html = "<iframe allowfullscreen='allowfullscreen' mozallowfullscreen='mozallowfullscreen' msallowfullscreen='msallowfullscreen' oallowfullscreen='oallowfullscreen' webkitallowfullscreen='webkitallowfullscreen' style='background-color: black;' name='showVideoFrame' src='" + url + "'  width='100%' height='100%' frameborder='0' scrolling='no' >";
                        this.update(html);
                    }
                }
            });
            win.show();
        };
        Dialog.showEditor = function (obj, title, callBack, defaultValue) {
            if (obj && Ext.isFunction(obj.blur)) {
                obj.blur();
            }
            var time = new Date().getTime();
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var editorWin = Ext.create('Ext.window.Window', {
                title: title,
                iconCls: 'extIcon extEdit',
                resizable: true,
                maximizable: true,
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 600,
                layout: 'fit',
                animateTarget: obj,
                items: [{
                        itemId: "content",
                        emptyText: '请输入内容……',
                        value: defaultValue,
                        userCls: "fast-radius-null-field",
                        xtype: 'textarea'
                    }],
                modal: true,
                constrain: true,
                listeners: {
                    show: function (obj) {
                        FastExt.Server.showExtConfig("PublicEditor", "TextEditorCache", function (success, value) {
                            var areaField = editorWin.getContentArea();
                            if (areaField) {
                                if (success) {
                                    areaField.setValue(value);
                                }
                                areaField.focus();
                            }
                        });
                    }
                },
                getContentArea: function () {
                    return this.down("#content");
                },
                buttons: [
                    {
                        text: '暂存',
                        iconCls: 'extIcon extSave whiteColor',
                        handler: function () {
                            FastExt.Dialog.showWait("暂存中，请稍后……");
                            FastExt.Server.saveExtConfig("PublicEditor", "TextEditorCache", editorWin.getContentArea().getValue(), function (success, message) {
                                FastExt.Dialog.hideWait();
                                if (success) {
                                    FastExt.Dialog.toast("暂存成功！");
                                }
                                else {
                                    FastExt.Dialog.showAlert("系统提醒", message);
                                }
                            });
                        }
                    },
                    {
                        text: '重置',
                        iconCls: 'extIcon extReset',
                        handler: function () {
                            var areaField = editorWin.getContentArea();
                            if (areaField) {
                                areaField.setValue(null);
                            }
                            FastExt.Server.deleteExtConfig("PublicEditor", "TextEditorCache");
                        }
                    },
                    {
                        text: '确定',
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            FastExt.Dialog.showWait("请稍后……");
                            FastExt.Server.deleteExtConfig("PublicEditor", "TextEditorCache", function (success) {
                                FastExt.Dialog.hideWait();
                                if (Ext.isFunction(callBack)) {
                                    callBack(editorWin.getContentArea().getValue());
                                }
                                editorWin.close();
                            });
                        }
                    }
                ]
            });
            editorWin.show();
        };
        Dialog.showJson = function (obj, title, value) {
            FastExt.Json.showFormatJson(obj, value, title);
        };
        Dialog.showFormatJson = function (obj, value) {
            FastExt.Json.showFormatJson(obj, value);
        };
        Dialog.showLottie = function (obj, jsonPath) {
            FastExt.Lottie.showLottie(obj, jsonPath);
        };
        Dialog.showFastDatePicker = function (obj, defaultValue, dateFormat) {
            return FastExt.Dates.showDatePicker(obj, defaultValue, dateFormat);
        };
        Dialog.showFastColorPicker = function (obj, defaultValue, onColorChange) {
            return FastExt.Color.showColorPicker(obj, defaultValue, onColorChange);
        };
        Dialog.showMusic = function (obj, musicUrl) {
            if (obj && Ext.isFunction(obj.blur)) {
                obj.blur();
            }
            var idPrefix = new Date().getTime();
            var win = Ext.create('Ext.window.Window', {
                title: '播放音频',
                layout: 'fit',
                height: 230,
                width: 700,
                resizable: false,
                constrain: true,
                maximizable: false,
                modal: true,
                maximized: false,
                iconCls: 'extIcon extSee',
                draggable: true,
                scrollable: false,
                toFrontOnShow: true,
                items: [
                    {
                        xtype: 'container',
                        layout: 'border',
                        iframePanel: true,
                        itemId: "playerPanel"
                    }
                ],
                listeners: {
                    show: function (winObj) {
                        var playerPanel = this.down("#playerPanel");
                        playerPanel.setLoading("加载音频文件中，请稍后……");
                        var url = FastExt.Base.formatUrlVersion("base/music/player.html");
                        var html = "<iframe allowfullscreen='allowfullscreen' mozallowfullscreen='mozallowfullscreen' msallowfullscreen='msallowfullscreen' oallowfullscreen='oallowfullscreen' webkitallowfullscreen='webkitallowfullscreen' style='background-color: black;' name='showMusicFrame' src='" + url + "'  width='100%' height='100%' frameborder='0' scrolling='no' >";
                        playerPanel.update(html);
                        window["getMusicUrl"] = function () {
                            return musicUrl;
                        };
                        window["onMusicChange"] = function (state, obj) {
                            if (state === "ready") {
                                winObj.getComponent("playerPanel").setLoading(false);
                                obj.play();
                            }
                            else if (state === "play") {
                                Ext.getCmp("btnPlay" + idPrefix).setIconCls("extIcon extPause");
                            }
                            else if (state === "pause") {
                                Ext.getCmp("btnPlay" + idPrefix).setIconCls("extIcon extPlay");
                            }
                            else if (state === "finish") {
                                obj.seekTo(0);
                            }
                            else if (state === "mute") {
                                if (obj.getMute()) {
                                    Ext.getCmp("btnMute" + idPrefix).setIconCls("extIcon extMute");
                                }
                                else {
                                    Ext.getCmp("btnMute" + idPrefix).setIconCls("extIcon extUnmute");
                                }
                            }
                            else if (state === "loading") {
                                winObj.getComponent("playerPanel").setLoading("加载音频文件中，请稍后……");
                            }
                            else if (state === "audioprocess" || state === "seek") {
                                var currPlayStr = FastExt.Dates.formatMillisecond(obj.getCurrentTime() * 1000, 'i:s');
                                var totalPlayStr = FastExt.Dates.formatMillisecond(obj.getDuration() * 1000, 'i:s');
                                winObj.setTitle("播放音乐  " + currPlayStr + " / " + totalPlayStr);
                            }
                        };
                    }
                },
                bbar: {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    layout: {
                        type: 'hbox',
                        align: 'middle',
                        pack: 'center'
                    },
                    items: [
                        {
                            xtype: 'button',
                            id: "btnPlay" + idPrefix,
                            iconCls: 'extIcon extPlay',
                            action: "play",
                            handler: function () {
                                window["showMusicFrame"].window.switchPlay();
                            }
                        },
                        {
                            xtype: 'button',
                            id: "btnStop" + idPrefix,
                            iconCls: 'extIcon extStop',
                            handler: function () {
                                window["showMusicFrame"].window.stop();
                            }
                        },
                        {
                            xtype: 'button',
                            id: "btnMute" + idPrefix,
                            iconCls: 'extIcon extUnmute',
                            handler: function () {
                                window["showMusicFrame"].window.switchMute();
                            }
                        }
                    ]
                }
            });
            win.show();
        };
        Dialog.showDeleteDataAlert = function (title, message, confirmCallBack, confirmButtonText) {
            if (Ext.isEmpty(confirmButtonText)) {
                confirmButtonText = "删除";
            }
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                defaults: {
                    margin: '5 5 5 5'
                },
                border: 0,
                items: [
                    {
                        xtype: "lottie",
                        width: 150,
                        height: 120,
                        jsonPath: 'base/lottie/amazed.json',
                    },
                    {
                        xtype: "label",
                        maxWidth: 250,
                        userCls: "fast-dialog-message",
                        text: message,
                    },
                    {
                        xtype: "checkboxfield",
                        boxLabel: "我已了解此操作是永久性且无法撤销",
                        listeners: {
                            change: function (obj, newValue) {
                                deleteConfirmWindow.down("#deleteBtn").setDisabled(!newValue);
                            },
                        }
                    }
                ]
            });
            var deleteConfirmWindow = Ext.create('Ext.window.Window', {
                title: title,
                iconCls: 'extIcon extDelete',
                width: 280,
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                constrain: true,
                resizable: false,
                unpin: false,
                items: [formPanel],
                modal: true,
                buttons: [
                    '->',
                    {
                        text: '取消',
                        iconCls: 'extIcon extClose',
                        handler: function () {
                            deleteConfirmWindow.close();
                        }
                    },
                    {
                        text: confirmButtonText,
                        itemId: "deleteBtn",
                        disabled: true,
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            deleteConfirmWindow.close();
                            if (Ext.isFunction(confirmCallBack)) {
                                confirmCallBack();
                            }
                        }
                    },
                    '->'
                ],
            });
            deleteConfirmWindow.show();
        };
        Dialog.showConfirm = function (title, message, callback, config) {
            FastExt.Dialog.hideWait();
            if (!config) {
                config = {
                    yes: "确定",
                    no: "取消",
                };
            }
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                defaults: {
                    margin: '5 5 5 5'
                },
                border: 0,
                items: [
                    {
                        xtype: "lottie",
                        width: 150,
                        height: 120,
                        jsonPath: 'base/lottie/question.json',
                    },
                    {
                        xtype: "label",
                        maxWidth: 300,
                        margin: '5 5 10 5',
                        userCls: "fast-dialog-message",
                        html: message,
                    }
                ],
            });
            var confirmWindow = Ext.create('Ext.window.Window', {
                title: title,
                iconCls: 'extIcon extQuestion2',
                width: 320,
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                constrain: true,
                resizable: false,
                items: [formPanel],
                modal: true,
                unpin: false,
                buttons: [
                    '->',
                    {
                        text: config.no,
                        iconCls: 'extIcon extClose',
                        handler: function () {
                            if (Ext.isFunction(callback)) {
                                callback("no");
                            }
                            confirmWindow.close();
                        }
                    },
                    {
                        text: config.yes,
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            if (Ext.isFunction(callback)) {
                                callback("yes");
                            }
                            confirmWindow.close();
                        }
                    },
                    '->'
                ],
            });
            confirmWindow.show();
        };
        Dialog.showPrompt = function (title, message, callback, multiline, value) {
            FastExt.Dialog.hideWait();
            var inputContent = {
                xtype: "textfield",
                itemId: "inputContent",
                value: value,
            };
            if (multiline) {
                inputContent["xtype"] = "textareafield";
                inputContent["grow"] = true;
                inputContent["growMax"] = 320;
            }
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'stretch'
                },
                defaults: {
                    margin: '5 5 5 5'
                },
                border: 0,
                items: [
                    {
                        xtype: "label",
                        userCls: "fast-dialog-message",
                        html: message,
                    },
                    inputContent
                ],
            });
            var promptWindow = Ext.create('Ext.window.Window', {
                title: title,
                iconCls: 'extIcon extEdit',
                width: 280,
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'stretch'
                },
                constrain: true,
                resizable: false,
                items: [formPanel],
                modal: true,
                listeners: {
                    show: function (winObj) {
                        setTimeout(function () {
                            winObj.query("#inputContent")[0].focus();
                        }, 200);
                    },
                },
                buttons: [
                    '->',
                    {
                        text: '取消',
                        iconCls: 'extIcon extClose',
                        handler: function () {
                            promptWindow.close();
                            if (Ext.isFunction(callback)) {
                                callback("no");
                            }
                        }
                    },
                    {
                        text: "确定",
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            if (Ext.isFunction(callback)) {
                                callback("ok", promptWindow.query("#inputContent")[0].getValue());
                            }
                            promptWindow.close();
                        }
                    },
                    '->'
                ],
            });
            promptWindow.show();
        };
        Dialog.showTip = function (title, message, callback) {
            var onlyCode = "ShowTip" + FastExt.System.ManagerHandler.getManagerId() + $.md5(title + message);
            var hideDialog = Cookies.get(onlyCode);
            if (hideDialog) {
                if (Ext.isFunction(callback)) {
                    callback("ok");
                }
                return;
            }
            FastExt.Dialog.hideWait();
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                defaults: {
                    margin: '5 5 5 5'
                },
                border: 0,
                items: [
                    {
                        xtype: "label",
                        maxWidth: 300,
                        userCls: "fast-dialog-message",
                        html: message,
                    },
                    {
                        xtype: "checkboxfield",
                        boxLabel: "下次不在弹出此提醒",
                        listeners: {
                            change: function (obj, newValue) {
                                if (newValue) {
                                    Cookies.set(onlyCode, true, { expires: 30 });
                                }
                                else {
                                    Cookies.remove(onlyCode);
                                }
                            },
                        }
                    }
                ],
            });
            var alertWindow = Ext.create('Ext.window.Window', {
                title: title,
                iconCls: 'extIcon extInfo2',
                maxWidth: 500,
                maxHeight: 800,
                minWidth: 220,
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                constrain: true,
                resizable: false,
                unpin: false,
                items: [formPanel],
                modal: true,
                listeners: {
                    show: function (obj) {
                        obj.focus();
                    },
                    render: function (obj, eOpts) {
                        new Ext.util.KeyMap({
                            target: obj.getEl(),
                            key: 13,
                            fn: function (keyCode, e) {
                                alertWindow.close();
                                if (Ext.isFunction(callback)) {
                                    callback("ok");
                                }
                            },
                            scope: this
                        });
                    }
                },
                buttons: [
                    '->',
                    {
                        text: "确定",
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            var parentWindow = this.up("window");
                            if (parentWindow) {
                                parentWindow.close();
                            }
                            if (Ext.isFunction(callback)) {
                                callback("ok");
                            }
                        }
                    },
                    '->'
                ],
            });
            alertWindow.show();
        };
        Dialog.showWarning = function (message, callback) {
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                defaults: {
                    margin: '5 5 5 5'
                },
                border: 0,
                items: [
                    {
                        xtype: "lottie",
                        width: 150,
                        height: 120,
                        jsonPath: 'base/lottie/amazed.json',
                    },
                    {
                        xtype: "label",
                        maxWidth: 250,
                        margin: '5 5 10 5',
                        html: message,
                    }
                ],
            });
            var warnWindow = Ext.create('Ext.window.Window', {
                title: "系统警告",
                iconCls: 'extIcon extWarn',
                width: 280,
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                maximizable: false,
                fixed: true,
                draggable: false,
                animateDisable: true,
                constrain: true,
                resizable: false,
                alwaysOnTop: true,
                toFrontOnShow: true,
                items: [formPanel],
                cls: "fast-warning-window",
                modal: true,
                buttons: [
                    '->',
                    {
                        text: "我已知晓",
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            warnWindow.close();
                            callback();
                        }
                    },
                    '->'
                ],
            });
            warnWindow.show();
        };
        return Dialog;
    }());
    FastExt.Dialog = Dialog;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var ECharts = (function () {
        function ECharts() {
        }
        ECharts.loadECharts = function (cmb, option) {
            var doLoad = function () {
                if (cmb.echarts) {
                    cmb.echarts.hideLoading();
                    cmb.echarts.setOption(option);
                    return;
                }
                var bodyElement = FastExt.Base.getTargetBodyElement(cmb);
                if (bodyElement) {
                    var themeName = "";
                    if (!Ext.isEmpty(FastExt.ECharts.echartsThemeFile)) {
                        var beginSub = FastExt.ECharts.echartsThemeFile.lastIndexOf("/");
                        var endSub = FastExt.ECharts.echartsThemeFile.lastIndexOf(".");
                        themeName = FastExt.ECharts.echartsThemeFile.substring(beginSub + 1, endSub);
                    }
                    cmb.echarts = echarts.init(bodyElement, themeName);
                    cmb.echarts.setOption(option);
                    cmb.on("destroy", function (obj) {
                        if (FastExt.ECharts.getECharts(obj)) {
                            FastExt.ECharts.getECharts(obj).dispose();
                            obj.echarts = null;
                        }
                    });
                    cmb.on("resize", function (obj) {
                        if (FastExt.ECharts.getECharts(obj)) {
                            FastExt.ECharts.getECharts(obj).resize({
                                animation: {
                                    duration: 1000
                                }
                            });
                        }
                    });
                }
                else {
                    console.error("加载ECharts失败！无法获取目标控件的BodyElement！");
                }
            };
            this.loadJs(doLoad);
        };
        ECharts.loadJs = function (callBack) {
            FastExt.PluginLoader.loadPlugins("ECharts", [FastExt.ECharts.echartsJsFile, FastExt.ECharts.echartsThemeFile], callBack);
        };
        ECharts.getECharts = function (cmb) {
            if (cmb.echarts) {
                return cmb.echarts;
            }
            console.error("获取ECharts失败！目标控件未加载echarts！");
            return null;
        };
        ECharts.hasECharts = function (cmb) {
            return !!cmb.echarts;
        };
        ECharts.showECharts = function (title, options, modal) {
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                title: title,
                iconCls: "extIcon extReport whiteColor",
                height: winHeight,
                width: winWidth,
                layout: 'border',
                resizable: true,
                maximizable: true,
                constrain: true,
                modal: modal,
                padding: "10 10 10 10",
                bodyStyle: {
                    background: "#ffffff"
                },
                listeners: {
                    show: function (obj) {
                        FastExt.ECharts.loadECharts(obj, options);
                    }
                }
            });
            win.show();
        };
        ECharts.showEntityECharts = function (obj, title, params, dateTypes) {
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var beginDate = Ext.Date.format(Ext.Date.add(new Date(), Ext.Date.MONTH, -1), 'Y-m-d');
            var endDate = Ext.Date.format(new Date(), 'Y-m-d');
            params["type"] = 0;
            params["chartTitle"] = title;
            params["beginDate"] = beginDate;
            params["endDate"] = endDate;
            if (!dateTypes) {
                dateTypes = [
                    {
                        'text': '年图表',
                        "value": 4
                    },
                    {
                        'text': '月图表',
                        "value": 1
                    },
                    {
                        'text': '日图表',
                        'value': 0
                    },
                    {
                        'text': '时图表',
                        "value": 2
                    }, {
                        'text': '时分图表',
                        "value": 3
                    }
                ];
            }
            var win = Ext.create('Ext.window.Window', {
                title: title,
                animateTarget: obj,
                height: winHeight,
                width: winWidth,
                minWidth: winWidth,
                minHeight: winHeight,
                iconCls: 'extIcon extReport',
                layout: 'border',
                resizable: true,
                maximizable: true,
                constrain: true,
                modal: true,
                refreshECharts: function () {
                    var me = this;
                    if (FastExt.ECharts.hasECharts(me)) {
                        me.setLoading(false);
                        FastExt.ECharts.getECharts(me).showLoading();
                    }
                    FastExt.Server.showEcharts(params, function (success, message, data) {
                        me.setLoading(false);
                        if (success) {
                            FastExt.ECharts.loadECharts(me, data);
                        }
                        else {
                            FastExt.Dialog.showAlert("系统提醒", message);
                        }
                    });
                },
                bodyStyle: {
                    background: "#fcfcfc"
                },
                tbar: {
                    xtype: 'toolbar',
                    overflowHandler: 'menu',
                    items: [
                        {
                            xtype: 'combo',
                            fieldLabel: "图表类型",
                            labelWidth: 60,
                            valueField: 'value',
                            editable: false,
                            value: 0,
                            listeners: {
                                change: function (obj, newValue, oldValue, eOpts) {
                                    params["type"] = newValue;
                                    win.refreshECharts();
                                }
                            },
                            store: Ext.create('Ext.data.Store', {
                                fields: ["id", "text"],
                                data: dateTypes
                            })
                        },
                        {
                            xtype: "daterangefield",
                            fieldLabel: "日期范围",
                            flex: 1,
                            margin: '0 0 0 5',
                            maxRangeMonth: 12,
                            beginDate: beginDate,
                            endDate: endDate,
                            labelWidth: 60,
                            onClearValue: function () {
                                params["beginDate"] = this.beginDate;
                                params["endDate"] = this.endDate;
                                win.refreshECharts();
                            },
                            onAfterSelect: function () {
                                params["beginDate"] = this.beginDate;
                                params["endDate"] = this.endDate;
                                win.refreshECharts();
                            }
                        },
                        {
                            xtype: 'button',
                            text: '折线图',
                            iconCls: 'extIcon extPolyline',
                            margin: '0 5 0 5',
                            handler: function () {
                                params["chartType"] = "line";
                                win.refreshECharts();
                            }
                        }, {
                            xtype: 'button',
                            text: '柱状图',
                            iconCls: 'extIcon extReport',
                            margin: '0 5 0 5',
                            handler: function () {
                                params["chartType"] = "bar";
                                win.refreshECharts();
                            }
                        }, {
                            xtype: 'button',
                            text: '堆叠图',
                            iconCls: 'extIcon extMore',
                            margin: '0 5 0 5',
                            handler: function () {
                                params["chartType"] = "stack";
                                win.refreshECharts();
                            }
                        }
                    ]
                },
                listeners: {
                    show: function (obj) {
                        win.setLoading("请稍后……");
                        obj.refreshECharts();
                    }
                }
            });
            win.show();
        };
        ECharts.echartsJsFile = "base/echarts/echarts.min.js";
        ECharts.echartsThemeFile = "";
        return ECharts;
    }());
    FastExt.ECharts = ECharts;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var MonacoEditor = (function () {
        function MonacoEditor() {
        }
        MonacoEditor.showEditor = function (obj, content, language) {
            return new Ext.Promise(function (resolve, reject) {
                var editorPanel = Ext.create('Ext.container.Container', {
                    layout: 'border',
                    region: 'center',
                    iframePanel: true,
                    border: 0,
                    iframeName: "MonacoEditorFrame" + new Date().getTime(),
                    loadEditor: function () {
                        var me = this;
                        me.setLoading("加载编辑器中，请稍后……");
                        window[this.iframeName + "LoadDone"] = function () {
                            me.loadExtLib();
                            me.setValue(content, language);
                            me.setLoading(false);
                        };
                        var url = FastExt.Base.formatUrlVersion('base/monaco-editor/index.html', {});
                        this.update("<iframe name='" + this.iframeName + "'  src='" + url + "' width='100%' height='100%' frameborder='0' scrolling='no' />");
                    },
                    setValue: function (content, language) {
                        window[this.iframeName].window["createEditor"]({
                            value: content,
                            language: language,
                            automaticLayout: true,
                            accessibilitySupport: 'on',
                            autoClosingBrackets: 'always',
                            autoClosingDelete: 'always',
                            autoClosingOvertype: 'always',
                            autoClosingQuotes: 'always',
                            renderLineHighlight: 'gutter',
                            scrollBeyondLastLine: false,
                        });
                    },
                    getValue: function () {
                        return window[this.iframeName].window["getValue"]();
                    },
                    loadExtLib: function () {
                    },
                });
                var winWidth = parseInt((document.body.clientWidth * 0.7).toFixed(0));
                var winHeight = parseInt((document.body.clientHeight * 0.9).toFixed(0));
                var win = Ext.create('Ext.window.Window', {
                    title: '编辑内容',
                    height: winHeight,
                    width: winWidth,
                    minHeight: 500,
                    minWidth: 600,
                    iconCls: 'extIcon extConvertCode',
                    layout: 'fit',
                    resizable: true,
                    maximizable: true,
                    animateTarget: obj,
                    constrain: true,
                    items: [editorPanel],
                    modal: true,
                    unpin: true,
                    listeners: {
                        show: function () {
                            editorPanel.loadEditor();
                        },
                        close: function (val) {
                            FastExt.Base.runCallBack(resolve);
                            window[editorPanel.iframeName] = null;
                            window[editorPanel.iframeName + "LoadDone"] = null;
                        }
                    },
                    buttons: [
                        {
                            text: '取消',
                            iconCls: 'extIcon extClose',
                            handler: function () {
                                win.close();
                            }
                        },
                        {
                            text: '保存',
                            iconCls: 'extIcon extSave whiteColor',
                            handler: function () {
                                FastExt.Base.runCallBack(resolve, editorPanel.getValue());
                                win.close();
                            }
                        }
                    ]
                });
                win.show();
            });
        };
        MonacoEditor.showDiffEditor = function (obj, content1, content2, language, subtitle) {
            if (Ext.isEmpty(subtitle)) {
                subtitle = "";
            }
            return new Ext.Promise(function (resolve, reject) {
                var editorPanel = Ext.create('Ext.container.Container', {
                    layout: 'border',
                    region: 'center',
                    iframePanel: true,
                    border: 0,
                    iframeName: "MonacoEditorFrame" + new Date().getTime(),
                    loadEditor: function () {
                        var me = this;
                        me.setLoading("加载编辑器中，请稍后……");
                        window[this.iframeName + "LoadDone"] = function () {
                            me.loadExtLib();
                            me.setValue(content1, content2, language);
                            me.setLoading(false);
                        };
                        var url = FastExt.Base.formatUrlVersion('base/monaco-editor/index.html', {});
                        this.update("<iframe name='" + this.iframeName + "'  src='" + url + "' width='100%' height='100%' frameborder='0' scrolling='no' />");
                    },
                    setValue: function (content1, content2, language) {
                        window[this.iframeName].window["createDiffEditor"](content1, content2, language);
                    },
                    getValue: function () {
                        return window[this.iframeName].window["getValue"]();
                    },
                    loadExtLib: function () {
                    },
                });
                var winWidth = parseInt((document.body.clientWidth * 0.7).toFixed(0));
                var winHeight = parseInt((document.body.clientHeight * 0.9).toFixed(0));
                var win = Ext.create('Ext.window.Window', {
                    title: '编辑内容' + subtitle,
                    height: winHeight,
                    width: winWidth,
                    minHeight: 500,
                    minWidth: 600,
                    iconCls: 'extIcon extConvertCode',
                    layout: 'fit',
                    resizable: true,
                    maximizable: true,
                    animateTarget: obj,
                    constrain: true,
                    items: [editorPanel],
                    modal: true,
                    unpin: true,
                    listeners: {
                        show: function () {
                            editorPanel.loadEditor();
                        },
                        close: function (val) {
                            FastExt.Base.runCallBack(resolve);
                            window[editorPanel.iframeName] = null;
                            window[editorPanel.iframeName + "LoadDone"] = null;
                        }
                    },
                    buttons: [
                        {
                            text: '取消',
                            iconCls: 'extIcon extClose',
                            handler: function () {
                                win.close();
                            }
                        },
                        {
                            text: '保存',
                            iconCls: 'extIcon extSave whiteColor',
                            handler: function () {
                                FastExt.Base.runCallBack(resolve, editorPanel.getValue());
                                win.close();
                            }
                        }
                    ]
                });
                win.show();
            });
        };
        return MonacoEditor;
    }());
    FastExt.MonacoEditor = MonacoEditor;
    var MonacoEditorEntity = (function () {
        function MonacoEditorEntity() {
        }
        MonacoEditorEntity.showEditor = function (obj, entityCode) {
            FastExt.Dialog.showWait("获取源码中，请稍后……");
            FastExt.Server.loadSource(entityCode, function (success, message, data) {
                FastExt.Dialog.hideWait();
                if (success) {
                    FastExt.MonacoEditor.showEditor(obj, data, MonacoEditorLanguage.JavaScript).then(function (result) {
                        FastExt.Dialog.showWait("保存源码中，请稍后……");
                        FastExt.Server.saveSource(entityCode, result, function (suc, msg) {
                            FastExt.Dialog.hideWait();
                            if (suc) {
                                FastExt.Dialog.toast(msg);
                            }
                            else {
                                FastExt.Dialog.showAlert("系统提醒", msg);
                            }
                        });
                    });
                }
                else {
                    FastExt.Dialog.showAlert("系统提醒", message);
                }
            });
        };
        return MonacoEditorEntity;
    }());
    FastExt.MonacoEditorEntity = MonacoEditorEntity;
    var MonacoEditorLanguage;
    (function (MonacoEditorLanguage) {
        MonacoEditorLanguage["TypeScript"] = "typescript";
        MonacoEditorLanguage["JavaScript"] = "javascript";
        MonacoEditorLanguage["CSS"] = "css";
        MonacoEditorLanguage["LESS"] = "less";
        MonacoEditorLanguage["SCSS"] = "scss";
        MonacoEditorLanguage["JSON"] = "json";
        MonacoEditorLanguage["HTML"] = "html";
        MonacoEditorLanguage["JAVA"] = "java";
        MonacoEditorLanguage["SQL"] = "sql";
        MonacoEditorLanguage["MySql"] = "mysql";
        MonacoEditorLanguage["XML"] = "xml";
        MonacoEditorLanguage["INI"] = "ini";
        MonacoEditorLanguage["Text"] = "plaintext";
        MonacoEditorLanguage["MarkDown"] = "markdown";
    })(MonacoEditorLanguage = FastExt.MonacoEditorLanguage || (FastExt.MonacoEditorLanguage = {}));
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Tinymce = (function () {
        function Tinymce() {
        }
        Tinymce.loadTinymceJs = function (callBack) {
            FastExt.PluginLoader.loadPlugins("Tinymce", [FastExt.Tinymce.tinymceJsPath], callBack);
        };
        Tinymce.initTinymce = function (config, callback) {
            config["promotion"] = false;
            if (FastExt.Tinymce.initializing) {
                FastExt.Tinymce.stackInitConfig.push({
                    config: config,
                    callback: callback,
                });
                return;
            }
            FastExt.Tinymce.initializing = true;
            FastExt.Tinymce.loadTinymceJs(function () {
                tinymce.init(config).then(function (editors) {
                    callback(editors);
                    FastExt.Tinymce.initializing = false;
                    var nextInit = FastExt.Tinymce.stackInitConfig.pop();
                    if (nextInit) {
                        FastExt.Tinymce.initTinymce(nextInit.config, nextInit.callback);
                    }
                });
            });
        };
        Tinymce.tinymceJsPath = "base/tinymce/tinymce.min.js";
        Tinymce.initializing = false;
        Tinymce.stackInitConfig = [];
        return Tinymce;
    }());
    FastExt.Tinymce = Tinymce;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Entity = (function () {
        function Entity() {
        }
        Entity.initEntity = function (entity, shortTitle) {
            if (!entity) {
                return;
            }
            entity.shortTitle = shortTitle;
            entity.showWinList = function (obj, title, where, modal, config) {
                new FastExt.SimpleEntity(this).showWinList(obj, title, where, modal, config);
            };
            entity.showDetails = function (obj, where) {
                new FastExt.SimpleEntity(this).showDetails(obj, where);
            };
            entity.showSelect = function (obj, title, where, multi, config, container) {
                return new FastExt.SimpleEntity(this).showSelect(obj, title, where, multi, config, container);
            };
            entity.getRecords = function (where) {
                return new FastExt.SimpleEntity(this).getRecords(where);
            };
        };
        Entity.getEntity = function (entityCode) {
            return FastExt.System.EntitiesHandler.getEntity(entityCode);
        };
        Entity.isFulltextColumn = function (entityCode, columnName) {
            var entity = FastExt.Entity.getEntity(entityCode);
            if (entity) {
                var fulltextColumns = entity.fulltextColumns;
                if (fulltextColumns) {
                    for (var _i = 0, fulltextColumns_1 = fulltextColumns; _i < fulltextColumns_1.length; _i++) {
                        var fulltextColumn = fulltextColumns_1[_i];
                        if (fulltextColumn.name === columnName) {
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        Entity.wrapConfigs = function (entity) {
            var sourceConfigs = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                sourceConfigs[_i - 1] = arguments[_i];
            }
            var configs = [];
            var pushConfig = function (config) {
                if (Ext.isArray(config)) {
                    eachConfig(config);
                    return;
                }
                if (config.items && Ext.isArray(config.items)) {
                    var newItems = [];
                    for (var _i = 0, _a = config.items; _i < _a.length; _i++) {
                        var subConfig = _a[_i];
                        newItems = newItems.concat(FastExt.Entity.wrapConfigs(entity, subConfig));
                    }
                    config.items = newItems;
                    configs.push(config);
                    return;
                }
                configs.push(FastExt.Entity.wrapConfig(entity, config));
            };
            var eachConfig = function (configArray) {
                for (var _i = 0, configArray_1 = configArray; _i < configArray_1.length; _i++) {
                    var config = configArray_1[_i];
                    pushConfig(config);
                }
            };
            for (var _a = 0, _b = sourceConfigs; _a < _b.length; _a++) {
                var config = _b[_a];
                pushConfig(config);
            }
            return configs;
        };
        Entity.wrapConfig = function (entity, config) {
            if (Ext.isEmpty(entity)) {
                return null;
            }
            if (Ext.isEmpty(config)) {
                return null;
            }
            if (!Ext.isObject(config)) {
                return config;
            }
            if (config.hasOwnProperty("fieldLabel")) {
                var columnName = FastExt.Entity.getRealAttr(config);
                if (Ext.isEmpty(columnName)) {
                    return config;
                }
                var field = FastExt.Entity.getEditorField(entity, columnName);
                if (!field) {
                    return config;
                }
                if (config.hasOwnProperty("xtype")) {
                    if (config.xtype !== field.xtype) {
                        console.warn("配置类型【" + config.xtype + "】与getEditorField方法返回的类型【" + config.xtype + "】配置不一致！已跳过！");
                        return config;
                    }
                }
                config = Ext.Object.merge(field, config);
            }
            else if (config.hasOwnProperty("dataIndex")) {
                var columnName = FastExt.Entity.getRealAttr(config);
                if (Ext.isEmpty(columnName)) {
                    return config;
                }
                var field = FastExt.Entity.getEditorField(entity, columnName);
                if (!field) {
                    return config;
                }
                field["name"] = columnName;
                if (Ext.isEmpty(config.field)) {
                    config.field = {};
                }
                if (Ext.isString(config.field)) {
                    config.field = {
                        xtype: config.field
                    };
                }
                var needMerge = true;
                if (config.field.hasOwnProperty("xtype")) {
                    if (config.field.xtype !== field.xtype) {
                        needMerge = false;
                    }
                }
                if (Ext.isObject(config.field) && needMerge) {
                    config.field = Ext.Object.merge(field, config.field);
                }
                if (Ext.isEmpty(config.renderer)) {
                    config.renderer = FastExt.Entity.getColumnRender(entity, columnName);
                }
                config.configField = config.field;
            }
            return config;
        };
        ;
        Entity.getEditorField = function (entity, attrName, column) {
            if (Ext.isEmpty(entity)) {
                return null;
            }
            if (Ext.isFunction(entity.getEditorField)) {
                var onEntityGetEditorField = FastExt.Listeners.getFire().onEntityGetEditorField(entity, attrName);
                if (onEntityGetEditorField) {
                    return onEntityGetEditorField;
                }
                return entity.getEditorField(attrName);
            }
            if (column) {
                if (Ext.isObject(column.field)) {
                    return column.field;
                }
                if (Ext.isString(column.field)) {
                    return {
                        xtype: column.field,
                    };
                }
            }
            return {
                xtype: "textfield",
                multiSplit: null,
            };
        };
        Entity.getEditorFieldObject = function (entity, attrName, column) {
            var editorField = FastExt.Entity.getEditorField(entity, attrName, column);
            if (editorField) {
                return Ext.create(editorField);
            }
            return Ext.create({
                xtype: "textfield",
                multiSplit: null,
            });
        };
        Entity.getColumnRender = function (entity, attrName) {
            if (Ext.isEmpty(entity)) {
                return null;
            }
            if (Ext.isFunction(entity.getColumnRender)) {
                var onEntityGetColumnRender = FastExt.Listeners.getFire().onEntityGetColumnRender(entity, attrName);
                if (onEntityGetColumnRender) {
                    return onEntityGetColumnRender;
                }
                return entity.getColumnRender(attrName);
            }
            return FastExt.Renders.normal();
        };
        Entity.getRealAttr = function (target) {
            if (!target) {
                return null;
            }
            if (target.hasOwnProperty("columnName")) {
                return target.columnName;
            }
            if (Ext.isObject(target.field) && target.field.hasOwnProperty("name")) {
                return target.field.name;
            }
            if (target.hasOwnProperty("dataIndex")) {
                return target.dataIndex;
            }
            return FastExt.Base.toString(target.name, "").replace("data.", "");
        };
        Entity.getEditorFieldByColumn = function (entity, column) {
            if (Ext.isEmpty(entity)) {
                if (Ext.isObject(column.field)) {
                    return column.field;
                }
                return { xtype: column.field };
            }
            return FastExt.Entity.getEditorField(entity, FastExt.Entity.getRealAttr(column), column);
        };
        Entity.getEditorFieldObjectByColumn = function (entity, column) {
            if (Ext.isEmpty(entity)) {
                if (Ext.isObject(column.field)) {
                    return column.field;
                }
                return { xtype: column.field };
            }
            return FastExt.Entity.getEditorFieldObject(entity, FastExt.Entity.getRealAttr(column), column);
        };
        return Entity;
    }());
    FastExt.Entity = Entity;
    var SimpleEntity = (function () {
        function SimpleEntity(entity) {
            this._entity = entity;
            if (entity) {
                this._shortTitle = FastExt.Base.toString(entity.shortTitle, "数据");
            }
            else {
                this._shortTitle = "数据";
            }
        }
        SimpleEntity.prototype.getGridConfig = function (dataStore, gridColumns, gridButtons, config) {
            return {
                entityList: true,
                tabPanelList: false,
                mainEntityList: true,
                selModel: FastExt.Base.toBool(config['multi'], true) ? FastExt.Grid.getGridSelModel() : null,
                region: 'center',
                multiColumnSort: true,
                border: 0,
                columnLines: true,
                contextMenu: true,
                power: FastExt.Base.toBool(config['power'], true),
                columnContextMenu: true,
                defaultToolBar: FastExt.Base.toBool(config['defaultToolBar'], true),
                columnSearch: true,
                store: dataStore,
                enableLocking: true,
                reserveScrollbar: true,
                operate: new FastExt.GridOperate({
                    alertDelete: true,
                    alertUpdate: true,
                    autoUpdate: false,
                    autoDetails: false,
                    hoverTip: false,
                    excelOut: true,
                    excelIn: true,
                    showDetailsButton: true,
                    showUpdateButton: true,
                }),
                filter: new FastExt.ExtCreateFilter({
                    enable: true,
                    key: this._entity.entityCode,
                    method: "getList"
                }),
                where: {},
                listParams: {},
                columns: FastExt.Entity.wrapConfigs(this._entity, gridColumns),
                tbar: FastExt.Base.toBool(config['toolbar'], true) ? {
                    xtype: 'toolbar',
                    overflowHandler: 'menu',
                    items: gridButtons
                } : null,
                onBeforeLoad: function (obj, store, params) {
                    return true;
                },
                bbar: FastExt.Grid.getPageToolBar(dataStore),
                plugins: [Ext.create('Ext.grid.plugin.CellEditing', {
                        clicksToEdit: 2
                    })],
                viewConfig: {
                    loadingText: '正在为您在加载数据…'
                }
            };
        };
        SimpleEntity.prototype.showWinList = function (obj, title, where, modal, config) {
            if (!this._entity) {
                return;
            }
            this._entity.menu = {
                id: $.md5(title),
                text: title
            };
            var gridList = this._entity.getList(where, config);
            var entityOwner = gridList.down("[entityList=true]");
            if (entityOwner) {
                entityOwner.code = $.md5(title);
                entityOwner.operate.autoDetails = false;
            }
            if (!modal) {
                modal = false;
            }
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                title: title,
                height: winHeight,
                width: winWidth,
                layout: 'border',
                resizable: true,
                constrain: true,
                maximizable: true,
                animateTarget: obj,
                modal: modal,
                listeners: {
                    show: function (obj) {
                        obj.focus();
                    }
                },
                items: [gridList]
            });
            if (obj != null) {
                win.setIcon(obj.icon);
                win.setIconCls(obj.iconCls);
            }
            else {
                win.setIconCls("extIcon extSee");
            }
            win.show();
        };
        SimpleEntity.prototype.showSelect = function (obj, title, where, multi, config, container) {
            if (!this._entity) {
                return;
            }
            var me = this;
            return new Ext.Promise(function (resolve, reject) {
                me._entity.menu = {
                    id: $.md5(title),
                    text: title
                };
                if (!Ext.isObject(config)) {
                    config = {};
                }
                config["multi"] = multi;
                var gridList = me._entity.getList(where, config);
                var entityOwner = gridList.down("[entityList=true]");
                if (entityOwner) {
                    entityOwner.code = $.md5(title);
                    entityOwner.operate.autoDetails = false;
                    entityOwner.entitySelect = true;
                }
                var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
                var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
                var win = Ext.create('Ext.window.Window', {
                    title: title,
                    height: winHeight,
                    width: winWidth,
                    iconCls: 'extIcon extSelect',
                    layout: 'border',
                    resizable: true,
                    constrain: true,
                    maximizable: true,
                    animateTarget: obj,
                    items: [gridList],
                    modal: true,
                    listeners: {
                        close: function (winObj, eOpts) {
                            FastExt.Base.runCallBack(resolve);
                        },
                        show: function (obj) {
                            obj.focus();
                        }
                    },
                    buttons: [{
                            text: '取消',
                            iconCls: 'extIcon extClose',
                            handler: function () {
                                FastExt.Base.runCallBack(resolve);
                                win.close();
                            }
                        },
                        {
                            text: '确定',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                FastExt.Base.runCallBack(resolve, entityOwner.getSelection());
                                win.close();
                            }
                        }]
                });
                if (container) {
                    container.add(win);
                }
                win.show();
            });
        };
        SimpleEntity.prototype.showDetails = function (obj, where) {
            if (!this._entity) {
                return;
            }
            var me = this;
            var dataStore = FastExt.Store.getEntityDataStore(this._entity, where);
            FastExt.Dialog.showWait("请稍后……");
            dataStore.load(function (records) {
                FastExt.Dialog.hideWait();
                if (records.length === 0) {
                    Ext.Msg.alert("系统提醒", "未获得到详情数据！");
                    return;
                }
                var record = records[0];
                FastExt.Grid.showDetailsWindow(obj, me._shortTitle + "详情", me._entity, record);
            });
        };
        SimpleEntity.prototype.getRecords = function (where) {
            var me = this;
            return new Ext.Promise(function (resolve, reject) {
                var dataStore = FastExt.Store.getEntityDataStore(me._entity, where);
                dataStore.load(function (records, operation, success) {
                    resolve(records);
                });
            });
        };
        SimpleEntity.prototype.showAdd = function (obj, addItems, overrideFormConfig) {
            var me = this;
            var guessLabelWidth = this.guessLabelWidth(addItems);
            if (Ext.isEmpty(overrideFormConfig)) {
                overrideFormConfig = {};
            }
            return new Ext.Promise(function (resolve, reject) {
                var formPanel = Ext.create('Ext.form.FormPanel', {
                    url: 'entity/save',
                    cacheKey: me._entity.entityCode,
                    bodyPadding: 5,
                    method: 'POST',
                    region: 'center',
                    fileUpload: true,
                    autoScroll: false,
                    border: 0,
                    defaults: {
                        labelWidth: guessLabelWidth,
                        margin: '5 5 5 5',
                        labelAlign: 'right',
                        allowBlankTip: true,
                        emptyText: 'default'
                    },
                    filter: new FastExt.ExtCreateFilter({
                        enable: true,
                        key: me._entity.entityCode,
                        method: "showAdd"
                    }),
                    layout: "column",
                    listeners: {
                        render: function (obj, eOpts) {
                            new Ext.util.KeyMap({
                                target: obj.getEl(),
                                key: 13,
                                fn: function (keyCode, e) {
                                    formPanel.submitForm(me._entity).then(function (result) {
                                        if (result.success) {
                                            resolve(result);
                                            formPanel.deleteCache();
                                            addWin.close();
                                        }
                                    });
                                },
                                scope: this
                            });
                        }
                    },
                    extraParams: {},
                    items: FastExt.Entity.wrapConfigs(me._entity, addItems)
                });
                Ext.override(formPanel, overrideFormConfig);
                var winWidth = parseInt((document.body.clientWidth * 0.4).toFixed(0));
                var maxHeight = parseInt((document.body.clientHeight * 0.8).toFixed(0));
                var addWin = Ext.create('Ext.window.Window', {
                    title: '添加' + me._shortTitle,
                    icon: obj.icon,
                    iconCls: obj.iconCls,
                    width: winWidth,
                    minWidth: 200,
                    maxHeight: maxHeight,
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    },
                    autoScroll: true,
                    resizable: true,
                    maximizable: true,
                    constrain: true,
                    animateTarget: obj,
                    items: [formPanel],
                    modal: true,
                    unpin: true,
                    listeners: {
                        show: function (obj) {
                            formPanel.restoreCache();
                            obj.focus();
                        }
                    },
                    buttons: [{
                            text: '暂存',
                            iconCls: 'extIcon extSave whiteColor',
                            handler: function () {
                                formPanel.saveCache();
                            }
                        },
                        {
                            text: '重置',
                            iconCls: 'extIcon extReset',
                            handler: function () {
                                formPanel.form.reset();
                                formPanel.deleteCache();
                            }
                        },
                        {
                            text: '添加',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                formPanel.submitForm(me._entity).then(function (result) {
                                    if (result.success) {
                                        formPanel.deleteCache();
                                        addWin.close();
                                        resolve(result);
                                    }
                                });
                            }
                        }]
                });
                addWin.show();
            });
        };
        SimpleEntity.prototype.guessLabelWidth = function (addItems) {
            var maxWidth = 0;
            for (var _i = 0, addItems_1 = addItems; _i < addItems_1.length; _i++) {
                var addItem = addItems_1[_i];
                maxWidth = Math.max(FastExt.Base.guessTextWidth(addItem.fieldLabel), maxWidth);
            }
            return maxWidth;
        };
        return SimpleEntity;
    }());
    FastExt.SimpleEntity = SimpleEntity;
})(FastExt || (FastExt = {}));
var FastEnum;
(function (FastEnum) {
    var Target;
    (function (Target) {
        Target["_blank"] = "_blank";
        Target["_self"] = "_self";
        Target["_parent"] = "_parent";
        Target["_top"] = "_top";
        Target["framename"] = "framename";
    })(Target = FastEnum.Target || (FastEnum.Target = {}));
    var AppendPosition;
    (function (AppendPosition) {
        AppendPosition["left"] = "left";
        AppendPosition["right"] = "right";
    })(AppendPosition = FastEnum.AppendPosition || (FastEnum.AppendPosition = {}));
    var ComputeType;
    (function (ComputeType) {
        ComputeType["sum"] = "sum";
        ComputeType["avg"] = "avg";
        ComputeType["min"] = "min";
        ComputeType["max"] = "max";
    })(ComputeType = FastEnum.ComputeType || (FastEnum.ComputeType = {}));
    var HelpEnumType;
    (function (HelpEnumType) {
        HelpEnumType[HelpEnumType["mouse_right_click"] = 0] = "mouse_right_click";
        HelpEnumType[HelpEnumType["mouse_in_out"] = 1] = "mouse_in_out";
    })(HelpEnumType = FastEnum.HelpEnumType || (FastEnum.HelpEnumType = {}));
    var TooltipAnchorType;
    (function (TooltipAnchorType) {
        TooltipAnchorType["left"] = "left";
        TooltipAnchorType["top"] = "top";
        TooltipAnchorType["right"] = "right";
        TooltipAnchorType["bottom"] = "bottom";
    })(TooltipAnchorType = FastEnum.TooltipAnchorType || (FastEnum.TooltipAnchorType = {}));
    var PowerType;
    (function (PowerType) {
        PowerType["gridcolumn"] = "gridcolumn";
        PowerType["button"] = "button";
        PowerType["menuitem"] = "menuitem";
    })(PowerType = FastEnum.PowerType || (FastEnum.PowerType = {}));
    var MapItemType;
    (function (MapItemType) {
        MapItemType["rectangle_overlay"] = "rectangle_overlay";
        MapItemType["polygon_overlay"] = "polygon_overlay";
        MapItemType["district_layer"] = "district_layer";
        MapItemType["image_layer"] = "image_layer";
        MapItemType["marker_overlay"] = "marker_overlay";
    })(MapItemType = FastEnum.MapItemType || (FastEnum.MapItemType = {}));
})(FastEnum || (FastEnum = {}));
var FastExt;
(function (FastExt) {
    var ErrorHandler = (function () {
        function ErrorHandler() {
        }
        ErrorHandler.__onLoaded = function () {
            ErrorHandler.initErrorHandler();
        };
        ErrorHandler.geErrorInfo = function (event) {
            if (event) {
                if (event.error && event.error.stack) {
                    return event.error.stack;
                }
                else if (event.stack) {
                    return event.stack;
                }
                else if (event.message) {
                    return event.message;
                }
                else if (event.reason) {
                    return event.reason;
                }
                return event.toString();
            }
            return "";
        };
        ErrorHandler.initErrorHandler = function () {
            window.addEventListener("error", function (event) {
                try {
                    console.error(event);
                    FastExt.Server.reportException(FastExt.ErrorHandler.geErrorInfo(event));
                }
                catch (e) {
                    console.error(e);
                }
            });
            window.addEventListener("unhandledrejection", function (event) {
                try {
                    FastExt.Server.reportException(FastExt.ErrorHandler.geErrorInfo(event));
                }
                catch (e) {
                    console.error(e);
                }
            });
        };
        return ErrorHandler;
    }());
    FastExt.ErrorHandler = ErrorHandler;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Eval = (function () {
        function Eval() {
        }
        Eval.runObject = function (object, content) {
            if (Ext.isEmpty(content)) {
                return content;
            }
            var reg = new RegExp("\\${([^{}]*)}", 'g');
            var matched = [];
            var matchKeys = [];
            while (matched = reg.exec(content)) {
                matchKeys.push(matched[1]);
            }
            window["RunObject"] = object;
            for (var _i = 0, matchKeys_1 = matchKeys; _i < matchKeys_1.length; _i++) {
                var matchKey = matchKeys_1[_i];
                var value = eval("RunObject." + matchKey);
                content = content.replace(new RegExp("\\${" + matchKey + "}", 'g'), value);
            }
            return content;
        };
        Eval.asyncMethod = function (method, delay) {
            return new Ext.Promise(function (resolve, reject) {
                try {
                    if (delay > 0) {
                        setTimeout(function () {
                            var itemValue = FastExt.Eval.evalMethod(method);
                            resolve(itemValue);
                        }, delay);
                    }
                    else {
                        var itemValue = FastExt.Eval.evalMethod(method);
                        resolve(itemValue);
                    }
                }
                catch (e) {
                    resolve(null);
                    console.error("method:" + method, e);
                }
            });
        };
        Eval.evalMethod = function (method) {
            if (Ext.isObject(method)) {
                var methodObj = eval(method.name);
                return methodObj.apply(methodObj, method.args);
            }
            else if (Ext.isString(method)) {
                return eval(method);
            }
            return null;
        };
        return Eval;
    }());
    FastExt.Eval = Eval;
})(FastExt || (FastExt = {}));
var FastExtend;
(function (FastExtend) {
    var StringExtend = (function () {
        function StringExtend() {
        }
        StringExtend.__onLoaded = function () {
            String.prototype.endWith = function (suffix) {
                if (!suffix || suffix === "" || this.length === 0 || suffix.length > this.length)
                    return false;
                return this.substring(this.length - suffix.length) === suffix;
            };
            String.prototype.startWith = function (prefix) {
                if (!prefix || prefix === "" || this.length === 0 || prefix.length > this.length)
                    return false;
                return this.substr(0, prefix.length) === prefix;
            };
            String.prototype.trim = function (char, type) {
                if (char) {
                    if (type === 'left' || type === 'l') {
                        return this.replace(new RegExp('^\\' + char + '+', 'g'), '');
                    }
                    else if (type === 'right' || type === 'r') {
                        return this.replace(new RegExp('\\' + char + '+$', 'g'), '');
                    }
                    return this.replace(new RegExp('^\\' + char + '+|\\' + char + '+$', 'g'), '');
                }
                return this.replace(/^\s+|\s+$/g, '');
            };
            String.prototype.firstUpperCase = function () {
                return this.replace(/^\S/, function (s) {
                    return s.toUpperCase();
                });
            };
            String.prototype.truthLength = function () {
                return this.replace(/[\u0391-\uFFE5]/g, "aa").length;
            };
            String.prototype.trimAllSymbol = function () {
                return this.replace(/[\ |\~|\`|\!|\@|\#|\$|\%|\^|\&|\*|\(|\)|\-|\_|\+|\=|\||\\|\[|\]|\{|\}|\;|\:|\"|\'|\,|\<|\.|\>|\/|\?/\，/\。/\；/\：/\“/\”/\》/\《/\|/\{/\}/\、/\!/\~/\`]/g, "");
            };
            String.prototype.replaceAll = function (oldStr, newStr) {
                return this.replace(new RegExp(oldStr.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), 'g'), newStr);
            };
        };
        return StringExtend;
    }());
    FastExtend.StringExtend = StringExtend;
    var ArrayExtend = (function () {
        function ArrayExtend() {
        }
        ArrayExtend.__onLoaded = function () {
            Array.prototype.exists = function (val) {
                for (var i = 0; i < this.length; i++) {
                    if (this[i] === val) {
                        return true;
                    }
                }
                return false;
            };
            Array.prototype.pushAt = function (index, val) {
                this.splice(index, 0, val);
            };
            Array.prototype.remove = function (val) {
                var index = this.indexOf(val);
                if (index >= 0) {
                    this.splice(index, 1);
                }
            };
        };
        return ArrayExtend;
    }());
    FastExtend.ArrayExtend = ArrayExtend;
    var ComponentExtend = (function () {
        function ComponentExtend() {
            this.iframePanel = false;
            this.helpAnchorOffset = -1;
        }
        ComponentExtend.__onLoaded = function () {
            Ext.Component.prototype.getEditorMenu = function () {
                try {
                    return this.up("menu[editorMenu=true]");
                }
                catch (e) {
                    console.error(e);
                }
            };
        };
        return ComponentExtend;
    }());
    FastExtend.ComponentExtend = ComponentExtend;
    var ButtonExtend = (function () {
        function ButtonExtend() {
            this.contextMenu = true;
            this.bindDetail = false;
            this.entityUpdateButton = false;
            this.entityDeleteButton = false;
            this.entityAddButton = false;
        }
        return ButtonExtend;
    }());
    FastExtend.ButtonExtend = ButtonExtend;
    var GridExtend = (function () {
        function GridExtend() {
            this.menuPanelList = false;
            this.firstLoadedData = false;
            this.defaultToolBar = true;
            this.defaultToolBarLink = true;
            this.defaultToolBarMore = true;
            this.showUpdateButton = true;
        }
        return GridExtend;
    }());
    FastExtend.GridExtend = GridExtend;
    var FormPanelExtend = (function () {
        function FormPanelExtend() {
            this.extraParams = {};
        }
        FormPanelExtend.__onLoaded = function () {
            Ext.form.FormPanel.prototype.setFieldValue = function (fieldName, value) {
                var field = this.getForm().findField(fieldName);
                if (field) {
                    field.setValue(value);
                }
            };
            Ext.form.FormPanel.prototype.justSetFieldValue = function (fieldName, value) {
                var form = this.getForm();
                var field = form.findField(fieldName);
                if (field) {
                    field.setValue(value);
                }
                else {
                    if (!form.extraParams) {
                        form.extraParams = {};
                    }
                    form.extraParams[fieldName] = value;
                }
            };
            Ext.form.FormPanel.prototype.getFieldValue = function (fieldName) {
                var field = this.getForm().findField(fieldName);
                if (field) {
                    return field.getValue();
                }
                return null;
            };
            Ext.form.FormPanel.prototype.getField = function (fieldName) {
                return this.getForm().findField(fieldName);
            };
            Ext.form.FormPanel.prototype.submitForm = function (entity, extraParams, waitMsg, successAlert, failAlert) {
                var me = this;
                if (!extraParams) {
                    extraParams = {};
                }
                if (!waitMsg) {
                    waitMsg = "正在提交中……";
                }
                if (Ext.isEmpty(successAlert)) {
                    successAlert = "toast";
                }
                if (Ext.isEmpty(failAlert)) {
                    failAlert = true;
                }
                if (me.submiting) {
                    return new Ext.Promise(function (resolve, reject) {
                        reject({ "success": false, "message": "数据正在提交中，不可重复提交！" });
                    });
                }
                return new Ext.Promise(function (resolve, reject) {
                    var submitConfig = {
                        submitEmptyText: false,
                        params: extraParams,
                        success: function (form, action) {
                            me.submiting = false;
                            FastExt.Dialog.hideWait();
                            if (successAlert === "alert") {
                                Ext.Msg.alert('系统提醒', action.result.message, function (btn) {
                                    if (btn === "ok") {
                                        resolve(action.result);
                                    }
                                });
                            }
                            else if (successAlert === "toast") {
                                FastExt.Dialog.toast(action.result.message);
                                resolve(action.result);
                            }
                            else {
                                resolve(action.result);
                            }
                        },
                        failure: function (form, action) {
                            me.submiting = false;
                            FastExt.Dialog.hideWait();
                            if (failAlert && action.result) {
                                Ext.Msg.alert('系统提醒', action.result.message);
                            }
                        }
                    };
                    if (entity) {
                        submitConfig.params["entityCode"] = entity.entityCode;
                        if (entity.menu) {
                            submitConfig.params["menu"] = FastExt.Store.getStoreMenuText({ entity: entity });
                        }
                    }
                    var form = me.getForm();
                    if (form.isValid()) {
                        me.submiting = true;
                        FastExt.Dialog.showWait(waitMsg);
                        form.submit(submitConfig);
                    }
                    else {
                        me.submiting = false;
                    }
                });
            };
            Ext.form.FormPanel.prototype.saveCache = function (key) {
                if (Ext.isEmpty(key)) {
                    key = this.cacheKey;
                }
                var data = {};
                this.getForm().getFields().each(function (field, index) {
                    if (Ext.isDate(field.getValue())) {
                        data[field.getName()] = Ext.Date.format(field.getValue(), field.format);
                    }
                    else {
                        data[field.getName()] = field.getValue();
                    }
                });
                var params = {
                    "configKey": key,
                    "configType": "FormPanelCache",
                    "configValue": Ext.encode(data)
                };
                FastExt.Dialog.showWait("暂存数据中……");
                $.post(FastExt.Server.saveExtConfigUrl(), params, function (result) {
                    FastExt.Dialog.hideWait();
                    if (result.success) {
                        FastExt.Dialog.toast("暂存成功！");
                    }
                    else {
                        FastExt.Dialog.showAlert("系统提醒", result.message);
                    }
                });
            };
            Ext.form.FormPanel.prototype.restoreCache = function (key) {
                if (Ext.isEmpty(key)) {
                    key = this.cacheKey;
                }
                var me = this;
                var params = {
                    "configKey": key,
                    "configType": "FormPanelCache"
                };
                $.post(FastExt.Server.showExtConfigUrl(), params, function (result) {
                    if (result.success) {
                        var data_1 = Ext.decode(result.data.configValue);
                        me.getForm().getFields().each(function (field, index) {
                            if (data_1.hasOwnProperty(field.getName())) {
                                field.setValue(data_1[field.getName()]);
                            }
                        });
                    }
                });
            };
            Ext.form.FormPanel.prototype.deleteCache = function (key) {
                if (Ext.isEmpty(key)) {
                    key = this.cacheKey;
                }
                var params = {
                    "configKey": key,
                    "configType": "FormPanelCache"
                };
                $.post(FastExt.Server.deleteExtConfigUrl(), params, function (result) {
                });
            };
        };
        return FormPanelExtend;
    }());
    FastExtend.FormPanelExtend = FormPanelExtend;
    var FileFieldExtend = (function () {
        function FileFieldExtend() {
            this.multiple = false;
        }
        return FileFieldExtend;
    }());
    FastExtend.FileFieldExtend = FileFieldExtend;
    var FieldExtend = (function () {
        function FieldExtend() {
            this.fromHeadSearch = false;
            this.extraParams = {};
            this.multiSplit = null;
        }
        FieldExtend.__onLoaded = function () {
            Ext.form.field.Base.prototype.blur = function () {
                try {
                    if (this.inputEl) {
                        this.inputEl.blur();
                    }
                }
                catch (e) {
                    console.error(e);
                }
            };
            Ext.form.field.Base.prototype.addTriggers = function (triggers) {
                try {
                    if (Ext.isFunction(this.getTriggers) && Ext.isFunction(this.setTriggers)) {
                        var oldTriggers = this.getTriggers();
                        if (oldTriggers) {
                            this.setTriggers(FastExt.Json.mergeJson(oldTriggers, triggers));
                        }
                        else {
                            this.setTriggers(triggers);
                        }
                    }
                }
                catch (e) {
                    console.error(e);
                }
            };
        };
        return FieldExtend;
    }());
    FastExtend.FieldExtend = FieldExtend;
    var TextFieldExtend = (function () {
        function TextFieldExtend() {
            this.useHistory = false;
            this.comment = "";
        }
        return TextFieldExtend;
    }());
    FastExtend.TextFieldExtend = TextFieldExtend;
    var ComboBoxFieldExtend = (function () {
        function ComboBoxFieldExtend() {
            this.searchable = false;
        }
        return ComboBoxFieldExtend;
    }());
    FastExtend.ComboBoxFieldExtend = ComboBoxFieldExtend;
    var ColumnExtend = (function () {
        function ColumnExtend() {
            this.search = true;
            this.excelOutHeader = true;
            this.excelHeader = true;
            this.comment = "";
        }
        return ColumnExtend;
    }());
    FastExtend.ColumnExtend = ColumnExtend;
    var MenuExtend = (function () {
        function MenuExtend() {
            this.holdShow = false;
        }
        return MenuExtend;
    }());
    FastExtend.MenuExtend = MenuExtend;
    var EntityExtend = (function () {
        function EntityExtend() {
            this.actionDeleteAll = true;
            this.actionCopy = true;
            this.actionTimer = true;
        }
        return EntityExtend;
    }());
    FastExtend.EntityExtend = EntityExtend;
})(FastExtend || (FastExtend = {}));
var FastExt;
(function (FastExt) {
    var File = (function () {
        function File() {
        }
        File.formatLength = function (length) {
            if (length < 1024) {
                return length + "B";
            }
            if (length < 1024 * 1024) {
                return (length / 1024).toFixed(2) + "KB";
            }
            return (length / 1024 / 1024).toFixed(2) + "M";
        };
        File.isSuffixFile = function (fileName) {
            var suffix = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                suffix[_i - 1] = arguments[_i];
            }
            var realName = fileName.substring(fileName.lastIndexOf("/") + 1).toString().toLowerCase();
            for (var i = 0; i < suffix.length; i++) {
                var realValue = suffix[i].replace(".", "").toLowerCase();
                if (realName.endWith("." + realValue) || realName.startWith(realValue + "-")) {
                    return true;
                }
            }
            return false;
        };
        File.officeViewer = function (url, newWindow) {
            if (newWindow) {
                var buildForm = FastExt.Form.buildForm("officeViewer", { url: url }, FastEnum.Target._blank);
                buildForm.submit();
                $(buildForm).remove();
            }
            else {
                var winWidth = parseInt((document.body.clientWidth * 0.8).toFixed(0));
                var winHeight = parseInt((document.body.clientHeight * 0.9).toFixed(0));
                var loadFunName_1 = "officeViewerLoadDone" + new Date().getTime();
                var iframePanel_1 = Ext.create('Ext.container.Container', {
                    layout: 'border',
                    region: 'center',
                    border: 0,
                    iframePanel: true,
                    listeners: {
                        afterrender: function (obj, eOpts) {
                            this.setLoading("正在读取文档中，请稍后……");
                            var me = this;
                            FastExt.Server.saveCache(url, function (success, message, data) {
                                if (success) {
                                    var html = "<iframe onload='" + loadFunName_1 + "()' src='officeViewer?cache=" + data + "'  width='100%' height='100%' frameborder='0'>";
                                    me.update(html);
                                }
                                else {
                                    FastExt.Dialog.hideWait();
                                    FastExt.Dialog.showAlert("系统提醒", message);
                                }
                            });
                        }
                    }
                });
                window[loadFunName_1] = function () {
                    iframePanel_1.setLoading(false);
                };
                var win = Ext.create('Ext.window.Window', {
                    title: "预览文档",
                    iconCls: "extIcon extSee",
                    maximizable: true,
                    height: winHeight,
                    width: winWidth,
                    minHeight: 500,
                    minWidth: 600,
                    resizable: true,
                    layout: 'fit',
                    items: [iframePanel_1],
                    constrain: true,
                    justTop: true,
                    listeners: {
                        close: function () {
                            window[loadFunName_1] = null;
                        }
                    },
                });
                win.show();
            }
        };
        File.uploadFile = function (obj, fileModules, multiple, useEditUrl) {
            return new Ext.Promise(function (resolve, reject) {
                var title = "上传文件", type = "files", width = -1, height = -1, name = "file";
                if (!FastExt.FileModule.validate(fileModules, "fileModules")) {
                    return;
                }
                if (fileModules.length === 1) {
                    title = "上传" + fileModules[0].tipMsg;
                    type = fileModules[0].type;
                    width = fileModules[0].width;
                    height = fileModules[0].height;
                }
                if (Ext.isEmpty(useEditUrl)) {
                    useEditUrl = true;
                }
                if (obj) {
                    if (obj.name) {
                        name = obj.name;
                    }
                    if (obj.dataIndex) {
                        name = obj.dataIndex;
                    }
                }
                var formPanel = Ext.create('Ext.form.FormPanel', {
                    url: 'upload',
                    method: 'POST',
                    bodyPadding: 5,
                    fileUpload: true,
                    width: 400,
                    callBacked: false,
                    border: 0,
                    layout: "column",
                    items: [
                        {
                            xtype: 'filefield',
                            fieldLabel: title,
                            labelWidth: 60,
                            labelAlign: 'right',
                            buttonText: '选择文件',
                            allowBlank: false,
                            name: name,
                            multiple: multiple,
                            columnWidth: 1,
                            listeners: {
                                change: function (obj, value, eOpts) {
                                    if (value != null && value.length !== 0) {
                                        var errorMsg = "";
                                        for (var i = 0; i < fileModules.length; i++) {
                                            var fileModule = fileModules[i];
                                            if (fileModule.match(value)) {
                                                formPanel.doSubmit();
                                                return;
                                            }
                                            errorMsg = errorMsg + "或" + fileModule.tipMsg;
                                        }
                                        if (formPanel.form) {
                                            formPanel.form.reset();
                                        }
                                        Ext.Msg.alert('系统提醒', "请上传有效的" + errorMsg.substring(1));
                                    }
                                }
                            }
                        },
                        {
                            xtype: 'hiddenfield',
                            name: 'type',
                            value: type
                        },
                        {
                            xtype: 'hiddenfield',
                            name: 'file.width',
                            value: width
                        },
                        {
                            xtype: 'hiddenfield',
                            name: 'file.height',
                            value: height
                        }
                    ],
                    doSubmit: function () {
                        var form = formPanel.form;
                        if (form.isValid()) {
                            var myMask_1 = new Ext.LoadMask({
                                msg: '正在上传附件中…',
                                target: uploadWin
                            });
                            myMask_1.show();
                            var formSubmitRun_1 = function () {
                                form.submit({
                                    success: function (form, action) {
                                        FastExt.Dialog.toast("文件上传成功！");
                                        if (!resolve.called) {
                                            resolve.called = true;
                                            resolve(action.result.data);
                                        }
                                        uploadWin.close();
                                    },
                                    failure: function (form, action) {
                                        myMask_1.destroy();
                                        if (action.result) {
                                            Ext.Msg.alert('系统提醒', "上传失败！" + action.result.message);
                                        }
                                    }
                                });
                            };
                            var onFileSelectRun_1 = function (i) {
                                if (i >= fileModules.length) {
                                    formSubmitRun_1();
                                    return;
                                }
                                var fileModel = fileModules[i];
                                if (Ext.isFunction(fileModel.onFileSelect)) {
                                    fileModel.onFileSelect(formPanel.getForm().findField(name)).then(function (error) {
                                        if (Ext.isEmpty(error)) {
                                            onFileSelectRun_1(i + 1);
                                        }
                                        else {
                                            myMask_1.destroy();
                                            if (formPanel.form) {
                                                formPanel.form.reset();
                                            }
                                            Ext.Msg.alert('系统提醒', error);
                                        }
                                    });
                                }
                                else {
                                    onFileSelectRun_1(i + 1);
                                }
                            };
                            onFileSelectRun_1(0);
                        }
                    },
                    listeners: {
                        'render': function (obj) {
                            try {
                                new Ext.util.KeyMap({
                                    target: obj.getEl(),
                                    key: 13,
                                    fn: formPanel.doSubmit,
                                    scope: Ext.getBody()
                                });
                            }
                            catch (e) {
                                console.error(e);
                            }
                        }
                    }
                });
                var btnSubmitId = "btnSubmit" + new Date().getTime();
                var uploadWin = Ext.create('Ext.window.Window', {
                    title: title,
                    layout: 'fit',
                    resizable: false,
                    scrollable: false,
                    width: 500,
                    items: formPanel,
                    modal: true,
                    iconCls: 'extIcon extUpload',
                    animateTarget: obj,
                    constrain: true,
                    toFrontOnShow: true,
                    buttons: [
                        {
                            text: '使用地址',
                            iconCls: 'extIcon extEdit',
                            hidden: !useEditUrl,
                            handler: function () {
                                Ext.Msg.prompt('使用自定义的文件地址', '填写自定义的文件路径（http）：', function (btn, text) {
                                    if (btn === 'ok') {
                                        if (!Ext.isEmpty(text)) {
                                            if (!resolve.called) {
                                                resolve.called = true;
                                                var values = text.split("@");
                                                var data = { "url": values[0] };
                                                if (values.length > 1) {
                                                    data["name"] = values[1];
                                                }
                                                if (values.length > 2) {
                                                    data["length"] = values[values.length - 1];
                                                }
                                                resolve(data);
                                            }
                                            uploadWin.close();
                                        }
                                    }
                                });
                            }
                        },
                        {
                            text: '网络同步',
                            iconCls: 'extIcon extLink',
                            handler: function () {
                                Ext.Msg.prompt('从网络中下载文件', '填写网络文件路径（http）：', function (btn, text) {
                                    if (btn === 'ok') {
                                        FastExt.Dialog.showWait("正在同步中，请稍后……");
                                        var params = { "url": text, "__accept": "application/json" };
                                        $.post(FastExt.Server.uploadUrl(), params, function (result) {
                                            FastExt.Dialog.hideWait();
                                            if (result.success) {
                                                FastExt.Dialog.toast("文件上传成功！");
                                                if (!resolve.called) {
                                                    resolve.called = true;
                                                    resolve(result.data);
                                                }
                                                uploadWin.close();
                                            }
                                            else {
                                                Ext.Msg.alert('系统提醒', "上传失败！" + result.message);
                                            }
                                        });
                                    }
                                });
                            }
                        },
                        '->',
                        {
                            text: '重置',
                            width: 88,
                            iconCls: 'extIcon extReset',
                            handler: function () {
                                if (formPanel.form) {
                                    formPanel.form.reset();
                                }
                            }
                        },
                        {
                            text: '上传',
                            width: 88,
                            id: btnSubmitId,
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                formPanel.doSubmit();
                            }
                        }
                    ],
                    listeners: {
                        show: function (winObj, eOpts) {
                            formPanel.getForm().findField(name).fileInputEl.dom.click();
                            Ext.getCmp(btnSubmitId).focus();
                        },
                        close: function (winObj, eOpts) {
                            if (!resolve.called) {
                                resolve.called = true;
                                resolve();
                            }
                        }
                    }
                });
                uploadWin.show();
            });
        };
        File.showFiles = function (obj, callBack, fileModules, defaultFiles, title, readOnly, showFileName, showFileLength) {
            if (!FastExt.FileModule.validate(fileModules, "fileModules")) {
                return;
            }
            var autoFileName = true;
            if (obj && Ext.isFunction(obj.blur)) {
                obj.blur();
                autoFileName = FastExt.Base.toBool(obj.autoFileName, true);
            }
            var datas = [], renderer = FastExt.Renders.file();
            if (fileModules.length === 1) {
                renderer = eval(fileModules[0].renderer);
                if (!title) {
                    title = fileModules[0].tipMsg + readOnly ? "查看" : "管理";
                }
            }
            else if (!title) {
                title = "附件管理";
            }
            if (!Ext.isEmpty(defaultFiles)) {
                var fileArray = defaultFiles;
                if (Ext.isString(defaultFiles)) {
                    fileArray = Ext.JSON.decode(defaultFiles);
                }
                for (var i = 0; i < fileArray.length; i++) {
                    var source = fileArray[i];
                    var arrayInfo = source.split("@");
                    var url = arrayInfo[0];
                    var name_2 = url.substring(url.lastIndexOf("/") + 1);
                    var length_1 = -1;
                    if (arrayInfo.length > 1) {
                        name_2 = arrayInfo[1];
                    }
                    if (arrayInfo.length > 2) {
                        length_1 = arrayInfo[2];
                    }
                    datas.push({ url: source, name: name_2, length: length_1 });
                }
            }
            var columns = [];
            columns.push({
                header: '文件',
                dataIndex: 'url',
                flex: 1,
                align: 'center',
                renderer: renderer
            });
            if (obj.showFileName || showFileName) {
                columns.push({
                    header: '文件名',
                    dataIndex: 'name',
                    width: 150,
                    align: 'center',
                    field: readOnly ? null : {
                        xtype: 'textfield',
                        listeners: {
                            change: function () {
                                fileStore.modify = true;
                            }
                        }
                    },
                    renderer: FastExt.Renders.normal()
                });
                if (obj.showFileLength || showFileLength) {
                    columns.push({
                        header: '大小',
                        dataIndex: 'length',
                        width: 100,
                        align: 'center',
                        field: readOnly ? null : {
                            xtype: 'numberfield',
                            listeners: {
                                change: function () {
                                    fileStore.modify = true;
                                }
                            }
                        },
                        renderer: FastExt.Renders.fileSize()
                    });
                }
            }
            columns.push({ xtype: 'rowplaceholder', minWidth: 30 });
            var currTime = Ext.now();
            var fileStore = Ext.create('Ext.data.Store', {
                autoLoad: true,
                data: datas
            });
            var dataGridFiles = Ext.create('Ext.grid.Panel', {
                selModel: FastExt.Grid.getGridSelModel(),
                store: fileStore,
                columnLines: true,
                cellTip: true,
                border: 0,
                columns: columns,
                plugins: [Ext.create('Ext.grid.plugin.CellEditing', {
                        clicksToEdit: 2
                    })],
                selType: 'cellmodel',
                tbar: readOnly ? null : [
                    {
                        xtype: 'button',
                        text: '删除',
                        id: 'btnDeleteFile' + currTime,
                        iconCls: 'extIcon extDelete',
                        disabled: true,
                        handler: function () {
                            var data = dataGridFiles.getSelectionModel().getSelection();
                            if (data.length === 0) {
                                FastExt.Dialog.toast("请您选择需要删除的文件！");
                            }
                            else {
                                Ext.Msg.confirm("系统提醒", "您确定立即删除选中的附件吗？", function (button, text) {
                                    if (button === "yes") {
                                        var params_1 = {};
                                        Ext.Array.each(data, function (record, index) {
                                            params_1["path[" + index + "]"] = record.get("url");
                                        });
                                        FastExt.Dialog.showWait("正在删除中……");
                                        FastExt.Server.deleteAttach(params_1, function (success, message) {
                                            FastExt.Dialog.hideWait();
                                            if (success) {
                                                dataGridFiles.getSelectionModel().deselectAll();
                                                FastExt.Dialog.toast("删除成功！");
                                                Ext.Array.each(data, function (record, index) {
                                                    fileStore.remove(record);
                                                    fileStore.modify = true;
                                                });
                                            }
                                            else {
                                                FastExt.Dialog.showAlert("系统提醒", message);
                                            }
                                        });
                                    }
                                });
                            }
                        }
                    },
                    {
                        xtype: 'button',
                        text: '上传',
                        iconCls: 'extIcon extUpload',
                        handler: function () {
                            FastExt.File.uploadFile(this, fileModules, true).then(function (result) {
                                if (result) {
                                    if (Ext.isArray(result)) {
                                        for (var i = 0; i < result.length; i++) {
                                            if (!autoFileName) {
                                                result[i].name = "";
                                            }
                                            fileStore.add(result[i]);
                                        }
                                    }
                                    else {
                                        if (!autoFileName) {
                                            result.name = "";
                                        }
                                        fileStore.add(result);
                                    }
                                    fileStore.modify = true;
                                }
                            });
                        }
                    }
                ],
                listeners: {
                    selectionchange: function () {
                        var data = this.getSelectionModel().getSelection();
                        var btnDelete = Ext.getCmp("btnDeleteFile" + currTime);
                        if (btnDelete) {
                            btnDelete.setDisabled(!(data.length > 0));
                        }
                    }
                }
            });
            var win = Ext.create('Ext.window.Window', {
                title: title,
                height: 400,
                width: 500,
                minWidth: 400,
                minHeight: 300,
                layout: 'fit',
                resizable: true,
                modal: true,
                constrain: true,
                iconCls: 'extIcon extFolder',
                animateTarget: obj,
                items: [dataGridFiles],
                buttons: readOnly ? null : [{
                        text: '确定',
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            var data = [];
                            var stop = false;
                            fileStore.each(function (record, index) {
                                var url = record.get("url");
                                if (obj.showFileName) {
                                    url = url + "@" + record.get("name");
                                    if (Ext.isEmpty(record.get("name"))) {
                                        FastExt.Dialog.toast("第" + (index + 1) + "条附件，请编辑文件名！");
                                        stop = true;
                                        FastExt.Component.shakeComment(win);
                                        return false;
                                    }
                                    if (obj.showFileLength) {
                                        url = url + "@" + record.get("length");
                                        if (Ext.isEmpty(record.get("length"))) {
                                            FastExt.Dialog.toast("第" + (index + 1) + "条附件，请编辑文件大小！");
                                            stop = true;
                                            FastExt.Component.shakeComment(win);
                                            return false;
                                        }
                                    }
                                }
                                data.push(url);
                            });
                            if (stop) {
                                return;
                            }
                            if (callBack != null) {
                                callBack(Ext.encode(data));
                            }
                            win.close();
                        }
                    }],
                listeners: {
                    close: function () {
                        if (fileStore.modify) {
                        }
                    }
                }
            });
            win.show();
        };
        return File;
    }());
    FastExt.File = File;
    var FileModule = (function () {
        function FileModule() {
        }
        FileModule.validate = function (modules, name) {
            if (Ext.isEmpty(modules)) {
                FastExt.Dialog.showAlert("系统提醒", "参数" + name + "必传！");
                return false;
            }
            if (!Ext.isArray(modules)) {
                FastExt.Dialog.showAlert("系统提醒", "参数" + name + "必需Array格式！");
                return false;
            }
            if (modules === 0) {
                FastExt.Dialog.showAlert("系统提醒", "参数" + name + "集合不可为空！");
                return false;
            }
            return true;
        };
        FileModule.file = function () {
            return {
                tipMsg: '文件',
                type: 'file',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (new RegExp(/\.*$/i).test(names[i])) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.image = function (width, height) {
            if (Ext.isEmpty(width)) {
                width = -1;
            }
            if (Ext.isEmpty(height)) {
                height = -1;
            }
            return {
                width: width,
                height: height,
                tipMsg: '图片',
                type: 'images',
                renderer: "FastExt.Renders.image(24)",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "jpg", "png", "gif", "jpeg", "svg", "bmp", "webp")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.mp4 = function (maxDuration) {
            return {
                tipMsg: 'mp4',
                type: 'videos',
                maxDuration: maxDuration,
                onFileSelect: function (filefield) {
                    var me = this;
                    if (Ext.isEmpty(filefield.extra)) {
                        filefield.extra = {};
                    }
                    return new Ext.Promise(function (resolve, reject) {
                        if (Ext.isEmpty(me.maxDuration)) {
                            resolve();
                            return;
                        }
                        var video = filefield.fileInputEl.dom.files[0];
                        var url = URL.createObjectURL(video);
                        var audio = new Audio(url);
                        audio.addEventListener("loadedmetadata", function (e) {
                            filefield.extra["duration"] = audio.duration;
                            if (audio.duration * 1000 > parseInt(me.maxDuration)) {
                                resolve("视频最大时长不得超过" + me.maxDuration / 1000 + "秒！");
                            }
                            else {
                                resolve();
                            }
                        });
                    });
                },
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "mp4")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.mp3 = function () {
            return {
                tipMsg: 'mp3',
                type: 'music',
                renderer: "FastExt.Renders.file()",
                onFileSelect: function (filefield) {
                    if (Ext.isEmpty(filefield.extra)) {
                        filefield.extra = {};
                    }
                    return new Ext.Promise(function (resolve, reject) {
                        var video = filefield.fileInputEl.dom.files[0];
                        var url = URL.createObjectURL(video);
                        var audio = new Audio(url);
                        audio.addEventListener("loadedmetadata", function (e) {
                            filefield.extra["duration"] = audio.duration;
                            resolve();
                        });
                    });
                },
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "mp3")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.word = function () {
            return {
                tipMsg: 'word文档',
                type: 'words',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "doc", "docx")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.excel = function () {
            return {
                tipMsg: 'excel文档',
                type: 'excels',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "xls", "xlsx")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.ppt = function () {
            return {
                tipMsg: 'ppt文档',
                type: 'ppt',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "ppt", "pptx")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.pdf = function () {
            return {
                tipMsg: 'pdf文档',
                type: 'pdf',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "pdf")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.zip = function () {
            return {
                tipMsg: 'zip压缩包',
                type: 'zip',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "zip", "rar")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.text = function () {
            return {
                tipMsg: 'txt文档',
                type: 'txt',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "txt")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.data = function () {
            return {
                tipMsg: '数据文件',
                type: 'data',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "data")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.json = function () {
            return {
                tipMsg: 'JSON文件',
                type: 'json',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "json")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.apk = function () {
            return {
                tipMsg: '安卓安装包（APK）',
                type: 'apk',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "apk")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        FileModule.ipa = function () {
            return {
                tipMsg: '苹果安装包（IPA）',
                type: 'ipa',
                renderer: "FastExt.Renders.file()",
                match: function () {
                    var names = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        names[_i] = arguments[_i];
                    }
                    for (var i = 0; i < names.length; i++) {
                        if (FastExt.File.isSuffixFile(names[i], "ipa")) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        };
        return FileModule;
    }());
    FastExt.FileModule = FileModule;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Form = (function () {
        function Form() {
        }
        Form.getFieldMinHeight = function (showHeight) {
            if (Ext.isEmpty(showHeight)) {
                showHeight = false;
            }
            if (showHeight) {
                return 32 + 2;
            }
            return 32;
        };
        Form.asyncForm = function (url, paramsJson) {
            return new Ext.Promise(function (resolve) {
                var buildForm = FastExt.Form.buildForm(url, paramsJson);
                buildForm.submit();
                $(buildForm).remove();
                resolve();
            });
        };
        Form.buildForm = function (url, paramsJson, target) {
            if (Ext.isEmpty(target)) {
                target = FastEnum.Target._self;
            }
            var form = $('<form></form>');
            form.attr('action', url);
            form.attr('method', 'post');
            form.attr('target', target);
            for (var n in paramsJson) {
                var my_input = $("<input type='text' name='" + n + "' />");
                my_input.attr('value', paramsJson[n]);
                form.append(my_input);
            }
            $(document.body).append(form);
            return form;
        };
        Form.isDateField = function (field) {
            if (!field)
                return false;
            return field === "datefield" || field.xtype === "datefield";
        };
        Form.isNumberField = function (field) {
            if (!field)
                return false;
            return field === "numberfield" || field.xtype === "numberfield";
        };
        Form.isTextField = function (field) {
            if (!field)
                return false;
            return field === "textfield" || field.xtype === "textfield";
        };
        Form.isComboField = function (field) {
            if (!field)
                return false;
            return field === "combobox" || field.xtype === "combo";
        };
        Form.isFileField = function (field) {
            if (!field)
                return false;
            return field === "fastfile" || field.xtype === "fastfile" || field === "fastfilefield" || field.xtype === "fastfilefield";
        };
        Form.isFilesField = function (field) {
            if (!field)
                return false;
            return field === "fastfiles" || field.xtype === "fastfiles" || field === "fastfilesfield" || field.xtype === "fastfilesfield";
        };
        Form.isEnumField = function (field) {
            if (!field)
                return false;
            return field === "enumcombo" || field === "enumcombobox" || field.xtype === "enumcombo" || field.xtype === "enumcombobox";
        };
        Form.isContentField = function (field) {
            if (!field)
                return false;
            return field === "contentfield" || field === "content" || field.xtype === "contentfield" || field.xtype === "content";
        };
        Form.isHtmlContentField = function (field) {
            if (!field)
                return false;
            return field === "htmlcontentfield" || field === "htmlcontent" || field.xtype === "htmlcontentfield" || field.xtype === "htmlcontent";
        };
        Form.isMonacoEditorField = function (field) {
            if (!field)
                return false;
            return field === "fastmonacofield" || field === "fastmonaco" || field.xtype === "fastmonacofield" || field.xtype === "fastmonaco";
        };
        Form.isLinkField = function (field) {
            if (!field)
                return false;
            return field === "linkfield" || field === "link" || field.xtype === "linkfield" || field.xtype === "link";
        };
        Form.isTargetField = function (field) {
            if (!field)
                return false;
            return field === "targetfield" || field === "target" || field.xtype === "targetfield" || field.xtype === "target";
        };
        Form.isPCAField = function (field) {
            if (!field)
                return false;
            return field === "pcafield" || field === "pca" || field.xtype === "pcafield" || field.xtype === "pca";
        };
        Form.isMapField = function (field) {
            if (!field)
                return false;
            return field === "mapfield" || field === "map" || field.xtype === "mapfield" || field.xtype === "map";
        };
        Form.getFieldError = function (fieldObj) {
            var currError = fieldObj.getErrors();
            if (currError.length === 0) {
                currError = [fieldObj.invalidText];
            }
            if (Ext.isEmpty(currError[0])) {
                currError[0] = "数据错误！";
            }
            return currError;
        };
        Form.showJsonForm = function (obj, title, jsonFieldConfig, jsonFieldDefaultConfig, modal) {
            if (Ext.isEmpty(modal)) {
                modal = true;
            }
            if (Ext.isString(jsonFieldConfig)) {
                jsonFieldConfig = FastExt.Json.jsonToObject(jsonFieldConfig);
            }
            if (Ext.isEmpty(jsonFieldDefaultConfig)) {
                jsonFieldDefaultConfig = "[]";
            }
            if (Ext.isString(jsonFieldDefaultConfig)) {
                jsonFieldDefaultConfig = FastExt.Json.jsonToObject(jsonFieldDefaultConfig);
            }
            return new Ext.Promise(function (resolve, reject) {
                var formItems = [];
                for (var _i = 0, jsonFieldConfig_1 = jsonFieldConfig; _i < jsonFieldConfig_1.length; _i++) {
                    var itemObj = jsonFieldConfig_1[_i];
                    var defaultConfig = {
                        xtype: "textfield",
                        columnWidth: 1,
                        allowBlank: false
                    };
                    for (var _a = 0, jsonFieldDefaultConfig_1 = jsonFieldDefaultConfig; _a < jsonFieldDefaultConfig_1.length; _a++) {
                        var defaultJson = jsonFieldDefaultConfig_1[_a];
                        if (defaultJson["name"] === itemObj["name"]) {
                            itemObj = FastExt.Json.mergeJson(itemObj, defaultJson);
                        }
                    }
                    var fieldConfig = FastExt.Json.mergeJson(defaultConfig, itemObj);
                    fieldConfig["source"] = itemObj;
                    formItems.push(fieldConfig);
                }
                var formPanel = Ext.create('Ext.form.FormPanel', {
                    bodyPadding: 5,
                    cacheKey: $.md5(title),
                    region: 'center',
                    border: 0,
                    autoScroll: true,
                    defaults: {
                        labelWidth: 100,
                        margin: '5 5 5 5',
                        labelAlign: 'right',
                        emptyText: '请填写',
                        flex: 1,
                    },
                    layout: {
                        type: 'vbox',
                        pack: 'start',
                        align: 'stretch'
                    },
                    doReturn: function () {
                        if (this.getForm().isValid()) {
                            var values_1 = [];
                            this.getForm().getFields().each(function (field) {
                                var source = field.source;
                                source["value"] = field.getValue();
                                values_1.push(source);
                            });
                            resolve(values_1);
                            return true;
                        }
                        return false;
                    },
                    listeners: {
                        render: function (obj, eOpts) {
                            new Ext.util.KeyMap({
                                target: obj.getEl(),
                                key: 13,
                                fn: function (keyCode, e) {
                                    if (formPanel.doReturn()) {
                                        formPanel.deleteCache();
                                        formWin.close();
                                    }
                                },
                                scope: this
                            });
                        }
                    },
                    items: formItems,
                });
                var formWin = Ext.create('Ext.window.Window', {
                    title: title,
                    icon: obj.icon,
                    iconCls: obj.iconCls,
                    animateTarget: obj,
                    width: 550,
                    minWidth: 200,
                    autoScroll: true,
                    layout: {
                        type: 'vbox',
                        pack: 'start',
                        align: 'stretch'
                    },
                    resizable: true,
                    maximizable: true,
                    constrain: true,
                    items: [formPanel],
                    modal: modal,
                    listeners: {
                        show: function (obj) {
                            formPanel.restoreCache();
                            obj.focus();
                        }
                    },
                    buttons: [
                        {
                            text: '暂存',
                            iconCls: 'extIcon extSave whiteColor',
                            handler: function () {
                                formPanel.saveCache();
                            }
                        },
                        {
                            text: '重置',
                            iconCls: 'extIcon extReset',
                            handler: function () {
                                if (formPanel.form) {
                                    formPanel.form.reset();
                                }
                                formPanel.deleteCache();
                            }
                        },
                        {
                            text: '确定',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                if (formPanel.doReturn()) {
                                    formPanel.deleteCache();
                                    formWin.close();
                                }
                            }
                        }
                    ]
                });
                formWin.show();
            });
        };
        return Form;
    }());
    FastExt.Form = Form;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var GridEvent = (function () {
        function GridEvent() {
        }
        GridEvent.onFastAfterTabActive = function () {
            try {
                var grid = this;
                if (grid.operate.refreshData || FastExt.System.ConfigHandler.isGridRefreshData()) {
                    grid.getStore().reload();
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        GridEvent.onFastViewRead = function (view, eOpts) {
            view.getHeaderContainer().sortOnClick = false;
        };
        GridEvent.onFastBeforeDestroy = function () {
            var grid = this;
            if (FastExt.Base.toBool(grid.destroySaveUI, true)) {
                grid.saveUIConfig(false);
            }
            grid.hideEmptyTip();
        };
        GridEvent.onFastColumnMove = function (ct, column, fromIdx, toIdx, eOpts) {
            var grid = this;
            if (column.isSubHeader) {
                column.groupHeaderText = column.ownerCt.text;
            }
            else {
                column.groupHeaderText = null;
            }
            grid.saveUIConfig(true);
        };
        GridEvent.onFastColumnResize = function (ct, column, width, eOpts) {
            var grid = this;
            grid.sortOnClick = false;
            grid.saveUIConfig(true);
        };
        GridEvent.onFastColumnsChanged = function (ct, eOpts) {
            ct.sortOnClick = false;
            var grid = this;
            grid.saveUIConfig(true);
        };
        GridEvent.onFastHeaderTriggerClick = function (ct, column, e, t, eOpts) {
            var grid = this;
            if (Ext.isEmpty(column.dataIndex) || grid.fromRecycle)
                return;
            ct.sortOnClick = false;
            ct.triggerColumn = column;
        };
        GridEvent.onFastHeaderContextMenu = function (ct, column, e, t, eOpts) {
            var grid = this;
            if (Ext.isEmpty(column.dataIndex) || grid.fromRecycle)
                return;
            ct.sortOnClick = false;
            ct.onHeaderTriggerClick(column, e, column.triggerEl);
        };
        GridEvent.onFastHeaderMenuCreate = function (ct, menu, headerCt, eOpts) {
            var grid = this;
            grid.columnHeadMenu = menu;
            FastExt.Grid.configGridHeadMenu(grid);
        };
        GridEvent.onFastHeaderClick = function (ct, column, e, t, eOpts) {
            if (Ext.isEmpty(column.dataIndex))
                return;
            ct.sortOnClick = false;
            if (!FastExt.Grid.showColumnSearchMenu(column)) {
                ct.onHeaderTriggerClick(column, e, column.triggerEl);
            }
        };
        GridEvent.onFastSortChange = function (ct, column, direction, eOpts) {
            if (Ext.isEmpty(column.dataIndex))
                return;
            column.sortDirection = direction;
            var grid = this;
            FastExt.Grid.refreshColumnStyle(column);
            grid.saveUIConfig(true);
        };
        GridEvent.onFastCellContextMenu = function (obj, td, cellIndex, record, tr, rowIndex, e, eOpts) {
            var grid = this;
            if (Ext.isEmpty(e.position.column.dataIndex) || grid.fromRecycle) {
                return;
            }
            if (Ext.isObject(grid.contextMenu)) {
                if (grid.contextMenu.items.length > 0) {
                    grid.contextMenu.cellIndex = cellIndex;
                    grid.contextMenu.record = record;
                    grid.contextMenu.rowIndex = rowIndex;
                    grid.contextMenu.cellTd = td;
                    grid.contextMenu.tr = tr;
                    grid.contextMenu.cellContext = e.position;
                    obj.getSelectionModel().select(record);
                    obj.fireEvent("selectionchange", obj, record, eOpts);
                    FastExt.Menu.fireMenuEvent(grid.contextMenu, "onBeforeShow");
                    FastExt.Menu.refreshItem(grid.contextMenu);
                    grid.contextMenu.showAt(e.getXY());
                }
            }
        };
        GridEvent.onFastCellDblclick = function () {
            var grid = this;
            grid.doEdit = true;
        };
        GridEvent.onFastBeforeEdit = function (editor, context, eOpts) {
            var grid = this;
            if (!grid.checkEditor()) {
                FastExt.Dialog.toast("无编辑权限（E-1）！");
                return false;
            }
            if (!FastExt.Base.toBool(grid.doEdit, true)) {
                return false;
            }
            grid.doEdit = false;
            if (!FastExt.Base.toBool(context.column.editable, true)) {
                FastExt.Dialog.toast("无编辑权限（E-2）！");
                return false;
            }
            if (context.column.hasListener("beforeedit")) {
                if (!context.column.fireEvent("beforeedit", context)) {
                    return false;
                }
            }
            var editorField = context.column.field;
            if (!editorField) {
                FastExt.Dialog.toast("无编辑权限（E-3）！");
                return false;
            }
            var cell = Ext.get(context.cell);
            editorField.labelTitle = context.column.text;
            editorField.record = context.record;
            editorField.fromColumn = true;
            editorField.height = FastExt.Grid.getRowMinHeight();
            if (editorField.hasListener("beforeedit")) {
                if (!editorField.fireEvent("beforeedit", editorField)) {
                    return false;
                }
            }
            if (!FastExt.Listeners.getFire().onBeforeEditorField(editorField, context.record)) {
                return false;
            }
            if (Ext.isFunction(editorField.setValue) && !FastExt.Base.toBool(context.column.password, false)) {
                if (Ext.isObject(context.value) || Ext.isArray(context.value)) {
                    editorField.setValue(JSON.stringify(context.value), context.record);
                }
                else {
                    editorField.setValue(context.value, context.record);
                }
            }
            if (Ext.isFunction(editorField.startEdit)) {
                editorField.startEdit();
            }
            if (Ext.isFunction(editorField.showWindow)) {
                editorField.showWindow(cell, function (result) {
                    if (Ext.isEmpty(context.value) && Ext.isEmpty(result.getValue())) {
                        return;
                    }
                    FastExt.Store.setRecordValue(context.record, context.field, result);
                });
                return false;
            }
            if (!context.column.editMenu) {
                context.column.editMenu = Ext.create('Ext.menu.Menu', {
                    modal: true,
                    layout: 'fit',
                    showSeparator: false,
                    shadow: false,
                    editorMenu: true,
                    items: [
                        {
                            xtype: 'container',
                            layout: 'fit',
                            width: cell.getWidth(),
                            height: cell.getHeight(),
                            style: {
                                background: "#ffffff",
                                borderWidth: 1,
                                borderColor: "#ffffff",
                                color: '#eeeee'
                            },
                            border: 0,
                            items: [editorField]
                        }
                    ],
                    listeners: {
                        show: function (obj, epts) {
                            var fieldObj = obj.items.get(0).items.get(0);
                            fieldObj.focus();
                            try {
                                new Ext.util.KeyMap({
                                    target: obj.getEl(),
                                    key: 13,
                                    fn: function (keyCode, e) {
                                        obj.hide();
                                    },
                                    scope: this
                                });
                            }
                            catch (e) {
                                console.error(e);
                            }
                        },
                        beforehide: function (obj, epts) {
                            var fieldObj = obj.items.get(0).items.get(0);
                            if (!fieldObj.isValid()) {
                                var currError = FastExt.Form.getFieldError(fieldObj);
                                FastExt.Dialog.toast(currError[0]);
                                FastExt.Component.shakeComment(obj, function () {
                                    obj.holdShow = false;
                                });
                                obj.holdShow = true;
                                return false;
                            }
                            return true;
                        },
                        hide: function (obj, epts) {
                            if (!obj.context) {
                                return;
                            }
                            var fieldObj = obj.items.get(0).items.get(0);
                            if (!fieldObj) {
                                return;
                            }
                            if ((Ext.isEmpty(obj.context.value) || FastExt.Base.toBool(obj.context.column.password, false)) && Ext.isEmpty(fieldObj.getValue())) {
                                if (Ext.isFunction(fieldObj.endEdit)) {
                                    fieldObj.endEdit();
                                }
                                return;
                            }
                            FastExt.Store.setRecordValue(obj.context.record, obj.context.field, fieldObj);
                            if (Ext.isFunction(fieldObj.endEdit)) {
                                fieldObj.endEdit();
                            }
                            fieldObj.setValue(null);
                        }
                    }
                });
                context.column.editMenu.addCls("edit-menu");
            }
            var triggersCount = 0;
            if (Ext.isFunction(editorField.getTriggers)) {
                triggersCount = editorField.getTriggers() ? Object.keys(editorField.getTriggers()).length : 0;
            }
            context.column.editMenu.setWidth(Math.max(context.column.getWidth(), 120 + triggersCount * 30));
            context.column.editMenu.setHeight(FastExt.Grid.getRowMinHeight());
            context.column.editMenu.context = context;
            context.column.editMenu.showBy(cell, "tl");
            return false;
        };
        GridEvent.onFastSelectionChange = function (obj, selected, eOpts) {
            try {
                var grid = this;
                if (selected && !grid.fromStoreChange) {
                    if (Ext.isFunction(grid.recordSelect)) {
                        grid.recordSelect();
                    }
                }
                if (Ext.isFunction(grid.refreshSelect)) {
                    grid.refreshSelect();
                }
                if (Ext.isFunction(grid.refreshDetailsPanel)) {
                    grid.refreshDetailsPanel();
                }
                if (Ext.isFunction(grid.refreshToolPaging)) {
                    grid.refreshToolPaging();
                }
            }
            catch (e) {
                FastExt.Dialog.showException(e, "按钮选中检测！[selectionchange]");
            }
        };
        GridEvent.onFastStoreEndUpdate = function () {
            try {
                var grid_1 = this;
                if (!grid_1.getStore()) {
                    return true;
                }
                if (grid_1.getStore().holdUpdate) {
                    return true;
                }
                var records_1 = grid_1.getStore().getUpdatedRecords();
                Ext.each(grid_1.updateButtons, function (item, index) {
                    item.setDisabled(records_1.length === 0);
                });
                if (grid_1.operate && grid_1.operate.autoUpdate) {
                    grid_1.setLoading("提交数据中……");
                    FastExt.Store.commitStoreUpdate(grid_1.getStore()).then(function () {
                        grid_1.setLoading(false);
                    });
                }
            }
            catch (e) {
                FastExt.Dialog.showException(e, "endupdate");
            }
        };
        GridEvent.onFastStoreDataChanged = function () {
            var grid = this;
            if (grid.fireLoadResotreSelect) {
                grid.restoreSelect();
            }
            grid.showEmptyTip();
        };
        GridEvent.onFastStoreLoad = function () {
            var grid = this;
            if (!grid.fireLoadResotreSelect) {
                grid.fireLoadResotreSelect = true;
                grid.restoreSelect();
            }
        };
        GridEvent.onFastStoreBeforeLoad = function () {
            var grid = this;
            grid.hideEmptyTip();
        };
        GridEvent.onFastHeadMenuBeforeShow = function (obj) {
            var grid = this;
            var menu = obj;
            if (!FastExt.Grid.hasColumnField(menu.activeHeader)) {
                menu.activeHeader.batchUpdate = false;
                menu.activeHeader.operation = false;
                menu.activeHeader.searchLink = false;
                menu.activeHeader.batchRandom = false;
            }
            if (FastExt.Grid.isFilesColumn(menu.activeHeader)
                || FastExt.Grid.isFileColumn(menu.activeHeader)
                || FastExt.Grid.isLinkColumn(menu.activeHeader)
                || FastExt.Grid.isMapColumn(menu.activeHeader)
                || FastExt.Grid.isTargetColumn(menu.activeHeader)
                || FastExt.Grid.isPCAColumn(menu.activeHeader)) {
                menu.activeHeader.batchRandom = false;
            }
            if (FastExt.Grid.isContentColumn(menu.activeHeader)) {
                menu.activeHeader.searchLink = false;
            }
            if (!menu.configHeadMenu) {
                menu.configHeadMenu = true;
                var menus = [];
                if (!Ext.isEmpty(menu.activeHeader.comment)) {
                    menus.push({
                        text: '查看说明',
                        iconCls: 'extIcon extQuestion2',
                        onBeforeShow: function () {
                            if (Ext.isEmpty(menu.activeHeader.comment)) {
                                this.hide();
                            }
                            else {
                                this.show();
                            }
                        },
                        handler: function () {
                            FastExt.Dialog.showHtml(this, "查看【" + menu.activeHeader.text + "】的说明", menu.activeHeader.comment, false);
                        }
                    });
                }
                if (!FastExt.Menu.isSplitLineLast(menus)) {
                    menus.push("-");
                }
                if (FastExt.Base.toBool(grid.columnMenu.lookField, true) && FastExt.System.ManagerHandler.isSuperRole()) {
                    menus.push({
                        text: '查看列信息',
                        iconCls: 'extIcon extField',
                        onBeforeShow: function () {
                            if (FastExt.Base.toBool(menu.activeHeader.lookField, true)) {
                                this.show();
                            }
                            else {
                                this.hide();
                            }
                        },
                        handler: function () {
                            var info = {
                                name: menu.activeHeader.dataIndex,
                                text: menu.activeHeader.text,
                                width: menu.activeHeader.getWidth()
                            };
                            FastExt.Json.toFormatJsonHtml(FastExt.Json.objectToJson(info), false, function (result) {
                                FastExt.Dialog.showAlert("查看列信息", result);
                            });
                        }
                    });
                }
                if (FastExt.System.ManagerHandler.isSuperRole() && FastExt.System.ConfigHandler.isDebug() && !FastExt.Base.toBool(grid.entitySelect, false)) {
                    menus.push({
                        text: '查看列编辑器',
                        iconCls: 'extIcon extField',
                        handler: function () {
                            FastExt.Json.toFormatJsonHtml(FastExt.Json.objectToJson(menu.activeHeader.configField), false, function (result) {
                                FastExt.Dialog.showAlert("查看列编辑器", result);
                            });
                        }
                    });
                }
                if (!FastExt.Menu.isSplitLineLast(menus)) {
                    menus.push("-");
                }
                var modifyType = {
                    text: '数据修改',
                    iconCls: 'extIcon extEdit grayColor',
                    menu: []
                };
                if (FastExt.Base.toBool(grid.columnMenu.batchUpdate, true)) {
                    modifyType.menu.push({
                        text: '批量修改当前页面数据',
                        iconCls: 'extIcon extEdit',
                        onBeforeShow: function () {
                            var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                            if (!columnGrid.checkEditor()) {
                                this.hide();
                                return;
                            }
                            if (!FastExt.Base.toBool(menu.activeHeader.editable, true)) {
                                this.hide();
                                return;
                            }
                            if (FastExt.Base.toBool(menu.activeHeader.batchUpdate, true)) {
                                this.show();
                            }
                            else {
                                this.hide();
                            }
                        },
                        handler: function () {
                            FastExt.Grid.showBatchEditColumnMenu(menu.activeHeader);
                        }
                    });
                }
                if (FastExt.Base.toBool(grid.columnMenu.batchUpdateDB, true)) {
                    modifyType.menu.push({
                        text: '批量更新当前所有数据',
                        iconCls: 'extIcon extEdit',
                        onBeforeShow: function () {
                            var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                            if (!columnGrid.checkEditor()) {
                                this.hide();
                                return;
                            }
                            if (!FastExt.Base.toBool(menu.activeHeader.editable, true)) {
                                this.hide();
                                return;
                            }
                            if (FastExt.Base.toBool(menu.activeHeader.batchUpdateDB, true)) {
                                this.show();
                            }
                            else {
                                this.hide();
                            }
                        },
                        handler: function () {
                            FastExt.Grid.showBatchUpdateColumnWindow(menu.activeHeader);
                        }
                    });
                }
                if (FastExt.Base.toBool(grid.columnMenu.batchReplaceDB, true)) {
                    modifyType.menu.push({
                        text: '批量替换当前所有数据',
                        iconCls: 'extIcon extEdit',
                        onBeforeShow: function () {
                            var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                            if (!columnGrid.checkEditor()) {
                                this.hide();
                                return;
                            }
                            if (!FastExt.Base.toBool(menu.activeHeader.editable, true)) {
                                this.hide();
                                return;
                            }
                            if (FastExt.Base.toBool(menu.activeHeader.batchReplaceDB, true)) {
                                this.show();
                            }
                            else {
                                this.hide();
                            }
                        },
                        handler: function () {
                            FastExt.Grid.showBatchReplaceColumnWindow(menu.activeHeader);
                        }
                    });
                }
                if (modifyType.menu.length > 0) {
                    menus.push(modifyType);
                }
                var clearType = {
                    text: '数据清除',
                    iconCls: 'extIcon extClear grayColor',
                    menu: []
                };
                if (FastExt.Base.toBool(menu.activeHeader.batchClear, true)) {
                    clearType.menu.push({
                        text: '清除无效数据',
                        iconCls: 'extIcon extClear grayColor',
                        onBeforeShow: function () {
                            var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                            if (!columnGrid.checkDelete()) {
                                this.hide();
                                return;
                            }
                            if (FastExt.Base.toBool(menu.activeHeader.batchClear, true)) {
                                this.show();
                            }
                            else {
                                this.hide();
                            }
                        },
                        handler: function () {
                            FastExt.Dialog.showDeleteDataAlert("清除无效数据", "将清除属性【" + menu.activeHeader.configText + "】在【当前当前条件】下为空的所有无效数据！请您确定操作！", function () {
                                FastExt.Dialog.showWait("正在清除数据中……");
                                var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                                var params = {
                                    "entityCode": columnGrid.getStore().entity.entityCode,
                                    "field": menu.activeHeader.dataIndex,
                                    "menu": FastExt.Store.getStoreMenuText(columnGrid.getStore()),
                                    "storeId": columnGrid.getStore().getStoreCode(),
                                };
                                FastExt.Server.clearEntity(params, function (success, message) {
                                    FastExt.Dialog.hideWait();
                                    if (success) {
                                        FastExt.Grid.getColumnGrid(menu.activeHeader).getStore().loadPage(1);
                                    }
                                    FastExt.Dialog.showAlert("清理结果", message);
                                });
                            }, "清除");
                        }
                    });
                }
                if (FastExt.Base.toBool(menu.activeHeader.batchClearRepeat, true)) {
                    clearType.menu.push({
                        text: '清除重复数据-保留最新',
                        iconCls: 'extIcon extDelRepeat grayColor',
                        onBeforeShow: function () {
                            var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                            if (!columnGrid.checkDelete()) {
                                this.hide();
                                return;
                            }
                            if (FastExt.Base.toBool(menu.activeHeader.batchClearRepeat, true)) {
                                this.show();
                            }
                            else {
                                this.hide();
                            }
                        },
                        handler: function () {
                            FastExt.Dialog.showDeleteDataAlert("清除重复数据-保留最新", "将清除属性【" + menu.activeHeader.configText + "】在【当前当前条件】下重复的数据，并保留最新的一条数据！请您确定操作！", function () {
                                FastExt.Dialog.showWait("正在清除数据中……");
                                var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                                var params = {
                                    "entityCode": columnGrid.getStore().entity.entityCode,
                                    "field": menu.activeHeader.dataIndex,
                                    "type": 1,
                                    "menu": FastExt.Store.getStoreMenuText(columnGrid.getStore()),
                                    "storeId": columnGrid.getStore().getStoreCode()
                                };
                                FastExt.Server.clearRepeatEntity(params, function (success, message) {
                                    FastExt.Dialog.hideWait();
                                    if (success) {
                                        FastExt.Grid.getColumnGrid(menu.activeHeader).getStore().loadPage(1);
                                    }
                                    FastExt.Dialog.showAlert("清理结果", message);
                                });
                            }, "清除");
                        }
                    });
                    clearType.menu.push({
                        text: '清除重复数据-保留最早',
                        iconCls: 'extIcon extDelRepeat grayColor',
                        onBeforeShow: function () {
                            var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                            if (!columnGrid.checkDelete()) {
                                this.hide();
                                return;
                            }
                            if (FastExt.Base.toBool(menu.activeHeader.batchClearRepeat, true)) {
                                this.show();
                            }
                            else {
                                this.hide();
                            }
                        },
                        handler: function () {
                            FastExt.Dialog.showDeleteDataAlert("清除重复数据-保留最早", "将清除属性【" + menu.activeHeader.configText + "】在【当前当前条件】下重复的数据，并保留最早的一条数据！请您确定操作！", function () {
                                FastExt.Dialog.showWait("正在清除数据中……");
                                var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                                var params = {
                                    "entityCode": columnGrid.getStore().entity.entityCode,
                                    "field": menu.activeHeader.dataIndex,
                                    "type": 0,
                                    "menu": FastExt.Store.getStoreMenuText(columnGrid.getStore()),
                                    "storeId": columnGrid.getStore().getStoreCode()
                                };
                                FastExt.Server.clearRepeatEntity(params, function (success, message) {
                                    FastExt.Dialog.hideWait();
                                    if (success) {
                                        FastExt.Grid.getColumnGrid(menu.activeHeader).getStore().loadPage(1);
                                    }
                                    FastExt.Dialog.showAlert("清理结果", message);
                                });
                            }, "清除");
                        }
                    });
                }
                if (clearType.menu.length > 0) {
                    menus.push(clearType);
                }
                menus.push({
                    text: "数据对齐",
                    iconCls: 'extIcon extColumn grayColor',
                    menu: [
                        {
                            text: '向左对齐',
                            iconCls: 'extIcon extAlignLeft grayColor',
                            handler: function () {
                                menu.activeHeader.setAlignContent("left");
                            }
                        },
                        {
                            text: '居中对齐',
                            iconCls: 'extIcon extAlignCenter grayColor',
                            handler: function () {
                                menu.activeHeader.setAlignContent("center");
                            }
                        },
                        {
                            text: '向右对齐',
                            iconCls: 'extIcon extAlignRight grayColor',
                            handler: function () {
                                menu.activeHeader.setAlignContent("right");
                            }
                        }
                    ]
                });
                var dataBuild = {
                    text: '数据生成',
                    iconCls: 'extIcon extAnim grayColor',
                    menu: []
                };
                if (FastExt.Base.toBool(grid.columnMenu.batchRandom, true) && FastExt.System.ManagerHandler.isSuperRole()) {
                    dataBuild.menu.push({
                        text: '生成随机数据',
                        iconCls: 'extIcon extRandom',
                        onBeforeShow: function () {
                            var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                            if (!columnGrid.checkEditor()) {
                                this.hide();
                                return;
                            }
                            if (!FastExt.Base.toBool(menu.activeHeader.editable, true)) {
                                this.hide();
                                return;
                            }
                            if (FastExt.Base.toBool(menu.activeHeader.batchRandom, true)) {
                                this.show();
                            }
                            else {
                                this.hide();
                            }
                        },
                        handler: function () {
                            FastExt.Grid.showBatchEditColumnRandomWindow(menu.activeHeader);
                        }
                    });
                }
                if (dataBuild.menu.length > 0) {
                    menus.push(dataBuild);
                }
                if (grid.getStore().entity) {
                    if (FastExt.Base.toBool(grid.columnMenu.operation, true)) {
                        menus.push({
                            text: '数据计算',
                            iconCls: 'extIcon extMath',
                            onBeforeShow: function () {
                                var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                                if (columnGrid.fromRecycle) {
                                    this.hide();
                                    return;
                                }
                                if (FastExt.Base.toBool(menu.activeHeader.operation, false)) {
                                    this.show();
                                }
                                else {
                                    this.hide();
                                }
                            },
                            menu: [
                                {
                                    text: '计算总和',
                                    iconCls: 'extIcon extMath',
                                    handler: function () {
                                        FastExt.Grid.showColumnCompute(grid, menu.activeHeader, FastEnum.ComputeType.sum);
                                    }
                                },
                                {
                                    text: '计算平均值',
                                    iconCls: 'extIcon extMath',
                                    handler: function () {
                                        FastExt.Grid.showColumnCompute(grid, menu.activeHeader, FastEnum.ComputeType.avg);
                                    }
                                },
                                {
                                    text: '计算最大值',
                                    iconCls: 'extIcon extMath',
                                    handler: function () {
                                        FastExt.Grid.showColumnCompute(grid, menu.activeHeader, FastEnum.ComputeType.max);
                                    }
                                },
                                {
                                    text: '计算最小值',
                                    iconCls: 'extIcon extMath',
                                    handler: function () {
                                        FastExt.Grid.showColumnCompute(grid, menu.activeHeader, FastEnum.ComputeType.min);
                                    }
                                }
                            ]
                        });
                    }
                }
                if (!FastExt.Menu.isSplitLineLast(menus)) {
                    menus.push("-");
                }
                if (FastExt.Base.toBool(grid.columnMenu.cancelSort, true)) {
                    menus.push({
                        text: '取消排序',
                        iconCls: 'extIcon extCancelOrder',
                        onBeforeShow: function () {
                            var columnGrid = FastExt.Grid.getColumnGrid(menu.activeHeader);
                            if (columnGrid.fromRecycle) {
                                this.hide();
                                return;
                            }
                            if (FastExt.Base.toBool(menu.activeHeader.cancelSort, true)) {
                                this.show();
                            }
                            else {
                                this.hide();
                            }
                        },
                        handler: function () {
                            try {
                                var sortCollection = grid.getStore().getSorters();
                                if (sortCollection.count() === 0) {
                                    return;
                                }
                                sortCollection.removeByKey(menu.activeHeader.dataIndex);
                                grid.getStore().loadPage(1);
                                menu.activeHeader.sortDirection = null;
                                FastExt.Grid.refreshColumnStyle(menu.activeHeader);
                                grid.saveUIConfig(true);
                            }
                            catch (e) {
                                FastExt.Dialog.showException(e);
                            }
                        }
                    });
                }
                menu.insert(0, menus);
            }
            FastExt.Menu.fireMenuEvent(menu, "onBeforeShow");
            FastExt.Menu.refreshItem(menu);
        };
        return GridEvent;
    }());
    FastExt.GridEvent = GridEvent;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var GridMethod = (function () {
        function GridMethod() {
        }
        GridMethod.doRefreshPowerEnable = function () {
            try {
                var grid = this;
                if (Ext.isEmpty(grid.updateButtons) || grid.updateButtons.length === 0) {
                    grid.updateEnable = false;
                }
                else {
                    grid.updateEnable = FastExt.Component.countVisible(grid.updateButtons) > 0;
                }
                if (Ext.isEmpty(grid.addButtons) || grid.addButtons.length === 0) {
                    grid.addEnable = false;
                }
                else {
                    grid.addEnable = FastExt.Component.countVisible(grid.addButtons) > 0;
                }
                if (Ext.isEmpty(grid.deleteButtons) || grid.deleteButtons.length === 0) {
                    grid.deleteEnable = false;
                }
                else {
                    grid.deleteEnable = FastExt.Component.countVisible(grid.deleteButtons) > 0;
                }
                if (!grid.checkAdd()) {
                    var checkAdds = grid.query("[checkAddPower=true]");
                    for (var i = 0; i < checkAdds.length; i++) {
                        checkAdds[i].setHidden(true);
                        checkAdds[i].setDisabled(true);
                    }
                }
                if (!grid.checkDelete()) {
                    var checkDeletes = grid.query("[checkDeletePower=true]");
                    for (var i = 0; i < checkDeletes.length; i++) {
                        checkDeletes[i].setHidden(true);
                        checkDeletes[i].setDisabled(true);
                    }
                }
                if (!grid.checkUpdate()) {
                    var checkUpdates = grid.query("[checkUpdatePower=true]");
                    for (var i = 0; i < checkUpdates.length; i++) {
                        checkUpdates[i].setHidden(true);
                        checkUpdates[i].setDisabled(true);
                    }
                }
                if (!grid.operate.deleteAllData) {
                    var checkDeleteAllPower = grid.query("[checkDeleteAllPower=true]");
                    for (var i = 0; i < checkDeleteAllPower.length; i++) {
                        checkDeleteAllPower[i].setHidden(true);
                        checkDeleteAllPower[i].setDisabled(true);
                    }
                }
                if (!grid.operate.copyData) {
                    var checkCopyPower = grid.query("[checkCopyPower=true]");
                    for (var i = 0; i < checkCopyPower.length; i++) {
                        checkCopyPower[i].setHidden(true);
                        checkCopyPower[i].setDisabled(true);
                    }
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doRefreshSelect = function () {
            try {
                var grid_2 = this;
                if (grid_2.selectButtons) {
                    Ext.each(grid_2.selectButtons, function (item, index) {
                        if (item) {
                            var selectSize = grid_2.getSelection().length;
                            if (grid_2.selectCount) {
                                selectSize = grid_2.selectCount;
                            }
                            var checkSelect = item.checkSelect;
                            var disabled = false;
                            if (Ext.isFunction(checkSelect)) {
                                disabled = !checkSelect(grid_2.getSelection());
                            }
                            else {
                                if (checkSelect === "multiple" || checkSelect === "m" || checkSelect > 1) {
                                    disabled = !(selectSize > 0);
                                }
                                else if (checkSelect === "radio" || checkSelect === "r" || checkSelect === "single" || checkSelect === "s" || checkSelect === 1) {
                                    disabled = !(selectSize === 1);
                                }
                            }
                            FastExt.Button.setDisabled(item, disabled);
                        }
                    });
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doRefreshToolPaging = function () {
            var grid = this;
            var pagingToolBar = grid.child('#pagingToolBar');
            if (pagingToolBar) {
                pagingToolBar.selectCount = grid.getSelection().length;
                pagingToolBar.updateInfo();
            }
        };
        GridMethod.doRecordSelect = function () {
            try {
                var grid = this;
                if (FastExt.Base.toBool(FastExt.Cache.memory["holdGridRecordSelectHistory"], false)) {
                    grid.restoreSelect();
                    return;
                }
                if (grid.selectRecordHistoryShowing) {
                    for (var i = 0; i < grid.selectRecordHistoryShowing.length; i++) {
                        var record = grid.selectRecordHistoryShowing[i];
                        grid.removeRecordHistory(record);
                    }
                }
                grid.selectRecordHistoryShowing = [];
                var currSelection = grid.getSelectionModel().getSelection(true);
                for (var i = 0; i < currSelection.length; i++) {
                    var record = currSelection[i];
                    if (grid.hasRecordHistory(record)) {
                        continue;
                    }
                    grid.getSelectRecordHistory().push(record);
                    grid.selectRecordHistoryShowing.push(record);
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doHasRecordHistory = function (record) {
            try {
                var grid = this;
                var entity = grid.getStore().entity;
                if (entity) {
                    for (var i = 0; i < grid.getSelectRecordHistory().length; i++) {
                        var currRecord = grid.getSelectRecordHistory()[i];
                        if (FastExt.Store.isSameRecordByEntity(entity, currRecord, record)) {
                            return true;
                        }
                    }
                }
            }
            catch (e) {
                console.error(e);
            }
            return false;
        };
        GridMethod.doRemoveRecordHistory = function (record) {
            try {
                var grid = this;
                var entity = grid.getStore().entity;
                if (entity) {
                    var waitRemoveIndex = [];
                    for (var i = 0; i < grid.getSelectRecordHistory().length; i++) {
                        var currRecord = grid.getSelectRecordHistory()[i];
                        if (FastExt.Store.isSameRecordByEntity(entity, currRecord, record)) {
                            waitRemoveIndex.push(i);
                        }
                    }
                    for (var i = 0; i < waitRemoveIndex.length; i++) {
                        grid.getSelectRecordHistory().splice(waitRemoveIndex[i], 1);
                    }
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doRestoreSelect = function () {
            var grid = this;
            try {
                if (grid.selectHistoryConfig) {
                    if (parseInt(grid.selectHistoryConfig.state) === 0 && !FastExt.Base.toBool(grid.closeSelectHistoryLoad, false)) {
                        grid.clearSelectRecordHistory();
                        return;
                    }
                }
                grid.selectRecordHistoryShowing = [];
                var entity_1 = grid.getStore().entity;
                if (entity_1) {
                    var _loop_1 = function (i) {
                        var dataRecord = grid.getSelectRecordHistory()[i];
                        grid.getStore().each(function (record, index) {
                            if (FastExt.Store.isSameRecordByEntity(entity_1, dataRecord, record)) {
                                grid.selectRecordHistoryShowing.push(record);
                            }
                        });
                    };
                    for (var i = 0; i < grid.getSelectRecordHistory().length; i++) {
                        _loop_1(i);
                    }
                }
                if (grid.selectRecordHistoryShowing.length > 0) {
                    grid.getSelectionModel().select(grid.selectRecordHistoryShowing);
                    grid.refreshSelect();
                }
            }
            finally {
                grid.closeSelectHistoryLoad = false;
            }
        };
        GridMethod.doGetSelectRecordHistory = function () {
            try {
                var grid = this;
                if (!grid.selectRecordHistory) {
                    grid.selectRecordHistory = [];
                    var memoryCache = FastExt.Cache.memory["GridSelectHistory" + grid.code];
                    if (memoryCache && Ext.isArray(memoryCache)) {
                        grid.selectRecordHistory = Ext.Array.clone(memoryCache);
                    }
                }
                return grid.selectRecordHistory;
            }
            catch (e) {
                console.error(e);
            }
            return [];
        };
        GridMethod.doClearSelectRecordHistory = function () {
            try {
                var grid = this;
                grid.selectRecordHistory = [];
                if (Ext.isFunction(grid.refreshSelectHistoryCount)) {
                    grid.refreshSelectHistoryCount();
                }
                FastExt.Cache.memory["GridSelectHistory" + grid.code] = null;
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doRefreshSelectHistoryCount = function () {
            try {
                var grid = this;
                if (grid.ownerCt) {
                    var countField = grid.ownerCt.query("[selectHistoryCount=true]");
                    for (var i = 0; i < countField.length; i++) {
                        if (Ext.isFunction(countField[i].setValue)) {
                            countField[i].setValue(grid.getSelectRecordHistory().length);
                        }
                    }
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doRefreshDetailsPanel = function () {
            var grid = this;
            if (FastExt.Base.toBool(grid.refreshingDetailsPanel, false)) {
                return;
            }
            try {
                grid.refreshingDetailsPanel = true;
                if (!grid.detailsPanels || grid.detailsPanels.length === 0) {
                    return;
                }
                for (var i = 0; i < grid.detailsPanels.length; i++) {
                    var detailsPanel = grid.detailsPanels[i];
                    if (!detailsPanel) {
                        continue;
                    }
                    if (detailsPanel.fromWindow) {
                        if (Ext.isFunction(detailsPanel.setRecord)) {
                            detailsPanel.setRecord(grid);
                        }
                    }
                    else {
                        if (grid.operate && grid.operate.autoDetails) {
                            if (Ext.isFunction(detailsPanel.setRecord)) {
                                detailsPanel.setRecord(grid);
                            }
                        }
                        else {
                            detailsPanel.close();
                        }
                    }
                }
            }
            finally {
                grid.refreshingDetailsPanel = false;
            }
        };
        GridMethod.doSaveUIConfig = function (silence) {
            try {
                var grid_3 = this;
                if (!FastExt.Base.toBool(grid_3.firstLoadedData, false)) {
                    return;
                }
                if (silence) {
                    FastExt.Server.setSilence(true);
                }
                var entity_2 = grid_3.getStore().entity;
                FastExt.Grid.saveGridColumn(grid_3).then(function () {
                    FastExt.Grid.saveGridButton(grid_3, entity_2).then(function () {
                        FastExt.Server.setSilence(false);
                    });
                });
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doHideEmptyTip = function () {
            var grid = this;
            FastExt.Lottie.unloadJsonAnimById(grid.getId() + "-empty-anim");
            $("#" + grid.getId() + "-empty-tip").remove();
        };
        GridMethod.doShowEmptyTip = function () {
            try {
                var grid = this;
                if (!grid.body) {
                    return;
                }
                grid.hideEmptyTip();
                if (grid.getStore() && grid.getStore().getCount() > 0) {
                    return;
                }
                if (Ext.isEmpty(grid.emptyConfig)) {
                    grid.emptyConfig = {
                        lottie: "base/lottie/empty_data.json",
                        width: "40%",
                        height: "40%",
                        opacity: 0.8,
                        filter: "",
                    };
                }
                var emptyHtml = "<div id='" + grid.getId() + "-empty-tip' style='" +
                    "pointer-events: none;" +
                    "position: absolute;" +
                    "top: 0;left: 0;right: 0;bottom: 0;" +
                    "z-index: 9;" +
                    "display: flex;" +
                    "align-items: center;" +
                    "justify-content: center;" +
                    "flex-direction: column;'>" +
                    "<div id='" + grid.getId() + "-empty-anim' style='width:" + grid.emptyConfig.width + ";height:" + grid.emptyConfig.height + ";filter: " + grid.emptyConfig.filter + ";opacity: " + grid.emptyConfig.opacity + ";'>" +
                    "</div>" +
                    "</div>";
                $("#" + grid.body.el.id).append($(emptyHtml));
                FastExt.Lottie.loadJsonAnimByEl($("#" + grid.getId() + "-empty-anim")[0], grid.emptyConfig.lottie);
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doCheckEditor = function () {
            var grid = this;
            if (!FastExt.Base.toBool(grid.updateEnable, true)) {
                return false;
            }
            if (FastExt.Base.toBool(grid.fromRecycle, false)) {
                return false;
            }
            return true;
        };
        GridMethod.doCheckAdd = function (checkAddButton) {
            var grid = this;
            if (Ext.isEmpty(checkAddButton)) {
                checkAddButton = false;
            }
            if (!checkAddButton && FastExt.System.ManagerHandler.isSuperRole()) {
                return true;
            }
            return grid.addEnable;
        };
        GridMethod.doCheckDelete = function (checkDeleteButton) {
            var grid = this;
            if (Ext.isEmpty(checkDeleteButton)) {
                checkDeleteButton = false;
            }
            if (!checkDeleteButton && FastExt.System.ManagerHandler.isSuperRole()) {
                return true;
            }
            return grid.deleteEnable;
        };
        GridMethod.doCheckUpdate = function (checkUpdateButton) {
            var grid = this;
            if (Ext.isEmpty(checkUpdateButton)) {
                checkUpdateButton = false;
            }
            if (!checkUpdateButton && FastExt.System.ManagerHandler.isSuperRole()) {
                return true;
            }
            return FastExt.Base.toBool(grid.updateEnable, true);
        };
        GridMethod.doCheckRefreshTimer = function (toast) {
            try {
                var grid = this;
                if (!grid.timerConfig) {
                    return;
                }
                if (parseInt(grid.timerConfig["state"]) === 0) {
                    grid.stopRefreshTimer();
                    if (toast) {
                        FastExt.Dialog.toast("已关闭定时器！");
                    }
                }
                else {
                    grid.startRefreshTimer();
                    if (toast) {
                        FastExt.Dialog.toast("已启动定时器！");
                    }
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doStartRefreshTimer = function () {
            try {
                var grid_4 = this;
                if (grid_4.timerTimeout) {
                    clearTimeout(grid_4.timerTimeout);
                }
                if (!grid_4.timerConfig) {
                    return;
                }
                var pagingToolBar = grid_4.child('#pagingToolBar');
                if (pagingToolBar) {
                    var timerBtn = pagingToolBar.down("button[toolType=timerBtn]");
                    if (timerBtn) {
                        if (parseInt(grid_4.timerConfig["state"]) === 1) {
                            timerBtn.setIconCls(timerBtn.baseIconCls + " redColor");
                            timerBtn.setUserCls("redBorder");
                        }
                        else {
                            timerBtn.setIconCls(timerBtn.baseIconCls + " grayColor");
                            timerBtn.setUserCls("");
                        }
                    }
                }
                if (parseInt(grid_4.timerConfig["state"]) === 0) {
                    return;
                }
                grid_4.timerTimeout = setTimeout(function () {
                    if (!grid_4) {
                        return;
                    }
                    if (!grid_4.timerConfig) {
                        return;
                    }
                    grid_4.disabledLoadMaskOnce = parseInt(grid_4.timerConfig["silence"]) === 1;
                    if (grid_4.getStore()) {
                        grid_4.getStore().reload();
                        grid_4.startRefreshTimer();
                    }
                }, parseInt(grid_4.timerConfig["value"]) * 1000);
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doStopRefreshTimer = function () {
            var grid = this;
            try {
                if (grid.timerTimeout) {
                    clearTimeout(grid.timerTimeout);
                }
                if (grid.timerConfig) {
                    grid.timerConfig.state = 0;
                }
                var pagingToolBar = grid.child('#pagingToolBar');
                if (pagingToolBar) {
                    var timerBtn = pagingToolBar.down("button[toolType=timerBtn]");
                    if (timerBtn) {
                        if (parseInt(grid.timerConfig["state"]) === 1) {
                            timerBtn.setIconCls(timerBtn.baseIconCls + " redColor");
                            timerBtn.setUserCls("redBorder");
                        }
                        else {
                            timerBtn.setIconCls(timerBtn.baseIconCls + " grayColor");
                            timerBtn.setUserCls("");
                        }
                    }
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        GridMethod.doShowDataLog = function (obj) {
            var grid = this;
            var data = grid.getSelection()[0];
            var entityObj = eval("new ExtSystemDataLogEntity()");
            entityObj.showWinList(obj, "操作日志", {
                dataType: grid.getStore().entity.tableName,
                dataId: data.get(grid.getStore().entity.idProperty[0]),
            }, true);
        };
        return GridMethod;
    }());
    FastExt.GridMethod = GridMethod;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Grid = (function () {
        function Grid() {
        }
        Grid.onGridInitComponent = function (grid) {
            if (FastExt.Base.toBool(grid.fastGridInited, false)) {
                return;
            }
            grid.fastGridInited = true;
            var gridView = FastExt.Grid.getGridView(grid);
            if (gridView) {
                gridView.rowHeight = FastExt.Grid.getRowMinHeight();
            }
            grid.bufferedRenderer = true;
            grid.firstLoadedData = false;
            if (grid.entityList) {
                if (grid.getStore()) {
                    grid.getStore().grid = grid;
                    if (grid.getStore().where) {
                        grid.fromRecycle = grid.getStore().where['^fromRecycle'];
                    }
                }
                FastExt.Grid.configGridDefault(grid);
                FastExt.Grid.configGridMethod(grid);
                FastExt.Grid.configGridContextMenu(grid);
                FastExt.Grid.configGridListeners(grid);
                FastExt.Grid.configNormalGridListeners(grid);
            }
            if (grid.dataList) {
                FastExt.Grid.configGridMethod(grid);
                FastExt.Grid.configNormalGridListeners(grid);
            }
        };
        Grid.onGridAfterRender = function (grid) {
            if (FastExt.Base.toBool(grid.fastGridAfterRendered, false)) {
                return;
            }
            grid.fastGridAfterRendered = true;
            if (grid.entityList) {
                FastExt.Grid.configGridHistory(grid);
                var menuContainer = grid.up("[menuContainer=true]");
                if (menuContainer) {
                    grid.menuPanelList = true;
                }
                var windowContainer = grid.up("window");
                if (windowContainer && !FastExt.Base.toBool(windowContainer.shown, false)) {
                    windowContainer.on("show", FastExt.Grid.startLoadData, grid, { single: true });
                }
                else {
                    FastExt.Grid.startLoadData.apply(grid);
                }
            }
        };
        Grid.startLoadData = function () {
            var grid = this;
            FastExt.Grid.configGridLayout(grid).then(function () {
                if (!FastExt.System.InitHandler.isSilenceGlobalSaving()) {
                    if (Ext.isFunction(grid.refreshPowerEnable)) {
                        grid.refreshPowerEnable();
                    }
                    FastExt.Grid.configGridTip(grid);
                    FastExt.Grid.configDefaultToolBar(grid);
                    FastExt.Grid.refreshGridNumberColumn(grid);
                }
                grid.setLoading(false);
                grid.getStore().grid = grid;
                if (FastExt.System.InitHandler.isSilenceGlobalSaving()) {
                    grid.firstLoadedData = true;
                    grid.getStore().loadData([FastExt.Grid.buildNullData(grid)]);
                    var menuContainer = grid.up("[menuContainer=true]");
                    if (menuContainer) {
                        menuContainer.close();
                    }
                    FastExt.System.InitHandler.doNextSilenceMenu();
                }
                else if (FastExt.Power.isPower()) {
                    grid.firstLoadedData = true;
                    grid.getStore().loadData([FastExt.Grid.buildTempData(grid)]);
                }
                else {
                    grid.firstLoadedData = true;
                    if (!grid.getStore().isLoaded()) {
                        grid.getStore().loadPage(1);
                        grid.checkRefreshTimer(false);
                    }
                }
            });
        };
        Grid.getGridView = function (grid) {
            var view = grid.getView();
            if (view) {
                if (view.$className === "Ext.grid.locking.View") {
                    return view.normalView;
                }
                return view;
            }
            return null;
        };
        Grid.getRowMinHeight = function () {
            return FastExt.System.ConfigHandler.getGridRowHeight();
        };
        Grid.buildNullData = function (grid) {
            var data = {};
            if (!grid) {
                return data;
            }
            Ext.each(grid.getColumns(), function (column, index) {
                if (!Ext.isEmpty(column.dataIndex)) {
                    data[column.dataIndex] = null;
                }
            });
            return data;
        };
        Grid.buildTempData = function (grid) {
            var data = {};
            if (!grid) {
                return data;
            }
            Ext.each(grid.getColumns(), function (column, index) {
                if (!Ext.isEmpty(column.dataIndex)) {
                    data[column.dataIndex] = "模拟数据";
                    if (FastExt.Grid.isDateColumn(column)) {
                        data[column.dataIndex] = Ext.Date.format(new Date(), "Y-m-d H:i:s");
                    }
                    else if (FastExt.Grid.isFilesColumn(column)) {
                        data[column.dataIndex] = "[]";
                    }
                }
            });
            return data;
        };
        Grid.addGridContextMenu = function (grid, target, index) {
            if (grid.contextMenu && target) {
                if (!Ext.isFunction(grid.contextMenu.getXType)) {
                    var menu = Ext.create('Ext.menu.Menu', {
                        scrollToHidden: true,
                        items: []
                    });
                    if (Ext.isArray(grid.contextMenu)) {
                        menu.add(grid.contextMenu);
                    }
                    grid.contextMenu = menu;
                }
                if (!Ext.isEmpty(index)) {
                    grid.contextMenu.insert(index, target);
                }
                else {
                    grid.contextMenu.add(target);
                }
            }
        };
        Grid.configGridDefault = function (grid) {
            if (!grid.selectButtons) {
                grid.selectButtons = [];
            }
            grid.tipHelp = false;
        };
        Grid.configGridHistory = function (grid) {
            if (!grid.selectHistoryConfig) {
                grid.selectHistoryConfig = {
                    "state": 0,
                    "cache": 0,
                    "count": 0,
                };
                if (FastExt.Base.toBool(grid.entitySelect, false)) {
                    grid.selectHistoryConfig["state"] = 1;
                    grid.selectHistoryConfig["cache"] = 1;
                }
                FastExt.Grid.checkHistoryConfig(grid);
            }
        };
        Grid.configGridContextMenu = function (grid) {
            var index = 0;
            var formatText = function (text, width) {
                return "&nbsp;<div style='" +
                    "background: #e3e3e3;" +
                    "border-radius: 3px;" +
                    "display:inline-flex;" +
                    "line-height:20px;" +
                    "'>&nbsp;<div style='" +
                    "color: black;" +
                    "overflow: hidden;" +
                    "white-space: nowrap;" +
                    "text-overflow: ellipsis;" +
                    "font-size:smaller;" +
                    "max-width:" + width + "px;" +
                    "'>" + text + "</div>&nbsp;</div>&nbsp;";
            };
            if (grid.getStore().entity) {
                FastExt.Grid.addGridContextMenu(grid, {
                    iconCls: 'extIcon extDetails editColor',
                    text: "查看详情",
                    handler: function (obj, event) {
                        FastExt.Grid.showGridSelectDetailsWindow(obj, grid);
                    }
                }, index++);
            }
            if (grid.getStore().entity && grid.getStore().entity.data_log) {
                FastExt.Grid.addGridContextMenu(grid, {
                    iconCls: 'extIcon extHistory color30',
                    text: "操作日志",
                    handler: function (obj, event) {
                        grid.showDataLog(this);
                    }
                }, index++);
            }
            FastExt.Grid.addGridContextMenu(grid, "-", index++);
            if (FastExt.System.ManagerHandler.isSuperRole()) {
                FastExt.Grid.addGridContextMenu(grid, {
                    iconCls: 'extIcon extSee editColor',
                    text: "查看数据结构",
                    handler: function (obj, event) {
                        var menu = grid.contextMenu;
                        var record = menu.record;
                        FastExt.Dialog.showJson(this, "查看原始数据结构", FastExt.Json.objectToJson(record.data));
                    }
                }, index++);
            }
            FastExt.Grid.addGridContextMenu(grid, {
                iconCls: 'extIcon extCopy2',
                text: "复制数据",
                menu: [
                    {
                        text: '复制单元格数据',
                        iconCls: 'extIcon extCopy2',
                        onBeforeShow: function () {
                            var menu = grid.contextMenu;
                            var record = menu.record;
                            var fieldName = menu.cellContext.column.dataIndex;
                            if (FastExt.Grid.isFileColumn(menu.cellContext.column)
                                || FastExt.Grid.isFilesColumn(menu.cellContext.column)
                                || FastExt.Grid.isContentColumn(menu.cellContext.column)
                                || Ext.isEmpty(record.get(fieldName))) {
                                this.hide();
                                this.setText("复制数据");
                                return;
                            }
                            this.setText("复制" + formatText($(menu.cellTd).text(), $(menu.cellTd).outerWidth(true)));
                            this.show();
                        },
                        handler: function () {
                            var menu = grid.contextMenu;
                            FastExt.Base.copyToBoard($(menu.cellTd).text().trim());
                            FastExt.Dialog.toast("复制成功！");
                        }
                    },
                    {
                        text: '复制整行数据',
                        iconCls: 'extIcon extCopy2',
                        handler: function () {
                            var menu = grid.contextMenu;
                            var content = "";
                            $(menu.tr).find("td").each(function () {
                                content += $(this).text() + "\t";
                            });
                            FastExt.Base.copyToBoard(content);
                            FastExt.Dialog.toast("复制成功！");
                        }
                    },
                    {
                        text: '复制单元格实际数据',
                        iconCls: 'extIcon extCopy2',
                        handler: function () {
                            var menu = grid.contextMenu;
                            var record = menu.record;
                            var fieldName = menu.cellContext.column.dataIndex;
                            var fieldValue = record.get(fieldName);
                            if (Ext.isEmpty(fieldValue)) {
                                FastExt.Dialog.showAlert("系统提醒", "复制失败，暂无实际数据！");
                                return;
                            }
                            if (Ext.isArray(record.get(fieldName))) {
                                FastExt.Base.copyToBoard(Ext.encode(record.get(fieldName)));
                            }
                            else {
                                FastExt.Base.copyToBoard(record.get(fieldName));
                            }
                            FastExt.Dialog.toast("复制成功！");
                        }
                    }
                ]
            }, index++);
            FastExt.Grid.addGridContextMenu(grid, "-", index++);
            FastExt.Grid.addGridContextMenu(grid, {
                iconCls: 'extIcon extEdit editColor',
                text: "编辑单元格数据",
                onBeforeShow: function () {
                    var menu = this.ownerCt;
                    var record = menu.record;
                    var fieldName = menu.cellContext.column.dataIndex;
                    if (Ext.isEmpty(fieldName) || grid.getSelection().length !== 1 || !grid.checkEditor()) {
                        this.hide();
                        return;
                    }
                    if (!FastExt.Base.toBool(menu.cellContext.column.editable, true)) {
                        this.hide();
                        return;
                    }
                    if (!menu.cellContext.column.field) {
                        if (!menu.cellContext.column.hasListener("dblclick")) {
                            this.hide();
                        }
                    }
                    this.show();
                    if (!FastExt.Grid.isContentColumn(menu.cellContext.column)) {
                        if (!Ext.isEmpty(record.get(fieldName)) && $(menu.cellTd).text().length > 0) {
                            this.setText("编辑" + formatText($(menu.cellTd).text(), $(menu.cellTd).outerWidth(true)));
                            return;
                        }
                    }
                    this.setText("编辑单元格数据");
                },
                handler: function () {
                    var menu = this.ownerCt;
                    if (menu.cellContext.column.field) {
                        grid.doEdit = true;
                        grid.findPlugin('cellediting').startEditByPosition(menu.cellContext);
                    }
                    else {
                        menu.cellContext.column.fireEvent("dblclick", grid, this, menu.rowIndex);
                    }
                }
            }, index++);
            if (grid.getStore().entity) {
                FastExt.Grid.addGridContextMenu(grid, {
                    iconCls: 'extIcon extSearch searchColor',
                    text: "查找单元格数据",
                    onBeforeShow: function () {
                        var menu = this.ownerCt;
                        var record = menu.record;
                        var fieldName = menu.cellContext.column.dataIndex;
                        if (Ext.isEmpty(fieldName)
                            || !FastExt.Grid.canColumnSearch(menu.cellContext.column)
                            || FastExt.Grid.isContentColumn(menu.cellContext.column)
                            || grid.getSelection().length !== 1) {
                            this.hide();
                        }
                        else {
                            this.show();
                            if (!Ext.isEmpty(record.get(fieldName))) {
                                this.setText("查找" + formatText($(menu.cellTd).text(), $(menu.cellTd).outerWidth(true)));
                            }
                            else {
                                this.setText("查找单元格数据");
                            }
                        }
                    },
                    handler: function () {
                        var menu = this.ownerCt;
                        var record = menu.record;
                        var fieldName = menu.cellContext.column.dataIndex;
                        menu.cellContext.column.searchValue(record.get(fieldName));
                    }
                }, index++);
                FastExt.Grid.addGridContextMenu(grid, {
                    iconCls: 'extIcon extClear',
                    text: "清空单元格数据",
                    onBeforeShow: function () {
                        var menu = this.ownerCt;
                        var record = menu.record;
                        var fieldName = menu.cellContext.column.dataIndex;
                        if (Ext.isEmpty(fieldName) || grid.getSelection().length !== 1 || !grid.checkEditor()) {
                            this.hide();
                        }
                        else {
                            this.show();
                            if (!FastExt.Grid.isContentColumn(menu.cellContext.column)) {
                                if (!Ext.isEmpty(record.get(fieldName)) && $(menu.cellTd).text().length > 0) {
                                    this.setText("清空" + formatText($(menu.cellTd).text(), $(menu.cellTd).outerWidth(true)));
                                    return;
                                }
                            }
                            this.setText("清空单元格数据");
                        }
                    },
                    handler: function () {
                        var me = this;
                        var menu = me.ownerCt;
                        if (!grid.getStore().entity) {
                            FastExt.Dialog.toast("当前列表不支持此功能！");
                            return;
                        }
                        if (!grid.getStore().entity.idProperty) {
                            FastExt.Dialog.toast("当前列表不支持此功能！");
                            return;
                        }
                        Ext.Msg.confirm("系统提醒", "您确定" + me.text + "吗？", function (button, text) {
                            if (button === "yes") {
                                var record = menu.record;
                                var fieldName = menu.cellContext.column.dataIndex;
                                if (Ext.isObject(menu.cellContext.column.field)) {
                                    if (!Ext.isEmpty(menu.cellContext.column.field.name)) {
                                        fieldName = menu.cellContext.column.field.name;
                                    }
                                }
                                var params = { "entityCode": grid.getStore().entity.entityCode };
                                for (var j = 0; j < grid.getStore().entity.idProperty.length; j++) {
                                    var idName = grid.getStore().entity.idProperty[j];
                                    params['data.' + idName] = record.get(idName);
                                }
                                params["menu"] = grid.getStore().entity.comment;
                                params['data.' + fieldName] = "<null>";
                                FastExt.Dialog.showWait("正在清空中……");
                                FastExt.Server.updateEntity(params, function (success, message) {
                                    FastExt.Dialog.hideWait();
                                    if (success) {
                                        FastExt.Dialog.toast("清除成功！");
                                        grid.getStore().reload();
                                    }
                                    else {
                                        Ext.Msg.alert('系统提醒', message);
                                    }
                                });
                            }
                        });
                    }
                }, index++);
            }
            FastExt.Grid.addGridContextMenu(grid, "-", index++);
        };
        Grid.configGridHeadMenu = function (grid) {
            if (!FastExt.Base.toBool(grid.columnContextMenu, true)) {
                return;
            }
            if (!grid.columnHeadMenu) {
                return;
            }
            if (!grid.columnMenu) {
                grid.columnMenu = new FastExt.GridColumnMenu();
            }
            if (!grid.columnMenu) {
                return;
            }
            var menu = grid.columnHeadMenu;
            menu.scrollToHidden = true;
            menu.on("beforeshow", FastExt.GridEvent.onFastHeadMenuBeforeShow, grid);
        };
        Grid.configDefaultToolBar = function (grid) {
            if (!grid) {
                return;
            }
            var toolbar = grid.down("toolbar[dock='top']");
            try {
                if (toolbar) {
                    if (FastExt.Base.toBool(grid.fromRecycle, false)) {
                        toolbar.setHidden(true);
                        return;
                    }
                    var addIndex = 0;
                    if (grid.getStore().entity && grid.getStore().entity.data_log) {
                        toolbar.insert(addIndex++, {
                            xtype: 'button',
                            text: '操作日志',
                            checkSelect: 1,
                            animMinMax: true,
                            iconCls: 'extIcon extHistory color30',
                            handler: function () {
                                grid.showDataLog(this);
                            }
                        });
                    }
                    if (!FastExt.Power.isPower()) {
                        if (grid.getStore().entity) {
                            if (FastExt.Base.toBool(grid.showDetailsButton, true)
                                && FastExt.Base.toBool(grid.operate.showDetailsButton, true)) {
                                toolbar.insert(addIndex++, {
                                    xtype: 'button',
                                    text: '查看详情',
                                    checkSelect: 1,
                                    animMinMax: true,
                                    contextMenu: false,
                                    iconCls: 'extIcon extDetails searchColor',
                                    handler: function () {
                                        FastExt.Grid.showGridSelectDetailsWindow(this, grid);
                                    }
                                });
                            }
                            if (FastExt.Base.toBool(grid.showUpdateButton, true)
                                && FastExt.Base.toBool(grid.operate.showUpdateButton, true)
                                && grid.checkUpdate(true)) {
                                toolbar.insert(addIndex++, {
                                    xtype: 'button',
                                    text: '修改数据',
                                    checkSelect: 1,
                                    checkUpdatePower: true,
                                    contextMenu: false,
                                    animMinMax: true,
                                    iconCls: 'extIcon extEdit editColor',
                                    handler: function () {
                                        FastExt.Grid.showDataEditorWin(this, grid);
                                    }
                                });
                            }
                            if (addIndex > 0) {
                                toolbar.insert(addIndex, "-");
                            }
                        }
                    }
                    if (!grid.operate) {
                        return;
                    }
                    if (!FastExt.Base.toBool(grid.defaultToolBar, true)) {
                        return;
                    }
                    var moreBtn = {
                        xtype: 'button',
                        text: '更多操作',
                        iconCls: 'extIcon extMore grayColor',
                        menu: []
                    };
                    if (FastExt.Base.toBool(grid.operate.excelOut, true)) {
                        if (!FastExt.Menu.isSplitLineLast(moreBtn.menu)) {
                            moreBtn.menu.push("-");
                        }
                        moreBtn.menu.push({
                            text: '导出Excel',
                            iconCls: 'extIcon extExcel',
                            handler: function () {
                                FastExt.System.InitHandler.checkMaxMemory(function () {
                                    FastExt.Grid.exportGrid(grid);
                                });
                            }
                        });
                    }
                    if (FastExt.Base.toBool(grid.operate.excelIn, true) && grid.checkAdd()) {
                        moreBtn.menu.push({
                            text: '导入Excel',
                            iconCls: 'extIcon extExcel',
                            menu: [
                                {
                                    text: '下载模板',
                                    iconCls: 'extIcon extExcelModule searchColor',
                                    handler: function () {
                                        FastExt.Grid.downExcelModel(grid);
                                    }
                                },
                                {
                                    text: '导入数据',
                                    iconCls: 'extIcon extExcelImport searchColor',
                                    handler: function () {
                                        var _this = this;
                                        FastExt.System.InitHandler.checkMaxMemory(function () {
                                            var params = { entityCode: grid.getStore().entity.entityCode };
                                            FastExt.Grid.importExcel(_this, params, grid.importExcelItems).then(function (data) {
                                                if (data) {
                                                    grid.getStore().loadPage(1);
                                                }
                                            });
                                        });
                                    }
                                }
                            ]
                        });
                        moreBtn.menu.push("-");
                    }
                    if (FastExt.System.ManagerHandler.isSuperRole()) {
                        if (!FastExt.Menu.isSplitLineLast(moreBtn.menu)) {
                            moreBtn.menu.push("-");
                        }
                        if (FastExt.Base.toBool(grid.operate.downloadData, true)) {
                            moreBtn.menu.push({
                                iconCls: 'extIcon extDownload searchColor',
                                text: '下载数据',
                                handler: function () {
                                    FastExt.System.InitHandler.checkMaxMemory(function () {
                                        FastExt.Grid.downDataGrid(grid);
                                    });
                                }
                            });
                        }
                        if (FastExt.Base.toBool(grid.operate.uploadData, true)) {
                            moreBtn.menu.push({
                                iconCls: 'extIcon extUpload searchColor',
                                text: '上传数据',
                                handler: function () {
                                    var _this = this;
                                    FastExt.System.InitHandler.checkMaxMemory(function () {
                                        var params = { entityCode: grid.getStore().entity.entityCode };
                                        FastExt.Grid.loadDataGrid(_this, params).then(function (data) {
                                            if (data) {
                                                grid.getStore().loadPage(1);
                                            }
                                        });
                                    });
                                }
                            });
                        }
                        moreBtn.menu.push("-");
                        if (grid.getStore().entity) {
                            moreBtn.menu.push({
                                iconCls: 'extIcon extSee searchColor',
                                text: '查看实体',
                                handler: function () {
                                    FastExt.Dialog.showJson(this, "查看实体信息", JSON.stringify(Object.getPrototypeOf(grid.getStore().entity)));
                                }
                            });
                        }
                        if (grid.getStore().entity) {
                            moreBtn.menu.push({
                                iconCls: 'extIcon extColumn searchColor',
                                text: '查看所有列信息',
                                handler: function () {
                                    if (!grid) {
                                        FastExt.Dialog.toast("容器无效！");
                                        return;
                                    }
                                    var columns = grid.getColumns();
                                    var colObjects = [];
                                    for (var i = 0; i < columns.length; i++) {
                                        var column = columns[i];
                                        if (Ext.isEmpty(column.dataIndex)) {
                                            continue;
                                        }
                                        colObjects.push({
                                            name: column.dataIndex,
                                            text: $("<div>" + column.configText + "</div>").text(),
                                        });
                                    }
                                    FastExt.Dialog.showJson(this, "查看所有列信息", JSON.stringify(colObjects));
                                }
                            });
                        }
                        moreBtn.menu.push("-");
                        if (grid.getStore().entity && FastExt.Base.toBool(grid.getStore().entity.layer, false)) {
                            moreBtn.menu.push({
                                iconCls: 'extIcon extPower redColor',
                                text: '更新权限值',
                                handler: function () {
                                    Ext.Msg.confirm("系统提醒", "确定更新表格的数据权限值吗？确定后将同时更新与当前表格有关联的所有表格的权限值！如果数据库数据量达到千万级别时，更新时间会较长，请谨慎操作！", function (button, text) {
                                        if (button == "yes") {
                                            var params_2 = { entityCode: grid.getStore().entity.entityCode };
                                            FastExt.LoginLayout.validOperate("更新表格的数据权限层级值", function () {
                                                FastExt.Dialog.showWait("正在更新中，请稍后……");
                                                FastExt.Server.updateLayer(params_2, function (success, message) {
                                                    FastExt.Dialog.hideWait();
                                                    FastExt.Dialog.showAlert("系统提醒", message);
                                                });
                                            }, 30);
                                        }
                                    });
                                }
                            });
                        }
                        if (grid.getStore().entity) {
                            moreBtn.menu.push({
                                iconCls: 'extIcon extCopy2 redColor',
                                text: '更新同列值',
                                handler: function () {
                                    Ext.Msg.confirm("系统提醒", "确定更新表格的数据绑定值吗？确定后将同时更新与当前表格有关联的所有表格的相同列的值！请您谨慎操作！", function (button, text) {
                                        if (button == "yes") {
                                            var params_3 = { entityCode: grid.getStore().entity.entityCode };
                                            FastExt.LoginLayout.validOperate("更新表格的相同列的值", function () {
                                                FastExt.Dialog.showWait("正在更新中，请稍后……");
                                                FastExt.Server.updateSame(params_3, function (success, message) {
                                                    FastExt.Dialog.hideWait();
                                                    FastExt.Dialog.showAlert("系统提醒", message);
                                                });
                                            }, 30);
                                        }
                                    });
                                }
                            });
                        }
                        moreBtn.menu.push("-");
                    }
                    if (!FastExt.Menu.isSplitLineLast(moreBtn.menu)) {
                        moreBtn.menu.push("-");
                    }
                    moreBtn.menu.push({
                        iconCls: 'extIcon extSet',
                        text: '功能设置',
                        handler: function () {
                            FastExt.Grid.setGrid(this, grid);
                        }
                    });
                    var linkBtns = {
                        xtype: 'button',
                        text: '相关查询',
                        checkSelect: 1,
                        iconCls: 'extIcon extIntersect grayColor',
                        menu: []
                    };
                    if (grid.linkMenu) {
                        linkBtns.menu = grid.linkMenu;
                    }
                    if (grid.getStore() && grid.getStore().entity) {
                        var realEntity = FastExt.System.EntitiesHandler.getEntity(grid.getStore().entity);
                        if (realEntity.linkTables) {
                            var findButtons = grid.query("button[entityCode]");
                            var _loop_2 = function (i) {
                                var linkTable = realEntity.linkTables[i];
                                if (linkTable.linkColumns) {
                                    var breakThis = false;
                                    for (var _i = 0, findButtons_1 = findButtons; _i < findButtons_1.length; _i++) {
                                        var entityCodeButton = findButtons_1[_i];
                                        if (entityCodeButton.entityCode === linkTable.entityCode) {
                                            breakThis = true;
                                            break;
                                        }
                                    }
                                    var linkEntity = FastExt.System.EntitiesHandler.getEntity(linkTable.entityCode);
                                    if (!linkEntity.js) {
                                        return "continue";
                                    }
                                    if (breakThis) {
                                        return "continue";
                                    }
                                    var linkBtn = {
                                        text: linkTable.comment
                                    };
                                    if (linkTable.menu) {
                                        linkBtn["icon"] = linkTable.menu.icon;
                                        if (!FastExt.System.MenuHandler.existMenu(linkTable.menu.id)) {
                                            return "continue";
                                        }
                                    }
                                    else {
                                        linkBtn["iconCls"] = "extIcon extSearch searchColor";
                                        if (!FastExt.System.ManagerHandler.isSuperRole()) {
                                            return "continue";
                                        }
                                    }
                                    if (linkTable.linkColumns.length == 1) {
                                        var linkColumn_1 = linkTable.linkColumns[0];
                                        linkBtn["text"] = FastExt.Base.toString(linkColumn_1["link_menu_text"], linkTable.comment);
                                        linkBtn["handler"] = function () {
                                            var where = {};
                                            where['t.' + linkColumn_1.name] = grid.getSelection()[0].get(linkColumn_1.linkKey);
                                            where['^' + linkColumn_1.linkText[0]] = grid.getSelection()[0].get(linkColumn_1.linkText[0]);
                                            var entityJsObj = eval("new " + linkTable.entityCode + "()");
                                            entityJsObj.showWinList(this, linkTable.comment + "【" + linkColumn_1.comment + "】", where, true);
                                        };
                                        if (FastExt.Base.toBool(linkColumn_1["to_link_menu"], true)) {
                                            linkBtns.menu.push(linkBtn);
                                        }
                                    }
                                    else if (linkTable.linkColumns.length > 1) {
                                        linkBtn["menu"] = [];
                                        var _loop_3 = function (j) {
                                            var linkColumn = linkTable.linkColumns[j];
                                            var linkChildBtn = {
                                                icon: FastExt.Server.getIcon("icon_column.svg"),
                                                text: FastExt.Base.toString(linkColumn["link_menu_text"], "匹配" + linkColumn.comment),
                                                handler: function () {
                                                    var where = {};
                                                    where['t.' + linkColumn.name] = grid.getSelection()[0].get(linkColumn.linkKey);
                                                    where['^' + linkColumn.linkText[0]] = grid.getSelection()[0].get(linkColumn.linkText[0]);
                                                    var entityJsObj = eval("new " + linkTable.entityCode + "()");
                                                    entityJsObj.showWinList(this, linkTable.comment + "【" + linkColumn.comment + "】", where, true);
                                                }
                                            };
                                            if (FastExt.Base.toBool(linkColumn["to_link_menu"], true)) {
                                                linkBtn.menu.push(linkChildBtn);
                                            }
                                        };
                                        for (var j = 0; j < linkTable.linkColumns.length; j++) {
                                            _loop_3(j);
                                        }
                                        if (linkBtn.menu.length > 0) {
                                            if (linkBtn.menu.length === 1) {
                                                linkBtn = linkBtn.menu[0];
                                            }
                                            linkBtns.menu.push(linkBtn);
                                        }
                                    }
                                }
                            };
                            for (var i = 0; i < realEntity.linkTables.length; i++) {
                                _loop_2(i);
                            }
                        }
                    }
                    toolbar.add("->");
                    if (FastExt.System.ConfigHandler.isGridDefaultLinkButton() && FastExt.System.ManagerHandler.isSuperRole()) {
                        if (FastExt.Base.toBool(grid.defaultToolBarLink, true)) {
                            if (linkBtns.menu.length > 0) {
                                toolbar.add(linkBtns);
                            }
                        }
                    }
                    if (FastExt.Base.toBool(grid.defaultToolBarMore, true)) {
                        toolbar.add(moreBtn);
                    }
                    if (grid.help) {
                        var title = grid.helpTitle ? grid.helpTitle : "帮助文档";
                        toolbar.add({
                            xtype: 'button',
                            iconCls: 'extIcon extQuestion2 color75',
                            text: title,
                            animMinMax: true,
                            _help: grid.help,
                            _helpTitle: title,
                            handler: function () {
                                if (this._help.toString().toLowerCase().endWith(".md")) {
                                    FastExt.Markdown.showMarkdownFile(this, this._helpTitle, this._help, {
                                        modal: false,
                                        width: 300,
                                        height: parseInt((document.body.clientHeight * 0.8).toFixed(0))
                                    });
                                }
                                else {
                                    FastExt.Dialog.showLink(this, this._helpTitle, this._help, {
                                        modal: false,
                                        width: 300,
                                        height: parseInt((document.body.clientHeight * 0.8).toFixed(0))
                                    });
                                }
                            },
                        });
                    }
                }
            }
            finally {
                if (toolbar && toolbar.items.length === 0) {
                    toolbar.setHidden(true);
                }
            }
        };
        Grid.configGridTip = function (grid) {
            if (!grid) {
                return;
            }
            var view = FastExt.Grid.getGridView(grid);
            if (!view) {
                return;
            }
            grid.tip = new Ext.ToolTip({
                target: view.el,
                delegate: '.x-grid-cell-inner',
                trackMouse: true,
                renderTo: Ext.getBody(),
                listeners: {
                    beforeshow: function (tip) {
                        if (grid.operate && !grid.operate.hoverTip) {
                            return false;
                        }
                        console.log(tip.triggerElement);
                        var innerHTML = $(tip.triggerElement).text();
                        if (Ext.isEmpty(innerHTML) || innerHTML === "无" || innerHTML === "&nbsp;" || innerHTML === " " || innerHTML === " ") {
                            return false;
                        }
                        var detailsIdEl = $(tip.triggerElement).find("[data-details-id]");
                        if (detailsIdEl.length > 0) {
                            var detailsId = $(detailsIdEl).attr("data-details-id");
                            var detailsInfo = window[detailsId];
                            if (!detailsInfo) {
                                detailsInfo = FastExt.Cache.memory[detailsId];
                            }
                            if (detailsInfo) {
                                tip.update(detailsInfo);
                                return true;
                            }
                        }
                        tip.update($(tip.triggerElement).html());
                    }
                }
            });
        };
        Grid.configGridMethod = function (grid) {
            if (!grid || grid.configGridMethod) {
                return;
            }
            grid.configGridMethod = true;
            grid.refreshPowerEnable = FastExt.GridMethod.doRefreshPowerEnable;
            grid.refreshSelect = FastExt.GridMethod.doRefreshSelect;
            grid.recordSelect = FastExt.GridMethod.doRecordSelect;
            grid.refreshToolPaging = FastExt.GridMethod.doRefreshToolPaging;
            grid.hasRecordHistory = FastExt.GridMethod.doHasRecordHistory;
            grid.removeRecordHistory = FastExt.GridMethod.doRemoveRecordHistory;
            grid.restoreSelect = FastExt.GridMethod.doRestoreSelect;
            grid.getSelectRecordHistory = FastExt.GridMethod.doGetSelectRecordHistory;
            grid.clearSelectRecordHistory = FastExt.GridMethod.doClearSelectRecordHistory;
            grid.refreshSelectHistoryCount = FastExt.GridMethod.doRefreshSelectHistoryCount;
            grid.refreshDetailsPanel = FastExt.GridMethod.doRefreshDetailsPanel;
            grid.saveUIConfig = FastExt.GridMethod.doSaveUIConfig;
            grid.showEmptyTip = FastExt.GridMethod.doShowEmptyTip;
            grid.hideEmptyTip = FastExt.GridMethod.doHideEmptyTip;
            grid.checkEditor = FastExt.GridMethod.doCheckEditor;
            grid.checkAdd = FastExt.GridMethod.doCheckAdd;
            grid.checkDelete = FastExt.GridMethod.doCheckDelete;
            grid.checkUpdate = FastExt.GridMethod.doCheckUpdate;
            grid.checkRefreshTimer = FastExt.GridMethod.doCheckRefreshTimer;
            grid.startRefreshTimer = FastExt.GridMethod.doStartRefreshTimer;
            grid.stopRefreshTimer = FastExt.GridMethod.doStopRefreshTimer;
            grid.showDataLog = FastExt.GridMethod.doShowDataLog;
        };
        Grid.configGridListeners = function (grid) {
            if (!grid || grid.configListener) {
                return;
            }
            grid.configListener = true;
            grid.on('aftertabactive', FastExt.GridEvent.onFastAfterTabActive, grid);
            grid.on('viewready', FastExt.GridEvent.onFastViewRead, grid);
            grid.on('beforedestroy', FastExt.GridEvent.onFastBeforeDestroy, grid);
            grid.on('columnmove', FastExt.GridEvent.onFastColumnMove, grid);
            grid.on('columnresize', FastExt.GridEvent.onFastColumnResize, grid);
            grid.on('columnschanged', FastExt.GridEvent.onFastColumnsChanged, grid);
            grid.on('headertriggerclick', FastExt.GridEvent.onFastHeaderTriggerClick, grid);
            grid.on('headercontextmenu', FastExt.GridEvent.onFastHeaderContextMenu, grid);
            grid.on('headermenucreate', FastExt.GridEvent.onFastHeaderMenuCreate, grid);
            grid.on('headerclick', FastExt.GridEvent.onFastHeaderClick, grid);
            grid.on('sortchange', FastExt.GridEvent.onFastSortChange, grid);
            grid.on('cellcontextmenu', FastExt.GridEvent.onFastCellContextMenu, grid);
            grid.getStore().on('endupdate', FastExt.GridEvent.onFastStoreEndUpdate, grid);
            grid.on("celldblclick", FastExt.GridEvent.onFastCellDblclick, grid);
            grid.on('beforeedit', FastExt.GridEvent.onFastBeforeEdit, grid);
            grid.on('selectionchange', FastExt.GridEvent.onFastSelectionChange, grid);
            grid.getStore().on('datachanged', FastExt.GridEvent.onFastStoreDataChanged, grid);
            grid.getStore().on('load', FastExt.GridEvent.onFastStoreLoad, grid);
        };
        Grid.configNormalGridListeners = function (grid) {
            if (!grid || grid.configNormalGridListeners) {
                return;
            }
            grid.configNormalGridListeners = true;
            grid.getStore().on('datachanged', FastExt.GridEvent.onFastStoreDataChanged, grid);
            grid.getStore().on('beforeload', FastExt.GridEvent.onFastStoreBeforeLoad, grid);
        };
        Grid.configGridLayout = function (grid) {
            return new Ext.Promise(function (resolve, reject) {
                if (!grid) {
                    resolve(true);
                    return;
                }
                if (!FastExt.System.InitHandler.isSilenceGlobalSaving()) {
                    FastExt.Grid.getGridView(grid).setLoading("初始化配置中……");
                }
                FastExt.Grid.restoreGridOperate(grid).then(function () {
                    FastExt.Grid.restoreGridColumn(grid).then(function () {
                        FastExt.Grid.getGridView(grid).setLoading(false);
                        resolve(true);
                    });
                });
            });
        };
        Grid.getGridInWindowSize = function (grid, w, h) {
            if (Ext.isEmpty(w)) {
                w = 0.4;
            }
            if (Ext.isEmpty(h)) {
                h = 0.4;
            }
            var winWidth = parseInt((grid.getWidth() * w).toFixed(0));
            var winHeight = parseInt((grid.getHeight() * h).toFixed(0));
            return {
                width: winWidth,
                height: winHeight
            };
        };
        Grid.showGridSelectDetailsWindow = function (obj, grid) {
            var subtitle = "";
            var winWidth = parseInt((document.body.clientWidth * 0.4).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                title: "查看详情" + subtitle,
                subtitle: subtitle,
                height: winHeight,
                width: winWidth,
                minHeight: 450,
                minWidth: 400,
                iconCls: 'extIcon extDetails',
                layout: 'border',
                resizable: true,
                collapsible: true,
                constrain: true,
                maximizable: true,
                animateTarget: obj,
                record: grid.getSelectionModel().getSelection()[0],
                tools: [
                    {
                        type: 'help',
                        callback: function (panel, tool, event) {
                            FastExt.Dialog.showJson(this, "查看原始数据结构", FastExt.Json.objectToJson(panel.record.data));
                        }
                    }
                ],
                listeners: {
                    show: function (obj) {
                        obj.focus();
                    }
                },
                items: [FastExt.Grid.getDetailsPanel(grid, true)]
            });
            win.show();
        };
        Grid.getDetailsPanel = function (grid, fromWindow) {
            if (!fromWindow) {
                if (!FastExt.System.ConfigHandler.isGridDetailsPanel()) {
                    return undefined;
                }
            }
            var subtitle = "";
            if (!grid.detailsPanels) {
                grid.detailsPanels = [];
            }
            var detailsConfig = {
                subtitle: subtitle,
                layout: 'border',
                cls: "fast-list-details-panel",
                collapsedCls: "fast-list-details-panel-collapsed",
                border: 0,
                autoScroll: false,
                scrollable: false,
                closeAction: 'hide',
                dataId: -1,
                currIsClosed: false,
                closeTimer: null,
                detailsPanel: true,
                isWindow: fromWindow,
                setRecord: function (grid) {
                    try {
                        var me_1 = this;
                        if (!me_1.items) {
                            return false;
                        }
                        if (me_1.closeTimer) {
                            window.clearTimeout(me_1.closeTimer);
                        }
                        if (grid != null) {
                            var data = grid.getSelectionModel().getSelection();
                            if (data.length === 1) {
                                if (me_1.isWindow && me_1.record) {
                                    if (!FastExt.Store.isSameRecord(me_1.record, data[0])) {
                                        return false;
                                    }
                                }
                                me_1.record = data[0];
                                me_1.items.get(0).setRecord(grid, data[0]);
                                me_1.show();
                            }
                            else {
                                if (me_1.isVisible() && !this.isWindow) {
                                    me_1.closeTimer = setTimeout(function () {
                                        me_1.close();
                                    }, 88);
                                }
                            }
                        }
                        else {
                            me_1.close();
                        }
                    }
                    catch (e) {
                        FastExt.Dialog.showException(e);
                    }
                    return true;
                },
                listeners: {
                    afterrender: function () {
                        if (this.isWindow) {
                            this.setRecord(grid);
                        }
                    },
                    collapse: function (p, eOpts) {
                        this.down("#close").hide();
                    },
                    beforeexpand: function (p, eOpts) {
                        this.down("#close").show();
                    },
                    destroy: function (obj) {
                        grid.detailsPanels = Ext.Array.remove(grid.detailsPanels, obj);
                    },
                },
                items: [FastExt.Grid.builderDetailsGrid(fromWindow)]
            };
            if (fromWindow) {
                detailsConfig.region = "center";
            }
            else {
                detailsConfig.title = '数据详情';
                detailsConfig.iconCls = 'extIcon extDetails';
                detailsConfig.collapsed = true;
                detailsConfig.split = true;
                detailsConfig.hidden = true;
                detailsConfig.region = "east";
                detailsConfig.maxWidth = parseInt((document.body.clientWidth / 2).toFixed(0));
                detailsConfig.width = parseInt((document.body.clientWidth * 0.3).toFixed(0));
                detailsConfig.minWidth = 200;
                detailsConfig.tools = [
                    {
                        type: 'gear',
                        callback: function () {
                            FastExt.Grid.setGrid(this, grid);
                        }
                    }, {
                        type: 'close',
                        itemId: 'close',
                        callback: function () {
                            detailsPanel.collapse();
                        }
                    }
                ];
            }
            var detailsPanel = Ext.create('Ext.panel.Panel', detailsConfig);
            detailsPanel.fromWindow = fromWindow;
            grid.detailsPanels.push(detailsPanel);
            return detailsPanel;
        };
        Grid.builderDetailsGrid = function (fromWindow) {
            if (Ext.isEmpty(fromWindow)) {
                fromWindow = false;
            }
            return Ext.create('Ext.grid.Panel', {
                border: 0,
                scrollable: 'y',
                region: 'center',
                store: Ext.create('Ext.data.Store', {
                    groupField: 'groupHeaderText',
                    autoLoad: false,
                    fields: []
                }),
                hideHeaders: true,
                deferRowRender: false,
                cls: "fast-grid-details",
                superGrid: null,
                features: [{
                        ftype: 'grouping',
                        collapsible: false,
                        hideGroupedHeader: true,
                        expandTip: null,
                        collapseTip: null,
                        groupHeaderTpl: [
                            '<b>{name:this.formatName}</b>', {
                                formatName: function (name) {
                                    if (name.toString().startsWith("BASE")) {
                                        return "基本属性";
                                    }
                                    return name;
                                }
                            }
                        ]
                    }],
                setRecord: function (grid, record) {
                    try {
                        if (!grid) {
                            return;
                        }
                        if (!record) {
                            return;
                        }
                        this.recordId = record.getId();
                        this.superGrid = grid;
                        record.store = grid.getStore();
                        var columns = grid.getColumns();
                        var data = [];
                        var lastGroupNon = "BASE-" + new Date().getTime();
                        var maxNameWidth = 0;
                        for (var i = 0; i < columns.length; i++) {
                            var column = columns[i];
                            if (Ext.isEmpty(column.dataIndex)) {
                                continue;
                            }
                            if (!FastExt.Base.toBool(column.hideable, true)) {
                                if (!FastExt.Grid.isTreeColumn(column)) {
                                    continue;
                                }
                            }
                            var item = {
                                text: column.configText,
                                value: record.get(column.dataIndex),
                                dataIndex: column.dataIndex,
                                columnName: column.columnName,
                                groupHeaderText: column.groupHeaderText,
                                renderer: column.renderer,
                                index: column.getIndex(),
                                record: record,
                                linkColumn: column,
                                entity: grid.getStore().entity,
                                configEditor: FastExt.Base.toBool(column.editable, true),
                                editor: false
                            };
                            if (Ext.isEmpty(column.field)) {
                                item.configEditor = false;
                            }
                            if (!grid.checkEditor()) {
                                item.configEditor = false;
                            }
                            if (!item.groupHeaderText) {
                                item.groupHeaderText = lastGroupNon;
                            }
                            else {
                                lastGroupNon = "BASE-" + i + "-" + new Date().getTime();
                            }
                            data.push(item);
                            maxNameWidth = Math.max(FastExt.Base.guessTextWidth(item["text"], 5), maxNameWidth);
                        }
                        data.sort(function (a, b) {
                            return a.index - b.index;
                        });
                        this.getStore().loadData(data);
                        var tableView = FastExt.Grid.getGridView(this);
                        if (tableView) {
                            tableView.getHeaderAtIndex(0).setWidth(maxNameWidth);
                        }
                    }
                    catch (e) {
                    }
                },
                columns: [
                    {
                        header: '名称',
                        dataIndex: 'text',
                        align: 'right',
                        width: 120,
                        tdCls: 'tdVTop',
                        renderer: function (val, m, r) {
                            if (Ext.isEmpty(val)) {
                                return "";
                            }
                            m.style = FastExt.Grid.detailsGridKeyStyle;
                            return "<b>" + val + "：</b>";
                        }
                    },
                    {
                        header: '值',
                        dataIndex: 'value',
                        flex: 1,
                        align: 'left',
                        renderer: function (val, m, r, rowIndex, colIndex, store, view) {
                            try {
                                m.style = FastExt.Grid.detailsGridValueStyle;
                                var fun = r.get("renderer");
                                if (Ext.isFunction(fun)) {
                                    var value = fun(val, m, r.get("record"), rowIndex, colIndex, store, view, true);
                                    if (Ext.isEmpty(value)) {
                                        return "<font color='#ccc'>无</font>";
                                    }
                                    return value;
                                }
                                return val;
                            }
                            catch (e) {
                                return val;
                            }
                        }
                    },
                    {
                        xtype: 'actioncolumn',
                        width: 80,
                        sortable: false,
                        menuDisabled: true,
                        renderer: function (val, m) {
                            m.style = FastExt.Grid.detailsGridActionStyle;
                            return val;
                        },
                        items: [
                            {
                                iconCls: 'extIcon extEdit editColor marginRight5 textBlackShadowWhite',
                                tooltip: '编辑数据',
                                align: 'center',
                                isDisabled: function (view, rowIndex, colIndex, item, record) {
                                    return !FastExt.Base.toBool(record.get("editor"), false);
                                },
                                getClass: function (v, metadata, record) {
                                    if (FastExt.Base.toBool(record.get("editor"), false)) {
                                        return "extIcon extEdit editColor marginRight5 textBlackShadowWhite";
                                    }
                                    return "";
                                },
                                handler: FastExt.Grid.showDetailsEditMenu
                            },
                            {
                                iconCls: 'extIcon extCopy2 searchColor textBlackShadowWhite',
                                tooltip: '复制数据',
                                align: 'center',
                                isDisabled: function (view, rowIndex, colIndex, item, record) {
                                    return !FastExt.Base.toBool(record.get("doCopy"), false);
                                },
                                getClass: function (v, metadata, record) {
                                    if (FastExt.Base.toBool(record.get("doCopy"), false)) {
                                        return "extIcon extCopy2 searchColor textBlackShadowWhite";
                                    }
                                    return "";
                                },
                                handler: FastExt.Grid.copyDetailsValue
                            }
                        ]
                    }, { xtype: 'rowplaceholder', minWidth: 30 }
                ],
                tbar: {
                    flex: 1,
                    emptyText: '查找属性（轻敲回车键）',
                    margin: '5',
                    xtype: 'textfield',
                    doSearch: function () {
                        var grid = this.ownerCt;
                        var store = grid.getStore();
                        var currIndex = 0;
                        var dataIndex = store.getAt(0).get("dataIndex");
                        var text = null;
                        var searchKey = this.getValue();
                        var currRecord = null;
                        if (!Ext.isEmpty(searchKey)) {
                            store.each(function (record, index) {
                                var fieldName = record.get("text").toString();
                                var fieldValue = record.get("value");
                                if (fieldName.indexOf(searchKey) >= 0) {
                                    currIndex = index;
                                    dataIndex = record.get("dataIndex");
                                    text = fieldName;
                                    currRecord = record;
                                    return;
                                }
                                if (!Ext.isEmpty(fieldValue) && fieldValue.toString().indexOf(searchKey) >= 0) {
                                    currIndex = index;
                                    dataIndex = record.get("dataIndex");
                                    text = fieldName;
                                    currRecord = record;
                                    return false;
                                }
                            });
                        }
                        FastExt.Grid.scrollToColumn(grid.superGrid, dataIndex, text);
                        grid.getSelectionModel().select(currIndex);
                        FastExt.Grid.getGridView(grid).focusRow(currIndex);
                    },
                    triggers: {
                        search: {
                            cls: 'text-search',
                            handler: function () {
                                this.doSearch();
                            }
                        }
                    },
                    listeners: {
                        render: function (obj, eOpts) {
                            try {
                                new Ext.util.KeyMap({
                                    target: obj.getEl(),
                                    key: 13,
                                    fn: function (keyCode, e) {
                                        this.doSearch();
                                    },
                                    scope: this
                                });
                            }
                            catch (e) {
                                console.error(e);
                            }
                        }
                    }
                },
                bbar: {
                    xtype: 'label',
                    style: {
                        background: "#ffffff"
                    },
                    text: '小技巧：双击属性可快速定位左侧表格对应的列！',
                    padding: '10'
                },
                viewConfig: {
                    enableTextSelection: true
                },
                toggleActionColumn: function (record) {
                    if (this.lasClickRecord) {
                        if (this.lasClickRecord.getId() === record.getId()) {
                            return;
                        }
                        this.lasClickRecord.set("editor", false);
                        this.lasClickRecord.set("doCopy", false);
                    }
                    record.set("doCopy", true);
                    record.set("editor", record.get("configEditor"));
                    this.lasClickRecord = record;
                },
                listeners: {
                    itemclick: function (obj, record, item, index, e, eOpts) {
                        this.toggleActionColumn(record);
                    },
                    select: function (obj, record) {
                        this.toggleActionColumn(record);
                    },
                    itemdblclick: function () {
                        try {
                            var data = this.getSelectionModel().getSelection();
                            if (data.length == 0) {
                                return;
                            }
                            FastExt.Grid.scrollToColumn(this.superGrid, data[0].get("dataIndex"), data[0].get("text"));
                        }
                        catch (e) {
                            FastExt.Dialog.showException(e, "details:itemdblclick");
                        }
                    }
                }
            });
        };
        Grid.hasSearchColumn = function (grid) {
            var search = false;
            if (!grid) {
                return false;
            }
            Ext.each(grid.getColumns(), function (item, index) {
                if (!Ext.isEmpty(item.dataIndex)) {
                    if (item.where && item.where.length > 0) {
                        search = true;
                        return false;
                    }
                }
            });
            return search;
        };
        Grid.getColumn = function (grid, dataIndex, text) {
            if (!grid) {
                return null;
            }
            var columns = grid.getColumns();
            for (var i = 0; i < columns.length; i++) {
                var column = columns[i];
                if (column.dataIndex === dataIndex) {
                    if (text && (column.text === text || column.configText === text)) {
                        return column;
                    }
                    return column;
                }
            }
            return null;
        };
        Grid.checkColumnSearch = function (grid) {
            try {
                if (!grid) {
                    return false;
                }
                var hasSearch_1 = false;
                Ext.each(grid.getColumns(), function (item) {
                    if (item.where) {
                        if (item.where.length > 0) {
                            hasSearch_1 = true;
                            return false;
                        }
                    }
                });
                var pagingToolBar = grid.child('#pagingToolBar');
                if (pagingToolBar) {
                    var searchBtn = pagingToolBar.down("button[toolType=searchBtn]");
                    if (searchBtn) {
                        if (hasSearch_1) {
                            searchBtn.setIconCls("extIcon extSearch redColor");
                            searchBtn.setUserCls("redBorder");
                        }
                        else {
                            searchBtn.setIconCls("extIcon extSearch grayColor");
                            searchBtn.setUserCls("");
                        }
                    }
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        Grid.hasColumnField = function (column) {
            try {
                if (Ext.isObject(column.field)) {
                    return true;
                }
                if (!Ext.isEmpty(column.field)) {
                    return true;
                }
                return false;
            }
            catch (e) {
                console.error(e);
            }
            return false;
        };
        Grid.isColumnType = function (target) {
            return target === "gridcolumn" || target.xtype === "gridcolumn";
        };
        Grid.isTreeColumn = function (column) {
            if (!column) {
                return false;
            }
            return column.xtype === "treecolumn";
        };
        Grid.isIdPropertyColumn = function (column) {
            var grid = FastExt.Grid.getColumnGrid(column);
            if (grid) {
                var store = grid.getStore();
                if (store && store.entity && store.entity.idProperty) {
                    for (var j = 0; j < store.entity.idProperty.length; j++) {
                        var idName = store.entity.idProperty[j];
                        if (FastExt.Base.toString(column.dataIndex, "") === idName) {
                            return true;
                        }
                    }
                }
            }
            return false;
        };
        Grid.isDateColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isDateField(column.field);
        };
        Grid.isNumberColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isNumberField(column.field);
        };
        Grid.isComboColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isComboField(column.field);
        };
        Grid.isFileColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isFileField(column.field);
        };
        Grid.isContentColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isHtmlContentField(column.field) || FastExt.Form.isContentField(column.field) || FastExt.Form.isMonacoEditorField(column.field);
        };
        Grid.isHtmlContentColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isHtmlContentField(column.field);
        };
        Grid.isFilesColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isFilesField(column.field);
        };
        Grid.isEnumColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isEnumField(column.field);
        };
        Grid.isLinkColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isLinkField(column.field);
        };
        Grid.isMapColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isMapField(column.field);
        };
        Grid.isPCAColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isPCAField(column.field);
        };
        Grid.isTargetColumn = function (column) {
            if (!column) {
                return false;
            }
            return FastExt.Form.isTargetField(column.field);
        };
        Grid.getGridSelModel = function (showRowNumber) {
            var rowNumberWidth = 0;
            if (FastExt.System.ConfigHandler.isGridRowNumber()) {
                rowNumberWidth = 46;
            }
            if (!Ext.isEmpty(showRowNumber)) {
                if (showRowNumber) {
                    rowNumberWidth = 46;
                }
                else {
                    rowNumberWidth = 0;
                }
            }
            return Ext.create('Ext.grid.selection.SpreadsheetModel', {
                pruneRemoved: false,
                checkboxSelect: true,
                hasLockedHeader: true,
                cellSelect: false,
                checkboxHeaderWidth: 40,
                dragSelect: true,
                extensible: false,
                rowNumbererHeaderWidth: rowNumberWidth,
                listeners: {
                    focuschange: function (obj, oldFocused, newFocused, eOpts) {
                    }
                }
            });
        };
        Grid.refreshGridNumberColumn = function (grid) {
            if (grid.operate) {
                var selectionModel = grid.getSelectionModel();
                if (selectionModel && selectionModel.numbererColumn) {
                    if (FastExt.Base.toBool(grid.operate.showRowNumber)) {
                        selectionModel.numbererColumn.setWidth(Math.max(selectionModel.numbererColumn.getWidth(), 52));
                    }
                    else {
                        selectionModel.numbererColumn.setWidth(0);
                    }
                }
            }
        };
        Grid.checkConfigGridNumberColumn = function (grid) {
            try {
                if (!grid) {
                    return false;
                }
                var selectionModel = grid.getSelectionModel();
                if (selectionModel && selectionModel.numbererColumn) {
                    return selectionModel.numbererColumn.configWidth > 0;
                }
            }
            catch (e) {
            }
            return false;
        };
        Grid.blinkColumn = function (column) {
            if (column.blinking)
                return;
            column.blinking = true;
            if (column.blinkTimout) {
                clearTimeout(column.blinkTimout);
                delete column.blinkTimout;
            }
            if (Ext.isEmpty(column.configColor)) {
                column.configColor = column.getEl().getStyle("color") || "";
            }
            if (Ext.isEmpty(column.configBackground)) {
                column.configBackground = column.getEl().getStyle("background") || "";
            }
            var changeBg = "#e41f00";
            if (column.configBackground.indexOf("linear-gradient") > 0) {
                changeBg = "linear-gradient(0deg, #e41f00, #fefefe)";
            }
            column.setStyle({
                color: 'white',
                background: changeBg
            });
            column.blinkTimout = setTimeout(function () {
                column.setStyle({
                    color: column.configColor,
                    background: column.configBackground,
                });
                column.blinking = false;
                delete column.blinkTimout;
            }, 1000);
        };
        Grid.scrollToColumn = function (grid, dataIndex, text) {
            if (!grid) {
                return;
            }
            var column = FastExt.Grid.getColumn(grid, dataIndex, text);
            FastExt.Grid.blinkColumn(column);
            var x = column.getLocalX();
            if (column.isSubHeader) {
                x += column.ownerCt.getLocalX();
            }
            grid.scrollTo(x, 0, true);
        };
        Grid.setGrid = function (obj, grid) {
            var setPanel = Ext.create('Ext.form.Panel', {
                bodyPadding: 5,
                region: 'center',
                autoScroll: true,
                viewModel: {
                    data: grid.operate
                },
                defaults: {
                    labelWidth: FastExt.System.ConfigHandler.getFontSizeNumber() * 6 + 8
                },
                items: [
                    {
                        xtype: 'checkboxfield',
                        fieldLabel: '显示序号',
                        labelAlign: 'right',
                        columnWidth: 1,
                        name: 'showRowNumber',
                        bind: "{showRowNumber}",
                        uncheckedValue: false,
                        boxLabel: '自然序号，在列表中的显示出自然序号！',
                    },
                    {
                        xtype: 'checkboxfield',
                        fieldLabel: '删除提醒',
                        labelAlign: 'right',
                        name: 'alertDelete',
                        columnWidth: 1,
                        bind: "{alertDelete}",
                        uncheckedValue: false,
                        hidden: !grid.deleteEnable,
                        boxLabel: '删除数据时，系统会弹出确认删除框，避免误操作删除！'
                    },
                    {
                        xtype: 'checkboxfield',
                        fieldLabel: '修改提醒',
                        labelAlign: 'right',
                        columnWidth: 1,
                        name: 'alertUpdate',
                        bind: "{alertUpdate}",
                        hidden: !grid.updateEnable,
                        uncheckedValue: false,
                        boxLabel: '修改数据时，系统会弹出确认修改框，避免误操作修改！'
                    },
                    {
                        xtype: 'checkboxfield',
                        fieldLabel: '自动提交',
                        labelAlign: 'right',
                        columnWidth: 1,
                        name: 'autoUpdate',
                        bind: "{autoUpdate}",
                        hidden: !grid.updateEnable,
                        uncheckedValue: false,
                        boxLabel: '双击编辑修改数据后，系统自动提交被修改的数据！'
                    },
                    {
                        xtype: 'checkboxfield',
                        fieldLabel: '弹出详情',
                        labelAlign: 'right',
                        columnWidth: 1,
                        name: 'autoDetails',
                        bind: "{autoDetails}",
                        uncheckedValue: false,
                        boxLabel: '点击数据时，右侧自动弹出此数据的详情窗体！'
                    },
                    {
                        xtype: 'checkboxfield',
                        fieldLabel: '悬浮阅览',
                        labelAlign: 'right',
                        columnWidth: 1,
                        name: 'hoverTip',
                        bind: "{hoverTip}",
                        uncheckedValue: false,
                        boxLabel: '当鼠标悬浮在数据超过2秒后，会在鼠标右下方弹出此数据的阅览！'
                    },
                    {
                        xtype: 'checkboxfield',
                        fieldLabel: '数据刷新',
                        labelAlign: 'right',
                        columnWidth: 1,
                        name: 'refreshData',
                        bind: "{refreshData}",
                        uncheckedValue: false,
                        boxLabel: '离开此标签页后，再次返回此标签页时将刷新当前标签页的列表数据！'
                    }
                ]
            });
            var winTitle = "功能设置";
            var winWidth = parseInt((document.body.clientWidth * 0.3).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                title: winTitle,
                iconCls: 'extIcon extSet',
                height: 460,
                width: winWidth,
                minHeight: 400,
                minWidth: 300,
                layout: 'border',
                resizable: false,
                animateTarget: obj,
                items: [setPanel],
                modal: true,
                constrain: true,
                buttons: [
                    "->", {
                        text: '保存配置',
                        iconCls: 'extIcon extSave whiteColor',
                        handler: function () {
                            FastExt.Dialog.showWait("正在保存中…");
                            FastExt.Server.saveExtConfig(grid.code, "GridOperate", Ext.encode(setPanel.getForm().getValues()), function (success, message) {
                                FastExt.Dialog.hideWait();
                                if (success) {
                                    grid.operate = setPanel.getForm().getValues();
                                    FastExt.Dialog.toast("功能设置成功！");
                                    FastExt.Grid.refreshGridNumberColumn(grid);
                                    win.close();
                                }
                                else {
                                    Ext.Msg.alert('系统提醒', message);
                                }
                            });
                        }
                    },
                    {
                        text: '取消',
                        iconCls: 'extIcon extClose',
                        handler: function () {
                            win.close();
                        }
                    }
                ]
            });
            win.show();
        };
        Grid.getColumnEnumName = function (column) {
            if (FastExt.Grid.isEnumColumn(column)) {
                if (Ext.isObject(column.field)) {
                    return column.field.enumName;
                }
            }
            return null;
        };
        Grid.getColumnFieldType = function (column) {
            if (Ext.isObject(column.field)) {
                return column.field.xtype;
            }
            return column.field;
        };
        Grid.exportGrid = function (grid) {
            if (!grid.getStore().entity) {
                Ext.Msg.alert('系统提醒', '导出失败！Grid的DataStore未绑定Entity!');
                return;
            }
            var message = "您确定导出当前条件下的所有数据吗？";
            var data = grid.getSelection();
            if (data.length > 0) {
                message = "您确定导出选中的" + data.length + "条数据吗？";
            }
            else if (grid.getStore().getTotalCount() === 0) {
                FastExt.Dialog.toast("当前页面暂无数据！");
                return;
            }
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                border: 0,
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                defaults: {
                    margin: '5 5 5 5'
                },
                items: [
                    {
                        xtype: "lottie",
                        width: 150,
                        height: 120,
                        jsonPath: 'base/lottie/question.json',
                    },
                    {
                        xtype: "label",
                        text: message,
                    },
                    {
                        xtype: "checkboxfield",
                        boxLabel: "导出时自动生成数据序号",
                        uncheckedValue: false,
                        name: "exportIndex"
                    }
                ]
            });
            var doExport = function (params) {
                if (!grid) {
                    return;
                }
                if (!grid.getStore().entity) {
                    FastExt.Dialog.toast("当前列表不支持此功能！");
                    return;
                }
                if (grid.getStore().entity) {
                    params.title = grid.getStore().entity.comment;
                }
                if (data.length > 0) {
                    if (!grid.getStore().entity.idProperty) {
                        FastExt.Dialog.toast("当前列表不支持选中导出功能！");
                        return;
                    }
                    for (var i = 0; i < data.length; i++) {
                        var record = data[i];
                        for (var j = 0; j < grid.getStore().entity.idProperty.length; j++) {
                            var idName = grid.getStore().entity.idProperty[j];
                            var key = "where['" + idName + "#']";
                            if (!params[key]) {
                                params[key] = [];
                            }
                            params[key].push(record.get(idName));
                        }
                    }
                }
                Ext.each(grid.getColumns(), function (item, index) {
                    if (item.isHidden() || !FastExt.Base.toBool(item.excelOutHeader, true)) {
                        return;
                    }
                    if (!Ext.isEmpty(item.dataIndex)) {
                        params["column[" + index + "].index"] = index;
                        params["column[" + index + "].width"] = item.width;
                        params["column[" + index + "].text"] = item.configText;
                        params["column[" + index + "].groupHeaderText"] = item.groupHeaderText;
                        params["column[" + index + "].enum"] = FastExt.Grid.getColumnEnumName(item);
                        params["column[" + index + "].dataIndex"] = FastExt.Entity.getRealAttr(item);
                        params["column[" + index + "].valueIndex"] = item.dataIndex;
                        params["column[" + index + "].file"] = FastExt.Grid.isFileColumn(item);
                        params["column[" + index + "].files"] = FastExt.Grid.isFilesColumn(item);
                        params["column[" + index + "].type"] = FastExt.Grid.getColumnFieldType(item);
                        params["column[" + index + "].comment"] = item.excelComment || item.comment;
                        if (FastExt.Grid.isDateColumn(item)) {
                            params["column[" + index + "].format"] = item.field.format;
                        }
                    }
                });
                FastExt.Dialog.showWait("正在导出中……");
                FastExt.Server.exportExcel(FastExt.Store.mergeStoreParamBySelect(grid.getStore(), params), function (success, data, message) {
                    FastExt.Dialog.hideWait();
                    if (success) {
                        FastExt.Dialog.toast(message);
                        exportConfirmWindow.close();
                        location.href = "attach/" + data;
                    }
                    else {
                        Ext.Msg.alert('系统提醒', "导出失败！" + message);
                    }
                });
            };
            var exportConfirmWindow = Ext.create('Ext.window.Window', {
                title: "导出Excel",
                height: 330,
                iconCls: 'extIcon extExcel',
                width: 300,
                layout: 'border',
                constrain: true,
                resizable: false,
                items: [formPanel],
                modal: true,
                buttons: [
                    '->',
                    {
                        text: '取消',
                        iconCls: 'extIcon extClose',
                        handler: function () {
                            exportConfirmWindow.close();
                        }
                    },
                    {
                        text: '确定',
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            doExport(formPanel.getForm().getValues());
                        }
                    }, '->'
                ],
            });
            exportConfirmWindow.show();
        };
        Grid.downExcelModel = function (grid) {
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                border: 0,
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                defaults: {
                    margin: '5 5 5 5'
                },
                items: [
                    {
                        xtype: "lottie",
                        width: 150,
                        height: 120,
                        jsonPath: 'base/lottie/question.json',
                    },
                    {
                        xtype: "label",
                        text: "确定下载导入数据的Excel模板吗？",
                    },
                    {
                        xtype: "checkboxfield",
                        boxLabel: "包含已隐藏的列",
                        uncheckedValue: false,
                        name: "exportHidden"
                    }
                ]
            });
            var doRequest = function (formParams) {
                if (!grid) {
                    return;
                }
                FastExt.Dialog.showWait("正在生成中……");
                var params = { entityCode: grid.getStore().entity.entityCode };
                if (grid.getStore().entity) {
                    params.title = grid.getStore().entity.comment;
                }
                Ext.each(grid.getColumns(), function (item, index) {
                    if (FastExt.Grid.isFileColumn(item)
                        || FastExt.Grid.isFilesColumn(item)
                        || !FastExt.Base.toBool(item.excelHeader, true)) {
                        return;
                    }
                    if (!FastExt.Base.toBool(formParams["exportHidden"], false)) {
                        if (item.isHidden()) {
                            return;
                        }
                    }
                    if (!Ext.isEmpty(item.dataIndex)) {
                        var indexStr = index;
                        if (index < 10) {
                            indexStr = "0" + index;
                        }
                        params["column[" + indexStr + "].index"] = index;
                        params["column[" + indexStr + "].width"] = item.width;
                        params["column[" + indexStr + "].text"] = item.configText;
                        params["column[" + indexStr + "].groupHeaderText"] = item.groupHeaderText;
                        params["column[" + indexStr + "].enum"] = FastExt.Grid.getColumnEnumName(item);
                        params["column[" + indexStr + "].type"] = FastExt.Grid.getColumnFieldType(item);
                        params["column[" + indexStr + "].comment"] = item.excelComment || item.comment;
                        params["column[" + indexStr + "].dataIndex"] = FastExt.Entity.getRealAttr(item);
                        params["column[" + indexStr + "].excelHeaderText"] = item.excelHeaderText;
                        if (FastExt.Grid.isDateColumn(item)) {
                            params["column[" + indexStr + "].format"] = item.field.format;
                        }
                    }
                });
                FastExt.Server.excelModule(params, function (success, data, message) {
                    FastExt.Dialog.hideWait();
                    if (success) {
                        exportConfirmWindow.close();
                        FastExt.Dialog.toast("模板生成成功！");
                        location.href = "attach/" + data;
                    }
                    else {
                        Ext.Msg.alert('系统提醒', "生成失败！" + message);
                    }
                });
            };
            var exportConfirmWindow = Ext.create('Ext.window.Window', {
                title: "下载模板",
                height: 320,
                iconCls: 'extIcon extExcel',
                width: 280,
                layout: 'border',
                constrain: true,
                resizable: false,
                items: [formPanel],
                modal: true,
                buttons: [
                    '->',
                    {
                        text: '取消',
                        iconCls: 'extIcon extClose',
                        handler: function () {
                            exportConfirmWindow.close();
                        }
                    },
                    {
                        text: '确定',
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            doRequest(formPanel.getForm().getValues());
                        }
                    }, '->'
                ],
            });
            exportConfirmWindow.show();
        };
        Grid.importExcel = function (obj, params, formItems, serverUrl) {
            return new Ext.Promise(function (resolve, reject) {
                if (!formItems) {
                    formItems = [];
                }
                else {
                    formItems = Ext.Array.clone(formItems);
                }
                if (!serverUrl) {
                    serverUrl = FastExt.Server.importEntityExcelUrl();
                }
                formItems.push({
                    xtype: 'filefield',
                    fieldLabel: 'Excel文件',
                    buttonText: '选择文件',
                    allowBlank: false,
                    name: 'file',
                    columnWidth: 1,
                    listeners: {
                        change: function (obj, value, eOpts) {
                            if (value != null && value.length != 0) {
                                if (!FastExt.FileModule.excel().match(value)) {
                                    if (formPanel.form) {
                                        formPanel.form.reset();
                                    }
                                    Ext.Msg.alert('系统提醒', "请上传有效的Excel文档！");
                                }
                            }
                        }
                    }
                });
                var formPanel = Ext.create('Ext.form.FormPanel', {
                    url: serverUrl,
                    method: 'POST',
                    margin: '5',
                    fileUpload: true,
                    width: 400,
                    callBacked: false,
                    border: 0,
                    layout: 'column',
                    defaults: {
                        labelWidth: 80,
                        margin: '5 5 5 5',
                        labelAlign: 'right',
                        emptyText: '请填写'
                    },
                    items: formItems,
                    doSubmit: function () {
                        var form = formPanel.form;
                        if (form.isValid()) {
                            var myMask_2 = new Ext.LoadMask({
                                msg: '正在导入中…',
                                target: uploadWin
                            });
                            myMask_2.show();
                            form.submit({
                                params: params,
                                success: function (form, action) {
                                    myMask_2.destroy();
                                    Ext.Msg.alert('系统提醒', action.result.message, function () {
                                        FastExt.Base.runCallBack(resolve, action.result);
                                        uploadWin.close();
                                    });
                                },
                                failure: function (form, action) {
                                    myMask_2.destroy();
                                    if (action.result) {
                                        Ext.Msg.alert('系统提醒', "导入失败！" + action.result.message);
                                    }
                                }
                            });
                        }
                    },
                    listeners: {
                        'render': function (obj) {
                            try {
                                new Ext.util.KeyMap({
                                    target: obj.getEl(),
                                    key: 13,
                                    fn: formPanel.doSubmit,
                                    scope: Ext.getBody()
                                });
                            }
                            catch (e) {
                                console.error(e);
                            }
                        }
                    }
                });
                var btnSubmitId = "btnSubmit" + new Date().getTime();
                var uploadWin = Ext.create('Ext.window.Window', {
                    title: "导入Excel数据",
                    layout: 'fit',
                    resizable: false,
                    scrollable: false,
                    items: [formPanel],
                    modal: true,
                    iconCls: 'extIcon extUpload',
                    animateTarget: obj,
                    constrain: true,
                    buttons: [
                        {
                            text: '重置',
                            width: 88,
                            iconCls: 'extIcon extReset',
                            handler: function () {
                                if (formPanel.form) {
                                    formPanel.form.reset();
                                }
                            }
                        },
                        {
                            text: '上传',
                            width: 88,
                            id: btnSubmitId,
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                formPanel.doSubmit();
                            }
                        }
                    ],
                    listeners: {
                        show: function (winObj, eOpts) {
                            if (formItems.length === 1) {
                                formPanel.getForm().findField('file').fileInputEl.dom.click();
                                Ext.getCmp(btnSubmitId).focus();
                            }
                        }
                    }
                });
                uploadWin.show();
            });
        };
        Grid.downDataGrid = function (grid) {
            if (!grid.getStore().entity) {
                Ext.Msg.alert('系统提醒', '下载失败！Grid的DataStore未绑定Entity!');
                return;
            }
            var message = "您确定下载当前条件下的所有数据吗？";
            var data = grid.getSelection();
            if (data.length > 0) {
                message = "您确定下载选中的" + data.length + "条数据吗？";
            }
            else if (grid.getStore().getTotalCount() === 0) {
                FastExt.Dialog.toast("当前页面暂无数据！");
                return;
            }
            if (!grid.getStore().entity) {
                FastExt.Dialog.toast("当前列表不支持此功能！");
                return;
            }
            Ext.Msg.confirm("系统提醒", message, function (button, text) {
                if (button === "yes") {
                    var params = {};
                    if (grid.getStore().entity) {
                        params.title = grid.getStore().entity.comment;
                    }
                    if (data.length > 0) {
                        if (!grid.getStore().entity.idProperty) {
                            FastExt.Dialog.toast("当前列表不支持下载选中数据功能！");
                            return;
                        }
                        for (var i = 0; i < data.length; i++) {
                            var record = data[i];
                            for (var j = 0; j < grid.getStore().entity.idProperty.length; j++) {
                                var idName = grid.getStore().entity.idProperty[j];
                                var key = "where['" + idName + "#']";
                                if (!params[key]) {
                                    params[key] = [];
                                }
                                params[key].push(record.get(idName));
                            }
                        }
                    }
                    FastExt.Dialog.showWait("正在下载中……");
                    FastExt.Server.downData(FastExt.Store.mergeStoreParamBySelect(grid.getStore(), params), function (success, message, data) {
                        FastExt.Dialog.hideWait();
                        if (success) {
                            FastExt.Dialog.toast(message);
                            location.href = "attach/" + data;
                        }
                        else {
                            Ext.Msg.alert('系统提醒', message);
                        }
                    });
                }
            });
        };
        Grid.loadDataGrid = function (obj, params) {
            return new Ext.Promise(function (resolve, reject) {
                var formPanel = Ext.create('Ext.form.FormPanel', {
                    url: FastExt.Server.loadEntityDataUrl(),
                    method: 'POST',
                    margin: '5',
                    fileUpload: true,
                    width: 400,
                    callBacked: false,
                    border: 0,
                    layout: 'column',
                    defaults: {
                        labelWidth: 80,
                        margin: '5 5 5 5',
                        labelAlign: 'right',
                        emptyText: '请填写'
                    },
                    items: [{
                            xtype: 'filefield',
                            fieldLabel: '数据文件',
                            buttonText: '选择文件',
                            allowBlank: false,
                            name: 'file',
                            columnWidth: 1,
                            listeners: {
                                change: function (obj, value, eOpts) {
                                    if (value != null && value.length != 0) {
                                        if (!FastExt.FileModule.data().match(value)) {
                                            if (formPanel.form) {
                                                formPanel.form.reset();
                                            }
                                            Ext.Msg.alert('系统提醒', "请上传有效的数据文件！");
                                        }
                                    }
                                }
                            }
                        }],
                    doSubmit: function () {
                        var form = formPanel.form;
                        if (form.isValid()) {
                            var myMask_3 = new Ext.LoadMask({
                                msg: '正在上传中…',
                                target: uploadWin
                            });
                            myMask_3.show();
                            form.submit({
                                params: params,
                                success: function (form, action) {
                                    myMask_3.destroy();
                                    Ext.Msg.alert('系统提醒', action.result.message, function () {
                                        FastExt.Base.runCallBack(resolve, action.result);
                                        uploadWin.close();
                                    });
                                },
                                failure: function (form, action) {
                                    myMask_3.destroy();
                                    if (action.result) {
                                        Ext.Msg.alert('系统提醒', "上传失败！" + action.result.message);
                                    }
                                }
                            });
                        }
                    },
                    listeners: {
                        'render': function (obj) {
                            try {
                                new Ext.util.KeyMap({
                                    target: obj.getEl(),
                                    key: 13,
                                    fn: formPanel.doSubmit,
                                    scope: Ext.getBody()
                                });
                            }
                            catch (e) {
                                console.error(e);
                            }
                        }
                    }
                });
                var btnSubmitId = "btnSubmit" + new Date().getTime();
                var uploadWin = Ext.create('Ext.window.Window', {
                    title: "上传实体数据",
                    layout: 'fit',
                    resizable: false,
                    scrollable: false,
                    items: [formPanel],
                    modal: true,
                    iconCls: 'extIcon extUpload',
                    animateTarget: obj,
                    constrain: true,
                    buttons: [
                        {
                            text: '重置',
                            width: 88,
                            iconCls: 'extIcon extReset',
                            handler: function () {
                                if (formPanel.form) {
                                    formPanel.form.reset();
                                }
                            }
                        },
                        {
                            text: '上传',
                            width: 88,
                            id: btnSubmitId,
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                formPanel.doSubmit();
                            }
                        }
                    ],
                    listeners: {
                        show: function (winObj, eOpts) {
                            formPanel.getForm().findField('file').fileInputEl.dom.click();
                            Ext.getCmp(btnSubmitId).focus();
                        }
                    }
                });
                uploadWin.show();
            });
        };
        Grid.saveGridColumn = function (grid) {
            if (Ext.isEmpty(grid.code)) {
                return FastExt.Base.getEmptyPromise();
            }
            if (!grid) {
                return;
            }
            return new Ext.Promise(function (resolve, reject) {
                try {
                    var params = {
                        "noneManager": true,
                    };
                    var hasGetColumnRender_1 = false, hasGetEditorField_1 = false;
                    if (grid.getStore() && grid.getStore().entity) {
                        hasGetColumnRender_1 = Ext.isFunction(grid.getStore().entity.getColumnRender);
                        hasGetEditorField_1 = Ext.isFunction(grid.getStore().entity.getEditorField);
                        if (FastExt.Base.toBool(grid.menuPanelList, false)) {
                            params["entityCode"] = grid.getStore().entity.entityCode;
                        }
                        if (FastExt.System.InitHandler.isSilenceGlobalSaving()) {
                            params["entityCode"] = grid.getStore().entity.entityCode;
                        }
                        if (!FastExt.Base.toBool(grid.mainEntityList, true)) {
                            delete params["entityCode"];
                        }
                        if (grid.columnEntityCode) {
                            params["entityCode"] = grid.columnEntityCode;
                        }
                    }
                    var columnInfos_1 = {};
                    Ext.each(grid.getColumns(), function (column, index) {
                        if (Ext.isEmpty(column.dataIndex)) {
                            if (column.xtype === "rownumberer") {
                                var columnInfo_1 = {};
                                columnInfo_1["width"] = column.width;
                                columnInfo_1["text"] = column.configText;
                                columnInfos_1["rownumberer"] = columnInfo_1;
                            }
                            return;
                        }
                        if (!FastExt.System.ManagerHandler.isSuperRole()) {
                            if (!column.hideable && column.hidden) {
                                return;
                            }
                        }
                        var columnInfo = { column: true };
                        columnInfo["width"] = column.width;
                        columnInfo["hidden"] = column.isHidden();
                        columnInfo["locked"] = column.isLocked();
                        columnInfo["text"] = column.configText;
                        columnInfo["dataIndex"] = column.dataIndex;
                        columnInfo["columnName"] = column.columnName;
                        columnInfo["align"] = column.align;
                        columnInfo["groupHeaderText"] = column.groupHeaderText;
                        columnInfo["detailsable"] = column.detailsable;
                        if (column.groupHeaderText && column.ownerCt.componentCls === "x-column-header") {
                            if (column.ownerCt.isHidden()) {
                                columnInfo["hidden"] = true;
                            }
                        }
                        if (grid.getStore().entity) {
                            columnInfo["entityCode"] = grid.getStore().entityCode;
                        }
                        var sortConfig = grid.getStore().getSorters().getByKey(column.dataIndex);
                        if (sortConfig) {
                            columnInfo["sortDirection"] = sortConfig.getDirection();
                        }
                        columnInfo["searchLink"] = column.searchLink;
                        columnInfo["searchExclude"] = column.searchExclude;
                        columnInfo["index"] = column.getIndex();
                        columnInfo["canEdit"] = grid.checkEditor() && FastExt.Base.toBool(column.editable, true);
                        columnInfo["version"] = FastExt.Base.toString(grid.columnsVersion, "1");
                        if (!hasGetColumnRender_1) {
                            columnInfo["rendererFunction"] = column.rendererFunction;
                            var cacheRender = FastExt.Renders.getRenderFunStr(column);
                            if (cacheRender && Ext.isEmpty(columnInfo["rendererFunction"])) {
                                columnInfo["rendererFunction"] = cacheRender;
                            }
                        }
                        if (!hasGetEditorField_1) {
                            if (grid.checkEditor() && FastExt.Base.toBool(column.editable, true)) {
                                columnInfo["editorField"] = FastExt.Grid.getColumnSimpleEditorJson(column);
                            }
                            else {
                                columnInfo["editorField"] = "";
                            }
                        }
                        columnInfos_1[column.code] = columnInfo;
                    });
                    columnInfos_1["PageTool"] = {
                        pageSize: grid.getStore().pageSize,
                        column: false
                    };
                    FastExt.Server.saveExtConfig(grid.code, "GridColumn", Ext.encode(columnInfos_1), function (success, message) {
                        resolve(success);
                    }, params);
                }
                catch (e) {
                    reject(e);
                }
            });
        };
        Grid.saveGridButton = function (grid, entity) {
            if (Ext.isEmpty(grid.code)) {
                return FastExt.Base.getEmptyPromise();
            }
            if (Ext.isEmpty(entity)) {
                return FastExt.Base.getEmptyPromise();
            }
            if (!FastExt.Base.toBool(grid.menuPanelList, false)) {
                return FastExt.Base.getEmptyPromise();
            }
            return new Ext.Promise(function (resolve, reject) {
                try {
                    var buttonInfos_1 = [];
                    Ext.each(grid.bindDetailButtons, function (button, index) {
                        var buttonInfo = {};
                        buttonInfo["text"] = button.text;
                        buttonInfo["iconCls"] = button.iconCls;
                        buttonInfo["icon"] = button.icon;
                        buttonInfo["handler"] = button.handler.toString();
                        buttonInfos_1.push(buttonInfo);
                    });
                    var params = {
                        "entityCode": entity.entityCode
                    };
                    FastExt.Server.saveExtConfig(entity.entityCode, "GridButton", Ext.encode(buttonInfos_1), function (success, message) {
                        resolve(success);
                    }, params);
                }
                catch (e) {
                    reject(e);
                }
            });
        };
        Grid.restoreGridButton = function (entityCode) {
            return new Ext.Promise(function (resolve, reject) {
                try {
                    FastExt.Server.showExtConfig(entityCode, "GridButton", function (success, value) {
                        var buttonInfos = [];
                        if (success) {
                            buttonInfos = Ext.decode(value);
                        }
                        resolve(buttonInfos);
                    });
                }
                catch (e) {
                    reject(e);
                }
            });
        };
        Grid.restoreGridColumn = function (grid) {
            return new Ext.Promise(function (resolve, reject) {
                try {
                    if (Ext.isEmpty(grid.code)) {
                        reject("Grid编号[code]不可为空！");
                        return;
                    }
                    if (!grid) {
                        return;
                    }
                    FastExt.Server.showExtConfig(grid.code, "GridColumn", function (success, value) {
                        if (!grid) {
                            return;
                        }
                        var columnInfos = {};
                        if (success) {
                            columnInfos = Ext.decode(value);
                        }
                        var rownumberer = columnInfos["rownumberer"];
                        var newColumns = [];
                        var newGroupColumns = {};
                        var sorts = [];
                        var configColumns = grid.getColumns();
                        var idProperties = [];
                        if (grid.getStore() !== null && grid.getStore().entity) {
                            idProperties = grid.getStore().entity.idProperty;
                        }
                        for (var i = 0; i < configColumns.length; i++) {
                            var column = configColumns[i];
                            if (column.xtype === "checkcolumn") {
                                continue;
                            }
                            if (rownumberer && column.xtype === "rownumberer") {
                                if (parseInt(column["width"]) > 0) {
                                    column["width"] = rownumberer.width;
                                }
                                continue;
                            }
                            if (FastExt.Base.toBool(grid.power, true)) {
                                if (!column.hideable && column.hidden) {
                                    continue;
                                }
                            }
                            var newColumn = column.cloneConfig();
                            newColumn["restoreConfig"] = true;
                            newColumn["groupHeaderText"] = column.groupHeaderText;
                            newColumn["index"] = i;
                            if (FastExt.System.ConfigHandler.isGridColumnRestore()) {
                                if (columnInfos.hasOwnProperty(column.code)) {
                                    var info = columnInfos[column.code];
                                    for (var key in info) {
                                        if (key === "renderer" || key === "rendererFunction") {
                                            continue;
                                        }
                                        newColumn[key] = info[key];
                                    }
                                }
                            }
                            if (!Ext.isEmpty(newColumn.sortDirection) && !Ext.isEmpty(column.dataIndex)) {
                                sorts.push({
                                    property: newColumn.dataIndex,
                                    direction: newColumn.sortDirection.toUpperCase(),
                                });
                            }
                            if (!Ext.isEmpty(newColumn["groupHeaderText"])) {
                                var groupHeaderText = newColumn["groupHeaderText"];
                                if (!newGroupColumns.hasOwnProperty(groupHeaderText)) {
                                    newGroupColumns[groupHeaderText] = [];
                                }
                                newGroupColumns[groupHeaderText].push(newColumns.length);
                            }
                            if (FastExt.System.ConfigHandler.isGridIDColumnHidden() && idProperties && !Ext.isEmpty(column.dataIndex)) {
                                for (var j = 0; j < idProperties.length; j++) {
                                    var idName = idProperties[j];
                                    if (newColumn.dataIndex === idName) {
                                        newColumn["hidden"] = true;
                                    }
                                }
                            }
                            if (FastExt.Base.toString(newColumn.version, "1") !== FastExt.Base.toString(grid.columnsVersion, "1")) {
                                newColumn["index"] = i;
                            }
                            newColumns.push(newColumn);
                        }
                        var waitRemove = [];
                        for (var key in newGroupColumns) {
                            var indexArray = newGroupColumns[key];
                            if (indexArray.length < 2) {
                                continue;
                            }
                            var minIndex = 999999;
                            var columns = [];
                            for (var i = 0; i < indexArray.length; i++) {
                                var indexValue = indexArray[i];
                                minIndex = Math.min(minIndex, indexValue);
                                var columnInfo = newColumns[indexValue];
                                columns.push(columnInfo);
                            }
                            columns.sort(function (a, b) {
                                return a.index - b.index;
                            });
                            newColumns[minIndex] = {
                                index: minIndex,
                                text: key,
                                menuDisabled: true,
                                columns: columns
                            };
                            waitRemove = waitRemove.concat(columns);
                        }
                        for (var i = 0; i < waitRemove.length; i++) {
                            newColumns = Ext.Array.remove(newColumns, waitRemove[i]);
                        }
                        var hasFlex = false;
                        newColumns.sort(function (a, b) {
                            hasFlex = !Ext.isEmpty(a.flex) || !Ext.isEmpty(b.flex);
                            return a.index - b.index;
                        });
                        if (columnInfos.hasOwnProperty("PageTool")) {
                            var pageTool = columnInfos["PageTool"];
                            grid.getStore().pageSize = Math.min(pageTool.pageSize, FastExt.Store.maxPageSize);
                            var comboPage = grid.down("combo[pageTool=true]");
                            if (comboPage) {
                                comboPage.setValue(Math.min(pageTool.pageSize, FastExt.Store.maxPageSize));
                            }
                        }
                        if (!FastExt.System.InitHandler.isSilenceGlobalSaving()) {
                            grid.getStore().sort(sorts);
                        }
                        var lastColumn = { xtype: 'rowplaceholder', minWidth: 30 };
                        if (!hasFlex) {
                            lastColumn["flex"] = 1;
                        }
                        newColumns.push(lastColumn);
                        grid.reconfigure(newColumns);
                        resolve();
                    });
                }
                catch (e) {
                    reject(e);
                }
            });
        };
        Grid.restoreGridOperate = function (grid) {
            return new Ext.Promise(function (resolve, reject) {
                try {
                    if (Ext.isEmpty(grid.code)) {
                        reject("Grid编号[code]不可为空！");
                        return;
                    }
                    FastExt.Server.showExtConfig(grid.code, "GridOperate", function (success, value) {
                        var cacheOperate = {};
                        if (success) {
                            cacheOperate = Ext.decode(value);
                        }
                        if (!grid) {
                            return;
                        }
                        if (!cacheOperate.hasOwnProperty("showRowNumber") && FastExt.Grid.checkConfigGridNumberColumn(grid)) {
                            cacheOperate["showRowNumber"] = true;
                        }
                        if (!grid.operate) {
                            grid.operate = new GridOperate();
                        }
                        grid.operate = FastExt.Json.mergeJson(new GridOperate(), grid.operate);
                        grid.operate = FastExt.Json.mergeJson(grid.operate, cacheOperate);
                        resolve();
                    });
                }
                catch (e) {
                    reject(e);
                }
            });
        };
        Grid.getColumnGrid = function (column) {
            if (!column.grid) {
                column.grid = column.up("treepanel,grid");
            }
            if (column.grid.ownerGrid) {
                return column.grid.ownerGrid;
            }
            return column.grid;
        };
        Grid.getHeaderContainerGrid = function (ct) {
            if (!ct.grid) {
                ct.grid = ct.up("treepanel,grid");
            }
            if (ct.grid.ownerGrid) {
                return ct.grid.ownerGrid;
            }
            return null;
        };
        Grid.showColumnCompute = function (grid, column, type) {
            try {
                if (!column) {
                    Ext.Msg.alert('系统提醒', '计算失败!计算列无效！');
                    return;
                }
                if (!grid.getStore().entity) {
                    Ext.Msg.alert('系统提醒', '计算失败！Grid的DataStore未绑定Entity!');
                    return;
                }
                var selection = grid.getSelection();
                if (selection.length > 0) {
                    var value = null;
                    var title = "";
                    for (var i = 0; i < selection.length; i++) {
                        var record = selection[i];
                        var columnValue = parseFloat(record.get(column.dataIndex));
                        if (type === 'sum') {
                            title = column.configText + "总和：";
                            if (!value) {
                                value = 0;
                            }
                            value += columnValue;
                        }
                        else if (type === 'avg') {
                            title = column.configText + "平均值：";
                            if (!value) {
                                value = 0;
                            }
                            value += columnValue;
                        }
                        else if (type === 'min') {
                            title = column.configText + "最小值：";
                            if (!value) {
                                value = columnValue;
                            }
                            value = Math.min(columnValue, value);
                        }
                        else if (type === 'max') {
                            title = column.configText + "最大值：";
                            if (!value) {
                                value = columnValue;
                            }
                            value = Math.max(columnValue, value);
                        }
                    }
                    if (type === 'avg') {
                        value = value / selection.length;
                    }
                    try {
                        if (Ext.isFunction(column.renderer)) {
                            Ext.Msg.alert('系统提醒', "当前选中的数据，" + title + column.renderer(value));
                        }
                        else {
                            Ext.Msg.alert('系统提醒', "当前选中的数据，" + title + value);
                        }
                    }
                    catch (e) {
                        Ext.Msg.alert('系统提醒', "当前选中的数据，" + title + value);
                    }
                    return;
                }
                var params = {
                    "entityCode": grid.getStore().entity.entityCode,
                    "field": column.dataIndex,
                    "type": type,
                    "storeId": grid.getStore().getStoreCode()
                };
                FastExt.Dialog.showWait("正在计算中……");
                $.post(FastExt.Server.computeUrl(), params, function (result) {
                    FastExt.Dialog.hideWait();
                    var msg = "";
                    if (type === 'sum') {
                        msg = column.configText + "总和：";
                    }
                    else if (type === 'avg') {
                        msg = column.configText + "平均值：";
                    }
                    else if (type === 'min') {
                        msg = column.configText + "最小值：";
                    }
                    else if (type === 'max') {
                        msg = column.configText + "最大值：";
                    }
                    try {
                        if (Ext.isFunction(column.renderer)) {
                            Ext.Msg.alert('系统提醒', msg + column.renderer(result.data));
                        }
                        else {
                            Ext.Msg.alert('系统提醒', msg + result.data);
                        }
                    }
                    catch (e) {
                        Ext.Msg.alert('系统提醒', msg + result.data);
                    }
                });
            }
            catch (e) {
                console.error(e);
            }
        };
        Grid.getColumnSimpleEditor = function (column, search) {
            try {
                var editor = {};
                if (Ext.isObject(column.field)) {
                    editor.xtype = column.field.xtype;
                }
                else if (Ext.isString(column.field)) {
                    editor.xtype = column.field;
                }
                else {
                    editor.xtype = "textfield";
                }
                if (Ext.isObject(column.config.field)) {
                    if (search) {
                        editor = FastExt.Base.copy(column.config.field);
                    }
                    else {
                        editor = column.config.field;
                    }
                }
                if (search) {
                    if (FastExt.Form.isContentField(column.field)
                        || FastExt.Form.isHtmlContentField(column.field)
                        || FastExt.Form.isTargetField(column.field)
                        || FastExt.Form.isFileField(column.field)
                        || FastExt.Form.isFilesField(column.field)
                        || FastExt.Form.isMonacoEditorField(column.field)) {
                        editor.xtype = "textfield";
                    }
                    if (FastExt.Form.isPCAField(column.field)) {
                        editor.selectType = 1;
                        if (column.text.indexOf("省") >= 0) {
                            editor.level = 1;
                        }
                        if (column.text.indexOf("市") >= 0) {
                            editor.level = 2;
                        }
                        if (column.text.indexOf("区") >= 0) {
                            editor.level = 3;
                        }
                    }
                }
                if (Ext.isEmpty(editor.xtype)) {
                    editor.xtype = "textfield";
                }
                editor.dataIndex = column.dataIndex;
                if (search) {
                    editor.columnSearchField = true;
                }
                return editor;
            }
            catch (e) {
                console.error(e);
            }
            return null;
        };
        Grid.getColumnSimpleEditorJson = function (column, search) {
            var columnSimpleEditor = FastExt.Grid.getColumnSimpleEditor(column, search);
            if (columnSimpleEditor) {
                return FastExt.Json.objectToJsonUnsafe(columnSimpleEditor);
            }
            return null;
        };
        Grid.showBatchEditColumnMenu = function (column) {
            var editorField = Ext.create(column.getConfigField());
            if (!editorField) {
                FastExt.Dialog.toast("无编辑权限（E-4）！");
                return;
            }
            editorField.flex = 1;
            editorField.emptyText = "请输入";
            var putRecord = function (fieldObj) {
                if (!Ext.isEmpty(fieldObj.getValue())) {
                    var columnGrid = FastExt.Grid.getColumnGrid(column);
                    var store = columnGrid.getStore();
                    if (!store) {
                        return;
                    }
                    store.holdUpdate = true;
                    var selectData = columnGrid.getSelectionModel().getSelection();
                    if (selectData.length > 0) {
                        Ext.each(selectData, function (record, index) {
                            FastExt.Store.setRecordValue(record, column.dataIndex, fieldObj);
                        });
                    }
                    else {
                        store.each(function (record, index) {
                            FastExt.Store.setRecordValue(record, column.dataIndex, fieldObj);
                        });
                    }
                    store.holdUpdate = false;
                    store.fireEvent("endupdate");
                }
            };
            var placeholder = "批量修改当前页的【" + column.configText + "】数据";
            if (FastExt.Grid.getColumnGrid(column).getSelection().length > 0) {
                placeholder = "批量修改选择的" + FastExt.Grid.getColumnGrid(column).getSelection().length + "条【" + column.configText + "】数据";
            }
            if (Ext.isFunction(editorField.setEmptyText)) {
                editorField.setEmptyText(placeholder);
            }
            editorField.editable = true;
            if (Ext.isFunction(editorField.showWindow)) {
                editorField.showWindow(column, function (result) {
                    putRecord(result);
                }, placeholder);
                return;
            }
            if (!column.batchEditMenu) {
                column.batchEditMenu = Ext.create('Ext.menu.Menu', {
                    showSeparator: false,
                    scrollToHidden: true,
                    layout: 'fit',
                    shadow: false,
                    editorMenu: true,
                    modal: true,
                    doUpdate: function () {
                        var me = this;
                        var fieldObj = me.items.get(0).items.get(0);
                        if (!fieldObj) {
                            return;
                        }
                        if (!fieldObj.isValid()) {
                            FastExt.Component.shakeComment(me);
                            FastExt.Dialog.toast(FastExt.Form.getFieldError(fieldObj)[0]);
                            return;
                        }
                        var btn = this.down("button[name='confirm']");
                        btn.setText("稍等");
                        btn.setDisabled(true);
                        new Ext.Promise(function (resolve, reject) {
                            putRecord(fieldObj);
                            fieldObj.setValue(null);
                            resolve();
                        }).then(function () {
                            btn.setText("确定");
                            btn.setDisabled(false);
                            me.hide();
                        });
                    },
                    items: [
                        {
                            xtype: 'container',
                            layout: {
                                type: 'hbox',
                                align: 'stretch'
                            },
                            style: {
                                background: "#ffffff",
                                borderWidth: 1,
                                borderColor: "#ffffff",
                                color: '#eeeee'
                            },
                            border: 0,
                            items: [editorField,
                                {
                                    xtype: 'button',
                                    text: '确定',
                                    name: 'confirm',
                                    iconCls: "extIcon extOk",
                                    margin: '0 0 0 2',
                                    height: FastExt.Form.getFieldMinHeight(false),
                                    handler: function () {
                                        column.batchEditMenu.doUpdate();
                                    }
                                }
                            ]
                        }
                    ],
                    listeners: {
                        show: function (obj, epts) {
                            var fieldObj = obj.items.get(0).items.get(0);
                            fieldObj.focus();
                        }
                    }
                });
                column.batchEditMenu.addCls("edit-menu");
                column.batchEditMenu.addCls("edit-details-menu");
            }
            column.batchEditMenu.setWidth(Math.max(column.getWidth(), 225));
            column.batchEditMenu.setHeight(column.getHeight());
            column.batchEditMenu.showBy(column, "tl");
        };
        Grid.showBatchUpdateColumnWindow = function (column) {
            var editorField = Ext.create(column.getConfigField());
            if (!editorField) {
                FastExt.Dialog.toast("无编辑权限（E-5）！");
                return;
            }
            editorField.flex = 1;
            editorField.emptyText = "请输入";
            editorField.editable = true;
            var grid = FastExt.Grid.getColumnGrid(column);
            var store = grid.getStore();
            var message = "批量更新【" + column.configText + "】，当前条件下共" + store.getTotalCount() + "条数据。";
            var doUpdate = function (win, fieldName, fieldValue) {
                FastExt.Dialog.showWait("正在更新中，请稍后……");
                var params = { "entityCode": store.entity.entityCode, "storeId": store.getStoreCode() };
                params["menu"] = store.entity.comment;
                params["field"] = fieldName;
                params["fieldValue"] = fieldValue;
                FastExt.Server.updateDBEntity(params, function (success, message) {
                    FastExt.Dialog.hideWait();
                    if (success) {
                        FastExt.Dialog.toast(message);
                        store.reload();
                        if (win) {
                            win.close();
                        }
                    }
                    else {
                        FastExt.Dialog.showAlert("系统提醒", message);
                    }
                });
            };
            if (Ext.isFunction(editorField.showWindow)) {
                editorField.showWindow(column, function (result) {
                    FastExt.Dialog.showConfirm("系统提醒", "将批量更新数据，此更新是永久性且无法撤销！请您确认！", function (button) {
                        if (button === "yes") {
                            doUpdate(null, FastExt.Entity.getRealAttr(column), result.getValue());
                        }
                    });
                }, message);
                return;
            }
            editorField.columnWidth = 1;
            editorField.dataField = true;
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                region: 'center',
                border: 0,
                defaults: {
                    margin: '5 5 5 5'
                },
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                },
                items: [
                    editorField,
                    {
                        xtype: "checkboxfield",
                        height: 50,
                        boxLabel: message + "<b style='color:red;'>我已了解此更新是永久性且无法撤销 ！</b>",
                        listeners: {
                            change: function (obj, newValue) {
                                batchEditWin.down("#updateBtn").setDisabled(!newValue);
                            }
                        }
                    }
                ]
            });
            var batchEditWin = Ext.create('Ext.window.Window', {
                title: "批量更新数据",
                subtitle: "v3",
                iconCls: 'extIcon extEdit',
                width: 450,
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'stretch'
                },
                items: [formPanel],
                modal: true,
                constrain: true,
                resizable: false,
                unpin: false,
                buttons: [
                    "->",
                    {
                        text: '取消',
                        iconCls: 'extIcon extClose',
                        handler: function () {
                            batchEditWin.close();
                        }
                    },
                    {
                        text: '立即更新',
                        itemId: 'updateBtn',
                        disabled: true,
                        iconCls: 'extIcon extOk whiteColor',
                        handler: function () {
                            var fieldName = FastExt.Entity.getRealAttr(column);
                            var dataField = formPanel.down("[dataField=true]");
                            if (dataField) {
                                doUpdate(batchEditWin, fieldName, dataField.getValue());
                            }
                        }
                    }
                ]
            });
            batchEditWin.show();
        };
        Grid.showBatchReplaceColumnWindow = function (column) {
            var grid = FastExt.Grid.getColumnGrid(column);
            var store = grid.getStore();
            var message = "批量替换【" + column.configText + "】，当前条件下共" + store.getTotalCount() + "条数据。";
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                region: 'center',
                autoScroll: true,
                border: 0,
                defaults: {
                    margin: '5 5 5 5',
                    labelWidth: 80,
                    labelAlign: 'right',
                },
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                },
                items: [
                    {
                        name: "replace",
                        xtype: "textfield",
                        fieldLabel: "替换的字符",
                        columnWidth: 1,
                        allowBlank: false
                    },
                    {
                        name: "toValue",
                        xtype: "textfield",
                        fieldLabel: "新的字符",
                        columnWidth: 1,
                        allowBlank: false
                    },
                    {
                        xtype: "checkboxfield",
                        boxLabel: message + "<b style='color:red;'>我已了解此替换是永久性且无法撤销 ！</b>",
                        height: 50,
                        listeners: {
                            change: function (obj, newValue) {
                                batchReplaceWin.down("#updateBtn").setDisabled(!newValue);
                            },
                        }
                    }
                ]
            });
            var batchReplaceWin = Ext.create('Ext.window.Window', {
                title: "批量替换数据",
                iconCls: 'extIcon extEdit',
                width: 450,
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'stretch'
                },
                items: [formPanel],
                modal: true,
                constrain: true,
                resizable: false,
                unpin: false,
                doUpdate: function (params) {
                    var me = this;
                    FastExt.Dialog.showWait("正在替换中，请稍后……");
                    params["entityCode"] = store.entity.entityCode;
                    params["storeId"] = store.getStoreCode();
                    params["menu"] = store.entity.comment;
                    params["field"] = FastExt.Entity.getRealAttr(column);
                    FastExt.Server.replaceDBEntity(params, function (success, message) {
                        FastExt.Dialog.hideWait();
                        if (success) {
                            FastExt.Dialog.toast(message);
                            store.reload();
                            me.close();
                        }
                        else {
                            FastExt.Dialog.showAlert("系统提醒", message);
                        }
                    });
                },
                buttons: [
                    "->",
                    {
                        text: '取消',
                        iconCls: 'extIcon extClose',
                        handler: function () {
                            batchReplaceWin.close();
                        }
                    },
                    {
                        text: '立即替换',
                        itemId: 'updateBtn',
                        disabled: true,
                        iconCls: 'extIcon extOk whiteColor',
                        handler: function () {
                            batchReplaceWin.doUpdate(formPanel.getValues());
                        }
                    }
                ]
            });
            batchReplaceWin.show();
        };
        Grid.showBatchEditColumnRandomWindow = function (column) {
            if (Ext.isFunction(window["showRandomData"])) {
                window["showRandomData"](column);
                return;
            }
            var idCode = "Random" + Ext.now();
            var autoType = 1;
            var selectReadOnly = false;
            var defaultValue;
            var dateFormat = 'Y-m-d H:i:s';
            var dataLength = FastExt.Grid.getColumnGrid(column).getStore().getTotalCount();
            var title = "批量随机生成当前页的【" + column.configText + "】列数据";
            if (FastExt.Grid.getColumnGrid(column).getSelection().length > 0) {
                title = "批量随机生成选择的" + FastExt.Grid.getColumnGrid(column).getSelection().length + "条【" + column.configText + "】列数据";
                dataLength = FastExt.Grid.getColumnGrid(column).getSelection().length;
            }
            if (FastExt.Grid.isNumberColumn(column)) {
                autoType = 2;
                selectReadOnly = true;
            }
            else if (FastExt.Grid.isDateColumn(column)) {
                autoType = 3;
                if (Ext.isObject(column.field)) {
                    dateFormat = column.field.format;
                }
                selectReadOnly = true;
            }
            else if (FastExt.Grid.isEnumColumn(column) || FastExt.Grid.isComboColumn(column)) {
                autoType = 5;
                selectReadOnly = true;
                var intArray_1 = [];
                var fieldObj_1 = Ext.create(column.field);
                fieldObj_1.getStore().each(function (record, index) {
                    intArray_1.push(record.get(fieldObj_1.valueField));
                });
                defaultValue = intArray_1.join(",");
            }
            else if (FastExt.Grid.isContentColumn(column)) {
                autoType = 4;
            }
            var textField = {
                xtype: 'fieldcontainer',
                layout: 'column',
                columnWidth: 1,
                id: idCode + "_1",
                defaults: {
                    labelWidth: 60,
                    margin: '5 5 5 5',
                    labelAlign: 'right',
                    columnWidth: 1,
                    emptyText: '请填写'
                },
                random: function () {
                    var valueArray = [];
                    var textPrefix = Ext.getCmp(idCode + "_textPrefix").getValue();
                    var textStartNumber = Ext.getCmp(idCode + "_textStartNumber").getValue();
                    for (var i = parseInt(textStartNumber); i < Number.MAX_VALUE; i++) {
                        valueArray.push(textPrefix + i);
                        if (valueArray.length === dataLength) {
                            break;
                        }
                    }
                    return valueArray;
                },
                items: [
                    {
                        xtype: 'fieldset',
                        columnWidth: 1,
                        layout: 'column',
                        defaults: {
                            labelWidth: 60,
                            margin: '5 5 5 5',
                            labelAlign: 'right',
                            columnWidth: 1,
                            emptyText: '请填写'
                        },
                        title: '文字设置',
                        items: [
                            {
                                fieldLabel: '文字前缀',
                                id: idCode + '_textPrefix',
                                allowBlank: false,
                                xtype: 'textfield',
                            },
                            {
                                fieldLabel: '开始序数',
                                id: idCode + '_textStartNumber',
                                value: 1,
                                allowBlank: false,
                                xtype: 'numberfield',
                            }
                        ]
                    }
                ]
            };
            var numberField = {
                xtype: 'fieldcontainer',
                layout: 'column',
                columnWidth: 1,
                id: idCode + "_2",
                hidden: true,
                disabled: true,
                defaults: {
                    labelWidth: 60,
                    margin: '5 5 5 5',
                    labelAlign: 'right',
                    columnWidth: 1,
                    emptyText: '请填写'
                },
                random: function () {
                    var valueArray = [];
                    var dotNumber = Ext.getCmp(idCode + "_dotNumber").getValue();
                    var minNumber = Ext.getCmp(idCode + "_minNumber").getValue();
                    var maxNumber = Ext.getCmp(idCode + "_maxNumber").getValue();
                    if (minNumber > maxNumber) {
                        FastExt.Dialog.showAlert("系统提醒", "最大数字必须大于最小数字！");
                        return;
                    }
                    for (var i = 0; i < Number.MAX_VALUE; i++) {
                        var numberValue = Math.random() * (maxNumber - minNumber) + minNumber;
                        valueArray.push(numberValue.toFixed(dotNumber));
                        if (valueArray.length === dataLength) {
                            break;
                        }
                    }
                    return valueArray;
                },
                items: [
                    {
                        xtype: 'fieldset',
                        columnWidth: 1,
                        layout: 'column',
                        defaults: {
                            labelWidth: 60,
                            margin: '5 5 5 5',
                            labelAlign: 'right',
                            columnWidth: 1,
                            emptyText: '请填写'
                        },
                        title: '数字设置',
                        items: [
                            {
                                fieldLabel: '保留位数',
                                id: idCode + '_dotNumber',
                                value: 0,
                                allowBlank: false,
                                xtype: 'numberfield',
                            },
                            {
                                fieldLabel: '最小数字',
                                id: idCode + '_minNumber',
                                value: 0,
                                allowBlank: false,
                                xtype: 'numberfield',
                            },
                            {
                                fieldLabel: '最大数字',
                                id: idCode + '_maxNumber',
                                allowBlank: false,
                                xtype: 'numberfield',
                            }
                        ]
                    }
                ]
            };
            var dateField = {
                xtype: 'fieldcontainer',
                layout: 'column',
                columnWidth: 1,
                id: idCode + "_3",
                hidden: true,
                disabled: true,
                defaults: {
                    labelWidth: 60,
                    margin: '5 5 5 5',
                    labelAlign: 'right',
                    columnWidth: 1,
                    emptyText: '请填写'
                },
                random: function () {
                    var valueArray = [];
                    var minDateStr = Ext.getCmp(idCode + "_minDate").getValue();
                    var minDate = Ext.Date.parse(minDateStr, FastExt.Base.guessDateFormat(minDateStr));
                    var maxDateStr = Ext.getCmp(idCode + "_maxDate").getValue();
                    var maxDate = Ext.Date.parse(maxDateStr, FastExt.Base.guessDateFormat(maxDateStr));
                    if (minDate.getTime() > maxDate.getTime()) {
                        FastExt.Dialog.showAlert("系统提醒", "最大日期必须大于最小日期！");
                        return;
                    }
                    for (var i = 0; i < Number.MAX_VALUE; i++) {
                        var sub = maxDate.getTime() - minDate.getTime();
                        var numberValue = Math.random() * sub + minDate.getTime();
                        var randDate = new Date(numberValue);
                        valueArray.push(Ext.Date.format(randDate, Ext.getCmp(idCode + "_minDate").format));
                        if (valueArray.length === dataLength) {
                            break;
                        }
                    }
                    return valueArray;
                },
                items: [
                    {
                        xtype: 'fieldset',
                        columnWidth: 1,
                        layout: 'column',
                        defaults: {
                            labelWidth: 60,
                            margin: '5 5 5 5',
                            labelAlign: 'right',
                            columnWidth: 1,
                            emptyText: '请填写'
                        },
                        title: '日期设置',
                        items: [
                            {
                                fieldLabel: '最小日期',
                                xtype: 'datefield',
                                id: idCode + '_minDate',
                                allowBlank: false,
                                format: dateFormat
                            },
                            {
                                fieldLabel: '最大日期',
                                xtype: 'datefield',
                                id: idCode + '_maxDate',
                                allowBlank: false,
                                format: dateFormat
                            }
                        ]
                    }
                ]
            };
            var longTextField = {
                xtype: 'fieldcontainer',
                layout: 'column',
                columnWidth: 1,
                id: idCode + "_4",
                hidden: true,
                disabled: true,
                defaults: {
                    labelWidth: 60,
                    margin: '5 5 5 5',
                    labelAlign: 'right',
                    columnWidth: 1,
                    emptyText: '请填写'
                },
                random: function () {
                    var valueArray = [];
                    var minNumber = Ext.getCmp(idCode + "_minLength").getValue();
                    var maxNumber = Ext.getCmp(idCode + "_maxLength").getValue();
                    var longTextList = Ext.getCmp(idCode + "_longTextList").getValue();
                    if (minNumber > maxNumber) {
                        FastExt.Dialog.showAlert("系统提醒", "最大长度必须大于最小长度！");
                        return;
                    }
                    var charArray = longTextList.toString().trimAllSymbol().split("");
                    for (var i = 0; i < Number.MAX_VALUE; i++) {
                        var numberValue = FastExt.Base.randomInt(minNumber, maxNumber);
                        var stringArray = [];
                        for (var j = 0; j < Number.MAX_VALUE; j++) {
                            var indexValue = FastExt.Base.randomInt(0, charArray.length - 1);
                            var charStr = charArray[indexValue];
                            stringArray.push(charStr);
                            if (stringArray.length === numberValue) {
                                break;
                            }
                        }
                        valueArray.push(stringArray.join(""));
                        if (valueArray.length === dataLength) {
                            break;
                        }
                    }
                    return valueArray;
                },
                items: [
                    {
                        xtype: 'fieldset',
                        columnWidth: 1,
                        layout: 'column',
                        defaults: {
                            labelWidth: 60,
                            margin: '5 5 5 5',
                            labelAlign: 'right',
                            columnWidth: 1,
                            emptyText: '请填写'
                        },
                        title: '文字设置',
                        items: [
                            {
                                fieldLabel: '文字库',
                                id: idCode + '_longTextList',
                                allowBlank: false,
                                xtype: 'textfield',
                                listeners: {
                                    change: function (obj, newValue, oldValue, eOpts) {
                                        Ext.getCmp(idCode + "_maxLength").setValue(newValue.truthLength());
                                    }
                                }
                            },
                            {
                                fieldLabel: '最小长度',
                                id: idCode + '_minLength',
                                value: 1,
                                minValue: 1,
                                allowBlank: false,
                                xtype: 'numberfield',
                            },
                            {
                                fieldLabel: '最大长度',
                                id: idCode + '_maxLength',
                                allowBlank: false,
                                minValue: 1,
                                xtype: 'numberfield',
                            }
                        ]
                    }
                ]
            };
            var numberArrayField = {
                xtype: 'fieldcontainer',
                layout: 'column',
                columnWidth: 1,
                id: idCode + "_5",
                hidden: true,
                disabled: true,
                defaults: {
                    labelWidth: 60,
                    margin: '5 5 5 5',
                    labelAlign: 'right',
                    columnWidth: 1,
                    emptyText: '请填写'
                },
                random: function () {
                    var valueArray = [];
                    var numberList = Ext.getCmp(idCode + "_numberList").getValue();
                    var charArray = numberList.toString().split(",");
                    for (var i = 0; i < Number.MAX_VALUE; i++) {
                        var value = charArray[FastExt.Base.randomInt(0, charArray.length - 1)];
                        if (Ext.isEmpty(value)) {
                            continue;
                        }
                        valueArray.push(value);
                        if (valueArray.length === dataLength) {
                            break;
                        }
                    }
                    return valueArray;
                },
                items: [
                    {
                        xtype: 'fieldset',
                        columnWidth: 1,
                        layout: 'column',
                        defaults: {
                            labelWidth: 60,
                            margin: '5 5 5 5',
                            labelAlign: 'right',
                            columnWidth: 1,
                            emptyText: '请填写'
                        },
                        title: '数字集合设置',
                        items: [
                            {
                                fieldLabel: '数字集合',
                                id: idCode + '_numberList',
                                allowBlank: false,
                                value: defaultValue,
                                xtype: 'textfield'
                            },
                            {
                                xtype: 'displayfield',
                                value: '以英文逗号（,）为分隔符！'
                            }
                        ]
                    }
                ]
            };
            var setPanel = Ext.create('Ext.form.Panel', {
                bodyPadding: 5,
                region: 'center',
                autoScroll: true,
                layout: "column",
                defaults: {
                    labelWidth: 60,
                    margin: '5 5 5 5',
                    labelAlign: 'right',
                    columnWidth: 1,
                    emptyText: '请填写'
                },
                items: [
                    {
                        xtype: "combo",
                        name: 'autoType',
                        fieldLabel: '随机类型',
                        editable: false,
                        displayField: "text",
                        valueField: "id",
                        value: 1,
                        listeners: {
                            change: function (obj, newValue, oldValue, eOpts) {
                                Ext.getCmp(idCode + "_" + oldValue).setHidden(true);
                                Ext.getCmp(idCode + "_" + oldValue).setDisabled(true);
                                Ext.getCmp(idCode + "_" + newValue).setHidden(false);
                                Ext.getCmp(idCode + "_" + newValue).setDisabled(false);
                            }
                        },
                        store: Ext.create('Ext.data.Store', {
                            fields: ["id", "text"],
                            data: [
                                {
                                    'text': '文本',
                                    "id": 1
                                },
                                {
                                    'text': '长文本',
                                    "id": 4
                                },
                                {
                                    'text': '数字',
                                    "id": 2
                                },
                                {
                                    'text': '数字集合',
                                    "id": 5
                                },
                                {
                                    'text': '日期',
                                    "id": 3
                                }
                            ]
                        })
                    }, textField, numberField, dateField, longTextField, numberArrayField
                ]
            });
            var setColumnValue = function (valueArray) {
                var columnGrid = FastExt.Grid.getColumnGrid(column);
                var store = columnGrid.getStore();
                if (valueArray.length === 0 || !store) {
                    return;
                }
                store.holdUpdate = true;
                var selectData = columnGrid.getSelectionModel().getSelection();
                if (selectData.length > 0) {
                    Ext.each(selectData, function (record, index) {
                        if (Ext.isObject(valueArray[index])) {
                            FastExt.Store.setRecordValue(record, column.dataIndex, valueArray[index]);
                        }
                        else {
                            record.set(column.dataIndex, valueArray[index]);
                        }
                    });
                }
                else {
                    store.each(function (record, index) {
                        if (Ext.isObject(valueArray[index])) {
                            FastExt.Store.setRecordValue(record, column.dataIndex, valueArray[index]);
                        }
                        else {
                            record.set(column.dataIndex, valueArray[index]);
                        }
                    });
                }
                store.holdUpdate = false;
                store.fireEvent("endupdate");
            };
            var win = Ext.create('Ext.window.Window', {
                title: title,
                height: 360,
                iconCls: 'extIcon extRandom',
                width: 450,
                layout: 'border',
                items: [setPanel],
                modal: true,
                constrain: true,
                listeners: {
                    show: function () {
                        var autoTypeField = setPanel.getField("autoType");
                        autoTypeField.setValue(autoType);
                        autoTypeField.setReadOnly(selectReadOnly);
                    }
                },
                buttons: [
                    "->",
                    {
                        text: '取消',
                        iconCls: 'extIcon extClose',
                        handler: function () {
                            win.close();
                        }
                    },
                    {
                        text: '立即生成',
                        iconCls: 'extIcon extOk whiteColor',
                        handler: function () {
                            var form = setPanel.getForm();
                            if (form.isValid()) {
                                var buildType = setPanel.getFieldValue("autoType");
                                var valueArray = Ext.getCmp(idCode + "_" + buildType).random();
                                if (!valueArray || valueArray.length === 0) {
                                    return;
                                }
                                setColumnValue(valueArray);
                                win.close();
                            }
                        }
                    }
                ]
            });
            win.show();
        };
        Grid.refreshColumnStyle = function (column) {
            try {
                if (!Ext.isEmpty(column.dataIndex)) {
                    var sortDirection = column.sortDirection;
                    if (Ext.isEmpty(sortDirection)) {
                        sortDirection = "<font size='1'></font>";
                    }
                    else {
                        if (sortDirection === "ASC") {
                            sortDirection = "<span  style=\"color: " + FastExt.Grid.operateWarnColor + "; font-size: xx-small; \">&nbsp;&nbsp;[正序]</span>";
                        }
                        else {
                            sortDirection = "<span  style=\"color: " + FastExt.Grid.operateWarnColor + "; font-size: xx-small; \">&nbsp;&nbsp;[倒序]</span>";
                        }
                    }
                    if (Ext.isEmpty(column.sumText)) {
                        column.sumText = "<font size='1'></font>";
                    }
                    if (column.searching) {
                        column.setText(FastExt.Base.getSVGIcon("extSearch") + "&nbsp;" + column.configText + column.sumText + sortDirection + "&nbsp;");
                        column.setStyle('color', FastExt.Grid.operateWarnColor);
                    }
                    else {
                        column.setText("&nbsp;" + column.configText + column.sumText + sortDirection + "&nbsp;");
                        column.setStyle('color', '#000000');
                    }
                    FastExt.Grid.checkColumnSort(FastExt.Grid.getColumnGrid(column));
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        Grid.checkColumnSort = function (grid) {
            try {
                var hasSort = grid.getStore().getSorters().length > 0;
                var pagingToolBar = grid.child('#pagingToolBar');
                if (pagingToolBar) {
                    var sortBtn = pagingToolBar.down("button[toolType=sortBtn]");
                    if (hasSort) {
                        sortBtn.setIconCls("extIcon extSort redColor");
                        sortBtn.setUserCls("redBorder");
                    }
                    else {
                        sortBtn.setIconCls("extIcon extSort grayColor");
                        sortBtn.setUserCls("");
                    }
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        Grid.checkHistoryConfig = function (grid) {
            var pagingToolBar = grid.child('#pagingToolBar');
            if (pagingToolBar) {
                var selectHistoryBtn = pagingToolBar.down("button[toolType=selectHistoryBtn]");
                if (selectHistoryBtn) {
                    if (parseInt(grid.selectHistoryConfig["state"]) === 1) {
                        selectHistoryBtn.setIconCls(selectHistoryBtn.baseIconCls + " redColor");
                        selectHistoryBtn.setUserCls("redBorder");
                    }
                    else {
                        selectHistoryBtn.setIconCls(selectHistoryBtn.baseIconCls + " grayColor");
                        selectHistoryBtn.setUserCls("");
                    }
                }
            }
        };
        Grid.configColumnProperty = function (column) {
            try {
                column.configText = column.text;
                column.toSearchKey = function (where, i) {
                    return "colWhere['@" + this.getIndex() + FastExt.Base.toString(where.link, "&") + this.dataIndex + where.compare + ":index" + i + "']";
                };
                column.containsSearchWhere = function (where) {
                    var me = this;
                    if (!me.where) {
                        me.where = [];
                    }
                    for (var _i = 0, _a = me.where; _i < _a.length; _i++) {
                        var itemWhere = _a[_i];
                        if (itemWhere.link === where.link
                            && itemWhere.compare === where.compare
                            && itemWhere.value === where.value) {
                            return true;
                        }
                    }
                    return false;
                };
                column.searchValue = function (value) {
                    var me = this;
                    if (!me.where) {
                        me.where = [];
                    }
                    var where = {
                        link: '&',
                        compare: '=',
                        value: value
                    };
                    if (me.containsSearchWhere(where)) {
                        return;
                    }
                    me.where.push(where);
                    me.doSearch();
                };
                column.getRenderCacheKey = function () {
                    var me = this;
                    return $.md5(FastExt.Grid.getColumnGrid(me).code + "-" + me.dataIndex + "-render");
                };
                column.clearSearch = function () {
                    var me = this;
                    var storeParams = FastExt.Grid.getColumnGrid(me).getStore().proxy.extraParams;
                    if (me.where) {
                        var waitRemove = [];
                        for (var storeParamsKey in storeParams) {
                            if (storeParamsKey.indexOf("colWhere") >= 0 && storeParamsKey.indexOf(me.dataIndex) >= 0) {
                                waitRemove.push(storeParamsKey);
                            }
                        }
                        for (var i = 0; i < waitRemove.length; i++) {
                            delete storeParams[waitRemove[i]];
                        }
                    }
                    me.where = [];
                    me.searchMenu = null;
                    me.searching = false;
                    FastExt.Grid.refreshColumnStyle(me);
                };
                column.doSearch = function (requestServer) {
                    var me = this;
                    var storeParams = FastExt.Grid.getColumnGrid(me).getStore().proxy.extraParams;
                    if (me.where) {
                        var fulltextSearch = false;
                        for (var i = 0; i < me.where.length; i++) {
                            var itemWhere = me.where[i];
                            if (Ext.isEmpty(itemWhere.link)) {
                                itemWhere.link = '&';
                            }
                            if (Ext.isEmpty(itemWhere.compare) || Ext.isEmpty(itemWhere.value)) {
                                continue;
                            }
                            var key = me.toSearchKey(itemWhere, i);
                            var value = itemWhere.value;
                            if (itemWhere.compare.indexOf('?') >= 0) {
                                value = '%' + itemWhere.value + '%';
                            }
                            if (itemWhere.compare === "??") {
                                value = itemWhere.value;
                                fulltextSearch = true;
                            }
                            storeParams[key] = value;
                        }
                        if (fulltextSearch) {
                            FastExt.Grid.clearColumnSort(FastExt.Grid.getColumnGrid(me));
                            FastExt.Grid.checkColumnSort(FastExt.Grid.getColumnGrid(me));
                        }
                        storeParams["colWhere['^" + me.dataIndex + "@SearchExclude']"] = me.searchExclude;
                        if (FastExt.Base.toBool(requestServer, true)) {
                            FastExt.Grid.getColumnGrid(me).getStore().loadPage(1);
                        }
                        me.searching = me.where.length !== 0;
                        FastExt.Grid.refreshColumnStyle(me);
                    }
                };
                column.setAlignContent = function (align) {
                    var columnId = this.getId();
                    var cellEls = $("[data-columnid=" + columnId + "]");
                    for (var i = 0; i < cellEls.length; i++) {
                        $(cellEls[i]).children().css("text-align", align);
                    }
                    this.align = align;
                    FastExt.Grid.getColumnGrid(this).saveUIConfig(true);
                };
                column.getConfigField = function () {
                    var configField = column.configField;
                    if (Ext.isEmpty(configField)) {
                        configField = column.field;
                    }
                    if (Ext.isEmpty(configField)) {
                        configField = {
                            xtype: "textfield",
                        };
                    }
                    if (Ext.isObject(configField)) {
                        if (Ext.isEmpty(configField.xtype)) {
                            configField.xtype = "textfield";
                        }
                    }
                    return configField;
                };
                if (column.where && column.where.length > 0) {
                    column.doSearch(false);
                }
                if (column.isSubHeader) {
                    column.groupHeaderText = column.ownerCt.text;
                }
                else {
                    column.groupHeaderText = null;
                }
                if (Ext.isEmpty(column.field)) {
                    column.editable = false;
                }
            }
            catch (e) {
                console.error(e);
            }
        };
        Grid.configColumnListener = function (column) {
        };
        Grid.buildSearchItem2 = function (column, where) {
            try {
                var fulltextColumn = false;
                var grid = FastExt.Grid.getColumnGrid(column);
                if (grid && grid.getStore() && grid.getStore().entity) {
                    fulltextColumn = FastExt.Entity.isFulltextColumn(grid.getStore().entity.entityCode, column.dataIndex);
                }
                var editorField = FastExt.Grid.getColumnSimpleEditor(column, true);
                if (!editorField) {
                    return;
                }
                editorField.useHistory = true;
                editorField.code = column.dataIndex;
                editorField.fromHeadSearch = true;
                editorField.validator = null;
                editorField.flex = 1;
                editorField.margin = '2 0 0 0';
                editorField.repeatTriggerClick = false;
                editorField.onClearValue = function () {
                    var parent = this.up("container");
                    if (Ext.isFunction(parent.removeSearch)) {
                        parent.removeSearch();
                        return;
                    }
                    parent.destroy();
                };
                editorField.triggers = {
                    close: {
                        cls: 'text-clear',
                        hideOnReadOnly: false,
                        handler: function () {
                            this.onClearValue();
                        }
                    }
                };
                if (FastExt.Form.isEnumField(editorField)) {
                    editorField.editable = false;
                }
                else {
                    editorField.editable = true;
                }
                editorField.emptyText = "请输入条件值";
                if (!where) {
                    where = {
                        link: '&',
                        compare: '=',
                        value: ''
                    };
                    if (FastExt.Form.isTextField(editorField) || FastExt.Form.isLinkField(editorField)
                        || FastExt.Form.isMapField(editorField)
                        || FastExt.Form.isHtmlContentField(editorField)
                        || FastExt.Form.isContentField(editorField)) {
                        where.compare = '?';
                    }
                    if (fulltextColumn) {
                        where.compare = '??';
                    }
                    if (FastExt.Form.isDateField(editorField)) {
                        where.compare = '>=';
                    }
                }
                var dataType = {
                    full: fulltextColumn,
                    date: FastExt.Form.isDateField(editorField),
                };
                editorField.value = where.value;
                editorField.submitValue = false;
                editorField.name = "value";
                editorField.itemId = "editorField";
                editorField.strict = where.compare.indexOf(">") >= 0 || where.compare.indexOf("<") >= 0 || where.compare.indexOf("=") >= 0;
                editorField.grid = grid;
                return {
                    xtype: 'container',
                    margin: '0',
                    searchItem: true,
                    border: 0,
                    flex: 1,
                    region: 'center',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    toParam: function () {
                        var params = {};
                        this.items.each(function (item) {
                            if (Ext.isFunction(item.getValue)) {
                                var validate = true;
                                if (Ext.isFunction(item.validate)) {
                                    validate = item.validate();
                                }
                                else if (Ext.isFunction(item.isValid)) {
                                    validate = item.isValid();
                                }
                                if (validate) {
                                    if (Ext.isDate(item.getValue())) {
                                        params[item.getName()] = Ext.Date.format(item.getValue(), item.format);
                                    }
                                    else {
                                        params[item.getName()] = item.getValue();
                                    }
                                }
                                else {
                                    FastExt.Component.shakeComment(item);
                                    FastExt.Dialog.toast(FastExt.Form.getFieldError(item)[0]);
                                    params = null;
                                    return false;
                                }
                            }
                        });
                        return params;
                    },
                    setParam: function (where) {
                        this.items.each(function (item) {
                            if (Ext.isFunction(item.getValue)) {
                                if (item.getName() === 'compare') {
                                    item.setValue(where.compare);
                                }
                                else if (item.getName() === 'link') {
                                    item.setValue(where.link);
                                }
                                else {
                                    item.setValue(where.value);
                                }
                            }
                        });
                    },
                    refreshField: function () {
                        var compareValue = this.getComponent("compare").getValue();
                        var field = this.getComponent("editorField");
                        if (!field) {
                            return;
                        }
                        if (field.rendered) {
                            if (Ext.isFunction(field.setReadOnlyAttr)) {
                                field.setReadOnlyAttr(false);
                            }
                            if (compareValue == "~" || compareValue == "!~") {
                                field.setValue("<NULL>");
                                if (Ext.isFunction(field.setReadOnlyAttr)) {
                                    field.setReadOnlyAttr(true);
                                }
                            }
                            else if (compareValue == "#" || compareValue == "!#") {
                                field.setValue("<REPEAT>");
                                if (Ext.isFunction(field.setReadOnlyAttr)) {
                                    field.setReadOnlyAttr(true);
                                }
                            }
                        }
                    },
                    getSearchField: function () {
                        return this.getComponent("editorField");
                    },
                    items: [
                        {
                            xtype: 'combo',
                            name: 'link',
                            value: FastExt.Base.toString(where.link, "&"),
                            margin: '2 2 0 0',
                            width: 35,
                            valueField: 'text',
                            editable: false,
                            hideTrigger: true,
                            tpl: Ext.create('Ext.XTemplate', '<ul class="x-list-plain"><tpl for=".">', '<li role="option" class="x-boundlist-item" style="font-size: 12px;">{desc}</li>', '</tpl></ul>'),
                            listeners: {
                                afterrender: function (obj, eOpts) {
                                    obj.getPicker().setMinWidth(100);
                                }
                            },
                            store: FastExt.Store.getCompareLinkDataStore()
                        },
                        {
                            xtype: 'combo',
                            name: 'compare',
                            value: where.compare,
                            itemId: "compare",
                            margin: '2 2 0 0',
                            width: 65,
                            valueField: 'text',
                            displayField: "desc",
                            editable: false,
                            hideTrigger: true,
                            tpl: Ext.create('Ext.XTemplate', '<ul class="x-list-plain"><tpl for=".">', '<li role="option" class="x-boundlist-item" style="font-size: 12px;">{desc}</li>', '</tpl></ul>'),
                            listeners: {
                                afterrender: function (obj, eOpts) {
                                    obj.getPicker().setMinWidth(100);
                                },
                                change: function (obj, newValue, oldValue) {
                                    var field = obj.ownerCt.getComponent("editorField");
                                    if (oldValue == "~" || oldValue == "!~" || oldValue == "#" || oldValue == "!#") {
                                        field.setValue(null);
                                    }
                                    if (newValue.indexOf(">") >= 0 || newValue.indexOf("<") >= 0 || newValue.indexOf("=") >= 0) {
                                        field.strict = true;
                                    }
                                    else {
                                        field.strict = false;
                                    }
                                    obj.ownerCt.refreshField();
                                }
                            },
                            store: FastExt.Store.getCompareDataStore(dataType)
                        },
                        editorField
                    ],
                    listeners: {
                        afterrender: function (obj, eOpts) {
                            obj.refreshField();
                        }
                    }
                };
            }
            catch (e) {
                console.error(e);
            }
            return null;
        };
        Grid.buildSearchItem = function (column, where) {
            try {
                var fulltextColumn = false;
                var grid = FastExt.Grid.getColumnGrid(column);
                if (grid && grid.getStore() && grid.getStore().entity) {
                    fulltextColumn = FastExt.Entity.isFulltextColumn(grid.getStore().entity.entityCode, column.dataIndex);
                }
                var editorField = FastExt.Grid.getColumnSimpleEditor(column, true);
                if (!editorField) {
                    return;
                }
                editorField.useHistory = true;
                editorField.code = column.dataIndex;
                editorField.fromHeadSearch = true;
                editorField.validator = null;
                editorField.flex = 1;
                editorField.repeatTriggerClick = false;
                editorField.onClearValue = function () {
                    var parent = this.up("container");
                    if (Ext.isFunction(parent.removeSearch)) {
                        parent.removeSearch();
                        return;
                    }
                    FastExt.Animate.startCloseAnimateByHeight(parent);
                };
                editorField.triggers = {
                    close: {
                        cls: 'text-clear',
                        weight: 99,
                        hideOnReadOnly: false,
                        handler: function () {
                            this.onClearValue();
                        }
                    }
                };
                if (FastExt.Form.isEnumField(editorField)) {
                    editorField.editable = false;
                }
                else {
                    editorField.editable = true;
                }
                editorField.emptyText = "请输入条件值";
                if (!where) {
                    where = {
                        link: '&',
                        compare: '=',
                        value: ''
                    };
                    if (FastExt.Form.isTextField(editorField) || FastExt.Form.isLinkField(editorField)
                        || FastExt.Form.isMapField(editorField)
                        || FastExt.Form.isHtmlContentField(editorField)
                        || FastExt.Form.isContentField(editorField)) {
                        where.compare = '?';
                    }
                    if (fulltextColumn) {
                        where.compare = '??';
                    }
                    if (FastExt.Form.isDateField(editorField)) {
                        where.compare = '>=';
                    }
                }
                var dataType = {
                    full: fulltextColumn,
                    date: FastExt.Form.isDateField(editorField),
                };
                editorField.value = where.value;
                editorField.submitValue = false;
                editorField.param = true;
                editorField.name = "value";
                editorField.itemId = "editorField";
                editorField.strict = where.compare.indexOf(">") >= 0 || where.compare.indexOf("<") >= 0 || where.compare.indexOf("=") >= 0;
                editorField.grid = grid;
                return {
                    xtype: 'fieldset',
                    margin: '0 0 3 0',
                    title: '',
                    searchItem: true,
                    flex: 1,
                    region: 'center',
                    padding: '6 6 6 6',
                    defaults: {
                        columnWidth: 1,
                        margin: '3 3 3 3',
                    },
                    layout: {
                        type: 'vbox',
                        pack: 'center',
                        align: 'stretch'
                    },
                    getParamItems: function () {
                        return this.query("[param=true]");
                    },
                    toParam: function () {
                        var params = {};
                        var items = this.getParamItems();
                        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                            var item = items_1[_i];
                            if (Ext.isFunction(item.getValue)) {
                                var validate = true;
                                if (Ext.isFunction(item.validate)) {
                                    validate = item.validate();
                                }
                                else if (Ext.isFunction(item.isValid)) {
                                    validate = item.isValid();
                                }
                                if (validate) {
                                    if (Ext.isDate(item.getValue())) {
                                        params[item.getName()] = Ext.Date.format(item.getValue(), item.format);
                                    }
                                    else {
                                        params[item.getName()] = item.getValue();
                                    }
                                }
                                else {
                                    FastExt.Component.shakeComment(item);
                                    FastExt.Dialog.toast(FastExt.Form.getFieldError(item)[0]);
                                    return null;
                                }
                            }
                        }
                        return params;
                    },
                    setParam: function (where) {
                        var items = this.getParamItems();
                        for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {
                            var item = items_2[_i];
                            if (Ext.isFunction(item.getValue)) {
                                if (item.getName() === 'compare') {
                                    item.setValue(where.compare);
                                }
                                else if (item.getName() === 'link') {
                                    item.setValue(where.link);
                                }
                                else {
                                    item.setValue(where.value);
                                }
                            }
                        }
                    },
                    refreshField: function () {
                        var field = this.down("#editorField");
                        if (!field) {
                            return;
                        }
                        var matchType = this.down("#matchType");
                        var link = this.down("#link");
                        var linkDisplayValue = link.getDisplayValue();
                        var compare = this.down("#compare");
                        var compareValue = compare.getValue();
                        var compareDisplayValue = compare.getDisplayValue();
                        matchType.setTitle(linkDisplayValue + "_" + compareDisplayValue);
                        if (field.rendered) {
                            FastExt.Component.simpleReadOnly(field, false);
                            if (compareValue == "~" || compareValue == "!~") {
                                field.setValue("<NULL>");
                                FastExt.Component.simpleReadOnly(field, true);
                            }
                            else if (compareValue == "#" || compareValue == "!#") {
                                field.setValue("<REPEAT>");
                                FastExt.Component.simpleReadOnly(field, true);
                            }
                        }
                    },
                    getSearchField: function () {
                        return this.down("#editorField");
                    },
                    items: [
                        {
                            xtype: 'fieldset',
                            title: '匹配方式',
                            collapsible: true,
                            collapsed: true,
                            layout: "column",
                            itemId: "matchType",
                            padding: '6 6 6 6',
                            defaults: {
                                columnWidth: 1,
                                margin: '3 3 3 3',
                            },
                            items: [
                                {
                                    xtype: 'container',
                                    layout: {
                                        type: 'hbox',
                                        pack: 'center',
                                        align: 'stretch'
                                    },
                                    items: [
                                        {
                                            xtype: 'combo',
                                            name: 'link',
                                            itemId: "link",
                                            margin: '0 6 0 0',
                                            value: FastExt.Base.toString(where.link, "&"),
                                            param: true,
                                            flex: 1,
                                            valueField: 'text',
                                            displayField: "desc",
                                            editable: false,
                                            hideTrigger: false,
                                            tpl: Ext.create('Ext.XTemplate', '<ul class="x-list-plain"><tpl for=".">', '<li role="option" class="x-boundlist-item" style="font-size: 12px;">{desc}</li>', '</tpl></ul>'),
                                            listeners: {
                                                change: function (obj, newValue, oldValue) {
                                                    obj.up("[searchItem=true]").refreshField();
                                                }
                                            },
                                            store: FastExt.Store.getCompareLinkDataStore()
                                        },
                                        {
                                            xtype: 'combo',
                                            name: 'compare',
                                            value: where.compare,
                                            flex: 1,
                                            itemId: "compare",
                                            param: true,
                                            valueField: 'text',
                                            displayField: "desc",
                                            editable: false,
                                            hideTrigger: false,
                                            tpl: Ext.create('Ext.XTemplate', '<ul class="x-list-plain"><tpl for=".">', '<li role="option" class="x-boundlist-item" style="font-size: 12px;">{desc}</li>', '</tpl></ul>'),
                                            listeners: {
                                                change: function (obj, newValue, oldValue) {
                                                    var searchItem = obj.up("[searchItem=true]");
                                                    var field = searchItem.getComponent("editorField");
                                                    if (oldValue == "~" || oldValue == "!~" || oldValue == "#" || oldValue == "!#") {
                                                        field.setValue(null);
                                                    }
                                                    if (newValue.indexOf(">") >= 0 || newValue.indexOf("<") >= 0 || newValue.indexOf("=") >= 0) {
                                                        field.strict = true;
                                                    }
                                                    else {
                                                        field.strict = false;
                                                    }
                                                    searchItem.refreshField();
                                                }
                                            },
                                            store: FastExt.Store.getCompareDataStore(dataType)
                                        }
                                    ]
                                },
                            ]
                        },
                        editorField
                    ],
                    listeners: {
                        afterrender: function (obj, eOpts) {
                            obj.refreshField();
                        }
                    }
                };
            }
            catch (e) {
                console.error(e);
            }
            return null;
        };
        Grid.canColumnSearch = function (column) {
            if (FastExt.Grid.getColumnGrid(column).xtype === "") {
            }
            if (!FastExt.Base.toBool(FastExt.Grid.getColumnGrid(column).columnSearch, true)) {
                return false;
            }
            if (FastExt.Grid.isFilesColumn(column)
                || FastExt.Grid.isFileColumn(column)) {
                return FastExt.Base.toBool(column.search, false) || FastExt.Base.toBool(column.searchable, false);
            }
            if (!FastExt.Base.toBool(column.search, true)) {
                return false;
            }
            if (!FastExt.Base.toBool(column.searchable, true)) {
                return false;
            }
            if (FastExt.Base.toBool(column["encrypt"], false)) {
                return false;
            }
            return true;
        };
        Grid.showColumnSearchMenu = function (column) {
            try {
                if (!FastExt.Grid.canColumnSearch(column)) {
                    return false;
                }
                column.searchMenu = Ext.create('Ext.menu.Menu', {
                    padding: FastExt.Grid.columnSearchMenuPadding,
                    power: false,
                    showSeparator: false,
                    columnSearchMenu: true,
                    editorMenu: true,
                    scrollToHidden: true,
                    style: {
                        background: "#ffffff"
                    },
                    fixedItemCount: 2,
                    addSearchItem: function (where) {
                        var index = this.items.length - this.fixedItemCount;
                        if (index >= 5) {
                            return;
                        }
                        this.insert(index, FastExt.Grid.buildSearchItem(column, where));
                    },
                    doSearch: function () {
                        var me = this;
                        var where = [];
                        me.items.each(function (item, index) {
                            if (item.searchItem) {
                                var toParam = item.toParam();
                                if (!toParam) {
                                    where = null;
                                    return false;
                                }
                                if (Ext.isEmpty(toParam.value)) {
                                    return;
                                }
                                toParam.index = index;
                                where.push(toParam);
                            }
                        });
                        if (where) {
                            column.clearSearch();
                            column.where = where;
                            column.doSearch();
                            me.hide();
                        }
                    },
                    items: [
                        {
                            xtype: 'container',
                            layout: 'fit',
                            margin: '5',
                            border: 0,
                            hidden: true,
                            itemId: 'configSearch',
                            items: [
                                {
                                    xtype: 'fieldset',
                                    title: '配置搜索忽略的字符',
                                    layout: "column",
                                    margin: '0',
                                    items: [
                                        {
                                            xtype: 'textfield',
                                            labelAlign: 'right',
                                            columnWidth: 1,
                                            itemId: 'searchExclude',
                                            value: column.searchExclude,
                                            name: 'searchExclude',
                                            emptyText: '请输入字符',
                                            listeners: {
                                                change: function (obj, newValue, oldValue, eOpts) {
                                                    column.searchExclude = newValue;
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            xtype: 'container',
                            layout: {
                                type: 'hbox',
                                align: 'stretch'
                            },
                            margin: FastExt.Grid.columnSearchMenuPadding + ' 0 0 0',
                            border: 0,
                            items: [
                                {
                                    xtype: 'button',
                                    iconCls: 'extIcon extSet fontSize14',
                                    contextMenu: false,
                                    hidden: true,
                                    handler: function () {
                                        var configPanel = this.ownerCt.ownerCt.getComponent("configSearch");
                                        configPanel.setHidden(!configPanel.isHidden());
                                    }
                                },
                                {
                                    xtype: 'button',
                                    text: '搜索',
                                    flex: 1,
                                    contextMenu: false,
                                    iconCls: 'extIcon extSearch',
                                    margin: '0 ' + FastExt.Grid.columnSearchMenuPadding + ' 0 0',
                                    handler: function () {
                                        this.ownerCt.ownerCt.doSearch();
                                        FastExt.Grid.saveGridColumn(FastExt.Grid.getColumnGrid(column));
                                    }
                                },
                                {
                                    xtype: 'button',
                                    iconCls: 'extIcon extPlus fontSize14',
                                    contextMenu: false,
                                    handler: function () {
                                        this.ownerCt.ownerCt.addSearchItem();
                                    }
                                }
                            ]
                        }
                    ],
                    listeners: {
                        show: function (obj, epts) {
                            column.addCls("x-column-header-open");
                            if (obj.items.length === obj.fixedItemCount) {
                                obj.addSearchItem();
                            }
                            var searchExclude = obj.down("#searchExclude");
                            if (searchExclude) {
                                searchExclude.setValue(column.searchExclude);
                            }
                            var searchIndex = 0;
                            obj.items.each(function (item, index) {
                                if (Ext.isFunction(item.getSearchField)) {
                                    var searchField = item.getSearchField();
                                    if (searchField.hasListener("beforeedit")) {
                                        searchField.fireEvent("beforeedit", searchField, searchIndex);
                                    }
                                    searchIndex++;
                                }
                            });
                            try {
                                new Ext.util.KeyMap({
                                    target: obj.getEl(),
                                    key: 13,
                                    fn: function (keyCode, e) {
                                        obj.doSearch();
                                    },
                                    scope: obj
                                });
                            }
                            catch (e) {
                                console.error(e);
                            }
                        },
                        hide: function (obj, epts) {
                            delete column.searchMenu;
                            column.removeCls("x-column-header-open");
                            obj.close();
                        }
                    }
                });
                if (column.where) {
                    for (var i = 0; i < column.where.length; i++) {
                        var where = column.where[i];
                        if (Ext.isEmpty(where.index)) {
                            where.index = i;
                        }
                        if (where.index < column.searchMenu.items.length - column.searchMenu.fixedItemCount) {
                            column.searchMenu.items.getAt(where.index).setParam(where);
                        }
                        else {
                            column.searchMenu.addSearchItem(where);
                        }
                    }
                }
                column.searchMenu.addCls("header-search-menu");
                column.searchMenu.setWidth(Math.max(parseInt(column.getWidth()), 358));
                column.searchMenu.showBy(column, "tl-bl?");
                return true;
            }
            catch (e) {
                console.error(e);
            }
            return false;
        };
        Grid.showColumnSearchWin = function (obj, grid) {
            if (!obj.searchWin) {
                var store_1 = FastExt.Store.getGridColumnStore(grid, true);
                var buildItem_1 = function (paramData, paramWhere) {
                    return {
                        xtype: 'fieldset',
                        title: '字段搜索',
                        layout: {
                            type: 'vbox',
                            pack: 'center',
                            align: 'stretch'
                        },
                        defaults: {
                            columnWidth: 1,
                            margin: '3 3 3 3',
                        },
                        padding: '10 10 10 10',
                        margin: '5 5 5 5',
                        setInputField: function (columnRecord, columnWhere) {
                            if (this.items.getCount() > 1) {
                                this.remove(this.items.get(1), true);
                            }
                            var inputItem = FastExt.Grid.buildSearchItem(FastExt.Grid.getColumn(grid, columnRecord.get("id"), columnRecord.get("text")), columnWhere);
                            inputItem.removeSearch = function () {
                                var searchContainer = this.up("container");
                                if (searchContainer) {
                                    FastExt.Animate.startCloseAnimateByHeight(searchContainer);
                                }
                            };
                            this.insert(1, inputItem);
                        },
                        toParam: function () {
                            var param = {};
                            var combo = this.items.get(0);
                            var data = combo.getStore().findRecord("id", combo.getValue(), 0, false, false, true);
                            param["text"] = data.get("text");
                            param["dataIndex"] = data.get("id");
                            var inputItem = this.items.get(1);
                            param = FastExt.Json.mergeJson(param, inputItem.toParam());
                            return param;
                        },
                        items: [
                            {
                                xtype: 'combo',
                                valueField: 'id',
                                displayField: 'text',
                                margin: '0 0 5 0',
                                value: paramData.get("id"),
                                editable: false,
                                listeners: {
                                    change: function (obj, newValue, oldValue, eOpts) {
                                        var parent = this.up("container");
                                        var data = obj.getStore().findRecord("id", newValue, 0, false, false, true);
                                        parent.setInputField(data);
                                    }
                                },
                                store: store_1
                            }
                        ],
                        listeners: {
                            afterrender: function (obj) {
                                obj.setInputField(paramData, paramWhere);
                            }
                        }
                    };
                };
                var defaultItems = grid.searchItems;
                if (!defaultItems) {
                    defaultItems = [];
                }
                var formPanel_1 = Ext.create('Ext.form.FormPanel', {
                    border: 0,
                    layout: {
                        type: 'vbox',
                        align: 'stretch'
                    },
                    scrollable: true,
                    padding: 0,
                    defaults: {
                        labelWidth: 80,
                        labelAlign: 'right',
                        emptyText: '请填写'
                    },
                    items: defaultItems,
                });
                var winSize = FastExt.Grid.getGridInWindowSize(grid, 0.4, 0.5);
                obj.searchWin = Ext.create('Ext.window.Window', {
                    title: '搜索数据',
                    layout: 'fit',
                    constrain: true,
                    iconCls: 'extIcon extSearch',
                    resizable: true,
                    minHeight: 200,
                    minWidth: 400,
                    height: winSize.height,
                    width: winSize.width,
                    animateTarget: obj,
                    items: [formPanel_1],
                    refreshSearchItem: function (addDefaultItem) {
                        if (!store_1) {
                            return;
                        }
                        if (!grid) {
                            return;
                        }
                        formPanel_1.removeAll();
                        var columns = grid.getColumns();
                        for (var i = 0; i < columns.length; i++) {
                            var item = columns[i];
                            if (item.where) {
                                var data = store_1.findRecord("id", item.dataIndex, 0, false, false, true);
                                if (data) {
                                    for (var i_1 = 0; i_1 < item.where.length; i_1++) {
                                        formPanel_1.add(buildItem_1(data, item.where[i_1]));
                                    }
                                }
                            }
                        }
                        if (formPanel_1.items.length === 0 && store_1.getCount() > 0 && addDefaultItem) {
                            formPanel_1.add(buildItem_1(store_1.getAt(0)));
                        }
                    },
                    listeners: {
                        close: function (panel, eOpts) {
                            if (obj.searchWin.gridLoad) {
                                obj.searchWin.gridLoad.destroy();
                            }
                            if (store_1) {
                                store_1.destroy();
                            }
                            obj.searchWin = null;
                        }
                    },
                    buttons: [
                        {
                            text: '清空条件',
                            iconCls: 'extIcon extClear whiteColor',
                            handler: function () {
                                formPanel_1.removeAll();
                                if (!grid) {
                                    return;
                                }
                                Ext.each(grid.getColumns(), function (item) {
                                    item.clearSearch();
                                });
                                grid.getStore().loadPage(1);
                            }
                        },
                        '->',
                        {
                            text: '添加条件',
                            iconCls: 'extIcon extPlus',
                            handler: function () {
                                formPanel_1.add(buildItem_1(store_1.getAt(0)));
                                var winHeight = 50 + formPanel_1.items.length * 35 + 55;
                                formPanel_1.scrollTo(0, winHeight, false);
                            }
                        },
                        {
                            text: '确定',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                if (!grid) {
                                    return;
                                }
                                Ext.each(grid.getColumns(), function (item) {
                                    item.clearSearch();
                                });
                                var searchColumns = [];
                                formPanel_1.items.each(function (item) {
                                    if (!item.toParam) {
                                        var params = {};
                                        params["where['" + item.name + "']"] = item.getValue();
                                        Ext.apply(grid.getStore().proxy.extraParams, params);
                                        return;
                                    }
                                    var toParam = item.toParam();
                                    if (!toParam) {
                                        return;
                                    }
                                    if (Ext.isEmpty(toParam.value)) {
                                        return;
                                    }
                                    var column = FastExt.Grid.getColumn(grid, toParam.dataIndex, toParam.text);
                                    if (!column) {
                                        return false;
                                    }
                                    if (!column.where) {
                                        column.where = [];
                                    }
                                    delete toParam.dataIndex;
                                    delete toParam.text;
                                    column.where.push(toParam);
                                    searchColumns.push(column);
                                });
                                Ext.each(searchColumns, function (item) {
                                    item.doSearch(false);
                                });
                                grid.getStore().loadPage(1);
                            }
                        }
                    ]
                });
                obj.searchWin.gridLoad = grid.on('load', function () {
                    try {
                        obj.searchWin.refreshSearchItem(false);
                    }
                    catch (e) {
                        console.error(e);
                    }
                }, this, { destroyable: true });
                obj.searchWin.refreshSearchItem(true);
                grid.ownerCt.add(obj.searchWin);
            }
            else {
                FastExt.Component.shakeComment(obj.searchWin);
            }
            obj.searchWin.show();
        };
        Grid.getPageToolBar = function (dataStore) {
            var entityRecycle = false;
            if (dataStore.entity && FastExt.Base.toBool(dataStore.entity.recycle, false)) {
                entityRecycle = true;
            }
            var fromRecycle = false;
            if (dataStore.where && FastExt.Base.toBool(dataStore.where['^fromRecycle'], false)) {
                fromRecycle = true;
            }
            var menuText = FastExt.Store.getStoreMenuText(dataStore);
            var pagingtoolbar = Ext.create('Ext.toolbar.Paging', {
                store: dataStore,
                dock: 'bottom',
                itemId: 'pagingToolBar',
                pageSize: dataStore.pageSize,
                displayInfo: true,
                overflowHandler: 'scroller'
            });
            var control = {
                xtype: 'combo',
                pageTool: true,
                displayField: 'text',
                valueField: 'id',
                editable: false,
                width: 100,
                value: Math.min(dataStore.pageSize, FastExt.Store.maxPageSize),
                store: FastExt.Store.getPageDataStore(),
                listeners: {
                    change: function (obj, newValue, oldValue) {
                        if (FastExt.System.InitHandler.isSilenceGlobalSaving()) {
                            return;
                        }
                        if (newValue != null && newValue != 0) {
                            var pageRecord = obj.getStore().getById(newValue);
                            if (!pageRecord) {
                                obj.totalCount = newValue;
                                obj.setValue(-1);
                                return;
                            }
                            if (newValue === -1) {
                                this.ownerCt.pageSize = dataStore.getTotalCount();
                                dataStore.pageSize = dataStore.getTotalCount();
                                if (!Ext.isEmpty(obj.totalCount)) {
                                    this.ownerCt.pageSize = obj.totalCount;
                                    dataStore.pageSize = obj.totalCount;
                                }
                            }
                            else {
                                this.ownerCt.pageSize = newValue;
                                dataStore.pageSize = newValue;
                            }
                            dataStore.loadPage(1);
                            if (dataStore.grid) {
                                dataStore.grid.saveUIConfig(true);
                            }
                        }
                    }
                }
            };
            var copyBtn = {
                xtype: 'button',
                tooltip: '拷贝数据',
                subtext: '拷贝数据@' + menuText,
                checkSelect: 2,
                iconCls: 'extIcon extCopy2 grayColor',
                checkAddPower: true,
                checkCopyPower: true,
                handler: function () {
                    var selection = dataStore.grid.getSelection();
                    if (selection.length === 0) {
                        FastExt.Dialog.showAlert("系统提醒", "请选择需要复制的数据！");
                        return;
                    }
                    Ext.Msg.confirm("系统提醒", "您确定复制选中的" + selection.length + "条数据吗？", function (button, text) {
                        if (button === "yes") {
                            FastExt.Dialog.showWait("正在复制数据中……");
                            FastExt.Store.commitStoreCopy(dataStore.grid.getStore(), selection).then(function (success) {
                                if (success) {
                                    dataStore.grid.getSelectionModel().deselectAll();
                                    var grouped = dataStore.grid.getStore().isGrouped();
                                    if (grouped) {
                                        FastExt.Grid.getGridView(dataStore.grid).getFeature('group').collapseAll();
                                    }
                                    FastExt.Dialog.hideWait();
                                }
                            });
                        }
                    });
                }
            };
            var deleteAllBtn = {
                xtype: 'button',
                tooltip: '清空数据',
                subtext: '清空数据@' + menuText,
                checkDeleteAllPower: true,
                checkDeletePower: true,
                iconCls: 'extIcon extClear grayColor',
                handler: function () {
                    if (dataStore.getTotalCount() === 0) {
                        FastExt.Dialog.toast("当前页面暂无数据！");
                        return;
                    }
                    var menuText = FastExt.Store.getStoreMenuText(dataStore.grid.getStore());
                    var confirmFunction = function () {
                        FastExt.LoginLayout.validOperate("清空【" + menuText + "】数据", function () {
                            FastExt.Dialog.showWait("正在清空数据中……");
                            var params = {
                                "entityCode": dataStore.entity.entityCode,
                                "all": true,
                                "storeId": dataStore.getStoreCode()
                            };
                            params["menu"] = dataStore.entity.comment;
                            FastExt.Server.deleteEntity(params, function (success, message) {
                                FastExt.Dialog.hideWait();
                                if (success) {
                                    dataStore.loadPage(1);
                                }
                                FastExt.Dialog.showAlert("系统提醒", message);
                            });
                        }, 30);
                    };
                    var formPanel = Ext.create('Ext.form.FormPanel', {
                        bodyPadding: 10,
                        method: 'POST',
                        region: 'center',
                        layout: {
                            type: 'vbox',
                            pack: 'center',
                            align: 'middle'
                        },
                        defaults: {
                            margin: '5 5 5 5'
                        },
                        border: 0,
                        items: [
                            {
                                xtype: "lottie",
                                width: 150,
                                height: 120,
                                jsonPath: 'base/lottie/amazed.json',
                            },
                            {
                                xtype: "label",
                                text: "【【 请您谨慎操作 】】",
                            },
                            {
                                xtype: "label",
                                text: "您确定清空当前条件下的" + dataStore.getTotalCount() + "条数据吗？",
                            },
                            {
                                xtype: "label",
                                text: "当前操作页面《" + menuText + "》",
                            },
                            {
                                xtype: "checkboxfield",
                                boxLabel: "<b style='color:red;'>我已了解此操作是永久性且无法撤销</b>",
                                listeners: {
                                    change: function (obj, newValue) {
                                        clearConfirmWindow.down("#deleteBtn").setDisabled(!newValue);
                                    },
                                }
                            }
                        ]
                    });
                    var clearConfirmWindow = Ext.create('Ext.window.Window', {
                        title: '清空数据',
                        iconCls: 'extIcon extClear',
                        layout: {
                            type: 'vbox',
                            pack: 'center',
                            align: 'middle'
                        },
                        constrain: true,
                        resizable: false,
                        cls: 'fast-red-window',
                        items: [formPanel],
                        modal: true,
                        buttons: [
                            '->',
                            {
                                text: '取消',
                                iconCls: 'extIcon extClose',
                                handler: function () {
                                    clearConfirmWindow.close();
                                }
                            },
                            {
                                text: '清空',
                                itemId: "deleteBtn",
                                disabled: true,
                                iconCls: 'extIcon extOk',
                                handler: function () {
                                    confirmFunction();
                                    clearConfirmWindow.close();
                                }
                            },
                            '->'
                        ],
                        listeners: {
                            show: function (obj) {
                                FastExt.Component.shakeComment(obj);
                            },
                        }
                    });
                    clearConfirmWindow.show();
                }
            };
            if (fromRecycle) {
                deleteAllBtn.tooltip = "清空回收站";
            }
            var recycleBtn = {
                xtype: 'button',
                tooltip: '回收站',
                iconCls: 'extIcon extRecycle grayColor',
                handler: function () {
                    FastExt.Grid.showRecycleGrid(this, dataStore);
                }
            };
            var searchBtn = {
                xtype: 'button',
                toolType: 'searchBtn',
                tooltip: '搜索数据',
                iconCls: 'extIcon extSearch grayColor',
                handler: function () {
                    FastExt.Grid.showColumnSearchWin(this, dataStore.grid);
                }
            };
            var sortBtn = {
                xtype: 'button',
                toolType: 'sortBtn',
                tooltip: '排序数据',
                iconCls: 'extIcon extSort grayColor',
                handler: function () {
                    FastExt.Grid.showColumnSortWin(this, dataStore.grid);
                }
            };
            var timerBtn = {
                xtype: 'button',
                toolType: 'timerBtn',
                tooltip: '定时刷新',
                iconCls: 'extIcon extAlarm grayColor',
                baseIconCls: 'extIcon extAlarm',
                handler: function () {
                    FastExt.Grid.showTimerRefreshGrid(this, dataStore.grid);
                }
            };
            var reportBtn = {
                xtype: 'button',
                toolType: 'reportBtn',
                tooltip: '图表查看',
                iconCls: 'extIcon extReport grayColor',
                handler: function () {
                    FastExt.Grid.showEChartConfigWin(this, dataStore.grid);
                }
            };
            var selectHistoryBtn = {
                xtype: 'button',
                toolType: 'selectHistoryBtn',
                tooltip: '数据选择器',
                iconCls: 'extIcon extSelect grayColor',
                baseIconCls: 'extIcon extSelect',
                handler: function () {
                    FastExt.Grid.showSelectRecordHistory(this, dataStore.grid);
                }
            };
            pagingtoolbar.insert(0, control);
            pagingtoolbar.insert(0, {
                xtype: 'label',
                text: '每页',
                margin: '0 10 0 10'
            });
            var refreshBtn = pagingtoolbar.child("#refresh");
            var beginIndex = pagingtoolbar.items.indexOf(refreshBtn);
            if (dataStore.entity && FastExt.Base.toBool(dataStore.entity.actionTimer, true)) {
                pagingtoolbar.insert(++beginIndex, timerBtn);
            }
            pagingtoolbar.insert(++beginIndex, "-");
            pagingtoolbar.insert(++beginIndex, searchBtn);
            pagingtoolbar.insert(++beginIndex, sortBtn);
            pagingtoolbar.insert(++beginIndex, selectHistoryBtn);
            if (fromRecycle) {
                var rebackBtn = {
                    xtype: 'button',
                    tooltip: '还原数据',
                    checkSelect: 2,
                    iconCls: 'extIcon extReback grayColor',
                    handler: function () {
                        FastExt.Grid.rebackGridData(dataStore.grid);
                    }
                };
                pagingtoolbar.insert(++beginIndex, "-");
                pagingtoolbar.insert(++beginIndex, rebackBtn);
            }
            pagingtoolbar.insert(++beginIndex, "-");
            if (!fromRecycle) {
                if (dataStore.entity && FastExt.Base.toBool(dataStore.entity.actionCopy, true)) {
                    pagingtoolbar.insert(++beginIndex, copyBtn);
                }
            }
            if (dataStore.entity && FastExt.Base.toBool(dataStore.entity.actionDeleteAll, true)
                && FastExt.System.ManagerHandler.isSuperRole()) {
                pagingtoolbar.insert(++beginIndex, deleteAllBtn);
            }
            if (dataStore.entity && !Ext.isEmpty(dataStore.entity["echartsDate"])) {
                pagingtoolbar.insert(++beginIndex, "-");
                pagingtoolbar.insert(++beginIndex, reportBtn);
            }
            if (!fromRecycle && entityRecycle) {
                pagingtoolbar.insert(++beginIndex, "-");
                pagingtoolbar.insert(++beginIndex, recycleBtn);
            }
            return pagingtoolbar;
        };
        Grid.showRecycleGrid = function (obj, dataStore) {
            if (!dataStore) {
                return;
            }
            var title = "回收站";
            if (dataStore.entity) {
                title = dataStore.entity.comment + "-回收站";
            }
            var entityObj = eval("new " + dataStore.entity.entityCode + "()");
            entityObj.menu = {
                id: $.md5(title),
                text: title
            };
            var where = { "^fromRecycle": true };
            var gridPanel = entityObj.getList(FastExt.Json.mergeJson(where, dataStore.where));
            var entityOwner = gridPanel.down("[entityList=true]");
            entityOwner.code = $.md5(dataStore.entity.entityCode + "回收站");
            var winWidth = parseInt((document.body.clientWidth * 0.7).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.8).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                title: title,
                iconCls: 'extIcon extRecycle',
                layout: 'fit',
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 600,
                constrain: true,
                resizable: true,
                modal: true,
                maximizable: true,
                animateTarget: obj,
                maximized: false,
                items: [gridPanel]
            });
            win.show();
        };
        Grid.rebackGridData = function (grid) {
            return new Ext.Promise(function (resolve, reject) {
                if (!grid.getStore().entity) {
                    Ext.Msg.alert('系统提醒', '还原失败！Grid的DataStore未绑定Entity!');
                    return;
                }
                if (grid.getSelection().length === 0) {
                    FastExt.Dialog.toast('请您先选择需要还原的数据！');
                    return;
                }
                var selectLength = grid.getSelection().length;
                var doDelete = function () {
                    FastExt.Dialog.showWait("正在还原数据中……");
                    FastExt.Store.commitStoreReback(grid.getStore(), grid.getSelection()).then(function (success, message) {
                        if (success) {
                            grid.getSelectionModel().deselectAll();
                            var grouped = grid.getStore().isGrouped();
                            if (grouped) {
                                FastExt.Grid.getGridView(grid).getFeature('group').collapseAll();
                            }
                            FastExt.Dialog.hideWait();
                            Ext.Msg.alert('系统提醒', '还原成功！');
                        }
                        resolve(success);
                    });
                };
                var confirmConfig = {
                    title: "系统提醒",
                    icon: Ext.Msg.QUESTION,
                    message: "您确定还原选中的" + selectLength + "条数据吗？",
                    buttons: Ext.Msg.YESNO,
                    defaultFocus: "no",
                    callback: function (button, text) {
                        if (button === "yes") {
                            doDelete();
                        }
                    }
                };
                Ext.Msg.show(confirmConfig);
            });
        };
        Grid.showColumnSortWin = function (obj, grid) {
            if (!obj.sortWin) {
                var store_2 = FastExt.Store.getGridColumnStore(grid);
                var buildItem_2 = function (data, defaultValue) {
                    if (!defaultValue) {
                        defaultValue = "ASC";
                    }
                    return {
                        xtype: 'container',
                        flex: 1,
                        columnWidth: 1,
                        layout: 'hbox',
                        margin: '0 0 2 0',
                        border: 0,
                        toParam: function () {
                            var param = {};
                            var combo = this.items.get(0);
                            param["property"] = combo.getValue();
                            var directionItem = this.items.get(1);
                            param["direction"] = directionItem.getValue();
                            return param;
                        },
                        items: [
                            {
                                xtype: 'combo',
                                region: 'west',
                                valueField: 'id',
                                flex: 0.5,
                                margin: '2 0 0 2',
                                value: data.get("id"),
                                displayField: 'text',
                                editable: false,
                                store: store_2
                            },
                            {
                                xtype: 'combo',
                                flex: 0.5,
                                valueField: 'value',
                                editable: false,
                                margin: '2 2 0 2',
                                value: defaultValue,
                                triggers: {
                                    close: {
                                        cls: 'text-clear',
                                        handler: function () {
                                            this.ownerCt.destroy();
                                        }
                                    }
                                },
                                store: Ext.create('Ext.data.Store', {
                                    fields: ["id", "text"],
                                    data: [
                                        {
                                            'text': '无',
                                            'value': 'NONE'
                                        },
                                        {
                                            'text': '正序',
                                            "value": 'ASC'
                                        },
                                        {
                                            'text': '倒序',
                                            "value": 'DESC'
                                        }
                                    ]
                                })
                            }
                        ]
                    };
                };
                var formPanel_2 = Ext.create('Ext.form.FormPanel', {
                    margin: '5',
                    border: 0,
                    layout: 'column',
                    width: 460,
                    scrollable: true,
                    defaults: {
                        labelWidth: 80,
                        margin: '5 5 5 5',
                        labelAlign: 'right',
                        emptyText: '请填写'
                    },
                    items: [],
                });
                var winSize = FastExt.Grid.getGridInWindowSize(grid);
                obj.sortWin = Ext.create('Ext.window.Window', {
                    title: '排序数据',
                    layout: 'fit',
                    constrain: true,
                    iconCls: 'extIcon extSort',
                    resizable: true,
                    minHeight: 200,
                    minWidth: 400,
                    height: winSize.height,
                    width: winSize.width,
                    animateTarget: obj,
                    items: [formPanel_2],
                    refreshSortItem: function (addDefault) {
                        formPanel_2.removeAll();
                        grid.getStore().getSorters().each(function (item) {
                            var data = store_2.findRecord("id", item.getProperty(), 0, false, false, true);
                            if (data) {
                                formPanel_2.add(buildItem_2(data, item.getDirection()));
                            }
                        });
                        if (formPanel_2.items.length === 0 && addDefault) {
                            formPanel_2.add(buildItem_2(store_2.getAt(0), "NONE"));
                        }
                    },
                    listeners: {
                        close: function (panel, eOpts) {
                            if (obj.sortWin.gridLoad) {
                                obj.sortWin.gridLoad.destroy();
                            }
                            if (store_2) {
                                store_2.destroy();
                            }
                            obj.sortWin = null;
                        }
                    },
                    buttons: [
                        {
                            text: '添加条件',
                            iconCls: 'extIcon extPlus',
                            handler: function () {
                                formPanel_2.add(buildItem_2(store_2.getAt(0)));
                                var winHeight = 50 + formPanel_2.items.length * 35 + 55;
                                formPanel_2.scrollTo(0, winHeight, false);
                            }
                        },
                        {
                            text: '确定',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                FastExt.Grid.clearColumnSort(grid);
                                var sorts = [];
                                formPanel_2.items.each(function (item) {
                                    var toParam = item.toParam();
                                    sorts.push(toParam);
                                    var column = FastExt.Grid.getColumn(grid, toParam.property);
                                    column.sortDirection = toParam.direction;
                                    FastExt.Grid.refreshColumnStyle(column);
                                });
                                if (sorts.length > 0) {
                                    grid.getStore().sort(sorts);
                                }
                                else {
                                    grid.getStore().loadPage(1);
                                }
                                FastExt.Grid.checkColumnSort(grid);
                            }
                        }
                    ]
                });
                obj.sortWin.gridLoad = grid.on('load', function () {
                    try {
                        obj.sortWin.refreshSortItem(false);
                    }
                    catch (e) {
                        console.error(e);
                    }
                }, this, { destroyable: true });
                obj.sortWin.refreshSortItem(true);
                grid.ownerCt.add(obj.sortWin);
            }
            else {
                FastExt.Component.shakeComment(obj.sortWin);
            }
            obj.sortWin.show();
        };
        Grid.clearColumnSort = function (grid) {
            var sortCollection = grid.getStore().getSorters();
            sortCollection.clear();
            if (!grid) {
                return;
            }
            Ext.each(grid.getColumns(), function (item) {
                item.sortDirection = null;
                FastExt.Grid.refreshColumnStyle(item);
            });
        };
        Grid.showTimerRefreshGrid = function (obj, grid) {
            if (!obj.timerWin) {
                if (!grid.timerConfig) {
                    grid.timerConfig = {
                        "state": 0,
                        "value": 30
                    };
                }
                var formPanel_3 = Ext.create('Ext.form.FormPanel', {
                    margin: '5',
                    border: 0,
                    layout: 'column',
                    width: 400,
                    scrollable: true,
                    defaults: {
                        labelWidth: 120,
                        margin: '5 5 5 5',
                        labelAlign: 'right',
                        emptyText: '请填写'
                    },
                    viewModel: {
                        data: grid.timerConfig
                    },
                    items: [
                        {
                            xtype: 'combo',
                            name: 'state',
                            displayField: 'text',
                            valueField: 'id',
                            fieldLabel: '是否启动',
                            editable: false,
                            flex: 1,
                            columnWidth: 1,
                            value: 0,
                            allowBlank: false,
                            bind: '{state}',
                            store: FastExt.Store.getYesOrNoDataStore()
                        },
                        {
                            xtype: 'combo',
                            name: 'silence',
                            displayField: 'text',
                            valueField: 'id',
                            fieldLabel: '静默刷新',
                            editable: false,
                            flex: 1,
                            columnWidth: 1,
                            value: 0,
                            allowBlank: false,
                            bind: '{silence}',
                            store: FastExt.Store.getYesOrNoDataStore()
                        },
                        {
                            xtype: "numberfield",
                            name: 'value',
                            bind: '{value}',
                            fieldLabel: "时间间隔（秒）",
                            columnWidth: 1,
                            minValue: 1,
                            value: 30,
                            decimalPrecision: 0,
                            allowBlank: false
                        }
                    ],
                });
                var winSize = FastExt.Grid.getGridInWindowSize(grid);
                obj.timerWin = Ext.create('Ext.window.Window', {
                    title: '定时刷新数据',
                    layout: 'fit',
                    constrain: true,
                    iconCls: 'extIcon extAlarm',
                    resizable: true,
                    minHeight: 200,
                    minWidth: 400,
                    height: winSize.height,
                    width: winSize.width,
                    animateTarget: obj,
                    items: [formPanel_3],
                    listeners: {
                        close: function (panel, eOpts) {
                            obj.timerWin = null;
                        }
                    },
                    buttons: [
                        {
                            text: '确定',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                var form = formPanel_3.getForm();
                                if (form.isValid()) {
                                    grid.timerConfig = formPanel_3.getValues();
                                    grid.checkRefreshTimer(true);
                                    obj.timerWin.close();
                                }
                            }
                        }
                    ]
                });
                grid.ownerCt.add(obj.timerWin);
            }
            else {
                FastExt.Component.shakeComment(obj.timerWin);
            }
            obj.timerWin.show();
        };
        Grid.showEChartConfigWin = function (obj, grid) {
            if (!obj.reportWin) {
                var columnStore_1 = FastExt.Store.getChartGridColumnStore(grid);
                var buildItem_3 = function (data, defaultValue) {
                    if (!defaultValue) {
                        defaultValue = "count";
                    }
                    return {
                        xtype: 'container',
                        flex: 1,
                        columnWidth: 1,
                        layout: 'hbox',
                        margin: '0 0 2 0',
                        border: 0,
                        toParam: function () {
                            var param = {};
                            var combo = this.items.get(0);
                            param["property"] = combo.getValue();
                            var functionItem = this.items.get(1);
                            param["function"] = functionItem.getValue();
                            param["details"] = combo.getDisplayValue() + "【" + functionItem.getDisplayValue() + "】";
                            return param;
                        },
                        items: [
                            {
                                xtype: 'combo',
                                region: 'west',
                                valueField: 'id',
                                flex: 0.5,
                                margin: '2 0 0 2',
                                value: data.get("id"),
                                displayField: 'text',
                                editable: false,
                                store: columnStore_1
                            },
                            {
                                xtype: 'combo',
                                flex: 0.5,
                                valueField: 'value',
                                editable: false,
                                margin: '2 2 0 2',
                                value: defaultValue,
                                triggers: {
                                    close: {
                                        cls: 'text-clear',
                                        handler: function () {
                                            this.ownerCt.destroy();
                                        }
                                    }
                                },
                                store: Ext.create('Ext.data.Store', {
                                    fields: ["id", "text"],
                                    data: [
                                        {
                                            'text': '计数',
                                            'value': 'count'
                                        },
                                        {
                                            'text': '平均值',
                                            "value": 'avg'
                                        },
                                        {
                                            'text': '求和',
                                            "value": 'sum'
                                        }, {
                                            'text': '最大值',
                                            "value": 'max'
                                        }, {
                                            'text': '最小值',
                                            "value": 'min'
                                        }
                                    ]
                                })
                            },
                        ]
                    };
                };
                var formPanel_4 = Ext.create('Ext.form.FormPanel', {
                    margin: '5',
                    border: 0,
                    layout: 'column',
                    width: 400,
                    scrollable: true,
                    defaults: {
                        labelWidth: 80,
                        margin: '5 5 5 5',
                        labelAlign: 'right',
                        emptyText: '请填写'
                    },
                    items: [],
                });
                obj.reportWin = Ext.create('Ext.window.Window', {
                    title: '图表查看',
                    layout: 'fit',
                    constrain: true,
                    iconCls: 'extIcon extReport',
                    resizable: true,
                    minHeight: 200,
                    minWidth: 400,
                    height: 200,
                    animateTarget: obj,
                    items: [formPanel_4],
                    listeners: {
                        close: function (panel, eOpts) {
                            obj.reportWin = null;
                        },
                        show: function (win) {
                            win.setLoading("请稍后……");
                            FastExt.Server.showExtConfig(grid.getStore().entity.entityCode, "EChartsColumn", function (success, data, message) {
                                if (success) {
                                    var toParams = FastExt.Json.jsonToObject(data);
                                    for (var i = 0; i < toParams.length; i++) {
                                        var toParam = toParams[i];
                                        var data_2 = columnStore_1.findRecord("id", toParam["property"], 0, false, false, true);
                                        if (data_2) {
                                            formPanel_4.add(buildItem_3(data_2, toParam["function"]));
                                        }
                                    }
                                }
                                win.setLoading(false);
                                if (formPanel_4.items.length === 0) {
                                    formPanel_4.add(buildItem_3(columnStore_1.getAt(0), "count"));
                                }
                            });
                        }
                    },
                    buttons: [
                        {
                            text: '添加统计',
                            iconCls: 'extIcon extPlus',
                            handler: function () {
                                formPanel_4.add(buildItem_3(columnStore_1.getAt(0)));
                                var winHeight = 50 + formPanel_4.items.length * 35 + 55;
                                formPanel_4.scrollTo(0, winHeight, false);
                            }
                        },
                        {
                            text: '确定',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                var params = {
                                    "entityCode": grid.getStore().entity.entityCode,
                                    "columnDate": grid.getStore().entity.echartsDate,
                                    "storeId": grid.getStore().getStoreCode(),
                                };
                                var toParams = [];
                                formPanel_4.items.each(function (item, index) {
                                    var toParam = item.toParam();
                                    toParams.push(toParam);
                                    for (var toParamKey in toParam) {
                                        params["echarts[" + index + "]." + toParamKey] = toParam[toParamKey];
                                    }
                                });
                                FastExt.Server.saveExtConfig(grid.getStore().entity.entityCode, "EChartsColumn", FastExt.Json.objectToJson(toParams), function () {
                                });
                                FastExt.ECharts.showEntityECharts(this, grid.getStore().entity.comment + "【图表】", params);
                            }
                        }
                    ]
                });
                grid.ownerCt.add(obj.reportWin);
            }
            else {
                FastExt.Component.shakeComment(obj.reportWin);
            }
            obj.reportWin.show();
        };
        Grid.deleteGridData = function (grid) {
            return new Ext.Promise(function (resolve, reject) {
                if (!grid.getStore().entity) {
                    Ext.Msg.alert('系统提醒', '删除失败！Grid的DataStore未绑定Entity!');
                    return;
                }
                if (grid.getSelection().length === 0) {
                    FastExt.Dialog.toast('请您先选择需要删除的数据！');
                    return;
                }
                var selectLength = grid.getSelection().length;
                var doDelete = function () {
                    FastExt.Dialog.showWait("正在删除数据中……");
                    FastExt.Store.commitStoreDelete(grid.getStore(), grid.getSelection()).then(function (success) {
                        if (success) {
                            grid.getSelectionModel().deselectAll();
                            var grouped = grid.getStore().isGrouped();
                            if (grouped) {
                                FastExt.Grid.getGridView(grid).getFeature('group').collapseAll();
                            }
                            FastExt.Dialog.hideWait();
                        }
                        resolve(success);
                    });
                };
                if (grid.operate && grid.operate.alertDelete) {
                    FastExt.Dialog.showDeleteDataAlert("确认删除数据", "您确定删除选中的" + selectLength + "条数据吗？", doDelete);
                }
                else {
                    doDelete();
                }
            });
        };
        Grid.updateGridData = function (grid) {
            return new Ext.Promise(function (resolve, reject) {
                if (!grid.getStore().entity) {
                    Ext.Msg.alert('系统提醒', '修改失败！Grid的DataStore未绑定Entity!');
                    return;
                }
                var records = grid.getStore().getUpdatedRecords();
                if (records.length === 0) {
                    FastExt.Dialog.toast('当前暂无数据被修改！');
                    return;
                }
                if (grid.operate && grid.operate.alertUpdate) {
                    Ext.Msg.confirm("系统提醒", "您确定提交被修改的数据吗？", function (button, text) {
                        if (button === "yes") {
                            FastExt.Dialog.showWait("正在修改数据中……");
                            FastExt.Store.commitStoreUpdate(grid.getStore()).then(function (result) {
                                resolve(result);
                                FastExt.Dialog.hideWait();
                            });
                        }
                    });
                }
                else {
                    FastExt.Dialog.showWait("正在修改数据中……");
                    FastExt.Store.commitStoreUpdate(grid.getStore()).then(function (result) {
                        resolve(result);
                        FastExt.Dialog.hideWait();
                    });
                }
            });
        };
        Grid.showPublicDetailsWindow = function (obj, title, entity, record, buttons) {
            FastExt.Grid.showDetailsWindow(obj, title, entity, record, buttons, {
                "noneManager": true,
            });
        };
        Grid.showDetailsWindow = function (obj, title, entity, record, buttons, columnConfig) {
            if (!entity) {
                return;
            }
            if (!record) {
                return;
            }
            var onlyValueArray = [entity.code];
            if (entity.idProperty) {
                for (var j = 0; j < entity.idProperty.length; j++) {
                    var idName = entity.idProperty[j];
                    onlyValueArray.push(idName + ":" + record.get(idName));
                }
            }
            if (onlyValueArray.length == 1) {
                onlyValueArray.push(new Date().getTime());
            }
            FastExt.Dialog.showWait("获取配置中……");
            var onlyCode = $.md5(JSON.stringify(onlyValueArray));
            FastExt.Grid.restoreGridButton(entity.entityCode).then(function (buttonInfos) {
                var targetEntityCode = entity.entityCode;
                if (!Ext.isEmpty(record.get("columnEntityCode"))) {
                    targetEntityCode = record.get("columnEntityCode");
                }
                FastExt.Server.showColumns(targetEntityCode, function (success, value, message) {
                    FastExt.Dialog.hideWait();
                    if (success) {
                        var columnInfos = Ext.decode(value);
                        var data = [];
                        var lastGroupNon = 1;
                        var maxNameWidth = 0;
                        for (var key in columnInfos) {
                            if (columnInfos.hasOwnProperty(key)) {
                                var column = columnInfos[key];
                                if (Ext.isEmpty(column.dataIndex)) {
                                    continue;
                                }
                                if (!FastExt.Base.toBool(column.detailsable, true)) {
                                    continue;
                                }
                                var item = {
                                    value: record.get(column.dataIndex),
                                    groupHeaderText: column.groupHeaderText,
                                    record: record,
                                    entity: entity,
                                    configEditor: FastExt.Base.toBool(column["canEdit"]),
                                    dataIndex: column.dataIndex,
                                    columnName: column.columnName,
                                    editor: false
                                };
                                for (var c in column) {
                                    if (column.hasOwnProperty(c)) {
                                        item[c] = column[c];
                                    }
                                }
                                if (!Ext.isEmpty(column["editorField"])) {
                                    var fieldObj = FastExt.Json.jsonToObject(column["editorField"]);
                                    if (fieldObj != null && !Ext.isEmpty(fieldObj.xtype)) {
                                        item.configEditor = true;
                                    }
                                }
                                if (!FastExt.Base.toBool(record.get(column.dataIndex + "Editor"), true)) {
                                    item.configEditor = false;
                                }
                                if (!FastExt.Base.toBool(record.get("__editor"), true)) {
                                    item.configEditor = false;
                                }
                                if (!item.groupHeaderText) {
                                    item.groupHeaderText = lastGroupNon;
                                }
                                else {
                                    lastGroupNon++;
                                }
                                data.push(item);
                                maxNameWidth = Math.max(FastExt.Base.guessTextWidth(item["text"], 5), maxNameWidth);
                            }
                        }
                        data.sort(function (a, b) {
                            return a.index - b.index;
                        });
                        var detailsStore = Ext.create('Ext.data.Store', {
                            fields: [],
                            autoLoad: false,
                            groupField: 'groupHeaderText'
                        });
                        detailsStore.loadData(data);
                        detailsStore.sort('index', 'ASC');
                        var iframePanelArray = Ext.ComponentQuery.query("window[detailsWinId=" + onlyCode + "]");
                        if (iframePanelArray.length > 0) {
                            iframePanelArray[0].getComponent("detailsGrid").setStore(detailsStore);
                            Ext.WindowManager.bringToFront(iframePanelArray[0], true);
                            FastExt.Component.shakeComment(iframePanelArray[0]);
                            return;
                        }
                        var detailsGrid = Ext.create('Ext.grid.Panel', {
                            border: 0,
                            scrollable: 'y',
                            region: 'center',
                            store: detailsStore,
                            itemId: "detailsGrid",
                            cls: "fast-grid-details",
                            hideHeaders: true,
                            features: [{
                                    ftype: 'grouping',
                                    collapsible: false,
                                    hideGroupedHeader: true,
                                    expandTip: null,
                                    collapseTip: null,
                                    groupHeaderTpl: [
                                        '<b>{name:this.formatName}</b>', {
                                            formatName: function (name) {
                                                if (Ext.isNumeric(name)) {
                                                    return "基本属性";
                                                }
                                                return name;
                                            }
                                        }
                                    ]
                                }],
                            columns: [
                                {
                                    header: '名称',
                                    power: false,
                                    dataIndex: 'text',
                                    width: maxNameWidth,
                                    tdCls: 'tdVTop',
                                    align: 'right',
                                    renderer: function (val, m, r) {
                                        m.style = FastExt.Grid.detailsGridKeyStyle;
                                        return "<b>" + val + "：</b>";
                                    }
                                },
                                {
                                    header: '值',
                                    dataIndex: 'value',
                                    power: false,
                                    flex: 1,
                                    align: 'left',
                                    renderer: function (val, m, r, rowIndex, colIndex, store, view) {
                                        try {
                                            m.style = FastExt.Grid.detailsGridValueStyle;
                                            var realAttr = r.get("columnName");
                                            if (Ext.isEmpty(realAttr)) {
                                                realAttr = r.get("dataIndex");
                                            }
                                            var fun = FastExt.Entity.getColumnRender(entity, realAttr);
                                            if (Ext.isEmpty(fun)) {
                                                var rendererFunction = r.get("rendererFunction");
                                                if (rendererFunction) {
                                                    fun = eval(rendererFunction);
                                                }
                                            }
                                            if (!Ext.isEmpty(fun)) {
                                                val = fun(val, m, r.get("record"), rowIndex, colIndex, store, view, true);
                                            }
                                            if (Ext.isEmpty(val) || val === "null") {
                                                return "<font color='#ccc'>无</font>";
                                            }
                                            return val;
                                        }
                                        catch (e) {
                                            return val;
                                        }
                                    }
                                },
                                {
                                    xtype: 'actioncolumn',
                                    width: 80,
                                    sortable: false,
                                    menuDisabled: true,
                                    renderer: function (val, m) {
                                        m.style = FastExt.Grid.detailsGridActionStyle;
                                        return val;
                                    },
                                    items: [
                                        {
                                            iconCls: 'extIcon extEdit editColor marginRight5 textBlackShadowWhite',
                                            tooltip: '编辑数据',
                                            align: 'center',
                                            isDisabled: function (view, rowIndex, colIndex, item, record) {
                                                return !FastExt.Base.toBool(record.get("editor"), false);
                                            },
                                            getClass: function (v, metadata, record) {
                                                if (FastExt.Base.toBool(record.get("editor"), false)) {
                                                    return "extIcon extEdit marginRight5 textBlackShadowWhite";
                                                }
                                                return "";
                                            },
                                            handler: FastExt.Grid.showDetailsEditMenu
                                        }, {
                                            iconCls: 'extIcon extCopy2 searchColor textBlackShadowWhite',
                                            tooltip: '复制数据',
                                            align: 'center',
                                            isDisabled: function (view, rowIndex, colIndex, item, record) {
                                                return !FastExt.Base.toBool(record.get("doCopy"), false);
                                            },
                                            getClass: function (v, metadata, record) {
                                                if (FastExt.Base.toBool(record.get("doCopy"), false)) {
                                                    return "extIcon extCopy2 searchColor textBlackShadowWhite";
                                                }
                                                return "";
                                            },
                                            handler: FastExt.Grid.copyDetailsValue
                                        }
                                    ]
                                }, { xtype: 'rowplaceholder', minWidth: 30 }
                            ],
                            viewConfig: {
                                loadMask: {
                                    msg: '正在为您在加载数据…'
                                },
                                enableTextSelection: true
                            },
                            toggleActionColumn: function (record) {
                                if (this.lasClickRecord) {
                                    if (this.lasClickRecord.getId() === record.getId()) {
                                        return;
                                    }
                                    this.lasClickRecord.set("editor", false);
                                    this.lasClickRecord.set("doCopy", false);
                                }
                                record.set("doCopy", true);
                                record.set("editor", record.get("configEditor"));
                                this.lasClickRecord = record;
                            },
                            listeners: {
                                itemclick: function (obj, record) {
                                    this.toggleActionColumn(record);
                                },
                                select: function (obj, record) {
                                    this.toggleActionColumn(record);
                                },
                            }
                        });
                        if (!buttons) {
                            buttons = [];
                        }
                        var winButtons = buttons;
                        var menus = FastExt.System.MenuHandler.searchMenusByEntityCode(entity.entityCode);
                        var invokeMenu_1 = function (invokeMenu) {
                            if (invokeMenu) {
                                try {
                                    FastExt.SystemLayout.selectMenu(invokeMenu.id);
                                }
                                finally {
                                    if (entity.idProperty) {
                                        FastExt.Component.futureQuery("[menuId=" + invokeMenu.id + "]", function (objTab) {
                                            if (objTab) {
                                                var _loop_5 = function (j) {
                                                    var idName = entity.idProperty[j];
                                                    FastExt.Component.futureQuery("[dataIndex=" + idName + "]", function (objColumn) {
                                                        if (objColumn) {
                                                            if (!FastExt.Base.toBool(objColumn[0].restoreConfig, false)) {
                                                                return false;
                                                            }
                                                            objColumn[0].searchValue(record.get(idName));
                                                        }
                                                        return true;
                                                    }, 15 * 1000, objTab[0]);
                                                };
                                                for (var j = 0; j < entity.idProperty.length; j++) {
                                                    _loop_5(j);
                                                }
                                            }
                                            return true;
                                        }, 30 * 1000);
                                    }
                                }
                            }
                            else {
                                FastExt.Dialog.showAlert("系统提醒", "打开失败！您或没有此功能的管理权限！");
                            }
                        };
                        if (menus.length > 0 && FastExt.System.ManagerHandler.isSuperRole()) {
                            var menuButton = {
                                text: '进入管理界面',
                                iconCls: "extIcon extManage whiteColor",
                                menu: [],
                            };
                            var _loop_4 = function (menu) {
                                menuButton.menu.push({
                                    text: FastExt.System.MenuHandler.getPlainMenu(menu, "&nbsp;>&nbsp;"),
                                    icon: menu.icon,
                                    handler: function () {
                                        invokeMenu_1(menu);
                                    }
                                });
                            };
                            for (var _i = 0, menus_2 = menus; _i < menus_2.length; _i++) {
                                var menu = menus_2[_i];
                                _loop_4(menu);
                            }
                            winButtons.push(menuButton);
                        }
                        if (buttonInfos.length > 0) {
                            var moreButton = {
                                text: '其他操作',
                                iconCls: 'extIcon extMore whiteColor',
                                menu: []
                            };
                            for (var i = 0; i < buttonInfos.length; i++) {
                                var button = buttonInfos[i];
                                moreButton.menu.push({
                                    text: button.text,
                                    iconCls: button.iconCls,
                                    icon: button.icon,
                                    functionStr: button.handler,
                                    handler: function (obj, e) {
                                        var inVarNames = [];
                                        try {
                                            var gussGrid_1 = {
                                                getSelection: function () {
                                                    return [record];
                                                },
                                                getSelectionModel: function () {
                                                    return gussGrid_1;
                                                }
                                            };
                                            window[entity.getListThisVarName] = entity;
                                            inVarNames.push(entity.getListThisVarName);
                                            window[entity.getListGridVarName] = gussGrid_1;
                                            inVarNames.push(entity.getListGridVarName);
                                            var func = FastExt.Documents.loadFunction(this.functionStr);
                                            func.apply(obj, e);
                                        }
                                        catch (e) {
                                            console.error(e, this.functionStr, entity);
                                        }
                                        finally {
                                            for (var _i = 0, inVarNames_1 = inVarNames; _i < inVarNames_1.length; _i++) {
                                                var inVarName = inVarNames_1[_i];
                                                window[inVarName] = null;
                                            }
                                        }
                                    }
                                });
                            }
                            winButtons.push(moreButton);
                        }
                        var winWidth = parseInt((document.body.clientWidth * 0.4).toFixed(0));
                        var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
                        var tools = [];
                        if (FastExt.System.ManagerHandler.isSuperRole()) {
                            tools.push({
                                type: 'help',
                                callback: function (panel, tool, event) {
                                    FastExt.Dialog.showJson(this, "查看原始数据结构", FastExt.Json.objectToJson(record.data));
                                }
                            });
                        }
                        var win = Ext.create('Ext.window.Window', {
                            title: title,
                            detailsWinId: onlyCode,
                            height: winHeight,
                            width: winWidth,
                            minHeight: 450,
                            iconCls: 'extIcon extDetails',
                            minWidth: 400,
                            layout: 'border',
                            resizable: true,
                            constrain: true,
                            maximizable: true,
                            animateTarget: obj,
                            tools: tools,
                            listeners: {
                                destroy: function (obj, op) {
                                },
                                show: function (obj) {
                                    obj.focus();
                                }
                            },
                            items: [detailsGrid],
                            buttons: winButtons.length > 0 ? winButtons : null,
                        });
                        win.show();
                    }
                    else {
                        FastExt.Dialog.showAlert("系统提醒", message);
                    }
                }, columnConfig);
            });
        };
        Grid.createDetailsGrid = function (data, configGrid, configName, configValue) {
            var newData = [];
            var maxNameWidth = 0;
            for (var _i = 0, data_3 = data; _i < data_3.length; _i++) {
                var datum = data_3[_i];
                if (datum) {
                    newData.push(datum);
                    maxNameWidth = Math.max(FastExt.Base.guessTextWidth(datum.name, 4), maxNameWidth);
                }
            }
            var dataStore = Ext.create('Ext.data.Store', {
                autoLoad: false,
                fields: [],
                data: newData
            });
            var nameConfig = {
                header: '名称',
                dataIndex: 'name',
                width: maxNameWidth,
                align: 'right',
                renderer: function (val, m, r) {
                    m.style = FastExt.Grid.detailsGridKeyStyle;
                    return "<b>" + val + "：</b>";
                },
                listeners: {
                    dblclick: function (grid, obj, celNo, obj1, obj2, rowNo, e) {
                        if (celNo === 0) {
                        }
                    }
                }
            };
            var valueConfig = {
                header: '值',
                dataIndex: 'value',
                flex: 1,
                align: 'left',
                renderer: function (val, m, r) {
                    try {
                        m.style = FastExt.Grid.detailsGridValueStyle;
                        var fun = r.get("renderer");
                        if (Ext.isFunction(fun)) {
                            var value = fun(val, m, r.get("record"), -1, -1, null, null, true);
                            if (Ext.isEmpty(value)) {
                                return "<font color='#ccc'>无</font>";
                            }
                            return value;
                        }
                        return val;
                    }
                    catch (e) {
                        return val;
                    }
                },
                listeners: {
                    dblclick: function (grid, obj, celNo, obj1, obj2, rowNo, e) {
                        if (celNo === 0) {
                        }
                    }
                }
            };
            var gridConfig = {
                region: 'center',
                border: 0,
                columnLines: true,
                store: dataStore,
                cls: "fast-grid-details",
                viewConfig: {
                    enableTextSelection: true
                },
                updateData: function (newData) {
                    dataStore.setData(newData);
                },
                columns: [FastExt.Json.mergeJson(nameConfig, configName),
                    FastExt.Json.mergeJson(valueConfig, configValue), { xtype: 'rowplaceholder', minWidth: 30 }]
            };
            return Ext.create('Ext.grid.Panel', FastExt.Json.mergeJson(gridConfig, configGrid));
        };
        Grid.showDetailsEditMenu = function (view, rowIndex, colIndex, item, e, record) {
            var entity = record.get("entity");
            var columnName = record.get("columnName");
            if (Ext.isEmpty(columnName)) {
                columnName = record.get("dataIndex");
            }
            var editorField;
            var linkColumn = record.get("linkColumn");
            if (linkColumn) {
                var realColumnName = FastExt.Entity.getRealAttr(linkColumn);
                if (realColumnName) {
                    columnName = realColumnName;
                }
                editorField = Ext.create(linkColumn.configField);
            }
            if (!editorField) {
                editorField = FastExt.Entity.getEditorFieldObject(entity, columnName);
            }
            if (!editorField) {
                editorField = Ext.create(FastExt.Json.jsonToObjectUnsafe(record.get("editorField")));
            }
            if (!editorField) {
                FastExt.Dialog.toast("此属性无法编辑！");
                return;
            }
            view.getSelectionModel().selectRange(rowIndex, rowIndex);
            var cell = view.getCell(record, 1, true);
            editorField.flex = 1;
            editorField.emptyText = "请输入";
            editorField.region = 'center';
            editorField.record = record.get("record");
            editorField.fromColumn = true;
            if (editorField.hasListener("beforeedit")) {
                if (!editorField.fireEvent("beforeedit")) {
                    return;
                }
            }
            if (!FastExt.Listeners.getFire().onBeforeEditorField(editorField, editorField.record)) {
                return;
            }
            if (FastExt.Base.toString(editorField.inputType, "none") !== "password") {
                if (Ext.isFunction(editorField.setValue)) {
                    var value = record.get("value");
                    if (Ext.isObject(value) || Ext.isArray(value)) {
                        editorField.setValue(JSON.stringify(value), record.get("record"));
                    }
                    else {
                        editorField.setValue(value, record.get("record"));
                    }
                }
            }
            if (Ext.isFunction(editorField.startEdit)) {
                editorField.startEdit();
            }
            var putRecord = function (fieldObj) {
                if (fieldObj.isValid()) {
                    if (!Ext.isEmpty(fieldObj.getValue())) {
                        var store_3 = record.get("record").store;
                        if (!store_3) {
                            record.store.commitChanges();
                            return;
                        }
                        store_3.holdUpdate = true;
                        FastExt.Store.setRecordValue(record.get("record"), record.get("dataIndex"), fieldObj);
                        FastExt.Store.setRecordValue(record, "value", fieldObj);
                        if (view) {
                            view.setLoading("提交数据中……");
                        }
                        FastExt.Store.commitStoreUpdate(store_3).then(function (success) {
                            store_3.holdUpdate = false;
                            if (view) {
                                view.setLoading(false);
                            }
                            if (success) {
                                record.store.commitChanges();
                            }
                        });
                    }
                }
            };
            if (Ext.isFunction(editorField.showWindow)) {
                editorField.showWindow(cell, function (result) {
                    putRecord(result);
                });
                return;
            }
            var menu = Ext.create('Ext.menu.Menu', {
                showSeparator: false,
                layout: 'fit',
                scrollToHidden: true,
                modal: true,
                editorMenu: true,
                shadow: false,
                doUpdate: function () {
                    var me = this;
                    if (me.putRecorded) {
                        return;
                    }
                    var fieldObj = me.items.get(0).items.get(0);
                    if (!fieldObj.isValid()) {
                        FastExt.Component.shakeComment(me);
                        FastExt.Dialog.toast(FastExt.Form.getFieldError(fieldObj)[0]);
                        return;
                    }
                    me.putRecorded = true;
                    putRecord(fieldObj);
                    me.hide();
                },
                items: [
                    {
                        xtype: 'container',
                        layout: {
                            type: 'hbox',
                            align: 'stretch'
                        },
                        style: {
                            background: "#ffffff",
                            borderWidth: 1,
                            borderColor: "#ffffff",
                            color: '#eeeee'
                        },
                        border: 0,
                        items: [editorField,
                            {
                                xtype: 'button',
                                text: '确定',
                                name: 'confirm',
                                region: 'east',
                                iconCls: 'extIcon extOk',
                                margin: '0 0 0 2',
                                height: FastExt.Form.getFieldMinHeight(true),
                                handler: function () {
                                    menu.doUpdate();
                                }
                            }
                        ]
                    }
                ],
                listeners: {
                    show: function (obj, epts) {
                        var fieldObj = obj.items.get(0).items.get(0);
                        fieldObj.focus();
                    },
                    hide: function (obj) {
                        var upContainerPanel = view.up("[detailsPanel=true]");
                        if (upContainerPanel) {
                            upContainerPanel.holdFloatView = false;
                        }
                        var editorField = obj.items.get(0).items.get(0);
                        if (Ext.isFunction(editorField.endEdit)) {
                            editorField.endEdit();
                        }
                        obj.close();
                    }
                }
            });
            menu.addCls("edit-menu");
            menu.addCls("edit-details-menu");
            menu.setWidth(cell.getWidth());
            menu.setHeight(FastExt.Grid.getRowMinHeight());
            menu.showBy(cell, "tl");
            var upContainerPanel = view.up("[detailsPanel=true]");
            if (upContainerPanel) {
                upContainerPanel.holdFloatView = true;
            }
        };
        Grid.showDataEditorWin = function (obj, grid) {
            if (!grid) {
                return;
            }
            if (grid.getSelection().length === 0) {
                FastExt.Dialog.toast("请选择一行需要修改的数据！");
                return;
            }
            var store = grid.getStore();
            if (!store) {
                FastExt.Dialog.toast("无法修改此行数据，数据源无效！");
                return;
            }
            var entity = grid.getStore().entity;
            if (!entity) {
                FastExt.Dialog.toast("无法修改此行数据，未绑定实体信息！");
                return;
            }
            var columns = grid.getColumns();
            var itemFields = [];
            var record = grid.getSelection()[0];
            var groupFieldSet = {};
            var groupFields = {};
            var labelWidth = 80;
            for (var i = 0; i < columns.length; i++) {
                var column = columns[i];
                if (Ext.isEmpty(column.field) || !FastExt.Base.toBool(column.editable, true)) {
                    continue;
                }
                var realField = column.field;
                if (!Ext.isObject(realField)) {
                    realField = {
                        xtype: realField,
                    };
                }
                if (Ext.isEmpty(realField.xtype)) {
                    continue;
                }
                if (realField.hasOwnProperty("initialConfig")) {
                    realField = realField.initialConfig;
                }
                var copyField = Ext.clone(realField);
                var columnName = FastExt.Entity.getRealAttr(column);
                copyField.name = "data." + columnName;
                var labelText = column.configText;
                var itemField = Ext.create(copyField);
                itemField.columnWidth = 1;
                itemField.fieldLabel = labelText;
                itemField.configFieldLabel = labelText;
                itemField.emptyText = "请输入" + labelText;
                itemField.ghostDataIndex = column.dataIndex;
                itemField.realEditorField = true;
                itemField.record = record;
                if (Ext.isEmpty(itemField.itemId)) {
                    if (Ext.isEmpty(realField.name)) {
                        itemField.itemId = column.dataIndex;
                    }
                    else {
                        itemField.itemId = realField.name;
                    }
                }
                if (Ext.isFunction(itemField.setValue) && itemField.inputType !== "password") {
                    var value = record.get(column.dataIndex);
                    if (Ext.isObject(value) || Ext.isArray(value)) {
                        itemField.setValue(JSON.stringify(value), record);
                    }
                    else {
                        itemField.setValue(value, record);
                    }
                }
                if (!Ext.isEmpty(column.groupHeaderText)) {
                    if (!groupFieldSet.hasOwnProperty(column.groupHeaderText)) {
                        groupFieldSet[column.groupHeaderText] = Ext.create({
                            xtype: "fieldset",
                            title: column.groupHeaderText,
                            columnWidth: 1,
                            layout: "column",
                            defaults: {
                                labelWidth: 80,
                                margin: "5 5 5 5",
                                labelAlign: "right",
                                allowBlankTip: true,
                                emptyText: "请填写"
                            },
                        });
                        groupFields[column.groupHeaderText] = [];
                        itemFields.push(groupFieldSet[column.groupHeaderText]);
                    }
                    groupFields[column.groupHeaderText].push(itemField);
                    groupFieldSet[column.groupHeaderText].defaults.labelWidth = Math.max(groupFieldSet[column.groupHeaderText].defaults.labelWidth, labelText.length * 14 + 8 + 10 + 10);
                    continue;
                }
                if (itemField.hasListener("beforeedit")) {
                    if (!itemField.fireEvent("beforeedit", itemField)) {
                        return false;
                    }
                }
                labelWidth = Math.max(labelWidth, labelText.length * 14 + 8 + 10 + 10);
                itemFields.push(itemField);
            }
            for (var groupFieldsKey in groupFields) {
                groupFieldSet[groupFieldsKey].add(groupFields[groupFieldsKey]);
            }
            if (itemFields.length === 0) {
                FastExt.Dialog.toast("无修改权限！");
                return;
            }
            if (grid.hasListener("beforeeditwin")) {
                if (!grid.fireEvent("beforeeditwin", grid, itemFields)) {
                    return false;
                }
            }
            var formPanel = Ext.create('Ext.form.FormPanel', {
                cacheKey: entity.entityCode + "Editor",
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                fileUpload: true,
                autoScroll: false,
                border: 0,
                defaults: {
                    labelWidth: Math.min(labelWidth, 188),
                    margin: '5 5 5 5',
                    labelAlign: 'right',
                    allowBlankTip: true,
                },
                layout: "column",
                items: itemFields,
            });
            var winWidth = parseInt((document.body.clientWidth * 0.4).toFixed(0));
            var maxHeight = parseInt((document.body.clientHeight * 0.8).toFixed(0));
            var editorWin = Ext.create('Ext.window.Window', {
                title: '修改数据',
                subtitle: entity.entityCode,
                width: winWidth,
                icon: obj.icon,
                iconCls: obj.iconCls,
                minWidth: 200,
                maxHeight: maxHeight,
                layout: {
                    type: 'vbox',
                    align: 'stretch'
                },
                autoScroll: true,
                resizable: true,
                maximizable: true,
                constrain: true,
                animateTarget: obj,
                items: [formPanel],
                modal: true,
                unpin: true,
                listeners: {
                    show: function (obj) {
                        formPanel.restoreCache();
                        obj.focus();
                    }
                },
                buttons: [
                    {
                        text: '暂存',
                        iconCls: 'extIcon extSave whiteColor',
                        handler: function () {
                            formPanel.saveCache();
                        }
                    },
                    {
                        text: '重置',
                        iconCls: 'extIcon extReset',
                        handler: function () {
                            if (formPanel.form) {
                                formPanel.form.reset();
                            }
                            formPanel.deleteCache();
                        }
                    },
                    {
                        text: '确定',
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            if (!store) {
                                return;
                            }
                            store.holdUpdate = true;
                            var fields = formPanel.query("[realEditorField=true]");
                            for (var _i = 0, fields_1 = fields; _i < fields_1.length; _i++) {
                                var field = fields_1[_i];
                                if (field.isValid()) {
                                    if (!Ext.isEmpty(field.getValue())) {
                                        FastExt.Store.setRecordValue(record, field.ghostDataIndex, field);
                                    }
                                }
                            }
                            FastExt.Dialog.showWait("提交数据中……");
                            FastExt.Store.commitStoreUpdate(store).then(function (success) {
                                FastExt.Dialog.hideWait();
                                store.holdUpdate = false;
                                if (success) {
                                    store.commitChanges();
                                    formPanel.deleteCache();
                                    editorWin.close();
                                }
                                else {
                                    store.rejectChanges();
                                }
                            });
                        }
                    }
                ]
            });
            editorWin.show();
        };
        Grid.copyDetailsValue = function (view, rowIndex, colIndex, item, e, record) {
            var cell = view.getCell(record, 1, true);
            FastExt.Base.copyToBoard($(cell.dom).text().trim());
            FastExt.Dialog.toast("复制成功！");
        };
        Grid.showSelectRecordHistory = function (obj, grid) {
            if (Ext.isEmpty(grid.showHistoryState)) {
                grid.showHistoryState = 0;
            }
            if (!obj.selectHistoryWin) {
                if (!grid.selectHistoryConfig) {
                    grid.selectHistoryConfig = {
                        "state": 0,
                        "count": 0
                    };
                }
                grid.selectHistoryConfig.count = grid.getSelectRecordHistory().length;
                var formPanel_5 = Ext.create('Ext.form.FormPanel', {
                    margin: '5',
                    border: 0,
                    layout: 'column',
                    width: 400,
                    scrollable: true,
                    defaults: {
                        labelWidth: 140,
                        margin: '5 5 5 5',
                        labelAlign: 'right',
                        emptyText: '请填写'
                    },
                    viewModel: {
                        data: grid.selectHistoryConfig
                    },
                    items: [
                        {
                            xtype: 'combo',
                            name: 'state',
                            displayField: 'text',
                            valueField: 'id',
                            fieldLabel: '是否记忆选择',
                            editable: false,
                            flex: 1,
                            columnWidth: 1,
                            value: 0,
                            allowBlank: false,
                            bind: '{state}',
                            store: FastExt.Store.getYesOrNoDataStore()
                        },
                        {
                            xtype: "numberfield",
                            name: 'count',
                            bind: '{count}',
                            selectHistoryCount: true,
                            fieldLabel: "已选中数据（条）",
                            columnWidth: 1,
                            value: 0,
                            readOnly: true
                        }
                    ],
                });
                var winSize = FastExt.Grid.getGridInWindowSize(grid);
                obj.selectHistoryWin = Ext.create('Ext.window.Window', {
                    title: '数据选择器',
                    layout: 'fit',
                    constrain: true,
                    iconCls: 'extIcon extSelect',
                    resizable: true,
                    minHeight: 100,
                    minWidth: 400,
                    height: winSize.height,
                    width: winSize.width,
                    animateTarget: obj,
                    items: [formPanel_5],
                    listeners: {
                        close: function (panel, eOpts) {
                            if (obj.selectHistoryWin.gridSelectinoChange) {
                                obj.selectHistoryWin.gridSelectinoChange.destroy();
                            }
                            if (obj.selectHistoryWin.gridLoad) {
                                obj.selectHistoryWin.gridLoad.destroy();
                            }
                            obj.selectHistoryWin = null;
                        }
                    },
                    buttons: [
                        {
                            text: '查看选中的数据',
                            iconCls: 'extIcon extSee',
                            showSelectHistoryBtn: true,
                            listeners: {
                                render: function () {
                                    this.checkState();
                                }
                            },
                            resetState: function () {
                                grid.showHistoryState = 0;
                                this.checkState();
                            },
                            checkState: function () {
                                if (grid.showHistoryState === 1) {
                                    this.setText("取消查看");
                                    this.setIconCls("extIcon extReset");
                                }
                                else {
                                    this.setText("查看选中的数据");
                                    this.setIconCls("extIcon extSee");
                                }
                            },
                            handler: function () {
                                grid.closeSelectHistoryLoad = true;
                                if (grid.showHistoryState === 0) {
                                    grid.getStore().loadData(grid.getSelectRecordHistory());
                                    grid.showHistoryState = 1;
                                    this.checkState();
                                }
                                else {
                                    grid.getStore().reload();
                                }
                            }
                        },
                        '->',
                        {
                            text: '确定',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                var form = formPanel_5.getForm();
                                if (form.isValid()) {
                                    grid.selectHistoryConfig = formPanel_5.getValues();
                                    if (parseInt(grid.selectHistoryConfig["state"]) === 0) {
                                        FastExt.Dialog.toast("已关闭选中数据的记忆器！");
                                        grid.clearSelectRecordHistory();
                                        grid.getStore().reload();
                                    }
                                    else {
                                        FastExt.Dialog.toast("已启用选中数据的记忆器！");
                                        grid.recordSelect();
                                    }
                                    FastExt.Grid.checkHistoryConfig(grid);
                                    obj.selectHistoryWin.close();
                                }
                            }
                        }
                    ]
                });
                obj.selectHistoryWin.gridSelectinoChange = grid.on('selectionchange', function () {
                    grid.refreshSelectHistoryCount();
                }, this, { destroyable: true });
                obj.selectHistoryWin.gridLoad = grid.on('load', function () {
                    try {
                        grid.showHistoryState = 0;
                        var buttons = grid.ownerCt.query("[showSelectHistoryBtn=true]");
                        for (var i = 0; i < buttons.length; i++) {
                            if (Ext.isFunction(buttons[i].resetState)) {
                                buttons[i].resetState();
                            }
                        }
                    }
                    catch (e) {
                        console.error(e);
                    }
                }, this, { destroyable: true });
                grid.ownerCt.add(obj.selectHistoryWin);
            }
            else {
                FastExt.Component.shakeComment(obj.selectHistoryWin);
            }
            obj.selectHistoryWin.show();
        };
        Grid.operateWarnColor = 'red';
        Grid.columnSearchMenuPadding = 8;
        Grid.detailsGridKeyStyle = 'color:#000000;overflow:auto;text-overflow: ellipsis;white-space:normal !important;word-break:break-word;';
        Grid.detailsGridValueStyle = 'overflow:auto;text-overflow: ellipsis;white-space:normal !important;word-break:break-word;display:flex;align-items:center;line-height:24px;';
        Grid.detailsGridActionStyle = "display: flex; align-items: center;justify-content: center;";
        return Grid;
    }());
    FastExt.Grid = Grid;
    var GridOperate = (function () {
        function GridOperate(config) {
            this.alertDelete = true;
            this.alertUpdate = true;
            this.autoUpdate = false;
            this.autoDetails = true;
            this.hoverTip = false;
            this.refreshData = false;
            this.excelOut = true;
            this.excelIn = true;
            this.downloadData = true;
            this.uploadData = true;
            this.deleteAllData = true;
            this.copyData = true;
            this.showRowNumber = false;
            this.showDetailsButton = true;
            this.showUpdateButton = true;
            if (config) {
                for (var key in config) {
                    this[key] = config[key];
                }
            }
        }
        return GridOperate;
    }());
    FastExt.GridOperate = GridOperate;
    var GridColumnMenu = (function () {
        function GridColumnMenu() {
            this.cancelSort = true;
            this.batchRandom = true;
            this.batchUpdate = true;
            this.batchUpdateDB = true;
            this.batchReplaceDB = true;
            this.operation = true;
            this.searchLink = true;
            this.lookField = true;
        }
        return GridColumnMenu;
    }());
    FastExt.GridColumnMenu = GridColumnMenu;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Highlight = (function () {
        function Highlight() {
        }
        Highlight.loadHighlight = function (callBack) {
            FastExt.PluginLoader.loadPlugins("Highlight", [FastExt.Highlight.highlightJsPath, FastExt.Highlight.highlightStylePath], callBack);
        };
        Highlight.highlightCode = function (code, lang, callback) {
            FastExt.Highlight.loadHighlight(function () {
                callback(hljs.highlight(code, { language: lang }).value);
            });
        };
        Highlight.highlightJsPath = "base/highlight/highlight.min.js";
        Highlight.highlightStylePath = "base/highlight/idea.min.css";
        return Highlight;
    }());
    FastExt.Highlight = Highlight;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var HttpListener = (function () {
        function HttpListener() {
        }
        HttpListener.registerListener = function () {
            var oldXMLHttpRequest = window.XMLHttpRequest;
            function newXMLHttpRequest() {
                var realXHR = new oldXMLHttpRequest();
                var loadstart = function (e) {
                    if (FastExt.Server.isSilenceRequest()) {
                        return;
                    }
                    if (FastExt.System.InitHandler.isInit()) {
                        FastExt.ProgressBaseLineLayout.getProgressLine(FastExt.System.ConfigHandler.getFrontColor()).set(0);
                    }
                };
                var progress = function (e) {
                    if (e.lengthComputable) {
                        if (FastExt.Server.isSilenceRequest()) {
                            return;
                        }
                        if (FastExt.System.InitHandler.isInit()) {
                            var progress_1 = e.loaded / e.total;
                            if (!Number.isFinite(progress_1)) {
                                progress_1 = 1;
                            }
                            FastExt.ProgressBaseLineLayout.getProgressLine(FastExt.System.ConfigHandler.getFrontColor()).animate(progress_1);
                        }
                    }
                };
                var load = function (e) {
                    if (FastExt.Server.isSilenceRequest()) {
                        return;
                    }
                    if (FastExt.System.InitHandler.isInit()) {
                        FastExt.ProgressBaseLineLayout.getProgressLine(FastExt.System.ConfigHandler.getFrontColor()).animate(1);
                    }
                    FastExt.Server.checkResponse(this);
                    FastExt.Server.checkVersion(this);
                    FastExt.Server.checkManager(this);
                    FastExt.Server.checkRestart(this);
                };
                var abort = function (e) {
                };
                var readystatechange = function () {
                    if (this.readyState === 1) {
                        var timestamp = (new Date().getTime()).toString();
                        this.setRequestHeader("security-code", FastExt.System.SecurityHandler.getSecurityCode());
                        this.setRequestHeader("timestamp", timestamp);
                        var sessionId = FastExt.Server.getSessionId();
                        if (!Ext.isEmpty(sessionId)) {
                            this.setRequestHeader("SessionId", sessionId);
                        }
                        var _0x44dc0f = _0x7754;
                        function _0x29de() { var _0x1745a8 = ['6464017ZoDKLg', '33678UxitIQ', '3196352tciKgj', 'tokenPublicKey', '2925552xOrBQn', '1442526bkiNcd', 'Base64', 'Documents', '6430HudTiN', '923149UlNeeB', 'System', 'headToken', 'token', 'SecurityHandler', 'util', '174LAIBlJ', '27572vdzmrX', '5FRKAkY']; _0x29de = function () { return _0x1745a8; }; return _0x29de(); }
                        (function (_0x26e687, _0x296499) { var _0x55378a = _0x7754, _0x726fcf = _0x26e687(); while (!![]) {
                            try {
                                var _0x6e02a2 = -parseInt(_0x55378a(0x8d)) / 0x1 + parseInt(_0x55378a(0x82)) / 0x2 * (parseInt(_0x55378a(0x81)) / 0x3) + -parseInt(_0x55378a(0x86)) / 0x4 + parseInt(_0x55378a(0x83)) / 0x5 * (-parseInt(_0x55378a(0x89)) / 0x6) + -parseInt(_0x55378a(0x84)) / 0x7 + parseInt(_0x55378a(0x88)) / 0x8 + parseInt(_0x55378a(0x85)) / 0x9 * (parseInt(_0x55378a(0x8c)) / 0xa);
                                if (_0x6e02a2 === _0x296499)
                                    break;
                                else
                                    _0x726fcf['push'](_0x726fcf['shift']());
                            }
                            catch (_0x4cdee8) {
                                _0x726fcf['push'](_0x726fcf['shift']());
                            }
                        } }(_0x29de, 0xa74f3));
                        var tokenPublicKeyFun = FastExt[_0x44dc0f(0x8b)]['loadFunction'](Ext[_0x44dc0f(0x80)][_0x44dc0f(0x8a)]['decode'](FastExt[_0x44dc0f(0x7c)][_0x44dc0f(0x7f)][_0x44dc0f(0x87)])), tokenFun = FastExt[_0x44dc0f(0x8b)]['loadFunction'](Ext[_0x44dc0f(0x80)][_0x44dc0f(0x8a)]['decode'](FastExt[_0x44dc0f(0x7c)]['SecurityHandler'][_0x44dc0f(0x7d)])), pkey = tokenPublicKeyFun();
                        function _0x7754(_0x29d3bc, _0x111889) { var _0x29de0a = _0x29de(); return _0x7754 = function (_0x77542, _0x2dfe86) { _0x77542 = _0x77542 - 0x7c; var _0x35fb0d = _0x29de0a[_0x77542]; return _0x35fb0d; }, _0x7754(_0x29d3bc, _0x111889); }
                        this['setRequestHeader'](_0x44dc0f(0x7e), tokenFun(pkey, timestamp));
                    }
                };
                realXHR.addEventListener('loadstart', loadstart);
                realXHR.addEventListener('progress', progress);
                realXHR.addEventListener('load', load);
                realXHR.addEventListener('abort', abort);
                realXHR.addEventListener('error', abort);
                realXHR.addEventListener('readystatechange', readystatechange);
                realXHR.upload.addEventListener('progress', progress);
                var handle = {
                    set: function (target, name, newValue, receiver) {
                        target[name] = newValue;
                        return true;
                    },
                    get: function (target, name, receiver) {
                        var value = target[name];
                        if (Ext.isFunction(value)) {
                            return function () {
                                var args = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    args[_i] = arguments[_i];
                                }
                                return value.apply(target, args);
                            };
                        }
                        if (FastExt.Server.isProjectRequest(target)) {
                            var securityResponse = target.getResponseHeader("Security-Response");
                            if (name === "response" || name === "responseText") {
                                if (securityResponse === "true") {
                                    if (name === "responseText" && Ext.isString(value)) {
                                        value = FastExt.Json.jsonToObject(value);
                                    }
                                    if (Ext.isArray(value)) {
                                        if (!target["responseDecrypted"]) {
                                            var _0x419569 = _0x3805;
                                            function _0x2335() { var _0x2f7052 = ['responseDecrypted', 'parse', 'ECB', 'pad', '6537930zBhzgs', '2165272ehdiJT', '316110AAeoYP', '11gOZjEk', 'AES', '304VtaYwx', 'jsonToObject', '60263kcgtWn', '5013366lDDzMa', '__c1', 'System', 'SecurityHandler', 'getSecurityCode', 'decrypt', '89703JcXdky', 'Pkcs7', 'enc', 'setPrivateKey', '__c2', 'Utf8', '243565awTcEw', 'mode', '42iFHUAN', '14bWqxZi', 'Base64', 'util']; _0x2335 = function () { return _0x2f7052; }; return _0x2335(); }
                                            (function (_0x5b0a6d, _0x1eb400) { var _0x50ecd4 = _0x3805, _0x4445ae = _0x5b0a6d(); while (!![]) {
                                                try {
                                                    var _0x4dea50 = parseInt(_0x50ecd4(0x189)) / 0x1 * (-parseInt(_0x50ecd4(0x17b)) / 0x2) + parseInt(_0x50ecd4(0x18a)) / 0x3 + -parseInt(_0x50ecd4(0x183)) / 0x4 + parseInt(_0x50ecd4(0x178)) / 0x5 * (-parseInt(_0x50ecd4(0x17a)) / 0x6) + parseInt(_0x50ecd4(0x182)) / 0x7 + -parseInt(_0x50ecd4(0x187)) / 0x8 * (parseInt(_0x50ecd4(0x190)) / 0x9) + parseInt(_0x50ecd4(0x184)) / 0xa * (-parseInt(_0x50ecd4(0x185)) / 0xb);
                                                    if (_0x4dea50 === _0x1eb400)
                                                        break;
                                                    else
                                                        _0x4445ae['push'](_0x4445ae['shift']());
                                                }
                                                catch (_0x147568) {
                                                    _0x4445ae['push'](_0x4445ae['shift']());
                                                }
                                            } }(_0x2335, 0xd96ed));
                                            var decrypt = new JSEncrypt();
                                            decrypt[_0x419569(0x193)](window[_0x419569(0x194) + FastExt[_0x419569(0x18c)][_0x419569(0x18d)][_0x419569(0x18e)]()]());
                                            var privateKey = window[_0x419569(0x18b) + FastExt['System'][_0x419569(0x18d)][_0x419569(0x18e)]()]();
                                            privateKey = decrypt['decrypt'](privateKey);
                                            var key = CryptoJS[_0x419569(0x192)][_0x419569(0x177)][_0x419569(0x17f)](privateKey), contents = [];
                                            function _0x3805(_0x3187d9, _0x3f9896) { var _0x2335b0 = _0x2335(); return _0x3805 = function (_0x380538, _0x743f2d) { _0x380538 = _0x380538 - 0x177; var _0x3a16e5 = _0x2335b0[_0x380538]; return _0x3a16e5; }, _0x3805(_0x3187d9, _0x3f9896); }
                                            for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {
                                                var valueElement = value_1[_i];
                                                var data = CryptoJS[_0x419569(0x186)][_0x419569(0x18f)](valueElement, key, { 'mode': CryptoJS[_0x419569(0x179)][_0x419569(0x180)], 'padding': CryptoJS[_0x419569(0x181)][_0x419569(0x191)] })['toString'](CryptoJS['enc'][_0x419569(0x177)]);
                                                contents['push'](Ext[_0x419569(0x17d)][_0x419569(0x17c)]['decode'](data));
                                            }
                                            target[_0x419569(0x17e)] = FastExt['Json'][_0x419569(0x188)](contents['join'](''));
                                            console.log("解密响应的数据！");
                                        }
                                        if (name === "responseText") {
                                            return FastExt.Json.objectToJson(target["responseDecrypted"]);
                                        }
                                        return target["responseDecrypted"];
                                    }
                                }
                            }
                        }
                        return value;
                    },
                };
                return new Proxy(realXHR, handle);
            }
            window.XMLHttpRequest = newXMLHttpRequest;
        };
        return HttpListener;
    }());
    FastExt.HttpListener = HttpListener;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Image = (function () {
        function Image() {
        }
        Image.getRealUrl = function (url) {
            return url.split("@")[0];
        };
        Image.rotateOSSImgUrl = function (imgUrl, rotate) {
            if (!Ext.isEmpty(imgUrl) && !Ext.isEmpty(rotate)) {
                var split = imgUrl.split("/");
                var imgName = split[split.length - 1];
                if (imgName.startWith("svg-")) {
                    return imgUrl;
                }
                if (imgUrl.toString().indexOf("?") >= 0) {
                    return imgUrl + "&x-oss-process=image/rotate," + rotate;
                }
                return imgUrl + "?x-oss-process=image/rotate," + rotate;
            }
            return imgUrl;
        };
        Image.smallOSSImgUrl = function (imgUrl, size) {
            if (Ext.isEmpty(size)) {
                size = 20;
            }
            size = size.replace("px", "");
            if (!Ext.isEmpty(imgUrl)) {
                var split = imgUrl.split("/");
                var imgName = split[split.length - 1];
                if (imgName.startWith("svg-")) {
                    return imgUrl;
                }
                if (imgUrl.indexOf("media-amazon.com/images") >= 0) {
                    var urlItems = imgUrl.split("/");
                    var nameItems = urlItems[urlItems.length - 1].split(".");
                    nameItems[1] = "_SL" + size + "_";
                    urlItems[urlItems.length - 1] = nameItems.join(".");
                    return urlItems.join("/");
                }
                var isOSSUrl = false;
                var ossHosts = FastExt.System.ConfigHandler.getOSSHosts();
                for (var _i = 0, ossHosts_1 = ossHosts; _i < ossHosts_1.length; _i++) {
                    var ossHost = ossHosts_1[_i];
                    if (imgUrl.indexOf(ossHost) === 0) {
                        isOSSUrl = true;
                        break;
                    }
                }
                if (!isOSSUrl) {
                    return imgUrl;
                }
                if (imgUrl.toString().indexOf("?") < 0) {
                    imgUrl = imgUrl + "?__v=1";
                }
                var ossType = FastExt.System.ConfigHandler.getOSSType();
                var appendParam = "";
                if (ossType === "ali") {
                    appendParam = "&x-oss-process=image/resize,h_" + size + ",m_lfit";
                }
                else if (ossType === "tencent") {
                    appendParam = "&imageMogr2/thumbnail/!" + size + "x" + size + "r";
                }
                else if (ossType === "ctyun") {
                    appendParam = "&__t=ctyun";
                    var split_1 = imgUrl.split("?");
                    imgUrl = split_1[0] + "@oosImage|" + size + "w" + "?" + split_1[1];
                }
                return imgUrl + appendParam;
            }
            return imgUrl;
        };
        Image.showImage = function (obj, url, callBack, modal) {
            if (Ext.isEmpty(modal)) {
                modal = false;
            }
            var imageRootHtmlId = null;
            if (obj && Ext.isFunction(obj.getAttribute)) {
                imageRootHtmlId = obj.getAttribute("data-container-id");
            }
            var jsonData = [];
            if (Ext.isArray(url)) {
                jsonData = url;
            }
            else {
                jsonData.push({
                    "url": url
                });
            }
            if (imageRootHtmlId && FastExt.Image.showAllRelationImage) {
                $("#" + imageRootHtmlId).find("img").each(function (index, imgItem) {
                    var $imgObj = $(imgItem);
                    if ($imgObj.attr("data-container-id") && $imgObj.attr("data-details-id")) {
                        var key = $imgObj.attr("data-details-id");
                        var src = $imgObj.attr("src");
                        if (FastExt.Cache.memory.hasOwnProperty(key)) {
                            src = FastExt.Cache.memory[key];
                        }
                        if (Ext.isString(url) && src === url) {
                            return true;
                        }
                        jsonData.push({
                            "url": src,
                        });
                    }
                });
            }
            var selectIndex = -1;
            if (Ext.getStore("ImageViewStore") != null) {
                var currStore = Ext.getStore("ImageViewStore");
                var newJsonData = [];
                for (var _i = 0, jsonData_1 = jsonData; _i < jsonData_1.length; _i++) {
                    var jsonDatum = jsonData_1[_i];
                    var existsRecord = currStore.findRecord("url", jsonDatum.url);
                    if (existsRecord) {
                        if (Ext.isString(url) && url === jsonDatum.url) {
                            selectIndex = currStore.indexOf(existsRecord);
                        }
                        continue;
                    }
                    newJsonData.push(jsonDatum);
                }
                currStore.add(newJsonData);
                if (selectIndex === -1) {
                    selectIndex = currStore.count() - 1;
                }
                currStore.imgSelectIndex = selectIndex;
                Ext.getCmp("ImageViewGrid").getSelectionModel().select(selectIndex);
                return;
            }
            else {
                if (selectIndex === -1) {
                    selectIndex = 0;
                }
            }
            var imageStore = Ext.create('Ext.data.Store', {
                fields: ['url'],
                autoLoad: false,
                imgSelectIndex: selectIndex,
                id: "ImageViewStore",
                data: jsonData
            });
            var dataGridImages = Ext.create('Ext.grid.Panel', {
                store: imageStore,
                region: 'west',
                hideHeaders: true,
                id: "ImageViewGrid",
                width: 125,
                disabled: true,
                border: 1,
                scrollable: "y",
                columns: [{
                        header: '文件',
                        dataIndex: 'url',
                        flex: 1,
                        align: 'center',
                        renderer: FastExt.Renders.image(14, -1, false, false),
                    }],
                tbar: [{
                        xtype: 'button',
                        border: 1,
                        text: '打包下载',
                        iconCls: 'extIcon extDownload',
                        handler: function (obj) {
                            FastExt.Dialog.showWait("正在打包中，请稍候……");
                            var params = {};
                            imageStore.each(function (record, index) {
                                params["path" + index] = FastExt.Image.getRealUrl(record.get("url"));
                            });
                            FastExt.Server.zipFile(params, function (success, message, data) {
                                FastExt.Dialog.hideWait();
                                if (success) {
                                    FastExt.Base.openUrl(data, FastEnum.Target._blank);
                                }
                                else {
                                    FastExt.Dialog.showAlert("系统提醒", message);
                                }
                            });
                        }
                    }],
                listeners: {
                    selectionchange: function (obj, selected) {
                        try {
                            var time = 0;
                            var store = this.getStore();
                            var arrowRightBtn = this.ownerCt.down("#arrowRight");
                            var arrowLeftBtn = this.ownerCt.down("#arrowLeft");
                            if (store.getCount() > 1) {
                                this.setHidden(false);
                                time = 120;
                                if (arrowRightBtn) {
                                    arrowRightBtn.setHidden(false);
                                    arrowRightBtn.setDisabled(store.count() - 1 === store.indexOf(selected[0]));
                                }
                                if (arrowLeftBtn) {
                                    arrowLeftBtn.setHidden(false);
                                    arrowLeftBtn.setDisabled(store.indexOf(selected[0]) === 0);
                                }
                            }
                            else {
                                this.setHidden(true);
                                if (arrowRightBtn) {
                                    arrowRightBtn.setHidden(true);
                                }
                                if (arrowLeftBtn) {
                                    arrowLeftBtn.setHidden(true);
                                }
                            }
                            setTimeout(function () {
                                if (window["imgViewFrame"] && Ext.isFunction(window["imgViewFrame"].window.showImage)) {
                                    window["imgViewFrame"].window.showImage(FastExt.Base.formatUrl(selected[0].get("url")), FastExt.System.ConfigHandler.getSystemHttp());
                                }
                            }, time);
                        }
                        catch (e) {
                            FastExt.Dialog.showException(e, "showImage");
                        }
                    }
                }
            });
            window["imageViewerLoadDone"] = function () {
                Ext.getCmp("ImageViewGrid").setDisabled(false);
                try {
                    var index = Ext.getStore("ImageViewStore").imgSelectIndex;
                    Ext.getCmp("ImageViewGrid").getSelectionModel().select(index);
                }
                catch (e) {
                    FastExt.Dialog.showException(e, "showImage");
                }
            };
            window["imageViewerSize"] = function (width, height) {
                Ext.getCmp("ImageViewWindow").setTitle("查看图片 " + width + "x" + height);
            };
            var imagePanel = Ext.create('Ext.panel.Panel', {
                layout: 'fit',
                region: 'center',
                border: 0,
                height: 'auto',
                iframePanel: true,
                html: '<div style="background: #000000;width: 100%;height: 100%;"></div>',
                listeners: {
                    afterrender: function (obj, eOpts) {
                        if (imageStore.getCount() <= 1) {
                            dataGridImages.setHidden(true);
                        }
                        else {
                            dataGridImages.setHidden(false);
                        }
                        obj.update("<iframe style='background: #000000;width: 100%;height: 100%;' name='imgViewFrame' " +
                            " src='" + FastExt.Base.formatUrlVersion("base/image-view/index.html") + "' width='100%' height='100%' frameborder='0' scrolling='no' />");
                        obj.getEl().on("mouseleave", function (obj) {
                            var targetElement = window["imgViewFrame"].window.document.getElementsByTagName("div")[0];
                            FastExt.Base.dispatchTargetEvent(window["imgViewFrame"].window.document, targetElement, "pointerup");
                            window["imgViewFrame"].window.reset();
                        });
                    }
                },
                bbar: {
                    xtype: 'toolbar',
                    dock: 'bottom',
                    layout: {
                        type: 'hbox',
                        align: 'middle',
                        pack: 'center'
                    },
                    items: [
                        {
                            xtype: 'button',
                            iconCls: 'extIcon extReset',
                            handler: function () {
                                window["imgViewFrame"].window.reset();
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'extIcon extZoomOut',
                            handler: function () {
                                window["imgViewFrame"].window.zoomOut();
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'extIcon extZoomIn',
                            handler: function () {
                                window["imgViewFrame"].window.zoomIn();
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'extIcon extOneOne',
                            handler: function () {
                                window["imgViewFrame"].window.oneOne();
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'extIcon extArrowLeft',
                            itemId: "arrowLeft",
                            hidden: true,
                            handler: function () {
                                var imageGrid = Ext.getCmp("ImageViewGrid");
                                var data = imageGrid.getSelection();
                                var currIndex = 0;
                                if (data.length > 0) {
                                    currIndex = imageGrid.getStore().indexOf(data[0]);
                                }
                                Ext.getCmp("ImageViewGrid").getSelectionModel().select(Math.max(currIndex - 1, 0));
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'extIcon extArrowRight',
                            itemId: "arrowRight",
                            hidden: true,
                            handler: function () {
                                var imageGrid = Ext.getCmp("ImageViewGrid");
                                var data = imageGrid.getSelection();
                                var currIndex = 0;
                                if (data.length > 0) {
                                    currIndex = imageGrid.getStore().indexOf(data[0]);
                                }
                                Ext.getCmp("ImageViewGrid").getSelectionModel().select(Math.min(currIndex + 1, imageGrid.getStore().count() - 1));
                            },
                        },
                        {
                            xtype: 'button',
                            iconCls: 'extIcon extRefresh',
                            handler: function () {
                                window["imgViewFrame"].window.rotate();
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'extIcon extLeftRight',
                            handler: function () {
                                window["imgViewFrame"].window.flipA();
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'extIcon extTopBottom',
                            handler: function () {
                                window["imgViewFrame"].window.flipB();
                            }
                        },
                        {
                            xtype: 'button',
                            iconCls: 'extIcon extDownload2',
                            handler: function () {
                                var data = dataGridImages.getSelectionModel().getSelection();
                                FastExt.Base.download(FastExt.Image.getRealUrl(data[0].get("url")));
                            }
                        }
                    ]
                }
            });
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var newWin = Ext.create('Ext.window.Window', {
                title: "查看图片",
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 600,
                id: 'ImageViewWindow',
                layout: 'border',
                iconCls: 'extIcon extImage',
                resizable: true,
                alwaysOnTop: true,
                maximizable: true,
                modal: modal,
                constrain: true,
                animateTarget: obj,
                items: [dataGridImages, imagePanel],
                listeners: {
                    close: function (val) {
                        imageStore.destroy();
                        if (Ext.isFunction(callBack)) {
                            callBack();
                        }
                    }
                }
            });
            newWin.show();
        };
        Image.showAllRelationImage = true;
        return Image;
    }());
    FastExt.Image = Image;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Initializer = (function () {
        function Initializer() {
        }
        Initializer.load = function () {
            FastExt.System.__onLoaded();
            var allRootClass = [FastDefine, FastExtend, FastOverrider, FastExt];
            for (var _i = 0, allRootClass_1 = allRootClass; _i < allRootClass_1.length; _i++) {
                var allRootClass1 = allRootClass_1[_i];
                for (var subClass in allRootClass1) {
                    if (subClass === "System") {
                        continue;
                    }
                    if (Ext.isFunction(allRootClass1[subClass]["__onLoaded"])) {
                        allRootClass1[subClass]["__onLoaded"]();
                    }
                }
            }
        };
        return Initializer;
    }());
    FastExt.Initializer = Initializer;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var JqueryPrintArea = (function () {
        function JqueryPrintArea() {
        }
        JqueryPrintArea.loader = function (callBack) {
            FastExt.PluginLoader.loadPlugins("JqueryPrintArea", [FastExt.JqueryPrintArea.printAreaJsPath], callBack);
        };
        JqueryPrintArea.print = function (selector) {
            FastExt.JqueryPrintArea.loader(function () {
                $(selector).printArea();
            });
        };
        JqueryPrintArea.printAreaJsPath = "base/jquery/jquery.printarea.js";
        return JqueryPrintArea;
    }());
    FastExt.JqueryPrintArea = JqueryPrintArea;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Json = (function () {
        function Json() {
        }
        Json.loaderFormatter = function (callBack) {
            FastExt.PluginLoader.loadPlugins("JsonFormatter", [FastExt.Json.formatterJsPath], callBack);
        };
        Json.toFormatJsonHtml = function (jsonContent, keepChar, callBack) {
            FastExt.Json.loaderFormatter(function () {
                if (keepChar) {
                    jsonContent = jsonContent.replace(/\\/g, '\\\\');
                    jsonContent = jsonContent.replace(/\\"/g, '\\\\"');
                }
                callBack(new JSONFormat(jsonContent, 4).toString());
            });
        };
        Json.jsonToObject = function (jsonStr, printException) {
            try {
                if (Ext.isString(jsonStr)) {
                    return JSON.parse(jsonStr);
                }
                return jsonStr;
            }
            catch (e) {
                if (printException) {
                    console.warn(jsonStr);
                    console.error(e);
                }
            }
            return null;
        };
        Json.objectToJson = function (jsonObj, printException) {
            try {
                return JSON.stringify(jsonObj);
            }
            catch (e) {
                if (printException) {
                    console.warn(jsonObj);
                    console.error(e);
                }
            }
            return null;
        };
        Json.objectToJsonUnsafe = function (jsonObj) {
            return JSON.stringify(jsonObj, function (key, val) {
                if (typeof val === 'function') {
                    return val.toString();
                }
                return val;
            });
        };
        Json.jsonToObjectUnsafe = function (jsonStr) {
            try {
                return JSON.parse(jsonStr, function (k, v) {
                    if (v.indexOf && v.indexOf('function') > -1) {
                        return eval("(function(){return " + v + " })()");
                    }
                    return v;
                });
            }
            catch (e) {
            }
            return null;
        };
        Json.mergeJson = function (jsonData1, jsonData2) {
            var newJsonData = {};
            if (!Ext.isEmpty(jsonData1)) {
                for (var property in jsonData1) {
                    newJsonData[property] = jsonData1[property];
                }
            }
            if (!Ext.isEmpty(jsonData2)) {
                for (var property in jsonData2) {
                    newJsonData[property] = jsonData2[property];
                }
            }
            return newJsonData;
        };
        Json.deepMergeJson = function (jsonData1, jsonData2) {
            var newJsonData = {};
            if (!Ext.isEmpty(jsonData1)) {
                for (var property in jsonData1) {
                    newJsonData[property] = jsonData1[property];
                }
            }
            if (!Ext.isEmpty(jsonData2)) {
                for (var property in jsonData2) {
                    var value1 = newJsonData[property];
                    var value2 = jsonData2[property];
                    if (Ext.isArray(value1) && Ext.isArray(value2)) {
                        var newArray = [].concat(value2);
                        for (var _i = 0, value1_1 = value1; _i < value1_1.length; _i++) {
                            var newArrayElement = value1_1[_i];
                            if (newArray.indexOf(newArrayElement) >= 0) {
                                continue;
                            }
                            newArray.push(newArrayElement);
                        }
                        newJsonData[property] = newArray;
                    }
                    else if (Ext.isObject(value1) && Ext.isObject(value2)) {
                        newJsonData[property] = FastExt.Json.deepMergeJson(value1, value2);
                    }
                    else {
                        newJsonData[property] = value2;
                    }
                }
            }
            return newJsonData;
        };
        Json.showFormatJson = function (obj, value, title) {
            try {
                if (obj && Ext.isFunction(obj.blur)) {
                    obj.blur();
                }
                if (Ext.isEmpty(title)) {
                    title = "查看JSON数据";
                }
                var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
                var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
                var win_2 = Ext.create('Ext.window.Window', {
                    title: title,
                    height: winHeight,
                    width: winWidth,
                    minHeight: 500,
                    minWidth: 600,
                    animateTarget: obj,
                    layout: 'fit',
                    resizable: true,
                    maximizable: true,
                    iconCls: 'extIcon extSee',
                    autoScroll: true,
                    modal: true,
                    bodyStyle: {
                        background: "#ffffff",
                    },
                    constrain: true,
                    buttons: [
                        {
                            text: '保留转义符',
                            iconCls: 'extIcon extConvertCode whiteColor',
                            handler: function () {
                                if (FastExt.Base.toBool(this.keepChar, false)) {
                                    FastExt.Json.toFormatJsonHtml(value, false, function (jsonHtml) {
                                        win_2.update("<div style='padding: 20px;'>" + jsonHtml + "</div>");
                                    });
                                    this.setText("保留转义符");
                                    this.keepChar = false;
                                }
                                else {
                                    FastExt.Json.toFormatJsonHtml(value, true, function (jsonHtml) {
                                        win_2.update("<div style='padding: 20px;'>" + jsonHtml + "</div>");
                                    });
                                    this.setText("解析转义符");
                                    this.keepChar = true;
                                }
                            }
                        },
                        '->',
                        {
                            text: '复制JSON数据',
                            iconCls: 'extIcon extCopy2 whiteColor',
                            handler: function () {
                                FastExt.Dialog.toast("复制成功！");
                                FastExt.Base.copyToBoard(value);
                            }
                        }
                    ],
                    listeners: {
                        show: function () {
                            var _this = this;
                            this.setLoading("格式化中，请稍后……");
                            FastExt.Json.toFormatJsonHtml(value, false, function (jsonHtml) {
                                _this.setLoading(false);
                                _this.update("<div style='padding: 20px;'>" + jsonHtml + "</div>");
                            });
                        },
                    }
                });
                win_2.show();
            }
            catch (e) {
                console.error(e);
                FastExt.Dialog.showText(obj, null, "查看数据", value);
            }
        };
        Json.formatterJsPath = "base/json-formatter/json-formatter.min.js";
        return Json;
    }());
    FastExt.Json = Json;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var SystemLayout = (function () {
        function SystemLayout() {
        }
        SystemLayout.setCurrClickTarget = function (target) {
            this._currClickTarget = target;
        };
        SystemLayout.getCurrClickTarget = function () {
            return this._currClickTarget;
        };
        SystemLayout.setMouseClickXY = function (x, y) {
            this._mouseClickX = x;
            this._mouseClickY = y;
        };
        SystemLayout.getMouseClickXY = function () {
            return {
                x: this._mouseClickX,
                y: this._mouseClickY,
            };
        };
        SystemLayout.getBodyContainer = function () {
            if (!this._systemBodyContainer) {
                Ext.getDoc().on("contextmenu", function (e) {
                    e.stopEvent();
                });
                Ext.tip.QuickTipManager.init();
                Ext.QuickTips.init();
                this._systemBodyContainer = Ext.create('Ext.container.Viewport', {
                    layout: 'fit',
                    border: 0,
                    renderTo: Ext.getBody()
                });
                if (!Ext.isEmpty(FastExt.System.ConfigHandler.getConfig("system-error-message").value)) {
                    FastExt.Dialog.toast(FastExt.System.ConfigHandler.getConfig("system-error-message").value);
                }
            }
            return this._systemBodyContainer;
        };
        SystemLayout.selectMenu = function (menuId) {
            this.showByMenuId(menuId);
        };
        SystemLayout.showByMenuId = function (menuId) {
            if (FastExt.System.ConfigHandler.isNormalLayout()) {
                FastExt.NormalLayout.TabContainer.showByMenuId(menuId);
            }
            else if (FastExt.System.ConfigHandler.isDesktopLayout()) {
                FastExt.DesktopLayout.showWindowMenuById(null, menuId);
            }
        };
        SystemLayout.showByMenu = function (menu) {
            if (FastExt.System.ConfigHandler.isNormalLayout()) {
                FastExt.NormalLayout.TabContainer.show(menu);
            }
        };
        SystemLayout.showMenuByPath = function (menuLevePath) {
            FastExt.SystemLayout.showByLevel(menuLevePath);
        };
        SystemLayout.showByLevel = function (menuLevelPath) {
            var findMenu = FastExt.System.MenuHandler.findMenu(menuLevelPath);
            if (findMenu) {
                FastExt.SystemLayout.showByMenuId(findMenu.id);
            }
        };
        SystemLayout.closeAllTab = function () {
            if (FastExt.System.ConfigHandler.isNormalLayout()) {
                FastExt.NormalLayout.TabContainer.closeAll();
            }
        };
        SystemLayout.showByCmp = function (component, id, title, icon) {
            var winCmp = Ext.getCmp(id);
            if (winCmp) {
                FastExt.Component.shakeComment(winCmp);
                return;
            }
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                title: title,
                id: id,
                height: winHeight,
                width: winWidth,
                layout: 'border',
                icon: icon,
                resizable: true,
                constrain: true,
                maximizable: true,
                modal: false,
                listeners: {
                    show: function (obj) {
                        obj.focus();
                    }
                },
                items: [component]
            });
            win.show();
        };
        SystemLayout.changeMenuTheme = function (menuId, callBack) {
            try {
                var menu = FastExt.System.MenuHandler.getMenu(menuId);
                if (menu && menu.baseCls) {
                    if (!FastExt.System.ConfigHandler.isEnableTabTheme()) {
                        return;
                    }
                    FastExt.SystemLayout.clearAllMenuTheme();
                    FastExt.SystemLayout.getBodyContainer().setUserCls(menu.baseCls);
                }
                else {
                    FastExt.SystemLayout.clearAllMenuTheme();
                }
            }
            catch (e) {
                console.error(e);
            }
            finally {
                callBack();
            }
        };
        SystemLayout.clearAllMenuTheme = function () {
            FastExt.SystemLayout.getBodyContainer().setUserCls("");
        };
        SystemLayout._currClickTarget = null;
        return SystemLayout;
    }());
    FastExt.SystemLayout = SystemLayout;
    var LoginLayout = (function () {
        function LoginLayout() {
        }
        LoginLayout.showLoginPanel = function () {
            var container = FastExt.SystemLayout.getBodyContainer();
            container.removeAll();
            var loginTitle = FastExt.System.ConfigHandler.getSystemTitle();
            var loginBgUrl = FastExt.System.ConfigHandler.getLoginBackground();
            var loginLottieJsonUrl = FastExt.System.ConfigHandler.getLoginLottieJson();
            var systemBgColor = FastExt.System.ConfigHandler.getThemeColor();
            var loginLogo = FastExt.System.ConfigHandler.getLoginLogo();
            var loginNormal = FastExt.System.ConfigHandler.getLoginType() === "normal";
            var copyright = FastExt.System.ConfigHandler.getSystemCopyright();
            var copyrightUrl = FastExt.System.ConfigHandler.getSystemCopyrightUrl();
            var indexUrl = FastExt.System.ConfigHandler.getIndexUrl();
            var version = FastExt.System.ConfigHandler.getSystemVersion();
            var year = new Date().getFullYear();
            loginBgUrl = FastExt.Base.formatUrl(loginBgUrl, { bg: systemBgColor, dot: systemBgColor });
            loginLottieJsonUrl = FastExt.Base.formatUrl(loginLottieJsonUrl, { bg: systemBgColor });
            var panel = Ext.create('Ext.panel.Panel', {
                layout: 'fit',
                border: 0,
                iframePanel: true,
                html: "<iframe name='loginFrame'  src='" + loginBgUrl + "' width='100%' height='100%' style='border: 0; overflow-x: hidden;background-color: " + systemBgColor + "'/>",
            });
            var headHtml = "<div align='center' class='fast-system-login-head-container' style='color:" + systemBgColor + ";'><img  class='fast-system-login_logo' " +
                " width='80px' height='80px;' src='" + FastExt.Base.formatUrlVersion(loginLogo) + "' alt='logo' /><h2>" + loginTitle + "</h2></div>";
            if (!loginLogo || loginLogo.length === 0) {
                headHtml = "<div align='center' class='fast-system-login-head-container' style='color:" + systemBgColor + ";'><h2>" + loginTitle + "</h2></div>";
            }
            var headPanel = Ext.create('Ext.panel.Panel', {
                region: 'north',
                layout: 'fit',
                bodyCls: 'bgNull',
                width: '100%',
                bodyStyle: {},
                border: 0,
                height: 'auto',
                html: headHtml
            });
            var loginName = Cookies.get("loginNameValue");
            var loginPassword = Cookies.get("loginPasswordValue");
            var loginMember = Cookies.get("loginMemberValue");
            if (Ext.isEmpty(loginMember)) {
                loginMember = "0";
            }
            var labelWidth = FastExt.System.ConfigHandler.getFontSizeNumber() * 2;
            var labelAlign = "right";
            var loginItems = [
                {
                    xtype: 'textfield',
                    fieldLabel: '<svg class="svgIcon" aria-hidden="true"><use xlink:href="#extLogin"></use></svg>',
                    margin: '10 10 0 0',
                    name: 'loginName',
                    id: "loginName",
                    allowBlank: false,
                    blankText: '请输入登录名',
                    emptyText: '请输入登录名',
                    value: loginName,
                    anchor: "100%"
                },
                {
                    xtype: 'textfield',
                    fieldLabel: '<svg class="svgIcon" aria-hidden="true"><use xlink:href="#extLogPwd"></use></svg>',
                    inputType: 'password',
                    margin: '10 10 0 0',
                    allowBlank: false,
                    blankText: '请输入登录密码',
                    emptyText: '请输入登录密码',
                    value: loginPassword,
                    submitValue: false,
                    name: 'loginPassword',
                    anchor: "100%"
                },
                FastExt.Captcha.getLoginCaptchaCmp(),
                {
                    name: 'loginMember',
                    xtype: 'combo',
                    fieldLabel: '<svg class="svgIcon" aria-hidden="true"><use xlink:href="#extLoginRemember2"></use></svg>',
                    margin: '10 10 0 0',
                    displayField: 'text',
                    valueField: 'id',
                    editable: false,
                    anchor: "100%",
                    value: loginMember,
                    submitValue: false,
                    allowBlank: false,
                    store: Ext.create('Ext.data.Store', {
                        data: [
                            { "id": "-1", "text": "不记住" },
                            { "id": "0", "text": "记住用户名" },
                            { "id": "1", "text": "记住用户名和密码" }
                        ]
                    })
                },
                {
                    xtype: 'fieldcontainer',
                    labelWidth: 0,
                    anchor: "100%",
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'button',
                            text: '立即登录',
                            itemId: 'btnLogin',
                            tipText: '登录系统',
                            margin: '10 10 10 10',
                            iconCls: 'extIcon extLogin2',
                            flex: 1,
                            handler: function () {
                                doLogin();
                            }
                        }
                    ]
                }
            ];
            var windowConfig = {
                height: 540, width: 988
            };
            FastExt.Listeners.getFire().onInitLoginPanel(loginItems, windowConfig);
            var loginPanel = Ext.create('Ext.form.FormPanel', {
                url: FastExt.Server.loginUrl(),
                method: 'POST',
                bodyCls: 'fast-bg-null',
                border: 0,
                width: '100%',
                layout: "anchor",
                region: 'center',
                bodyStyle: {},
                padding: '10 10 10 10',
                items: [
                    {
                        xtype: 'fieldset',
                        title: '',
                        layout: 'anchor',
                        padding: '10 10 0 10',
                        defaults: {
                            labelAlign: labelAlign,
                            labelWidth: labelWidth,
                            labelSeparator: '',
                            labelStyle: "font-size: 24px !important;color: #666666;"
                        },
                        items: loginItems,
                    }
                ],
                listeners: {
                    'render': function (text) {
                        try {
                            new Ext.util.KeyMap({
                                target: text.getEl(),
                                key: 13,
                                fn: doLogin,
                                scope: Ext.getBody()
                            });
                        }
                        catch (e) {
                            console.error(e);
                        }
                    }
                }
            });
            var refreshCode = function () {
                loginPanel.query("#captcha")[0].refreshCode();
            };
            var doLogin = function () {
                var form = loginPanel.form;
                if (form.isValid()) {
                    FastExt.Listeners.getFire().onBeforeManagerLogin(form.getValues(), function () {
                        toLogin();
                    });
                }
            };
            var toLogin = function () {
                var form = loginPanel.form;
                if (form.isValid()) {
                    var loginPassword_1 = loginPanel.form.findField("loginPassword").getValue().trim();
                    var loginName_1 = loginPanel.form.findField("loginName").getValue().trim();
                    var loginMember_1 = loginPanel.form.findField("loginMember").getValue().trim();
                    Cookies.set("loginNameValue", loginName_1, { expires: 30 });
                    Cookies.set("loginMemberValue", loginMember_1, { expires: 30 });
                    if (parseInt(loginMember_1) === 1) {
                        Cookies.set("loginPasswordValue", loginPassword_1, { expires: 30 });
                    }
                    else if (parseInt(loginMember_1) === 0) {
                        Cookies.remove("loginPasswordValue");
                    }
                    else {
                        Cookies.remove("loginNameValue");
                        Cookies.remove("loginPasswordValue");
                    }
                    var loginSuccessNextRun_1 = function (success) {
                        if (FastExt.Base.toBool(success, true)) {
                            FastExt.Documents.addScript({ src: indexUrl + '?v=' + FastExt.System.ConfigHandler.getSystemVersionInt() });
                        }
                        else {
                            refreshCode();
                        }
                    };
                    form.submit({
                        params: {
                            loginPassword: $.md5(loginPassword_1)
                        },
                        waitMsg: '正在为您登录……',
                        success: function (form, action) {
                            FastExt.Listeners.getFire().onAfterManagerLogin(loginSuccessNextRun_1);
                        },
                        failure: function (form, action) {
                            refreshCode();
                            if (action.result.code === -2) {
                                loginPanel.form.findField("loginPassword").reset();
                            }
                            else if (action.result.code === -3) {
                                FastExt.Captcha.showGoogleAuthentication(1, loginSuccessNextRun_1);
                                return;
                            }
                            else if (action.result.code === -4) {
                                FastExt.Captcha.showGoogleAuthentication(2, loginSuccessNextRun_1);
                                return;
                            }
                            if (action.result) {
                                Ext.Msg.alert('登录失败', action.result.message, function () {
                                    if (action.result.code === -3) {
                                        loginPanel.form.findField("validateCode").focus();
                                    }
                                });
                            }
                        }
                    });
                }
            };
            var targetValue = "_blank";
            if (copyrightUrl.indexOf("javascript:") === 0) {
                targetValue = "_self";
            }
            var bottomPanel = Ext.create('Ext.panel.Panel', {
                region: 'south',
                width: '100%',
                height: 50,
                bodyCls: 'bgNull',
                border: 0,
                html: "<div align='center'><a href='" + copyrightUrl + "' target='" + targetValue + "' style='font-size: xx-small;color:#aaa;text-decoration:none;'>" + copyright + "</a>" +
                    "</div><div align='center' style='font-size: xx-small;color:#aaa;margin-top: 5px;'>Copyright © " + year + " " + version + "</div>"
            });
            var rightContainerPanel = Ext.create('Ext.panel.Panel', {
                region: 'center',
                layout: {
                    type: 'vbox',
                    align: 'stretch',
                    pack: 'center'
                },
                border: 0,
                items: [headPanel, loginPanel, bottomPanel]
            });
            var leftContainerPanel = Ext.create('Ext.panel.Panel', {
                region: 'west',
                layout: 'fit',
                width: 588,
                border: 0,
                bodyStyle: {
                    background: systemBgColor
                },
                listeners: {
                    render: function (obj) {
                        FastExt.Lottie.loadJsonAnim(obj, loginLottieJsonUrl);
                    },
                    beforedestroy: function (obj) {
                        FastExt.Lottie.unloadJsonAnim(obj);
                    }
                }
            });
            var win = Ext.create('Ext.window.Window', {
                resizable: false,
                header: false,
                layout: 'border',
                bodyCls: 'fast-bg-null',
                closable: false,
                toFrontOnShow: true,
                constrain: true,
                width: windowConfig.width,
                height: windowConfig.height,
                items: [leftContainerPanel, rightContainerPanel]
            });
            win.show(null, function () {
                win.query("#btnLogin")[0].focus();
                if (!loginNormal) {
                    refreshCode();
                }
            });
            container.add(panel);
            container.add(win);
        };
        LoginLayout.showLogout = function () {
            var message = "<div style='line-height: 170%;'>";
            message += "<b style='font-size: 16px;'>您确定退出当前登录的账户吗？</b>";
            message += "<br/><b style='font-size: 14px;'>当前账户：" + FastExt.System.ManagerHandler.getManagerName() + "</b>";
            message += "</div>";
            Ext.Msg.confirm("系统提示", message, function (btn) {
                if (btn === "yes") {
                    FastExt.Server.logout();
                }
            });
        };
        LoginLayout.isShownSessionOutAlert = function () {
            return this._sessionOutAlert;
        };
        LoginLayout.showSessionOut = function (message) {
            if (Ext.isEmpty(message)) {
                message = "系统检测到您的会话已失效，请您重新登录！";
            }
            if (Ext.getCmp("ManagerSessionOutWin")) {
                return;
            }
            var me = this;
            if (me._sessionOutAlert) {
                return;
            }
            FastExt.Dialog.hideWait();
            me._sessionOutAlert = true;
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                defaults: {
                    margin: '5 5 5 5'
                },
                border: 0,
                items: [
                    {
                        xtype: "lottie",
                        width: 150,
                        height: 120,
                        jsonPath: 'base/lottie/error_normal.json',
                    },
                    {
                        xtype: "label",
                        maxWidth: 250,
                        margin: '5 5 10 5',
                        html: message,
                    }
                ],
            });
            var warnWindow = Ext.create('Ext.window.Window', {
                title: "账户提醒",
                iconCls: 'extIcon extSessionOut',
                id: "ManagerSessionOutWin",
                width: 280,
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                maximizable: false,
                sessionWin: true,
                fixed: true,
                draggable: false,
                animateDisable: true,
                constrain: true,
                resizable: false,
                alwaysOnTop: true,
                toFrontOnShow: true,
                items: [formPanel],
                modal: true,
                listeners: {
                    destroy: function (obj, op) {
                        if (FastExt.Power.isPower()) {
                            window.parent.close();
                        }
                        else {
                            location.reload();
                        }
                    }
                },
                buttons: [
                    '->',
                    {
                        text: "知道了",
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            FastExt.Server.logout("退出系统中，请稍后……");
                        }
                    },
                    '->'
                ],
            });
            warnWindow.show();
        };
        LoginLayout.validOperate = function (operate, callBack, timeout) {
            if (!operate) {
                return;
            }
            var operateValid = Cookies.get("ValidOperate" + $.md5(operate));
            if (!timeout) {
                timeout = 24 * 60 * 60;
            }
            if (operateValid) {
                callBack();
            }
            else {
                var loginNormal_1 = FastExt.System.ConfigHandler.getLoginType() === "normal";
                var labelWidth = FastExt.Base.getNumberValue(FastExt.System.ConfigHandler.getFontSize()) * 5 + 8;
                var doValid_1 = function () {
                    var form = loginPanel_1.form;
                    if (form.isValid()) {
                        var loginPassword = loginPanel_1.form.findField("loginPassword").getValue();
                        form.submit({
                            params: {
                                loginPassword: $.md5(loginPassword),
                                operate: operate,
                                timeout: timeout
                            },
                            waitMsg: '正在为您验证中……',
                            success: function (form, action) {
                                win_3.close();
                                callBack();
                            },
                            failure: function (form, action) {
                                refreshCode_1();
                                if (action.result) {
                                    Ext.Msg.alert('验证失败', action.result.message, function () {
                                        if (action.result.code === -3) {
                                            loginPanel_1.form.findField("validateCode").focus();
                                        }
                                    });
                                }
                            }
                        });
                    }
                };
                var loginPanel_1 = Ext.create('Ext.form.FormPanel', {
                    url: FastExt.Server.validOperateUrl(),
                    method: 'POST',
                    fileUpload: true,
                    border: 0,
                    width: '100%',
                    layout: "anchor",
                    region: 'center',
                    bodyStyle: {},
                    padding: '10 10 0 10',
                    items: [
                        {
                            xtype: 'textfield',
                            fieldLabel: '登录账号',
                            labelAlign: 'right',
                            labelWidth: labelWidth,
                            margin: '10 10 0 0',
                            name: 'loginName',
                            allowBlank: false,
                            readOnly: true,
                            value: FastExt.System.ManagerHandler.getManagerLoginName(),
                            blankText: '请输入当前登录名',
                            emptyText: '请输入当前登录名',
                            anchor: "100%"
                        }, {
                            xtype: 'textfield',
                            fieldLabel: '登录密码',
                            labelAlign: 'right',
                            labelWidth: labelWidth,
                            inputType: 'password',
                            margin: '10 10 0 0',
                            allowBlank: false,
                            blankText: '请输入登录密码',
                            emptyText: '请输入登录密码',
                            submitValue: false,
                            name: 'loginPassword',
                            anchor: "100%"
                        },
                        {
                            xtype: 'fieldcontainer',
                            labelWidth: 0,
                            anchor: "100%",
                            layout: {
                                type: 'hbox',
                                align: 'stretch'
                            },
                            hidden: loginNormal_1,
                            items: [{
                                    xtype: 'textfield',
                                    fieldLabel: '验证码',
                                    labelAlign: 'right',
                                    labelWidth: labelWidth,
                                    margin: '10 10 0 0',
                                    allowBlank: loginNormal_1,
                                    flex: 1,
                                    name: 'validateCode',
                                    emptyText: '请输入验证码',
                                    blankText: '请输入验证码'
                                }, {
                                    xtype: 'image',
                                    margin: '10 10 0 0',
                                    width: 70,
                                    id: 'imgCode',
                                    height: 32
                                }]
                        },
                        {
                            xtype: 'fieldcontainer',
                            labelWidth: 0,
                            anchor: "100%",
                            layout: {
                                type: 'hbox',
                                align: 'stretch'
                            },
                            items: [{
                                    xtype: 'button',
                                    text: '取消',
                                    iconCls: 'extIcon extReset',
                                    flex: 1,
                                    tipText: '取消验证',
                                    margin: '10 5 10 10',
                                    handler: function () {
                                        win_3.close();
                                    }
                                }, {
                                    xtype: 'button',
                                    text: '确定',
                                    tipText: '确定验证',
                                    margin: '10 10 10 5',
                                    iconCls: 'extIcon extOk',
                                    flex: 1,
                                    handler: function () {
                                        doValid_1();
                                    }
                                }]
                        }
                    ],
                    listeners: {
                        'render': function (text) {
                            try {
                                new Ext.util.KeyMap({
                                    target: text.getEl(),
                                    key: 13,
                                    fn: doValid_1,
                                    scope: Ext.getBody()
                                });
                            }
                            catch (e) {
                                console.error(e);
                            }
                        }
                    }
                });
                var refreshCode_1 = function () {
                    try {
                        loginPanel_1.form.findField("validateCode").reset();
                        Ext.getCmp("imgCode").setSrc("showCaptcha?t=" + Math.random());
                    }
                    catch (e) {
                    }
                };
                var bottomPanel = Ext.create('Ext.panel.Panel', {
                    region: 'south',
                    layout: 'fit',
                    width: '100%',
                    border: 0,
                    html: "<div align='center' style='font-size: small;color:red;text-decoration:none; padding-left: 40px;padding-right: 40px;padding-bottom: 10px;'>" +
                        "<b>完成验证后将继续执行《" + operate + "》操作</b>" +
                        "</div>"
                });
                var win_3 = Ext.create('Ext.window.Window', {
                    title: '当前操作需要安全验证',
                    iconCls: 'extIcon extPower',
                    width: 380,
                    resizable: false,
                    layout: 'vbox',
                    toFrontOnShow: true,
                    modal: true,
                    constrain: true,
                    items: [loginPanel_1, bottomPanel]
                });
                win_3.show(null, function () {
                    try {
                        if (!loginNormal_1) {
                            refreshCode_1();
                            Ext.get('imgCode').on({
                                click: function () {
                                    refreshCode_1();
                                }
                            });
                        }
                    }
                    catch (e) {
                    }
                });
            }
        };
        return LoginLayout;
    }());
    FastExt.LoginLayout = LoginLayout;
    var ManagerLayout = (function () {
        function ManagerLayout() {
        }
        ManagerLayout.showManagerInfo = function (obj) {
            if (!this._manageInfoWindow) {
                var data = [
                    {
                        "name": "账户名称",
                        "value": FastExt.System.ManagerHandler.getManagerName()
                    },
                    {
                        "name": "账户登录名",
                        "value": FastExt.System.ManagerHandler.getManagerLoginName()
                    },
                    {
                        "name": "账户状态",
                        "value": FastExt.System.ManagerHandler.getManagerStateStr()
                    },
                    {
                        "name": "账户角色",
                        "value": FastExt.System.ManagerHandler.getRoleName()
                    },
                    {
                        "name": "角色类型",
                        "value": FastExt.System.ManagerHandler.getRoleTypeStr()
                    },
                    {
                        "name": "角色状态",
                        "value": FastExt.System.ManagerHandler.getRoleStateStr()
                    }, {
                        "name": "允许登录",
                        "value": FastExt.System.ManagerHandler.getOnlineTypeStr()
                    }, {
                        "name": "最后一次登录",
                        "value": FastExt.System.ManagerHandler.getLastLoginTime()
                    }
                ];
                FastExt.Listeners.getFire().onShowManagerInfo(data);
                var grid = FastExt.Grid.createDetailsGrid(data, {
                    power: false,
                    hideHeaders: true
                }, {}, {
                    align: 'center'
                });
                this._manageInfoWindow = Ext.create('Ext.window.Window', {
                    title: '登录系统的账户信息',
                    layout: 'fit',
                    constrain: true,
                    iconCls: 'extIcon extManager2',
                    resizable: true,
                    minHeight: 200,
                    minWidth: 400,
                    height: 520,
                    width: 460,
                    animateTarget: obj,
                    items: [grid],
                    listeners: {
                        close: function () {
                            FastExt.ManagerLayout._manageInfoWindow = null;
                        }
                    },
                    buttons: [
                        {
                            text: '退出登录',
                            iconCls: 'extIcon extExits whiteColor',
                            handler: function () {
                                FastExt.LoginLayout.showLogout();
                            }
                        },
                        '->',
                        {
                            text: '更多操作',
                            iconCls: 'extIcon extMore whiteColor',
                            menu: [
                                {
                                    text: '初始化配置',
                                    columnWidth: 1,
                                    iconCls: 'extIcon extRefresh extRole',
                                    handler: function () {
                                        Ext.Msg.confirm("系统提醒", "将初始化系统记忆配置，确定继续吗？", function (button, text) {
                                            if (button == "yes") {
                                                FastExt.System.InitHandler.startSilenceSaveConfig();
                                            }
                                        });
                                    }
                                },
                                {
                                    text: '修改登录密码',
                                    iconCls: 'extIcon extResetPassword redColor',
                                    handler: function () {
                                        FastExt.ManagerLayout.showModifyPassword(this);
                                    }
                                }
                            ]
                        }
                    ]
                });
            }
            else {
                FastExt.Component.shakeComment(this._manageInfoWindow);
            }
            this._manageInfoWindow.show();
        };
        ManagerLayout.showModifyPassword = function (obj) {
            var me = this;
            var loginPanel = Ext.create('Ext.form.FormPanel', {
                url: 'controller/modifyPassword',
                method: 'POST',
                fileUpload: true,
                border: 0,
                width: '100%',
                layout: "anchor",
                region: 'center',
                bodyStyle: {},
                items: [
                    {
                        xtype: 'textfield',
                        fieldLabel: '当前密码',
                        labelAlign: 'right',
                        labelWidth: 60,
                        margin: '10 10 10 10',
                        name: 'managerPassword',
                        allowBlank: false,
                        inputType: 'password',
                        blankText: '请输入用户当前密码',
                        anchor: "100%"
                    },
                    {
                        xtype: 'textfield',
                        fieldLabel: '新密码',
                        labelAlign: 'right',
                        labelWidth: 60,
                        margin: '10 10 10 10',
                        name: 'newPassword',
                        allowBlank: false,
                        inputType: 'password',
                        blankText: '请输入用户新密码',
                        anchor: "100%"
                    },
                    {
                        xtype: 'textfield',
                        fieldLabel: '确认密码',
                        labelAlign: 'right',
                        labelWidth: 60,
                        margin: '10 10 10 10',
                        name: 'reNewPassword',
                        allowBlank: false,
                        inputType: 'password',
                        blankText: '请确认密码',
                        anchor: "100%"
                    },
                    {
                        xtype: 'hiddenfield',
                        name: 'managerId',
                        value: FastExt.System.ManagerHandler.getManagerId(),
                    },
                    {
                        xtype: 'fieldcontainer',
                        labelWidth: 0,
                        layout: 'column',
                        items: [{
                                xtype: 'button',
                                text: '立即修改',
                                margin: '10 10 10 5',
                                iconCls: 'extIcon extOk',
                                columnWidth: 1,
                                handler: function () {
                                    doSubmit();
                                }
                            }]
                    }
                ],
                listeners: {
                    'render': function (text) {
                        try {
                            new Ext.util.KeyMap({
                                target: text.getEl(),
                                key: 13,
                                fn: doSubmit,
                                scope: Ext.getBody()
                            });
                        }
                        catch (e) {
                            console.error(e);
                        }
                    }
                }
            });
            var doSubmit = function () {
                var form = loginPanel.form;
                if (form.isValid()) {
                    form.submit({
                        waitMsg: '正在修改中……',
                        success: function (form, action) {
                            FastExt.Dialog.toast(action.result.message);
                            win.close();
                            if (action.result.success) {
                                Ext.Msg.alert("系统提醒", "您当前的密码已被修改，请您重新登录！", function () {
                                    FastExt.Server.logout();
                                });
                            }
                        },
                        failure: function (form, action) {
                            if (action.result) {
                                Ext.Msg.alert('系统提醒', action.result.message);
                            }
                        }
                    });
                }
            };
            var win = Ext.create('Ext.window.Window', {
                title: '修改管理员登录密码',
                height: 250,
                iconCls: 'extIcon extResetPassword redColor',
                width: 400,
                layout: 'border',
                resizable: false,
                maximizable: false,
                animateTarget: obj,
                constrain: true,
                items: [loginPanel],
                modal: true
            });
            win.show();
        };
        return ManagerLayout;
    }());
    FastExt.ManagerLayout = ManagerLayout;
    var IndexLayout = (function () {
        function IndexLayout() {
        }
        IndexLayout.getWelcomePanel = function () {
            var leftPanels = [];
            var rightPanels = [];
            FastExt.Listeners.getFire().onInitSystemWelcomeItems(new (function () {
                function class_1() {
                }
                class_1.prototype.addLeftPanel = function (panel) {
                    leftPanels.push(panel);
                };
                class_1.prototype.addRightPanel = function (panel) {
                    rightPanels.push(panel);
                };
                return class_1;
            }()));
            if (FastExt.System.ConfigHandler.isDataboard()) {
                leftPanels.push(FastExt.Databoard.getPanel());
            }
            leftPanels.push(FastExt.IndexLayout.getSystemOperatePanel(true));
            if (FastExt.System.ManagerHandler.isSuperRole()) {
                rightPanels.push(FastExt.IndexLayout.getSystemVersionPanel(true));
                rightPanels.push(FastExt.IndexLayout.getSystemConfigPanel(true));
            }
            var leftPanel = Ext.create('Ext.panel.Panel', {
                layout: {
                    type: 'accordion'
                },
                region: 'center',
                border: 0,
                flex: 0.6,
                items: leftPanels
            });
            var items = [leftPanel];
            if (rightPanels.length > 0) {
                items.push(Ext.create('Ext.panel.Panel', {
                    layout: 'accordion',
                    region: 'east',
                    border: 0,
                    flex: 0.4,
                    collapsed: false,
                    split: true,
                    subtitle: '系统右侧面板',
                    items: rightPanels
                }));
            }
            return Ext.create('Ext.panel.Panel', {
                layout: 'border',
                region: 'center',
                border: 0,
                items: items,
                listeners: {
                    activate: function (obj) {
                        FastExt.SystemLayout.clearAllMenuTheme();
                    }
                }
            });
        };
        IndexLayout.getSystemVersionPanel = function (header) {
            var data = [
                {
                    "name": "项目名称",
                    "value": FastExt.System.ConfigHandler.getSystemTitle()
                },
                {
                    "name": "项目版本",
                    "value": FastExt.System.ConfigHandler.getSystemVersion()
                },
                {
                    "name": "项目位置",
                    "value": FastExt.System.ConfigHandler.getSystemRoot()
                },
                {
                    "name": "本机IP地址",
                    "value": FastExt.System.ConfigHandler.getLocalhostIP()
                },
                {
                    "name": "系统环境",
                    "value": FastExt.System.ConfigHandler.getSystemOS()
                },
                {
                    "name": "系统启动时间",
                    "value": FastExt.System.ConfigHandler.getSystemStartTime()
                },
                {
                    "name": "系统刷新时间",
                    "value": Ext.Date.format(new Date(), "Y-m-d H:i:s")
                },
                {
                    "name": "数据库",
                    "value": FastExt.System.ConfigHandler.getSystemDB()
                },
                {
                    "name": "数据库连接池",
                    "value": FastExt.System.ConfigHandler.getSystemDBPool()
                },
                {
                    "name": "项目运行容器",
                    "value": FastExt.System.ConfigHandler.getSystemServer()
                },
                {
                    "name": "运行容器位置",
                    "value": FastExt.System.ConfigHandler.getSystemCatalina()
                },
                {
                    "name": "项目框架",
                    "value": "<a href='http://www.fastchar.com' target='_blank' >" + FastExt.System.ConfigHandler.getFastCharVersion() + "</a>"
                },
                {
                    "name": "开发语言",
                    "value": FastExt.System.ConfigHandler.getJavaVersion() + " + ExtJs" + Ext.getVersion().version + " + HTML5 + CSS3",
                },
                {
                    "name": "开发服务商",
                    "value": "<a href='" + FastExt.System.ConfigHandler.getDeveloperUrl() + "' target='_blank'>" + FastExt.System.ConfigHandler.getDeveloperTitle() + "</a>"
                },
                {
                    "name": "版权归属",
                    "value": "<a href='" + FastExt.System.ConfigHandler.getSystemCopyrightUrl() + "' target='_blank'>" + FastExt.System.ConfigHandler.getSystemCopyright() + "</a>"
                }
            ];
            return FastExt.Grid.createDetailsGrid(data, {
                title: header ? '系统基本信息' : null,
                iconCls: header ? 'extIcon extVersion' : null,
                power: false,
                hideHeaders: true
            }, {}, {
                align: 'center'
            });
        };
        IndexLayout.getSystemConfigPanel = function (header) {
            var setPanel = Ext.create('Ext.form.FormPanel', {
                url: FastExt.Server.saveSystemConfigUrl(),
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                power: false,
                border: 0,
                title: header ? '系统全局设置' : null,
                iconCls: header ? 'extIcon extSet' : null,
                autoScroll: true,
                defaults: {
                    labelWidth: 100,
                    margin: '5 5 5 5',
                    labelAlign: 'right',
                    emptyText: '请填写'
                },
                viewModel: {
                    data: null
                },
                layout: "column",
                items: [
                    {
                        xtype: 'fieldset',
                        title: '基本设置',
                        columnWidth: 1,
                        layout: "column",
                        defaults: {
                            anchor: '100%',
                            margin: '5 5 5 5',
                        },
                        items: [
                            {
                                name: 'theme_color',
                                xtype: 'colorfield',
                                fieldLabel: '系统主题颜色',
                                columnWidth: 1,
                                bind: '{theme_color}'
                            },
                            {
                                name: 'front_color',
                                xtype: 'colorfield',
                                fieldLabel: '系统前景颜色',
                                columnWidth: 1,
                                bind: '{front_color}'
                            },
                            {
                                name: 'system_layout',
                                fieldLabel: '系统布局方式',
                                columnWidth: 1,
                                xtype: 'combo',
                                displayField: 'text',
                                valueField: 'id',
                                editable: false,
                                readOnly: true,
                                bind: '{system_layout}',
                                store: FastExt.Store.getSystemLayoutDataStore()
                            },
                            {
                                name: 'theme',
                                fieldLabel: '系统主题风格',
                                columnWidth: 1,
                                xtype: 'combo',
                                displayField: 'text',
                                valueField: 'id',
                                editable: false,
                                bind: '{theme}',
                                store: FastExt.Store.getThemeDataStore()
                            },
                            {
                                name: 'window_anim',
                                fieldLabel: '系统窗体动画',
                                columnWidth: 1,
                                xtype: 'combo',
                                displayField: 'text',
                                valueField: 'id',
                                editable: false,
                                bind: '{window_anim}',
                                store: FastExt.Store.getYesOrNoDataStore2()
                            },
                            {
                                xtype: 'button',
                                text: '恢复默认',
                                iconCls: 'extIcon extReset whiteColor',
                                columnWidth: 0.5,
                                handler: function () {
                                    Ext.Msg.confirm("系统提醒", "您确定恢复系统默认的配置吗？", function (button, text) {
                                        if (button === "yes") {
                                            FastExt.Dialog.showWait("请稍后……");
                                            setPanel.getForm().reset();
                                            FastExt.Server.deleteSystemConfig(function (success, message) {
                                                FastExt.Dialog.hideWait();
                                                if (success) {
                                                    location.reload();
                                                }
                                                else {
                                                    FastExt.Dialog.showAlert("系统提醒", message);
                                                }
                                            });
                                        }
                                    });
                                }
                            },
                            {
                                xtype: 'button',
                                text: '保存配置',
                                columnWidth: 0.5,
                                iconCls: 'extIcon extSave whiteColor',
                                margin: '5 5 5 0 ',
                                handler: function () {
                                    setPanel.doSubmit();
                                }
                            }
                        ]
                    },
                    {
                        xtype: 'fieldset',
                        title: '系统配置',
                        columnWidth: 1,
                        layout: "column",
                        defaults: {
                            anchor: '100%',
                            margin: '5 5 5 5',
                        },
                        items: [
                            {
                                xtype: 'button',
                                text: '初始化系统配置',
                                columnWidth: 1,
                                iconCls: 'extIcon extRefresh whiteColor',
                                handler: function () {
                                    Ext.Msg.confirm("系统提醒", "将初始化系统记忆配置，确定继续吗？", function (button, text) {
                                        if (button == "yes") {
                                            FastExt.System.InitHandler.startSilenceSaveConfig();
                                        }
                                    });
                                }
                            },
                            {
                                xtype: 'button',
                                text: '下载系统配置',
                                columnWidth: 0.5,
                                iconCls: 'extIcon extDownload whiteColor',
                                handler: function () {
                                    FastExt.Dialog.showWait("正在获取系统配置文件中……");
                                    $.post(FastExt.Server.downSystemConfigUrl(), function (result) {
                                        FastExt.Dialog.hideWait();
                                        if (result.success) {
                                            FastExt.Dialog.toast("获取成功！");
                                            FastExt.Base.openUrl(result.data, FastEnum.Target._self);
                                        }
                                        else {
                                            FastExt.Dialog.showAlert("系统提醒", result.message);
                                        }
                                    });
                                }
                            },
                            {
                                xtype: 'button',
                                text: '上传系统配置',
                                columnWidth: 0.5,
                                margin: '5 5 5 0 ',
                                iconCls: 'extIcon extUpload whiteColor',
                                handler: function () {
                                    FastExt.IndexLayout.uploadSystemConfigData(this);
                                }
                            },
                            {
                                xtype: 'button',
                                text: '更新系统数据权限',
                                columnWidth: 1,
                                hidden: !FastExt.System.ConfigHandler.isEnableLayer(),
                                iconCls: 'extIcon extPower whiteColor',
                                handler: function () {
                                    Ext.Msg.confirm("系统提醒", "确定更新系统所有表格的数据权限值吗？如果数据库数据量达到千万级别时，更新时间会较长，请谨慎操作！", function (button, text) {
                                        if (button == "yes") {
                                            FastExt.LoginLayout.validOperate("更新所有表格的数据权限层级值", function () {
                                                FastExt.Dialog.showWait("正在更新中，请稍后……");
                                                FastExt.Server.updateAllLayer(function (success, message) {
                                                    FastExt.Dialog.hideWait();
                                                    FastExt.Dialog.showAlert("系统提醒", message);
                                                });
                                            }, 30);
                                        }
                                    });
                                }
                            },
                            {
                                xtype: 'button',
                                text: '更新系统数据同列值',
                                columnWidth: 1,
                                hidden: !FastExt.System.ConfigHandler.isEnableSame(),
                                iconCls: 'extIcon extCopy2 whiteColor',
                                handler: function () {
                                    Ext.Msg.confirm("系统提醒", "确定更新系统所有表格之间有关联的相同字段值吗？", function (button, text) {
                                        if (button == "yes") {
                                            FastExt.LoginLayout.validOperate("更新系统表格相同字段", function () {
                                                FastExt.Dialog.showWait("正在更新中，请稍后……");
                                                FastExt.Server.updateAllSame(function (success, message) {
                                                    FastExt.Dialog.hideWait();
                                                    FastExt.Dialog.showAlert("系统提醒", message);
                                                });
                                            }, 30);
                                        }
                                    });
                                }
                            }
                        ]
                    }
                ],
                doSubmit: function () {
                    var form = setPanel.form;
                    if (form.isValid()) {
                        form.submit({
                            waitMsg: '正在保存配置中……',
                            success: function (form, action) {
                                Ext.Msg.alert('系统设置', '设置保存成功！', function (btn) {
                                    if (btn === "ok") {
                                        location.reload();
                                    }
                                });
                            },
                            failure: function (form, action) {
                                if (action.result) {
                                    Ext.Msg.alert('保存失败', action.result.message);
                                }
                            }
                        });
                    }
                }
            });
            FastExt.Server.showSystemConfig(function (success, data) {
                if (success) {
                    data = Ext.Object.merge(data, FastExt.System.ConfigHandler.getSystemConfig());
                    setPanel.getViewModel().setData(data);
                }
            });
            return setPanel;
        };
        IndexLayout.getSystemMonitorPanel = function (header) {
            if (Ext.isEmpty(header)) {
                header = true;
            }
            var monitorPanel = Ext.create('Ext.panel.Panel', {
                layout: 'column',
                region: 'north',
                power: false,
                border: 0,
                bodyPadding: 5,
                title: header ? '系统监控信息' : null,
                iconCls: header ? 'extIcon extMonitor' : null,
                closable: false,
                autoScroll: true,
                listeners: {
                    afterrender: function () {
                        loadData(monitorPanel);
                    },
                }
            });
            var loadData = function (container) {
                if (!header) {
                    container.setLoading("获取系统信息中……");
                }
                FastExt.Server.loadMonitor(function (success, result) {
                    container.setLoading(false);
                    container.removeAll();
                    if (!result) {
                        return;
                    }
                    FastExt.IndexLayout._monitor = result;
                    var desc = FastExt.IndexLayout._monitor.desc;
                    var data = FastExt.IndexLayout._monitor.data;
                    var alertCount = 0;
                    var _loop_6 = function (i) {
                        var objDesc = desc[i];
                        var objData = data[i];
                        var items = [];
                        for (var objDescKey in objDesc) {
                            if (objDescKey === 'title') {
                                continue;
                            }
                            var config = {
                                xtype: 'textfield',
                                fieldLabel: objDesc[objDescKey],
                                monitorIndex: i,
                                bind: '{' + objDescKey + '}'
                            };
                            items.push(config);
                        }
                        var title = objDesc.title;
                        var lastField = items[items.length - 1];
                        lastField["triggers"] = {
                            chart: {
                                cls: 'extIcon extReport2',
                                hideOnReadOnly: false,
                                handler: function () {
                                    FastExt.IndexLayout.showMonitorChart(title, this.monitorIndex);
                                }
                            }
                        };
                        var cpuPanel = {
                            xtype: 'fieldset',
                            title: title,
                            columnWidth: 1,
                            collapsible: true,
                            id: "SystemMonitorFieldSet" + i,
                            viewModel: {
                                data: objData
                            },
                            defaults: {
                                anchor: '100%',
                                labelAlign: 'right',
                                labelWidth: 80,
                                columnWidth: 1,
                                editable: false,
                                disabledCls: ".x-item-disabled-normal"
                            },
                            items: items
                        };
                        container.add(cpuPanel);
                    };
                    for (var i = 0; i < desc.length; i++) {
                        _loop_6(i);
                    }
                    var button = {
                        xtype: 'button',
                        text: '刷新信息',
                        columnWidth: 1,
                        margin: '5 5 5 5',
                        handler: function (obj) {
                            obj.setText("正在刷新");
                            obj.setDisabled(true);
                            loadData(container);
                        }
                    };
                    container.add(button);
                });
            };
            return monitorPanel;
        };
        IndexLayout.getMonitorData = function (index) {
            if (this._monitor && this._monitor.data
                && this._monitor.data.length > index) {
                return this._monitor.data[index];
            }
            return null;
        };
        IndexLayout.showMonitorChart = function (title, index) {
            var monitorId = "SystemMonitorChart" + index;
            var targetMonitorWin = Ext.getCmp(monitorId);
            if (targetMonitorWin && Ext.isFunction(targetMonitorWin.updateChart)) {
                targetMonitorWin.updateChart();
                return;
            }
            var win = Ext.create('Ext.window.Window', {
                title: title,
                iconCls: "extIcon extReport2 whiteColor",
                height: 450,
                width: 450,
                id: monitorId,
                layout: 'border',
                resizable: true,
                maximizable: true,
                constrain: true,
                padding: "10 10 10 10",
                bodyStyle: {
                    background: "#ffffff"
                },
                refreshTimer: null,
                monitorIndex: index,
                monitorStopped: false,
                updateChart: function () {
                    if (this.monitorStopped) {
                        return false;
                    }
                    try {
                        var monitorData = FastExt.IndexLayout.getMonitorData(this.monitorIndex);
                        if (!monitorData) {
                            return false;
                        }
                        var buildOption = function (minValue, maxValue, currValue, unit) {
                            var percent = currValue / maxValue;
                            var color = "green";
                            if (percent > 0.3) {
                                color = "purple";
                            }
                            if (percent > 0.8) {
                                color = "red";
                            }
                            var percentStr = " " + (percent * 100).toFixed(2) + "%";
                            if (unit === "%") {
                                percentStr = "";
                            }
                            return {
                                series: [
                                    {
                                        type: 'gauge',
                                        splitNumber: 10,
                                        min: minValue,
                                        max: maxValue,
                                        radius: '100%',
                                        itemStyle: {
                                            shadowColor: 'rgba(0,138,255,0.45)',
                                            shadowBlur: 10,
                                            shadowOffsetX: 2,
                                            shadowOffsetY: 2,
                                            color: color,
                                        },
                                        progress: {
                                            show: true,
                                            roundCap: true,
                                            width: 18,
                                            itemStyle: {
                                                color: {
                                                    type: 'linear',
                                                    x: 0,
                                                    y: 1,
                                                    x2: 1,
                                                    y2: 0,
                                                    colorStops: [
                                                        {
                                                            offset: 0, color: 'green'
                                                        },
                                                        {
                                                            offset: 1, color: color
                                                        }
                                                    ],
                                                }
                                            }
                                        },
                                        pointer: {
                                            icon: 'path://M2090.36389,615.30999 L2090.36389,615.30999 C2091.48372,615.30999 2092.40383,616.194028 2092.44859,617.312956 L2096.90698,728.755929 C2097.05155,732.369577 2094.2393,735.416212 2090.62566,735.56078 C2090.53845,735.564269 2090.45117,735.566014 2090.36389,735.566014 L2090.36389,735.566014 C2086.74736,735.566014 2083.81557,732.63423 2083.81557,729.017692 C2083.81557,728.930412 2083.81732,728.84314 2083.82081,728.755929 L2088.2792,617.312956 C2088.32396,616.194028 2089.24407,615.30999 2090.36389,615.30999 Z',
                                            length: '75%',
                                            width: 16,
                                            offsetCenter: [0, '5%'],
                                        },
                                        axisLine: {
                                            roundCap: true,
                                            lineStyle: {
                                                width: 18
                                            }
                                        },
                                        axisTick: {
                                            splitNumber: 5,
                                            lineStyle: {
                                                width: 2,
                                                color: '#999'
                                            }
                                        },
                                        splitLine: {
                                            length: 12,
                                            lineStyle: {
                                                width: 3,
                                                color: '#999'
                                            }
                                        },
                                        axisLabel: {
                                            distance: 30,
                                            color: '#999',
                                            formatter: function (value) {
                                                if (unit === "%") {
                                                    return value + "%";
                                                }
                                                return FastExt.Base.toByteUnit(value, 0);
                                            },
                                        },
                                        title: {
                                            show: true,
                                        },
                                        detail: {
                                            valueAnimation: true,
                                            formatter: function (value) {
                                                if (unit === "%") {
                                                    return value + "%";
                                                }
                                                return "{value|" + FastExt.Base.toByteUnit(value) + "}\n{percent|" + percentStr + "}";
                                            },
                                            rich: {
                                                percent: {
                                                    fontSize: 16,
                                                    padding: [0, 0, 0, 0],
                                                }
                                            },
                                            color: 'auto'
                                        },
                                        data: [
                                            {
                                                value: currValue
                                            }
                                        ]
                                    }
                                ]
                            };
                        };
                        var chartOption = buildOption(monitorData.min, monitorData.max, monitorData.value, FastExt.Base.toString(monitorData.unit, "byte"));
                        FastExt.ECharts.loadECharts(this, chartOption);
                        var fieldContainer = Ext.getCmp("SystemMonitorFieldSet" + this.monitorIndex);
                        if (fieldContainer) {
                            fieldContainer.getViewModel().setData(monitorData);
                        }
                        return true;
                    }
                    catch (e) {
                        console.error(e);
                    }
                    return false;
                },
                startTimer: function (first) {
                    var me = this;
                    if (me.monitorStopped) {
                        return;
                    }
                    if (first) {
                        this.setLoading("获取监控数据中，请稍后……");
                    }
                    this.stopTimer();
                    this.refreshTimer = setTimeout(function () {
                        FastExt.Server.loadMonitor(function (success, result) {
                            FastExt.IndexLayout._monitor = result;
                            if (first) {
                                me.setLoading(false);
                            }
                            if (Ext.isFunction(me.updateChart) && me.updateChart()) {
                                me.startTimer(false);
                            }
                        });
                    }, first ? 0 : 1000);
                },
                stopTimer: function () {
                    if (this.refreshTimer) {
                        clearTimeout(this.refreshTimer);
                    }
                    this.refreshTimer = null;
                },
                listeners: {
                    show: function (obj) {
                        obj.startTimer(true);
                    },
                    beforedestroy: function (obj) {
                        obj.monitorStopped = true;
                        obj.stopTimer();
                    }
                }
            });
            win.show();
        };
        IndexLayout.getSystemOperatePanel = function (header) {
            var dataStoreTSystemOperatesModel = Ext.create('Ext.data.Store', {
                autoLoad: false,
                fields: [],
                id: 'SystemLogStore',
                idProperty: 'operateId',
                pageSize: 50,
                proxy: {
                    type: 'ajax',
                    url: FastExt.Server.entityListUrl(),
                    actionMethods: {
                        create: 'POST',
                        read: 'POST',
                        update: 'POST',
                        destroy: 'POST'
                    },
                    reader: {
                        type: 'json',
                        root: 'list',
                        totalProperty: 'totalRow'
                    }
                }
            });
            var pagingtoolbar = Ext.create('Ext.toolbar.Paging', {
                store: dataStoreTSystemOperatesModel,
                dock: 'bottom',
                border: 0,
                overflowHandler: 'scroller',
                displayInfo: true
            });
            var dataGridTSystemOperatesModel = Ext.create('Ext.grid.Panel', {
                region: 'center',
                border: 0,
                power: true,
                multiColumnSort: true,
                iconCls: header ? 'extIcon extLog' : null,
                columnLines: true,
                title: header ? '系统操作日志' : null,
                hideHeaders: true,
                dataList: true,
                store: dataStoreTSystemOperatesModel,
                columns: [
                    {
                        header: '操作类型',
                        dataIndex: 'systemLogType',
                        align: 'center',
                        width: 120
                    },
                    {
                        header: '操作介绍',
                        dataIndex: 'systemLogContent',
                        align: 'center',
                        flex: 1
                    },
                    {
                        header: '操作时间',
                        dataIndex: 'systemLogDateTime',
                        width: 160,
                        align: 'center',
                        rendererFunction: "renders.dateFormat('Y-m-d H:i:s')"
                    },
                    {
                        header: '操作',
                        dataIndex: 'systemLogId',
                        width: 100,
                        align: 'center',
                        renderer: function (val) {
                            return FastExt.Renders.toClickText("查看详情", "FastExt.IndexLayout.showSystemLogDetails(" + val + ")");
                        }
                    },
                    { xtype: 'rowplaceholder', minWidth: 30 }
                ],
                dockedItems: [pagingtoolbar],
                viewConfig: {
                    enableTextSelection: true,
                    loadMask: {
                        msg: '正在为您在加载数据…'
                    }
                }
            });
            pagingtoolbar.insert(pagingtoolbar.items.getCount() - 2, {
                xtype: 'button',
                iconCls: 'extIcon extSearch',
                tooltip: '搜索日志',
                handler: function () {
                    dataGridTSystemOperatesModel.add(FastExt.IndexLayout.showSearchSysOperate(dataGridTSystemOperatesModel, this));
                }
            });
            pagingtoolbar.insert(pagingtoolbar.items.getCount() - 3, "-");
            dataStoreTSystemOperatesModel.on('beforeload', function (store, options) {
                var jsonData = {};
                if (dataGridTSystemOperatesModel.whereSearchParams != null) {
                    jsonData = dataGridTSystemOperatesModel.whereSearchParams;
                }
                Ext.apply(store.proxy.extraParams, jsonData);
                Ext.apply(store.proxy.extraParams, {
                    "entityCode": "ExtSystemLogEntity",
                    "limit": dataStoreTSystemOperatesModel.pageSize
                });
            });
            dataStoreTSystemOperatesModel.loadPage(1);
            return dataGridTSystemOperatesModel;
        };
        IndexLayout.showSystemLogDetails = function (id) {
            var store = Ext.getStore("SystemLogStore");
            var record = store.findRecord("systemLogId", id, 0, false, false, true);
            var buildData = function (data) {
                var array = [];
                var names = {
                    "a__managerName": "管理员",
                    "systemLogType": "操作类型",
                    "systemLogContent": "操作详情",
                    "systemLogIp": "来自IP",
                    "systemLogClient": "浏览器信息",
                    "systemSendData": "提交的数据",
                    "systemResultData": "返回的数据",
                    "systemLogDateTime": "操作时间"
                };
                for (var key in names) {
                    array.push({
                        "name": names[key],
                        "key": key,
                        "value": data[key]
                    });
                }
                return array;
            };
            var grid = FastExt.Grid.createDetailsGrid(buildData(record.getData()), {
                region: 'center',
                power: false,
                hideHeaders: true
            }, {
                width: 168,
                flex: 0,
            }, {
                align: 'left',
                renderer: function (val, m, record) {
                    m.style = 'overflow:auto;text-overflow: ellipsis;white-space:normal !important;word-break:break-word; ';
                    var attr = record.get("key");
                    if (attr === "systemLogIp") {
                        return "<a href='https://www.ipuu.net/query/ip?search=" + val + "' target='_blank'>" + val + "</a>";
                    }
                    return val;
                },
                listeners: {
                    dblclick: function (grid, obj, celNo, obj1, obj2, rowNo, e) {
                        var currRecord = grid.getStore().getAt(celNo);
                        var attr = currRecord.get("key");
                        if (attr === "systemSendData" || attr === "systemResultData") {
                            FastExt.Dialog.showFormatJson(obj, currRecord.get('value'));
                        }
                    }
                }
            });
            var winWidth = parseInt((document.body.clientWidth * 0.5).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                title: "日志详情",
                height: winHeight,
                iconCls: 'extIcon extDetails',
                width: winWidth,
                layout: 'border',
                resizable: true,
                maximizable: true,
                items: [grid],
                modal: true,
                constrain: true,
            });
            win.show();
        };
        IndexLayout.showSearchSysOperate = function (grid, obj) {
            if (!grid.searchWin) {
                var defaultValue = grid.whereSearchParams ? grid.whereSearchParams : {};
                var searchForm_1 = Ext.create('Ext.form.FormPanel', {
                    bodyPadding: 5,
                    region: 'center',
                    autoScroll: true,
                    layout: "column",
                    defaults: {
                        labelWidth: 100,
                        margin: '5 5 5 5',
                        labelAlign: 'right',
                        emptyText: '可输入…'
                    },
                    items: [
                        {
                            fieldLabel: '关键字',
                            columnWidth: 1,
                            name: "where['^search']",
                            xtype: 'textfield',
                            value: defaultValue["where['^search']"],
                        }, {
                            fieldLabel: '开始时间',
                            columnWidth: 0.5,
                            name: "where['systemLogDateTime>=']",
                            xtype: 'datefield',
                            format: 'Y-m-d',
                            value: defaultValue["where['systemLogDateTime>=']"],
                        }, {
                            fieldLabel: '结束时间',
                            columnWidth: 0.5,
                            name: "where['systemLogDateTime<=']",
                            xtype: 'datefield',
                            format: 'Y-m-d',
                            value: defaultValue["where['systemLogDateTime<=']"],
                        },
                        {
                            fieldLabel: '操作用户',
                            columnWidth: 0.5,
                            name: "where['a__managerName%?%']",
                            xtype: 'textfield',
                            value: defaultValue["where['a__managerName%?%']"],
                        },
                        {
                            fieldLabel: '操作类型',
                            columnWidth: 0.5,
                            name: "where['systemLogType%?%']",
                            xtype: 'textfield',
                            value: defaultValue["where['systemLogType%?%']"],
                        }
                    ]
                });
                var title = obj.text;
                if (Ext.isEmpty(title)) {
                    title = "搜索系统日志";
                }
                grid.searchWin = Ext.create('Ext.window.Window', {
                    title: title,
                    width: 500,
                    minWidth: 500,
                    minHeight: 110,
                    height: 250,
                    layout: 'border',
                    constrain: true,
                    iconCls: 'extIcon extSearch',
                    resizable: true,
                    collapsible: true,
                    animateTarget: obj,
                    items: [searchForm_1],
                    listeners: {
                        close: function (panel, eOpts) {
                            grid.searchWin = null;
                        }
                    },
                    buttons: [{
                            text: '重置',
                            iconCls: 'extIcon extReset',
                            handler: function () {
                                searchForm_1.reset();
                                grid.whereSearchParams = searchForm_1.getValues();
                                grid.getStore().loadPage(1);
                            }
                        },
                        {
                            text: '搜索',
                            iconCls: 'extIcon extSearch',
                            handler: function () {
                                grid.whereSearchParams = searchForm_1.getValues();
                                grid.getStore().loadPage(1);
                            }
                        }]
                });
            }
            else {
                FastExt.Component.shakeComment(grid.searchWin);
            }
            grid.searchWin.show();
            return grid.searchWin;
        };
        IndexLayout.uploadSystemConfigData = function (obj) {
            var formPanel = Ext.create('Ext.form.FormPanel', {
                url: 'loadSystemConfig',
                method: 'POST',
                margin: '5',
                fileUpload: true,
                width: 400,
                callBacked: false,
                border: 0,
                layout: 'column',
                items: [
                    {
                        xtype: 'filefield',
                        fieldLabel: '系统配置文件',
                        labelWidth: 120,
                        labelAlign: 'right',
                        buttonText: '选择文件',
                        allowBlank: false,
                        name: 'systemConfigFile',
                        columnWidth: 1
                    }
                ],
                doSubmit: function () {
                    var form = formPanel.form;
                    if (form.isValid()) {
                        var myMask_4 = new Ext.LoadMask({
                            msg: '正在上传文件中…',
                            target: uploadWin
                        });
                        myMask_4.show();
                        form.submit({
                            success: function (form, action) {
                                FastExt.Dialog.toast(action.result.message);
                                uploadWin.close();
                            },
                            failure: function (form, action) {
                                myMask_4.destroy();
                                if (action.result) {
                                    Ext.Msg.alert('系统提醒', "上传失败！" + action.result.message);
                                }
                            }
                        });
                    }
                },
                listeners: {
                    'render': function (obj) {
                        try {
                            new Ext.util.KeyMap({
                                target: obj.getEl(),
                                key: 13,
                                fn: formPanel.doSubmit,
                                scope: Ext.getBody()
                            });
                        }
                        catch (e) {
                            console.error(e);
                        }
                    }
                }
            });
            var btnSubmitId = "btnSubmit" + new Date().getTime();
            var uploadWin = Ext.create('Ext.window.Window', {
                title: "上传系统配置文件",
                layout: 'fit',
                resizable: false,
                scrollable: false,
                width: 500,
                items: formPanel,
                modal: true,
                iconCls: 'extIcon extUpload',
                animateTarget: obj,
                constrain: true,
                buttons: [
                    {
                        text: '重置',
                        width: 88,
                        iconCls: 'extIcon extReset',
                        handler: function () {
                            formPanel.form.reset();
                        }
                    },
                    {
                        text: '上传',
                        width: 88,
                        id: btnSubmitId,
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            formPanel.doSubmit();
                        }
                    }
                ],
                listeners: {
                    show: function (winObj, eOpts) {
                        formPanel.getForm().findField('systemConfigFile').fileInputEl.dom.click();
                        Ext.getCmp(btnSubmitId).focus();
                    },
                }
            });
            uploadWin.show();
        };
        IndexLayout._monitor = {
            data: [],
            desc: [],
        };
        return IndexLayout;
    }());
    FastExt.IndexLayout = IndexLayout;
    var ProgressBaseLineLayout = (function () {
        function ProgressBaseLineLayout() {
        }
        ProgressBaseLineLayout.getProgressLine = function (toColor) {
            try {
                if (Ext.isEmpty(toColor)) {
                    toColor = "#f8c633";
                }
                if ($("#progress").length <= 0) {
                    return {
                        set: function () {
                        },
                        animate: function () {
                        },
                    };
                }
                if (!this._progressLine) {
                    this._progressLine = new ProgressBar.Line('#progress', {
                        color: toColor,
                        duration: 1000,
                        easing: 'easeInOut',
                        from: {
                            color: '#9c58b6'
                        },
                        to: {
                            color: toColor
                        },
                        step: function (state, line, attachment) {
                            line.path.setAttribute('stroke', state.color);
                        }
                    });
                }
                return this._progressLine;
            }
            catch (e) { }
            return {
                set: function () {
                },
                animate: function () {
                },
            };
        };
        return ProgressBaseLineLayout;
    }());
    FastExt.ProgressBaseLineLayout = ProgressBaseLineLayout;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Databoard = (function () {
        function Databoard() {
        }
        Databoard.getPanel = function () {
            var title = FastExt.Base.toString(FastExt.System.ConfigHandler.getDataboard().title, "数据看板");
            return Ext.create('Ext.panel.Panel', {
                layout: 'border',
                region: 'center',
                border: 0,
                title: title,
                iconCls: "extIcon extTable",
                items: [],
                scrollable: "y",
                bodyStyle: {
                    background: "#ffffff",
                },
                loadData: function () {
                    var _this = this;
                    this.setLoading("加载数据中……");
                    FastExt.Server.getDataboardData(function (success, message, data) {
                        _this.setLoading(false);
                        if (success) {
                            _this.databoardContainer = new DataboardContainer(data);
                            _this.update(_this.databoardContainer.buildHtml());
                            _this.databoardContainer.onResize(_this.getWidth(), _this.getHeight());
                            _this.databoardContainer.onLoaded();
                        }
                    });
                },
                updateSize: function (width, height) {
                    if (this.databoardContainer) {
                        this.databoardContainer.onResize(width, height);
                    }
                },
                listeners: {
                    afterrender: function (panel, eOpts) {
                        panel.loadData();
                    },
                    resize: function (panel, width, height, oldWidth, oldHeight) {
                        panel.updateSize(width, height);
                    },
                },
            });
        };
        Databoard.showEChars = function (type, dataTitle) {
            var params = {
                "entityCode": "ExtSystemDataEntity",
                "columnDate": "dataDateTime",
                "storeId": "ExtSystemDataEntity",
                "dataType": type,
                "echarts[0].property": "dataValue",
                "echarts[0].function": "sum",
                "echarts[0].details": dataTitle,
            };
            FastExt.ECharts.showEntityECharts(this, "数据趋势图", params, [
                {
                    'text': '年图表',
                    "value": 4
                },
                {
                    'text': '月图表',
                    "value": 1
                },
                {
                    'text': '日图表',
                    'value': 0
                }
            ]);
        };
        return Databoard;
    }());
    FastExt.Databoard = Databoard;
    var DataboardContainer = (function () {
        function DataboardContainer(data) {
            this._databoardGroups = [];
            this._databoardData = data;
        }
        DataboardContainer.prototype.buildHtml = function () {
            var html = [];
            var databoardConfigJson = FastExt.System.ConfigHandler.getDataboard();
            var groupData = databoardConfigJson.data;
            for (var _i = 0, groupData_1 = groupData; _i < groupData_1.length; _i++) {
                var groupDatum = groupData_1[_i];
                if (groupDatum.type === "split_title") {
                    this._databoardGroups.push(new DataboardSplitTitleItem(groupDatum));
                    continue;
                }
                if (groupDatum.items) {
                    var items = groupDatum.items;
                    for (var _a = 0, items_3 = items; _a < items_3.length; _a++) {
                        var item = items_3[_a];
                        item.render_type = groupDatum.type;
                        item.render_group_title = groupDatum.title;
                        var databoardData = this.getDataboardData(item.id);
                        if (databoardData) {
                            item.value = databoardData.value;
                            item.render_trent = databoardData.trend;
                        }
                        if (Ext.isEmpty(item.render_color)) {
                            item.render_color = "transparent";
                        }
                        if (Ext.isEmpty(item.render_title_color)) {
                            item.render_title_color = "unset";
                        }
                        if (Ext.isEmpty(item.render_icon_color)) {
                            item.render_icon_color = "unset";
                        }
                    }
                    if (items.length > 0) {
                        this._databoardGroups.push(new DataboardGroup(items));
                    }
                }
                if (groupDatum.groupId) {
                    var dataItems = [];
                    for (var _b = 0, _c = this._databoardData; _b < _c.length; _b++) {
                        var databoardDatum = _c[_b];
                        if (groupDatum.groupId === databoardDatum.groupId) {
                            databoardDatum.render_type = groupDatum.type;
                            databoardDatum.render_group_title = groupDatum.title;
                            databoardDatum.render_title = databoardDatum.title;
                            dataItems.push(databoardDatum);
                        }
                    }
                    if (dataItems.length > 0) {
                        this._databoardGroups.push(new DataboardGroup(dataItems));
                    }
                }
            }
            for (var _d = 0, _e = this._databoardGroups; _d < _e.length; _d++) {
                var databoardGroup = _e[_d];
                html.push(databoardGroup.buildHtml());
            }
            return '<div class="fast-databoard-container">' + html.join("") + '</div>';
        };
        DataboardContainer.prototype.getDataboardData = function (id) {
            for (var _i = 0, _a = this._databoardData; _i < _a.length; _i++) {
                var databoardDatum = _a[_i];
                if (id === databoardDatum.id) {
                    return databoardDatum;
                }
            }
            return undefined;
        };
        DataboardContainer.prototype.onLoaded = function () {
            for (var _i = 0, _a = this._databoardGroups; _i < _a.length; _i++) {
                var databoardGroup = _a[_i];
                databoardGroup.onLoaded();
            }
        };
        DataboardContainer.prototype.onResize = function (width, height) {
            for (var _i = 0, _a = this._databoardGroups; _i < _a.length; _i++) {
                var databoardGroup = _a[_i];
                databoardGroup.onResize(width, height);
            }
        };
        return DataboardContainer;
    }());
    var DataboardGroup = (function () {
        function DataboardGroup(data) {
            this._databoardItems = [];
            this._data = data;
        }
        DataboardGroup.prototype.buildHtml = function () {
            var html = [];
            var fistItem = this._data[0];
            var renderType = fistItem.render_type;
            var mustFill = false;
            if (renderType === "data_text_v") {
                for (var _i = 0, _a = this._data; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this._databoardItems.push(new DataboardVTextItem(item));
                }
            }
            else if (renderType === "data_text_h") {
                for (var _b = 0, _c = this._data; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this._databoardItems.push(new DataboardHTextItem(item));
                }
            }
            else if (renderType === "data_chart_pie") {
                this._databoardItems.push(new DataboardChatPieItem(this._data));
                mustFill = true;
            }
            for (var _d = 0, _e = this._databoardItems; _d < _e.length; _d++) {
                var databoardItem = _e[_d];
                html.push(databoardItem.buildHtml());
            }
            var databoardConfigJson = FastExt.System.ConfigHandler.getDataboard();
            if (FastExt.Base.toBool(databoardConfigJson.fill, true) || mustFill) {
                return '<div class="fast-databoard-group">' + html.join(new DataboardItemSplitV().buildHtml()) + '</div>';
            }
            return '<div class="fast-databoard-group fast-databoard-group-h">' + html.join(new DataboardItemSplitV().buildHtml()) + '</div>';
        };
        DataboardGroup.prototype.onLoaded = function () {
            for (var _i = 0, _a = this._databoardItems; _i < _a.length; _i++) {
                var databoardItem = _a[_i];
                databoardItem.onLoaded();
            }
        };
        DataboardGroup.prototype.onResize = function (width, height) {
            for (var _i = 0, _a = this._databoardItems; _i < _a.length; _i++) {
                var databoardItem = _a[_i];
                databoardItem.onResize(width, height);
            }
        };
        return DataboardGroup;
    }());
    var DataboardItemBase = (function () {
        function DataboardItemBase() {
        }
        DataboardItemBase.prototype.buildHtml = function () {
            return "";
        };
        DataboardItemBase.prototype.onLoaded = function () {
        };
        DataboardItemBase.prototype.onResize = function (width, height) {
        };
        return DataboardItemBase;
    }());
    var DataboardItemSplitV = (function (_super) {
        __extends(DataboardItemSplitV, _super);
        function DataboardItemSplitV() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DataboardItemSplitV.prototype.buildHtml = function () {
            return '<div class="fast-databoard-split-v"></div>';
        };
        return DataboardItemSplitV;
    }(DataboardItemBase));
    var DataboardVTextItem = (function (_super) {
        __extends(DataboardVTextItem, _super);
        function DataboardVTextItem(data) {
            var _this = _super.call(this) || this;
            _this._data = data;
            return _this;
        }
        DataboardVTextItem.prototype.buildHtml = function () {
            var moreItemClass = "";
            var clickFunction = 'FastExt.Databoard.showEChars(\'' + this._data.id + '\',\'' + this._data.chart_title + '\')';
            if (this._data.render_click) {
                clickFunction = this._data.render_click;
                if (this._data.render_click === 'false') {
                    clickFunction = "";
                    moreItemClass = "fast-databoard-cursor-none";
                }
            }
            var icon = FastExt.Server.getIcon(this._data.render_icon, this._data.render_icon_color);
            var databoardItemStyle = "class='fast-databoard-item " + moreItemClass + "' style='background-color: " + this._data.render_color + ";'";
            var itemHtml = '    <img class="fast-databoard-item-icon" src="' + icon + '" alt="图标"/>' +
                '    <div class="fast-databoard-item-value"><span style="color:' + this._data.render_value_color + ';">' + this._data.value + '</span>' +
                new DataboardItemState(this._data).buildHtml() + '</div>' +
                '    <span class="fast-databoard-item-title" style="color: ' + this._data.render_title_color + ';">' + this._data.render_title + '</span>';
            return FastExt.Documents.wrapOnClick(itemHtml, clickFunction, databoardItemStyle);
        };
        return DataboardVTextItem;
    }(DataboardItemBase));
    var DataboardHTextItem = (function (_super) {
        __extends(DataboardHTextItem, _super);
        function DataboardHTextItem(data) {
            var _this = _super.call(this) || this;
            _this._data = data;
            return _this;
        }
        DataboardHTextItem.prototype.buildHtml = function () {
            var moreItemClass = "";
            var clickFunction = 'FastExt.Databoard.showEChars(\'' + this._data.id + '\',\'' + this._data.chart_title + '\')';
            if (this._data.render_click) {
                clickFunction = this._data.render_click;
                if (this._data.render_click === 'false') {
                    clickFunction = "";
                    moreItemClass = "fast-databoard-cursor-none";
                }
            }
            var icon = FastExt.Server.getIcon(this._data.render_icon, this._data.render_icon_color);
            var databoardItemStyle = "class='fast-databoard-item fast-databoard-item-h " + moreItemClass + "' style='background-color: " + this._data.render_color + ";'";
            var itemHtml = '    <img class="fast-databoard-item-icon fast-databoard-item-icon-h" src="' + icon + '" alt="图标"/>' +
                ' <div class="fast-databoard-item-info-v">' +
                '   <span class="fast-databoard-item-title fast-databoard-item-title-h" style="color: ' + this._data.render_title_color + ';">' + this._data.render_title + '</span> ' +
                '   <div class="fast-databoard-item-value fast-databoard-item-value-h"><span style="color:' + this._data.render_value_color + ';">' + this._data.value + '</span>' + new DataboardItemState(this._data).buildHtml() + '</div>' +
                ' </div>';
            return FastExt.Documents.wrapOnClick(itemHtml, clickFunction, databoardItemStyle);
        };
        return DataboardHTextItem;
    }(DataboardItemBase));
    var DataboardItemState = (function (_super) {
        __extends(DataboardItemState, _super);
        function DataboardItemState(data) {
            var _this = _super.call(this) || this;
            _this._data = data;
            return _this;
        }
        DataboardItemState.prototype.buildHtml = function () {
            var iconCls = "";
            if (this._data.render_trent === 0) {
                iconCls = "extRise greenColor";
            }
            else if (this._data.render_trent === 1) {
                iconCls = "extDecline redColor";
            }
            else if (this._data.render_trent === 2) {
                iconCls = "extFlat blueColor";
            }
            return '<span class="fast-databoard-item-value-state extIcon ' + iconCls + '"></span>';
        };
        return DataboardItemState;
    }(DataboardItemBase));
    var DataboardChatPieItem = (function (_super) {
        __extends(DataboardChatPieItem, _super);
        function DataboardChatPieItem(data) {
            var _this = _super.call(this) || this;
            _this._data = data;
            _this._htmlId = FastExt.Base.buildOnlyCode("Chart-");
            return _this;
        }
        DataboardChatPieItem.prototype.onLoaded = function () {
            var _this = this;
            FastExt.ECharts.loadJs(function () {
                _this.initECharts();
            });
        };
        DataboardChatPieItem.prototype.onResize = function (width, height) {
            var chartDom = document.getElementById(this._htmlId);
            $(chartDom).css("width", width + "px");
            if (this._echart) {
                this._echart.resize();
            }
        };
        DataboardChatPieItem.prototype.buildHtml = function () {
            return '<div id="' + this._htmlId + '" class="fast-databoard-item-pie"></div>';
        };
        DataboardChatPieItem.prototype.initECharts = function () {
            var chartDom = document.getElementById(this._htmlId);
            this._echart = echarts.init(chartDom, null, {
                renderer: 'canvas',
                useDirtyRect: false
            });
            var data = [];
            var title = "";
            for (var _i = 0, _a = this._data; _i < _a.length; _i++) {
                var datum = _a[_i];
                title = datum.render_group_title;
                data.push({ value: datum.value, name: datum.render_title });
            }
            console.log("data", data);
            var option = {
                title: {
                    text: title,
                    left: 'center',
                },
                tooltip: {
                    trigger: 'item'
                },
                legend: {
                    type: 'scroll',
                    orient: "horizontal",
                    left: 'center',
                    bottom: 0,
                },
                series: [
                    {
                        type: 'pie',
                        radius: '70%',
                        data: data,
                        labelLine: {
                            show: false
                        },
                        label: {
                            show: false,
                            position: 'center'
                        },
                        itemStyle: {
                            shadowBlur: 3,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)',
                            borderRadius: 8
                        },
                        emphasis: {
                            scaleSize: 20,
                            itemStyle: {
                                shadowBlur: 18,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }
                ]
            };
            option && this._echart.setOption(option);
        };
        return DataboardChatPieItem;
    }(DataboardItemBase));
    var DataboardSplitTitleItem = (function (_super) {
        __extends(DataboardSplitTitleItem, _super);
        function DataboardSplitTitleItem(data) {
            var _this = _super.call(this) || this;
            _this._data = data;
            return _this;
        }
        DataboardSplitTitleItem.prototype.buildHtml = function () {
            var icon = FastExt.Server.getIcon(this._data.render_icon, this._data.render_icon_color);
            return "" +
                "<div class='fast-databoard-split-title-container'>" +
                "<img class='fast-databoard-split-title-icon' src='" + icon + "' alt='icon'/>" +
                "<span class='fast-databoard-split-title'>" + this._data.render_title + "</span>" +
                "</div>";
        };
        return DataboardSplitTitleItem;
    }(DataboardItemBase));
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var DesktopLayout = (function () {
        function DesktopLayout() {
        }
        DesktopLayout.showSystemLayout = function () {
            var container = FastExt.SystemLayout.getBodyContainer();
            container.removeAll();
            var systemBgColor = FastExt.System.ConfigHandler.getThemeColor();
            var defaultBtnStyle = {
                background: "#ffffff",
            };
            FastExt.DesktopLayout.desktopPanel = Ext.create('Ext.panel.Panel', {
                layout: {
                    type: 'hbox',
                    align: 'stretch'
                },
                bodyStyle: {
                    background: "transparent",
                    borderWidth: 0,
                },
                border: 0,
                region: 'center',
                anchor: '100% 100%',
                bbar: {
                    xtype: 'toolbar',
                    overflowHandler: 'menu',
                    itemId: 'DesktopToolBar',
                    items: [
                        {
                            xtype: "button",
                            overflowText: "系统菜单",
                            iconCls: 'extIcon extMore whiteColor',
                            cls: 'fast-desktop-toolbar-btn',
                            help: FastExt.System.MenuHandler.getPlainIconMenuHtmlBySVG({ iconCls: "extMore", text: "系统菜单" }),
                            style: {
                                background: systemBgColor,
                            },
                            focusCls: 'fast-desktop-toolbar-btn-focus',
                            helpType: FastEnum.HelpEnumType.mouse_in_out,
                            helpAnchor: FastEnum.TooltipAnchorType.bottom,
                            reorderable: false,
                            handler: function () {
                                FastExt.DesktopLayout.toggleStartMenu(this);
                            },
                        },
                        {
                            xtype: 'tbseparator',
                            reorderable: false,
                        },
                        {
                            xtype: 'tbspacer',
                            reorderable: false,
                            desktopFixedMenuAnchor: true,
                        },
                        { xtype: 'tbfill', reorderable: false, desktopMenuAnchor: true, },
                        {
                            xtype: "button",
                            iconCls: 'extIcon extLog blackColor',
                            cls: 'fast-desktop-toolbar-btn',
                            overflowText: "系统操作日志",
                            help: FastExt.System.MenuHandler.getPlainIconMenuHtmlBySVG({ iconCls: "extLog", text: "系统操作日志" }),
                            style: defaultBtnStyle,
                            helpType: FastEnum.HelpEnumType.mouse_in_out,
                            helpAnchor: FastEnum.TooltipAnchorType.bottom,
                            reorderable: false,
                            handler: function () {
                                FastExt.DesktopLayout.showWindowPanel(this, "系统操作日志", FastExt.IndexLayout.getSystemOperatePanel(false));
                            },
                        },
                        { xtype: 'tbseparator', reorderable: false, },
                        {
                            xtype: "button",
                            iconCls: 'extIcon extVersion blackColor',
                            cls: 'fast-desktop-toolbar-btn',
                            overflowText: "系统基本信息",
                            reorderable: false,
                            help: FastExt.System.MenuHandler.getPlainIconMenuHtmlBySVG({
                                iconCls: "extVersion",
                                text: "系统基本信息"
                            }),
                            style: defaultBtnStyle,
                            helpType: FastEnum.HelpEnumType.mouse_in_out,
                            helpAnchor: FastEnum.TooltipAnchorType.bottom,
                            handler: function () {
                                FastExt.DesktopLayout.showWindowPanel(this, "系统基本信息", FastExt.IndexLayout.getSystemVersionPanel(false));
                            },
                        },
                        {
                            xtype: "button",
                            iconCls: 'extIcon extMonitor blackColor',
                            cls: 'fast-desktop-toolbar-btn',
                            reorderable: false,
                            overflowText: "系统监控信息",
                            help: FastExt.System.MenuHandler.getPlainIconMenuHtmlBySVG({
                                iconCls: "extMonitor",
                                text: "系统监控信息"
                            }),
                            style: defaultBtnStyle,
                            helpType: FastEnum.HelpEnumType.mouse_in_out,
                            helpAnchor: FastEnum.TooltipAnchorType.bottom,
                            handler: function () {
                                FastExt.DesktopLayout.showWindowPanel(this, "系统监控信息", FastExt.IndexLayout.getSystemMonitorPanel(false));
                            },
                        },
                        {
                            xtype: "button",
                            iconCls: 'extIcon extSet blackColor',
                            cls: 'fast-desktop-toolbar-btn',
                            reorderable: false,
                            overflowText: "系统全局设置",
                            help: FastExt.System.MenuHandler.getPlainIconMenuHtmlBySVG({ iconCls: "extSet", text: "系统全局设置" }),
                            style: defaultBtnStyle,
                            helpType: FastEnum.HelpEnumType.mouse_in_out,
                            helpAnchor: FastEnum.TooltipAnchorType.bottom,
                            handler: function () {
                                FastExt.DesktopLayout.showWindowPanel(this, "系统全局设置", FastExt.IndexLayout.getSystemConfigPanel(false));
                            },
                        }
                    ],
                    userCls: "fast-desktop-tool-bar",
                    plugins: [{
                            ptype: 'boxreorderer',
                            listeners: {
                                StartDrag: FastExt.DesktopEvent.onFastToolbarStartDrag,
                                Drop: FastExt.DesktopEvent.onFastToolbarDrop,
                            }
                        }],
                    listeners: {
                        afterlayout: function () {
                            this.getEl().on("dblclick", function () {
                                FastExt.DesktopLayout.hideAllDesktopWin();
                            });
                            this.getEl().on("contextmenu", function (e) {
                                e.stopEvent();
                            });
                        },
                        render: function () {
                            FastExt.Dialog.hideWait();
                        },
                    }
                },
                addDesktopItem: function (menu, toContainer) {
                    if (toContainer) {
                        toContainer.addDesktopItem(menu);
                    }
                    else if (FastExt.DesktopLayout.checkMenuFolder(menu)) {
                        var container_1 = this.child("[alignRight=false]");
                        container_1.addDesktopItem(menu);
                    }
                    else {
                        var container_2 = this.child("[alignRight=true]");
                        container_2.addDesktopItem(menu);
                    }
                },
                removeDesktopItem: function (menu) {
                    var containers = this.query("[desktopItemContainer=true]");
                    for (var i = 0; i < containers.length; i++) {
                        if (FastExt.Base.toBool(containers[i].folderLocked, false)) {
                            return;
                        }
                        containers[i].removeDesktopItem(menu);
                    }
                },
                checkMuuriGridReady: function () {
                    var containers = this.query("[desktopItemContainer=true]");
                    if (containers.length > 0) {
                        for (var i = 0; i < containers.length; i++) {
                            if (!FastExt.Base.toBool(containers[i].muuriReady, false)) {
                                return false;
                            }
                        }
                        return true;
                    }
                    return false;
                },
                rebindMuuriGrid: function () {
                    var containers = this.query("[desktopItemContainer=true]");
                    if (containers.length > 0) {
                        for (var i = 0; i < containers.length; i++) {
                            containers[i].bindMuuriGrid();
                        }
                    }
                },
                resetDesktop: function (configMenus) {
                    try {
                        this.removeAll();
                        FastExt.DesktopLayout.removeAllDesktopToolbarFixedButton();
                        this.configMenus = configMenus;
                        var allDesktopMenuInfo = FastExt.DesktopLayout.getAllDesktopMenuInfo(configMenus);
                        var rightItems = [], leftItems = [], fixedMenus = [];
                        for (var desktopMenusKey in allDesktopMenuInfo) {
                            var menu = allDesktopMenuInfo[desktopMenusKey];
                            var needDesktop = !FastExt.DesktopLayout.checkMenuInFolder(menu);
                            if (needDesktop) {
                                if (menu.desktop) {
                                    if (Ext.isEmpty(menu.desktop_align)) {
                                        if (FastExt.DesktopLayout.checkMenuFolder(menu)) {
                                            leftItems.push(menu);
                                        }
                                        else {
                                            rightItems.push(menu);
                                        }
                                    }
                                    else {
                                        if (menu.desktop_align === "right") {
                                            rightItems.push(menu);
                                        }
                                        else {
                                            leftItems.push(menu);
                                        }
                                    }
                                }
                            }
                            if (menu.desktop_fixed) {
                                fixedMenus.push(menu);
                            }
                        }
                        rightItems.sort(function (a, b) {
                            return a.desktop_index - b.desktop_index;
                        });
                        leftItems.sort(function (a, b) {
                            return a.desktop_index - b.desktop_index;
                        });
                        fixedMenus.sort(function (a, b) {
                            return a.desktop_fixed_index - b.desktop_fixed_index;
                        });
                        this.add(FastExt.DesktopLayout.buildDesktopItemPanel(leftItems, false, true, false), FastExt.DesktopLayout.buildDesktopItemPanel(rightItems, true, true, false));
                        FastExt.DesktopLayout.addDesktopToolbarFixedButton(fixedMenus, true);
                    }
                    finally {
                        this.rebindMuuriGrid();
                        FastExt.Dialog.hideWait();
                        var tabFromHrefMenuId = FastExt.Windows.getMenuIdFromLocation();
                        var hasFromHrefMenu = FastExt.DesktopLayout.getMenu(tabFromHrefMenuId);
                        if (hasFromHrefMenu) {
                            FastExt.DesktopLayout.showWindowMenu(null, hasFromHrefMenu, true);
                        }
                        FastExt.DesktopLayout.desktopInitFinish = true;
                    }
                },
                reorderDesktop: function () {
                    try {
                        this.removeAll();
                        var allDesktopMenuInfo = FastExt.DesktopLayout.getAllDesktopMenuInfo(this.configMenus);
                        var rightItems = [], leftItems = [];
                        for (var desktopMenusKey in allDesktopMenuInfo) {
                            var menu = allDesktopMenuInfo[desktopMenusKey];
                            var needDesktop = !FastExt.DesktopLayout.checkMenuInFolder(menu);
                            if (needDesktop) {
                                if (menu.desktop) {
                                    if (FastExt.DesktopLayout.checkMenuFolder(menu)) {
                                        leftItems.push(menu);
                                    }
                                    else {
                                        rightItems.push(menu);
                                    }
                                }
                            }
                        }
                        rightItems.sort(function (a, b) {
                            return a.desktop_index - b.desktop_index;
                        });
                        leftItems.sort(function (a, b) {
                            return a.desktop_index - b.desktop_index;
                        });
                        this.add(FastExt.DesktopLayout.buildDesktopItemPanel(leftItems, false, true, false), FastExt.DesktopLayout.buildDesktopItemPanel(rightItems, true, true, false));
                    }
                    finally {
                        this.rebindMuuriGrid();
                    }
                },
                listeners: {
                    afterrender: function () {
                        this.getEl().on("contextmenu", FastExt.DesktopEvent.onFastDesktopContextMenu, this);
                        FastExt.DesktopLayout.restoreSystemDesktopMenus();
                    },
                },
            });
            var defaultDesktopBgImg = "base/desktop/desktop_bg_img_default.jpg";
            var desktopBgImages = FastExt.System.ConfigHandler.getDesktopBgImages();
            if (desktopBgImages && desktopBgImages.length > 0) {
                defaultDesktopBgImg = desktopBgImages[0];
            }
            FastExt.DesktopLayout.desktopContainer = Ext.create('Ext.container.Container', {
                layout: 'border',
                border: 0,
                style: {
                    backgroundImage: "url('" + defaultDesktopBgImg + "')",
                    backgroundSize: "cover",
                },
                items: [
                    FastExt.DesktopLayout.getSystemHeaderPanel(["headContainer", "fast-desktop-header-container"]),
                    FastExt.DesktopLayout.desktopPanel
                ],
            });
            container.add(FastExt.DesktopLayout.desktopContainer);
        };
        DesktopLayout.getSystemHeaderPanel = function (cls) {
            var systemBgColor = FastExt.System.ConfigHandler.getThemeColor();
            var systemTlColor = FastExt.System.ConfigHandler.getFrontColor();
            var systemLogo = FastExt.System.ConfigHandler.getSystemLogo();
            var systemTitle = FastExt.System.ConfigHandler.getSystemTitle();
            if (Ext.isEmpty(systemLogo)) {
                systemLogo = "icons/icon_head_system.svg";
            }
            var headHeight = 55;
            if (Ext.isEmpty(cls)) {
                cls = "headContainer";
            }
            var rightHeadItems = [];
            var headItems = [
                {
                    xtype: 'image',
                    src: FastExt.Base.formatUrl(systemLogo),
                    height: headHeight - 20,
                    width: headHeight - 20,
                    cls: 'fast-system-head-logo',
                    margin: '10 5 5 5',
                    style: {
                        borderRadius: '10px'
                    }
                },
                {
                    xtype: 'label',
                    margin: '0 0 0 5',
                    html: "<div class='fast-system-head-title' style='color: " + systemTlColor + ";' >" + systemTitle + "</div>"
                },
                "->",
                {
                    xtype: 'button',
                    iconCls: 'extIcon extManager2 searchColor',
                    text: FastExt.System.ManagerHandler.getManagerName(),
                    minWidth: 155,
                    cls: 'fast-system-head-button',
                    handler: function () {
                        FastExt.ManagerLayout.showManagerInfo(this);
                    }
                },
                {
                    xtype: 'button',
                    iconCls: 'extIcon extExits redColor',
                    text: "退出登录",
                    cls: 'fast-system-head-button',
                    handler: function () {
                        FastExt.LoginLayout.showLogout();
                    }
                }
            ];
            var headerInfo = Ext.create('Ext.toolbar.Toolbar', {
                height: headHeight,
                padding: '0 0 0 0',
                border: 0,
                flex: 1,
                power: false,
                cls: cls,
                id: "SystemHeadButtons",
                style: {
                    background: systemBgColor
                },
                items: headItems,
            });
            var headerTip = Ext.create('Ext.toolbar.Toolbar', {
                border: 0,
                padding: '0 0 0 0',
                flex: 1,
                height: 3,
                style: {
                    background: systemBgColor
                },
                html: "<div class=\"progress\" id=\"progress\"></div>"
            });
            return Ext.create('Ext.container.Container', {
                layout: 'absolute',
                region: 'north',
                height: headHeight,
                border: 0,
                hidden: FastExt.Power.config,
                items: [headerInfo, headerTip],
                listeners: {
                    afterlayout: function () {
                        if (!FastExt.Base.toBool(this.bindFullscreen, false)) {
                            this.bindFullscreen = true;
                            this.getEl().on("dblclick", function () {
                                FastExt.Windows.toggleFullscreen();
                            });
                        }
                    }
                }
            });
        };
        DesktopLayout.getMenu = function (menuId) {
            if (FastExt.DesktopLayout.desktopAllMenusInfo.hasOwnProperty(menuId)) {
                return FastExt.DesktopLayout.desktopAllMenusInfo[menuId];
            }
            return FastExt.System.MenuHandler.getMenu(menuId);
        };
        DesktopLayout.getMenuByMuuriGridItem = function (item) {
            var jqueryEl = $(item.getElement());
            var dataMenuId = jqueryEl.attr("data-menu-id");
            var dataMenuType = jqueryEl.attr("data-menu-type");
            if (Ext.isEmpty(dataMenuId)) {
                return null;
            }
            return FastExt.DesktopLayout.getMenu(dataMenuId);
        };
        DesktopLayout.restoreSystemDesktopMenus = function () {
            if (window["indexLottie"]) {
                window["indexLottie"].destroy();
                window["indexLottie"] = null;
            }
            Ext.MessageBox.updateProgress(1, '即将完成操作，请耐心等待', '系统初始化成功！获取菜单中…');
            if (FastExt.System.ConfigHandler.isEnableDesktopMenuRecord()) {
                FastExt.DesktopLayout.restoreMenu().then(function (value) {
                    FastExt.DesktopLayout.desktopPanel.resetDesktop(FastExt.Json.jsonToObject(value));
                    FastExt.Listeners.getFire().onSystemReady();
                });
            }
            else {
                FastExt.DesktopLayout.desktopPanel.resetDesktop({});
                FastExt.Listeners.getFire().onSystemReady();
            }
        };
        DesktopLayout.getAllDesktopMenuInfo = function (recordMenuConfig) {
            var takeAllDesktopMenu = function (parent, menus) {
                var desktopMenus = [];
                for (var i = 0; i < menus.length; i++) {
                    var menu = menus[i];
                    var cloneMenu = Ext.clone(menu);
                    cloneMenu.parent = parent;
                    cloneMenu.desktop = FastExt.Base.toBool(cloneMenu.desktop, cloneMenu.depth === 1);
                    cloneMenu.desktop_fixed = FastExt.Base.toBool(cloneMenu.desktop_fixed);
                    if (cloneMenu.desktop || cloneMenu.desktop_fixed) {
                        if (!cloneMenu.leaf) {
                            cloneMenu.desktop_type = "folder";
                        }
                        desktopMenus.push(cloneMenu);
                    }
                    if (cloneMenu.children) {
                        var childTakes = takeAllDesktopMenu(cloneMenu, cloneMenu.children);
                        desktopMenus = desktopMenus.concat(childTakes);
                    }
                }
                return desktopMenus;
            };
            var systemMenus = takeAllDesktopMenu(null, FastExt.System.MenuHandler.getMenus());
            for (var i = 0; i < systemMenus.length; i++) {
                var childMenu = systemMenus[i];
                var exitMenu = FastExt.Objects.safeObject(FastExt.DesktopLayout.desktopAllMenusInfo[childMenu.id]);
                FastExt.DesktopLayout.desktopAllMenusInfo[childMenu.id] = Ext.Object.merge(exitMenu, childMenu);
            }
            var configMenus = [];
            if (recordMenuConfig) {
                for (var configMenuKey in recordMenuConfig) {
                    configMenus.push(recordMenuConfig[configMenuKey]);
                }
            }
            for (var i = 0; i < configMenus.length; i++) {
                var configMenu = configMenus[i];
                var exitMenu = FastExt.DesktopLayout.desktopAllMenusInfo[configMenu.id];
                if (!exitMenu) {
                    exitMenu = FastExt.System.MenuHandler.getMenu(configMenu.id);
                }
                if (!exitMenu) {
                    if (FastExt.Base.toString(configMenu.desktop_from, "none") === "user") {
                        exitMenu = {};
                    }
                    else {
                        continue;
                    }
                }
                FastExt.DesktopLayout.desktopAllMenusInfo[configMenu.id] = Ext.Object.merge(exitMenu, configMenu);
            }
            for (var desktopAllMenusInfoKey in FastExt.DesktopLayout.desktopAllMenusInfo) {
                var realMenu = FastExt.DesktopLayout.desktopAllMenusInfo[desktopAllMenusInfoKey];
                if (Ext.isEmpty(realMenu.desktop_folder_id)) {
                    realMenu.desktop_folder_id = "desktop";
                }
                if (Ext.isEmpty(realMenu.treeGroup)) {
                    realMenu.treeGroup = FastExt.Base.buildOnlyCode("F");
                }
            }
            return FastExt.DesktopLayout.desktopAllMenusInfo;
        };
        DesktopLayout.buildDesktopItemPanel = function (menus, alignRight, horizontal, scrollable) {
            var containerId = "muuri-grid-container-" + (FastExt.DesktopLayout.muuriContainerIdIndex++);
            return {
                xtype: "container",
                layout: 'fit',
                border: 0,
                desktopItemContainer: true,
                alignRight: alignRight,
                horizontal: horizontal,
                flex: 1,
                anchor: '100% 100%',
                configMenus: menus,
                muuriReady: false,
                muuriGridContainerId: containerId,
                html: "<div id='" + containerId + "-root' style='width: 100%;height: 100%;display: flex;justify-content:" + (alignRight ? "end" : "start") + "; overflow: " + (scrollable ? "auto" : "hidden") + ";padding: 5px;'>" +
                    "<div id='" + containerId + "' style='width: 100%;height: 100%; position: relative;' ></div></div>",
                listeners: {
                    destroy: function () {
                        FastExt.MuuriTool.releaseMuuriGrid(this);
                        FastExt.DesktopLayout.refreshMuuriGridContainers();
                    },
                },
                getMuuriGridContainerId: function () {
                    return this.muuriGridContainerId;
                },
                bindMuuriGrid: function (callBack) {
                    var me = this;
                    FastExt.MuuriTool.justBindToContainer(this, {
                        dragEnabled: !FastExt.Base.toBool(this.folderLocked, false),
                        dragContainer: document.body,
                        layout: {
                            alignRight: this.alignRight,
                            horizontal: this.horizontal,
                            fillGaps: true,
                            rounding: true,
                        },
                        dragStartPredicate: FastExt.DesktopEvent.onFastMuuriGridDragStartPredicate,
                        dragSort: FastExt.DesktopEvent.onFastMuuriGridDragSort,
                        dragSortPredicate: FastExt.DesktopEvent.onFastMuuriGridDragSortPredicate,
                    }, function (muuriGrid) {
                        if (me.configMenus) {
                            me.addDesktopItems(me.configMenus);
                        }
                        me.muuriReady = true;
                        muuriGrid.containerId = me.getId();
                        muuriGrid.on("dragReleaseEnd", FastExt.DesktopEvent.onFastMuuriGridDragEnd);
                        muuriGrid.on("add", FastExt.DesktopEvent.onFastMuuriGridChange);
                        muuriGrid.on("remove", FastExt.DesktopEvent.onFastMuuriGridChange);
                        muuriGrid.on("dragInit", FastExt.DesktopEvent.onFastMuuriGridDragInit);
                        muuriGrid.on("send", FastExt.DesktopEvent.onFastMuuriGridSend);
                        FastExt.DesktopLayout.refreshMuuriGridContainers();
                        if (me.ownerCt) {
                            me.ownerCt.updateLayout();
                        }
                        if (callBack) {
                            callBack();
                        }
                    });
                },
                addDesktopItems: function (menus) {
                    if (!menus) {
                        return;
                    }
                    var muuriGrid = FastExt.MuuriTool.getMuuriGrid(this);
                    if (!muuriGrid) {
                        return;
                    }
                    var cmpItems = [];
                    for (var i = 0; i < menus.length; i++) {
                        var menu = menus[i];
                        if (!FastExt.Base.toBool(menu.desktop_temp, false)) {
                            menu.desktop = true;
                            FastExt.DesktopLayout.desktopAllMenusInfo[menu.id] = menu;
                        }
                        cmpItems.push(FastExt.DesktopLayout.buildDesktopItem(menu));
                    }
                    if (cmpItems.length > 0) {
                        muuriGrid.add(cmpItems);
                    }
                },
                addDesktopItem: function (menu) {
                    if (!menu) {
                        return;
                    }
                    if (Ext.isArray(menu)) {
                        this.addDesktopItems(menu);
                        return;
                    }
                    var muuriGrid = FastExt.MuuriTool.getMuuriGrid(this);
                    if (!muuriGrid) {
                        return;
                    }
                    if (!FastExt.Base.toBool(menu.desktop_temp, false)) {
                        menu.desktop = true;
                        FastExt.DesktopLayout.desktopAllMenusInfo[menu.id] = menu;
                    }
                    muuriGrid.add(FastExt.DesktopLayout.buildDesktopItem(menu));
                },
                removeDesktopItem: function (menu) {
                    if (!menu) {
                        return;
                    }
                    var muuriGrid = FastExt.MuuriTool.getMuuriGrid(this);
                    if (!muuriGrid) {
                        return;
                    }
                    var menuItems = $("#" + this.muuriGridContainerId).find("[data-menu-id=" + menu.id + "]");
                    var waitRemoves = [];
                    for (var i = 0; i < menuItems.length; i++) {
                        var el = menuItems[i];
                        var item = muuriGrid.getItem(el);
                        if (item) {
                            waitRemoves.push(item);
                        }
                    }
                    if (FastExt.DesktopLayout.desktopAllMenusInfo.hasOwnProperty(menu.id)) {
                        FastExt.DesktopLayout.desktopAllMenusInfo[menu.id].desktop = false;
                    }
                    muuriGrid.remove(waitRemoves, { removeElements: true });
                },
                removeAllDesktopItem: function () {
                    var muuriGrid = FastExt.MuuriTool.getMuuriGrid(this);
                    if (!muuriGrid) {
                        return;
                    }
                    var allItems = muuriGrid.getItems();
                    var waitRemoves = [];
                    for (var i = 0; i < allItems.length; i++) {
                        waitRemoves.push(allItems[i]);
                        var jqueryEl = $(allItems[i].getElement());
                        var dataMenuId = jqueryEl.attr("data-menu-id");
                        if (FastExt.DesktopLayout.desktopAllMenusInfo.hasOwnProperty(dataMenuId)) {
                            FastExt.DesktopLayout.desktopAllMenusInfo[dataMenuId].desktop = false;
                        }
                    }
                    muuriGrid.remove(waitRemoves, { removeElements: true });
                },
                getAllDesktopItemMenus: function () {
                    var muuriGrid = FastExt.MuuriTool.getMuuriGrid(this);
                    if (!muuriGrid) {
                        return [];
                    }
                    var allItems = muuriGrid.getItems();
                    var menus = [];
                    for (var i = 0; i < allItems.length; i++) {
                        var elem = allItems[i].getElement();
                        var jqueryEl = $(elem);
                        var dataMenuId = jqueryEl.attr("data-menu-id");
                        var dataMenuType = jqueryEl.attr("data-menu-type");
                        if (Ext.isEmpty(dataMenuId)) {
                            continue;
                        }
                        var menu = FastExt.DesktopLayout.getMenu(dataMenuId);
                        if (!menu) {
                            continue;
                        }
                        if (FastExt.Base.toBool(this.alignRight, false)) {
                            menu.desktop_align = "right";
                        }
                        else {
                            menu.desktop_align = "left";
                        }
                        menu.desktop_type = dataMenuType;
                        menu.desktop_index = i;
                        menus.push(menu);
                    }
                    return menus;
                },
                muuriGridLayout: function () {
                    var muuriGrid = FastExt.MuuriTool.getMuuriGrid(this);
                    if (!muuriGrid) {
                        return;
                    }
                    muuriGrid.layout();
                },
            };
        };
        DesktopLayout.buildDesktopItem = function (menu) {
            var itemWidth = FastExt.DesktopLayout.getDesktopButtonMaxWidth();
            var itemTitleWidth = FastExt.DesktopLayout.getDesktopButtonTitleMaxWidth();
            if (Object.keys(menu).length === 0) {
                var empty = $("<div style='width: " + itemWidth + "px;position: absolute;margin: 5px;background:transparent;pointer-events: none;'>" +
                    "<div >" +
                    " <div  " +
                    " style='height:" + itemWidth * 2 + "px;'></div>" +
                    "</div>" +
                    "</div>");
                return empty[0];
            }
            if (Ext.isEmpty(menu.desktop_type)) {
                menu.desktop_type = "item";
            }
            var bgColor = FastExt.DesktopLayout.safeGetMenuColor(menu);
            var bgColorTop = menu.color5;
            var locked = FastExt.Base.toBool(menu.desktop_locked, false);
            var isFolder = FastExt.DesktopLayout.checkMenuFolder(menu);
            if (Ext.isEmpty(bgColorTop)) {
                if (FastExt.DesktopLayout.checkMenuFolder(menu)) {
                    bgColorTop = "#FFEE99";
                }
                else {
                    bgColorTop = "#f0f0f0";
                }
            }
            var icons = [menu.icon];
            if (isFolder) {
                icons = [];
                var child = FastExt.DesktopLayout.getFolderChildMenus(menu.id);
                for (var i = 0; i < child.length; i++) {
                    icons.push(FastExt.DesktopLayout.safeGetMenuIcon(child[i]));
                    if (icons.length === 4) {
                        break;
                    }
                }
            }
            var bgStyle = bgColor;
            if (FastExt.System.ConfigHandler.isThemeWrap()) {
                bgStyle = "linear-gradient(0deg," + bgColor + ", " + bgColorTop + ");";
            }
            var itemHtml = "<div data-desktop-menu-item='true' data-menu-id='" + menu.id + "' data-menu-type='" + menu.desktop_type + "' " +
                " style='position: absolute;background:transparent;display: flex;align-items: center;justify-content: center;'>" +
                "<div class='fast-desktop-item' style='padding: 5px;'>" +
                " <div data-menu-bg='true' class='" + (isFolder ? 'fast-desktop-item-icon-grid' : 'fast-desktop-item-icon') + "'" +
                " style='height:" + itemWidth + "px;background:" + bgStyle + ";width:" + itemWidth + "px;" +
                " box-shadow: " + (isFolder ? '0px 0px 1px 1px black;' : '0px 1px 1px black;') + "'>";
            for (var i = 0; i < icons.length; i++) {
                itemHtml += "<img data-menu-icon='true' src='" + FastExt.DesktopLayout.takeIcon(icons[i], "#ffffff") + "'  alt='" + menu.text + "' />";
            }
            itemHtml += (locked ? "<div style='background: black;width:5px;height:5px;position: absolute;left: 13px;top: 8px;border-radius: 5px;'></div>" : "") +
                "</div>" +
                " <div data-menu-text='true' style='width: " + itemTitleWidth + "px;' class='fast-desktop-item-title'>" + menu.text + "</div>" +
                "</div>" +
                "</div>";
            var item = $(itemHtml);
            item.on("click", FastExt.DesktopEvent.onFastDesktopItemClick);
            item.on("contextmenu", FastExt.DesktopEvent.onFastDesktopItemContextMenu);
            return item[0];
        };
        DesktopLayout.getDesktopButtonMaxWidth = function () {
            if (Ext.isEmpty(FastExt.DesktopLayout.desktopButtonMaxWidth)) {
                FastExt.DesktopLayout.desktopButtonMaxWidth = parseInt((document.body.clientWidth / 36).toFixed(0));
            }
            return FastExt.DesktopLayout.desktopButtonMaxWidth;
        };
        DesktopLayout.getDesktopButtonTitleMaxWidth = function () {
            return FastExt.DesktopLayout.getDesktopButtonMaxWidth() + 10;
        };
        DesktopLayout.toggleStartMenu = function (obj) {
            if (!FastExt.DesktopLayout.startMenu) {
                var leftTreeWidth = parseInt((document.body.clientWidth * 0.25).toFixed(0));
                var leftTreePanel = Ext.create('Ext.panel.Panel', {
                    border: 0,
                    region: 'center',
                    bodyStyle: {
                        borderWidth: 0,
                    },
                    cls: 'treelist-with-nav',
                    scrollable: "y",
                    items: [
                        {
                            xtype: 'treelist',
                            id: 'leftTreeList',
                            reference: 'treelist',
                            expanderOnly: false,
                            singleExpand: false,
                            ui: 'nav',
                            scrollable: "y",
                            expanderFirst: false,
                            selectOnExpander: true,
                            highlightPath: true,
                            store: {
                                type: 'tree',
                                root: {
                                    expanded: true,
                                    children: FastExt.System.MenuHandler.getMenus(),
                                }
                            },
                            listeners: {
                                itemclick: function (sender, info, eOpts) {
                                    if (info.node.data.leaf) {
                                        FastExt.DesktopLayout.showWindowMenu("button", info.node.data);
                                    }
                                },
                                itemcontextmenu: function (treeview, treeitem, e) {
                                    FastExt.DesktopEvent.onFastMenuItemContextMenu(treeview, treeitem.getNode().data, e);
                                },
                            },
                        }
                    ],
                    listeners: {
                        resize: function (obj, width, height, oldWidth, oldHeight, eOpts) {
                            var pressed = width <= 128;
                            var treelist = Ext.getCmp("leftTreeList");
                            var ct = treelist.ownerCt.ownerCt;
                            treelist.setMicro(pressed);
                            if (pressed) {
                                ct.setWidth(44);
                            }
                            else {
                                ct.setWidth(width);
                            }
                        }
                    }
                });
                var leftContainer = Ext.create('Ext.panel.Panel', {
                    layout: 'border',
                    region: 'center',
                    border: 0,
                    bodyStyle: {
                        borderWidth: 0,
                    },
                    width: leftTreeWidth,
                    minWidth: 44,
                    maxWidth: 500,
                    subtitle: '左侧菜单',
                    split: true,
                    style: {
                        background: '#32404e'
                    },
                    items: [leftTreePanel],
                });
                var winHeight = parseInt((document.body.clientHeight * 0.8).toFixed(0));
                FastExt.DesktopLayout.startMenu = Ext.create('Ext.menu.Menu', {
                    showSeparator: false,
                    layout: 'border',
                    padding: '0 0 0 0',
                    border: 0,
                    style: {
                        background: "#32404e",
                        borderWidth: 0,
                    },
                    userCls: "desktop-start-menu",
                    width: leftTreeWidth,
                    height: winHeight,
                    items: [leftContainer],
                    listeners: {
                        hide: function (obj, epts) {
                        }
                    },
                });
            }
            FastExt.DesktopLayout.startMenu.showBy(FastExt.DesktopLayout.desktopPanel.down("#DesktopToolBar"));
        };
        DesktopLayout.hideAllDesktopWin = function () {
            var windows = Ext.ComponentQuery.query("[desktopWin=true]");
            for (var i = 0; i < windows.length; i++) {
                var win = windows[i];
                if (win.hideAction && win.hideAction === "destroy") {
                    win.hide(win.animateTarget, win.destroy, win);
                }
                else {
                    win.hide();
                }
            }
        };
        DesktopLayout.closeAllDesktopWin = function () {
            var windows = Ext.ComponentQuery.query("[desktopWin=true]");
            for (var i = 0; i < windows.length; i++) {
                var win = windows[i];
                win.close();
            }
        };
        DesktopLayout.getInsertMenuButtonIndex = function () {
            var bottomBar = FastExt.DesktopLayout.desktopPanel.down("#DesktopToolBar");
            var desktopMenuAnchor = bottomBar.down("[desktopMenuAnchor=true]");
            if (desktopMenuAnchor) {
                return bottomBar.items.indexOf(desktopMenuAnchor);
            }
            return 1;
        };
        DesktopLayout.getInsertFixedButtonIndex = function () {
            var bottomBar = FastExt.DesktopLayout.desktopPanel.down("#DesktopToolBar");
            var desktopMenuAnchor = bottomBar.down("[desktopFixedMenuAnchor=true]");
            if (desktopMenuAnchor) {
                return bottomBar.items.indexOf(desktopMenuAnchor);
            }
            return 1;
        };
        DesktopLayout.showWindowMenuById = function (animObj, menuId, active) {
            this.showWindowMenu(animObj, FastExt.System.MenuHandler.getMenu(menuId), active);
        };
        DesktopLayout.showWindowMenu = function (animObj, menu, active) {
            if (FastExt.DesktopLayout.muuriDragging) {
                return;
            }
            if (!menu) {
                return;
            }
            if (FastExt.DesktopLayout.hasWindowMenu(menu)) {
                return;
            }
            if (FastExt.DesktopLayout.checkMenuFolder(menu)) {
                FastExt.DesktopLayout.showFolder(animObj, menu, active);
                return;
            }
            var winWidth = parseInt((document.body.clientWidth * 0.8).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.9).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                title: FastExt.DesktopLayout.getMenuPath(menu, "#ffffff", "20px"),
                realTitle: menu.text,
                menuId: menu.id,
                menuData: menu,
                menuContainer: true,
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 800,
                layout: 'fit',
                resizable: true,
                constrainHeader: true,
                maximizable: true,
                entityWindow: true,
                desktopWin: true,
                tools: [
                    {
                        type: 'minus',
                        callback: function (owner) {
                            owner.hide();
                        }
                    },
                ],
                listeners: {
                    show: function (win) {
                        win.shown = true;
                        if (!win.methodInvoked || FastExt.System.InitHandler.isSilenceGlobalSaving()) {
                            FastExt.Eval.asyncMethod(menu.method).then(function (obj) {
                                if (obj == null) {
                                    return;
                                }
                                var entityOwner = obj.down("[entityList=true]");
                                if (entityOwner) {
                                    entityOwner.where = FastExt.Json.mergeJson({}, entityOwner.where);
                                    entityOwner.code = $.md5(menu.id);
                                    entityOwner.buildCodeText = menu.text;
                                }
                                win.add(obj);
                                win.methodInvoked = true;
                            });
                        }
                        FastExt.DesktopLayout.refreshActiveToolbarButton();
                    },
                    destroy: FastExt.DesktopEvent.onFastWindowMenuDestroy,
                    activate: FastExt.DesktopLayout.refreshActiveToolbarButton,
                    hide: FastExt.DesktopLayout.refreshActiveToolbarButton,
                    close: FastExt.DesktopLayout.refreshActiveToolbarButton,
                    drag: function () {
                        FastExt.DesktopLayout.disabledMenuPathClick = true;
                    },
                    dragend: function (obj, e) {
                        new Ext.util.DelayedTask(function () {
                            FastExt.DesktopLayout.disabledMenuPathClick = false;
                        }, this).delay(100);
                    },
                }
            });
            FastExt.DesktopLayout.addDesktopToolbarButton(menu);
            if (active) {
                FastExt.DesktopLayout.activeToolbarButton(menu.id);
            }
            if (Ext.isObject(animObj)) {
                win.animateTarget = animObj;
            }
            var bottomBar = FastExt.DesktopLayout.desktopPanel.down("#DesktopToolBar");
            if (bottomBar) {
                var x = (document.body.clientWidth - winWidth) / 2;
                var y = (document.body.clientHeight - bottomBar.getHeight() - winHeight) / 2;
                win.showAt(x, y);
            }
            else {
                win.show();
            }
        };
        DesktopLayout.closeToolbarMenuButton = function (button) {
            if (button && button.menuWin) {
                button.menuWin.close();
                button.menuWin = null;
            }
            else {
                var bottomBar = FastExt.DesktopLayout.desktopPanel.down("#DesktopToolBar");
                if (bottomBar) {
                    bottomBar.remove(button, true);
                }
            }
        };
        DesktopLayout.closeOtherToolbarMenuButton = function (anchorBtn, direction) {
            var toolBar = FastExt.DesktopLayout.desktopPanel.down("#DesktopToolBar");
            if (toolBar) {
                var menuButtons = toolBar.query("[desktopMenuButton=true]");
                var anchorIndex = -1;
                for (var i = 0; i < menuButtons.length; i++) {
                    if (anchorBtn.getId() === menuButtons[i].getId()) {
                        anchorIndex = i;
                        continue;
                    }
                    if (direction === "all") {
                        FastExt.DesktopLayout.closeToolbarMenuButton(menuButtons[i]);
                    }
                    else if (direction === "right" && anchorIndex >= 0) {
                        FastExt.DesktopLayout.closeToolbarMenuButton(menuButtons[i]);
                    }
                    else if (direction === "left" && anchorIndex < 0) {
                        FastExt.DesktopLayout.closeToolbarMenuButton(menuButtons[i]);
                    }
                }
            }
        };
        DesktopLayout.closeAllToolbarMenuButton = function () {
            var toolBar = FastExt.DesktopLayout.desktopPanel.down("#DesktopToolBar");
            if (toolBar) {
                var menuButtons = toolBar.query("[desktopMenuButton=true]");
                for (var i = 0; i < menuButtons.length; i++) {
                    FastExt.DesktopLayout.closeToolbarMenuButton(menuButtons[i]);
                }
            }
        };
        DesktopLayout.showWindowPanel = function (obj, title, panel) {
            if (!obj) {
                obj = {
                    getId: function () {
                        return new Date().getTime();
                    },
                };
            }
            if (!panel) {
                return;
            }
            var windows = Ext.ComponentQuery.query("[buttonId=" + obj.getId() + "]");
            if (windows.length > 0) {
                FastExt.Component.shakeComment(windows[0]);
                if (panel) {
                    panel.destroy();
                }
                return;
            }
            var winWidth = parseInt((document.body.clientWidth * 0.4).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                title: title,
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 800,
                iconCls: obj.iconCls,
                layout: 'fit',
                buttonId: obj.getId(),
                hideAction: 'destroy',
                desktopWin: true,
                resizable: true,
                constrainHeader: true,
                maximizable: true,
                items: [panel],
                listeners: {
                    show: FastExt.DesktopLayout.refreshActiveToolbarButton,
                    activate: FastExt.DesktopLayout.refreshActiveToolbarButton,
                    close: FastExt.DesktopLayout.refreshActiveToolbarButton,
                }
            });
            win.show();
        };
        DesktopLayout.refreshActiveToolbarButton = function () {
            if (!FastExt.DesktopLayout.desktopInitFinish) {
                return;
            }
            var topActiveWin = FastExt.DesktopLayout.getTopDesktopWindow();
            if (topActiveWin) {
                if (!Ext.isEmpty(FastExt.DesktopLayout.lastActiveMenuId) && topActiveWin.menuId !== FastExt.DesktopLayout.lastActiveMenuId) {
                    FastExt.DesktopLayout.deactiveToolbarButton(FastExt.DesktopLayout.lastActiveMenuId);
                }
                FastExt.DesktopLayout.activeToolbarButton(topActiveWin.menuId);
                FastExt.Windows.pushLocationHistory({
                    text: topActiveWin.realTitle || topActiveWin.title,
                    id: topActiveWin.menuId,
                });
            }
            else {
                if (!Ext.isEmpty(FastExt.DesktopLayout.lastActiveMenuId)) {
                    FastExt.DesktopLayout.deactiveToolbarButton(FastExt.DesktopLayout.lastActiveMenuId);
                }
                FastExt.Windows.pushLocationHistory({ text: "首页" });
            }
        };
        DesktopLayout.activeToolbarButton = function (menuId) {
            var button = FastExt.DesktopLayout.desktopPanel.down("[menuButtonId=" + menuId + "]");
            if (button) {
                button.addCls("fast-desktop-toolbar-btn-active");
            }
            FastExt.DesktopLayout.lastActiveMenuId = menuId;
        };
        DesktopLayout.deactiveToolbarButton = function (menuId) {
            var button = FastExt.DesktopLayout.desktopPanel.down("[menuButtonId=" + menuId + "]");
            if (button) {
                button.removeCls("fast-desktop-toolbar-btn-active");
            }
        };
        DesktopLayout.getTopDesktopWindow = function () {
            var windows = Ext.ComponentQuery.query("[desktopWin=true]");
            var lastWindow = null;
            for (var i = 0; i < windows.length; i++) {
                var targetWindow = windows[i];
                if (!targetWindow.isVisible()) {
                    continue;
                }
                var zIndex = targetWindow.getEl().getZIndex();
                var lastZIndex = 0;
                if (lastWindow) {
                    lastZIndex = lastWindow.getEl().getZIndex();
                }
                if (zIndex > lastZIndex) {
                    lastWindow = targetWindow;
                }
            }
            return lastWindow;
        };
        DesktopLayout.addDesktopButton = function (menu, silence) {
            if (FastExt.DesktopLayout.checkDesktopButton(menu)) {
                FastExt.Dialog.toast("桌面已存在！");
                return;
            }
            FastExt.DesktopLayout.desktopPanel.addDesktopItem(menu);
            if (!silence) {
                FastExt.Dialog.toast("添加成功！");
            }
        };
        DesktopLayout.removeDesktopButton = function (menu, silence) {
            FastExt.DesktopLayout.desktopPanel.removeDesktopItem(menu);
            if (!silence) {
                FastExt.Dialog.toast("移除成功！");
            }
        };
        DesktopLayout.checkDesktopButton = function (menu) {
            if (!menu) {
                return false;
            }
            return FastExt.Base.toBool(menu.desktop);
        };
        DesktopLayout.buildToolbarButton = function (menu, fixed) {
            var button = {
                xtype: "button",
                helpType: FastEnum.HelpEnumType.mouse_in_out,
                helpAnchor: FastEnum.TooltipAnchorType.bottom,
                userCls: 'fast-desktop-toolbar-btn',
                focusCls: 'fast-desktop-toolbar-btn-focus',
                handler: FastExt.DesktopEvent.onFastToolBarMenuButtonClick,
                updateMenu: function (newMenu) {
                    if (this.desktopFixedMenuButton) {
                        this.setText(null);
                    }
                    else {
                        this.setText(newMenu.text);
                    }
                    this.setIcon(FastExt.DesktopLayout.takeIcon(FastExt.DesktopLayout.safeGetMenuIcon(newMenu), "#ffffff"));
                    this.overflowText = newMenu.text;
                    this.menuData = newMenu;
                    this.help = FastExt.System.MenuHandler.getPlainIconMenu(newMenu, " >> ");
                    this.menuButtonId = newMenu.id;
                    if (!FastExt.Base.toBool(newMenu.leaf, false)) {
                        this.menuButtonGroup = newMenu.treeGroup;
                    }
                    this.setStyle("background", FastExt.DesktopLayout.safeGetMenuColor(newMenu));
                },
                listeners: {
                    afterrender: function () {
                        this.updateMenu(menu);
                        this.getEl().on("contextmenu", FastExt.DesktopEvent.onFastToolbarMenuButtonContextMenu, this);
                    }
                }
            };
            if (fixed) {
                button["desktopFixedMenuButton"] = true;
            }
            else {
                button["desktopMenuButton"] = true;
            }
            return button;
        };
        DesktopLayout.removeAllDesktopToolbarFixedButton = function () {
            var bottomBar = FastExt.DesktopLayout.desktopPanel.down("#DesktopToolBar");
            if (bottomBar) {
                var waitRemove_1 = [];
                bottomBar.items.each(function (item) {
                    if (item.desktopFixedMenuButton) {
                        waitRemove_1.push(item);
                    }
                });
                Ext.suspendLayouts();
                for (var i = 0; i < waitRemove_1.length; i++) {
                    bottomBar.remove(waitRemove_1[i]);
                }
                Ext.resumeLayouts();
            }
        };
        DesktopLayout.addDesktopToolbarFixedButton = function (sourceMenu, silence) {
            try {
                var bottomBar = FastExt.DesktopLayout.desktopPanel.down("#DesktopToolBar");
                if (bottomBar) {
                    var menus = [];
                    if (Ext.isArray(sourceMenu)) {
                        menus = sourceMenu;
                    }
                    else {
                        menus.push(sourceMenu);
                    }
                    var menuButtons = [];
                    for (var i = 0; i < menus.length; i++) {
                        var menu = menus[i];
                        if (!FastExt.DesktopLayout.desktopAllMenusInfo.hasOwnProperty(menu.id)) {
                            FastExt.DesktopLayout.desktopAllMenusInfo[menu.id] = menu;
                        }
                        FastExt.DesktopLayout.desktopAllMenusInfo[menu.id].desktop_fixed = true;
                        var desktopToolbarButton = FastExt.DesktopLayout.getDesktopToolbarButton(menu);
                        if (desktopToolbarButton) {
                            if (desktopToolbarButton.desktopFixedMenuButton) {
                                continue;
                            }
                            else {
                                bottomBar.remove(desktopToolbarButton);
                            }
                        }
                        menuButtons.push(FastExt.DesktopLayout.buildToolbarButton(menu, true));
                    }
                    bottomBar.insert(FastExt.DesktopLayout.getInsertFixedButtonIndex(), menuButtons);
                    if (!silence) {
                        FastExt.Dialog.toast("已固定到工具栏中！");
                        FastExt.DesktopLayout.recordMenu();
                    }
                }
            }
            finally {
                FastExt.DesktopLayout.refreshActiveToolbarButton();
            }
        };
        DesktopLayout.removeDesktopToolbarFixedButton = function (sourceMenu) {
            try {
                var bottomBar = FastExt.DesktopLayout.desktopPanel.down("#DesktopToolBar");
                if (bottomBar) {
                    var menus = [];
                    if (Ext.isArray(sourceMenu)) {
                        menus = sourceMenu;
                    }
                    else {
                        menus.push(sourceMenu);
                    }
                    for (var i = 0; i < menus.length; i++) {
                        var menu = menus[i];
                        if (!FastExt.DesktopLayout.desktopAllMenusInfo.hasOwnProperty(menu.id)) {
                            FastExt.DesktopLayout.desktopAllMenusInfo[menu.id] = menu;
                        }
                        FastExt.DesktopLayout.desktopAllMenusInfo[menu.id].desktop_fixed = false;
                        var desktopToolbarButton = FastExt.DesktopLayout.getDesktopToolbarButton(menu);
                        if (desktopToolbarButton && desktopToolbarButton.desktopFixedMenuButton) {
                            bottomBar.remove(desktopToolbarButton);
                        }
                        var windowMenu = FastExt.DesktopLayout.getWindowMenu(menu);
                        if (windowMenu) {
                            FastExt.DesktopLayout.addDesktopToolbarButton(menu);
                        }
                    }
                    FastExt.DesktopLayout.recordMenu();
                    FastExt.Dialog.toast("已从工具栏中取消固定！");
                }
            }
            finally {
                FastExt.DesktopLayout.refreshActiveToolbarButton();
            }
        };
        DesktopLayout.checkDesktopToolbarFixedButton = function (menu) {
            if (!menu) {
                return false;
            }
            var desktopToolbarButton = FastExt.DesktopLayout.getDesktopToolbarButton(menu);
            if (desktopToolbarButton) {
                return desktopToolbarButton.desktopFixedMenuButton;
            }
            return false;
        };
        DesktopLayout.addDesktopToolbarButton = function (sourceMenu) {
            if (!sourceMenu) {
                return;
            }
            var bottomBar = FastExt.DesktopLayout.desktopPanel.down("#DesktopToolBar");
            if (bottomBar) {
                var menus = [];
                if (Ext.isArray(sourceMenu)) {
                    menus = sourceMenu;
                }
                else {
                    menus.push(sourceMenu);
                }
                var menuButtons = [];
                for (var i = 0; i < menus.length; i++) {
                    var menu = menus[i];
                    var desktopToolbarButton = FastExt.DesktopLayout.getDesktopToolbarButton(menu);
                    if (desktopToolbarButton) {
                        continue;
                    }
                    menuButtons.push(FastExt.DesktopLayout.buildToolbarButton(menu, false));
                }
                if (menuButtons.length > 0) {
                    bottomBar.insert(FastExt.DesktopLayout.getInsertMenuButtonIndex(), menuButtons);
                }
            }
        };
        DesktopLayout.removeDesktopToolbarButton = function (sourceMenu) {
            if (!sourceMenu) {
                return;
            }
            var bottomBar = FastExt.DesktopLayout.desktopPanel.down("#DesktopToolBar");
            if (bottomBar) {
                var menus = [];
                if (Ext.isArray(sourceMenu)) {
                    menus = sourceMenu;
                }
                else {
                    menus.push(sourceMenu);
                }
                for (var i = 0; i < menus.length; i++) {
                    var menu = menus[i];
                    var desktopToolbarButton = FastExt.DesktopLayout.getDesktopToolbarButton(menu);
                    if (!FastExt.Base.toBool(desktopToolbarButton.desktopFixedMenuButton)) {
                        bottomBar.remove(desktopToolbarButton);
                    }
                }
            }
        };
        DesktopLayout.getDesktopToolbarButton = function (sourceMenu) {
            if (!sourceMenu) {
                return;
            }
            var bottomBar = FastExt.DesktopLayout.desktopPanel.down("#DesktopToolBar");
            if (bottomBar) {
                return bottomBar.down("[menuButtonId=" + sourceMenu.id + "]");
            }
            return null;
        };
        DesktopLayout.getDesktopToolbarButtonByGroup = function (sourceMenu) {
            if (!sourceMenu) {
                return;
            }
            var bottomBar = FastExt.DesktopLayout.desktopPanel.down("#DesktopToolBar");
            if (bottomBar) {
                return bottomBar.down("[menuButtonGroup=" + sourceMenu.treeGroup + "]");
            }
            return null;
        };
        DesktopLayout.outDesktopMenuFolder = function (sourceMenu) {
            if (!sourceMenu) {
                return;
            }
            FastExt.DesktopLayout.disabledRecordMenu = true;
            if (FastExt.DesktopLayout.desktopAllMenusInfo.hasOwnProperty(sourceMenu.id)) {
                FastExt.DesktopLayout.desktopAllMenusInfo[sourceMenu.id].desktop_folder_id = "desktop";
            }
            FastExt.DesktopLayout.removeDesktopButton(sourceMenu, true);
            FastExt.DesktopLayout.disabledRecordMenu = false;
            FastExt.DesktopLayout.addDesktopButton(sourceMenu, true);
            FastExt.Dialog.toast("已移出文件夹！");
        };
        DesktopLayout.recordMenu = function () {
            if (FastExt.DesktopLayout.disabledRecordMenu) {
                return;
            }
            FastExt.DesktopLayout.refreshMuuriGridMenuIndex();
            try {
                var menuInfo = {};
                for (var desktopAllMenusInfoKey in FastExt.DesktopLayout.desktopAllMenusInfo) {
                    var sourceMenu = FastExt.DesktopLayout.desktopAllMenusInfo[desktopAllMenusInfoKey];
                    if (FastExt.Base.toBool(sourceMenu.desktop_temp, false)) {
                        continue;
                    }
                    if (!menuInfo.hasOwnProperty(sourceMenu.id)) {
                        menuInfo[sourceMenu.id] = {
                            id: sourceMenu.id,
                            text: sourceMenu.text,
                        };
                    }
                    var recordMenu = menuInfo[sourceMenu.id];
                    recordMenu["desktop"] = sourceMenu.desktop;
                    recordMenu["desktop_align"] = sourceMenu.desktop_align;
                    recordMenu["desktop_index"] = sourceMenu.desktop_index;
                    recordMenu["desktop_type"] = sourceMenu.desktop_type;
                    recordMenu["desktop_folder_id"] = sourceMenu.desktop_folder_id;
                    recordMenu["desktop_fixed"] = sourceMenu.desktop_fixed;
                    recordMenu["desktop_fixed_index"] = sourceMenu.desktop_fixed_index;
                    recordMenu["desktop_from"] = sourceMenu.desktop_from;
                    recordMenu["desktop_locked"] = sourceMenu.desktop_locked;
                }
                FastExt.Server.setSilence(true);
                FastExt.Server.saveExtConfig($.md5("SystemDesktopMenus"), "DesktopMenu", FastExt.Json.objectToJson(menuInfo), function (success, message) {
                    FastExt.Server.setSilence(false);
                });
            }
            catch (e) {
            }
        };
        DesktopLayout.restoreMenu = function () {
            return new Ext.Promise(function (resolve, reject) {
                try {
                    FastExt.Server.showExtConfig($.md5("SystemDesktopMenus"), "DesktopMenu", function (success, value) {
                        resolve(value);
                    });
                }
                catch (e) {
                    reject(e);
                }
            });
        };
        DesktopLayout.showDesktopBackgroundImages = function (obj) {
            var desktopBgImages = FastExt.System.ConfigHandler.getDesktopBgImages();
            if (desktopBgImages) {
                if (!obj) {
                    obj = {
                        getId: function () {
                            return new Date().getTime();
                        },
                    };
                }
                var windows = Ext.ComponentQuery.query("[buttonId=" + obj.getId() + "]");
                if (windows.length > 0) {
                    FastExt.Component.shakeComment(windows[0]);
                    return;
                }
                var images = desktopBgImages;
                var imagesCmp = [];
                var imageMargin = 5;
                var windowWidth = (100 + imageMargin * 2) * 5 + imageMargin + 10;
                for (var i = 0; i < images.length; i++) {
                    imagesCmp.push({
                        xtype: "image",
                        src: images[i],
                        height: 100,
                        margin: imageMargin,
                        width: 100,
                        style: {
                            objectFit: "cover",
                        },
                        listeners: {
                            afterrender: function (obj) {
                                obj.getEl().on("click", FastExt.DesktopEvent.onFastDesktopImageClick, obj);
                            },
                        }
                    });
                }
                var winHeight = parseInt((document.body.clientHeight * 0.6).toFixed(0));
                var win = Ext.create('Ext.window.Window', {
                    title: "选择桌面背景图片",
                    height: winHeight,
                    width: windowWidth,
                    iconCls: obj.iconCls,
                    layout: 'fit',
                    buttonId: obj.getId(),
                    hideAction: 'destroy',
                    desktopWin: true,
                    resizable: false,
                    constrain: true,
                    maximizable: false,
                    items: [
                        {
                            xtype: "container",
                            layout: "column",
                            scrollable: true,
                            margin: imageMargin,
                            items: imagesCmp,
                        }
                    ],
                    listeners: {
                        show: function (win) {
                            FastExt.DesktopLayout.refreshActiveToolbarButton();
                        },
                    }
                });
                win.show();
            }
            else {
                FastExt.Dialog.toast("暂无可用图片选择！");
            }
        };
        DesktopLayout.showFolderByMenuId = function (obj, menuId) {
            var menu = FastExt.DesktopLayout.getMenu(menuId);
            if (menu) {
                FastExt.DesktopLayout.showFolder(obj, menu);
            }
        };
        DesktopLayout.showFolder = function (obj, menu, active) {
            if (FastExt.DesktopLayout.hasWindowMenu(menu)) {
                return;
            }
            var menuGroupWindows = Ext.ComponentQuery.query("[menuWindowGroup=" + menu.treeGroup + "]");
            if (menuGroupWindows.length > 0) {
                menuGroupWindows[0].updateFolderMenu(menu, false);
                menuGroupWindows[0].show();
                return;
            }
            var winHeight = parseInt((document.body.clientHeight * 0.4).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                layout: 'fit',
                title: "文件夹",
                height: winHeight,
                width: (FastExt.DesktopLayout.getDesktopButtonTitleMaxWidth() + 10) * 6 + 10,
                minHeight: 100,
                minWidth: 100,
                menuData: menu,
                desktopWin: true,
                resizable: true,
                constrainHeader: true,
                maximizable: true,
                userCls: "fast-ext-folder-window",
                items: [
                    FastExt.DesktopLayout.buildDesktopItemPanel([], false, false, true)
                ],
                tools: [
                    {
                        itemId: 'edit',
                        iconCls: 'extIcon extEdit whiteColor',
                        hidden: !FastExt.DesktopLayout.checkMenuByUserFolder(menu),
                        callback: function (owner) {
                            FastExt.DesktopLayout.showEditFolderName(owner.menuData);
                        }
                    },
                ],
                listeners: {
                    afterrender: function () {
                        if (!FastExt.DesktopLayout.checkSystemLockedFolderMenu(this.menuData)) {
                            this.getEl().on("contextmenu", FastExt.DesktopEvent.onFastDesktopFolderContextMenu, this);
                        }
                    },
                    show: function (win) {
                        var muuriGridPanel = this.getMuuriGridContainer();
                        if (muuriGridPanel) {
                            muuriGridPanel.folder = true;
                            muuriGridPanel.folderId = this.menuData.id;
                            muuriGridPanel.folderLocked = FastExt.DesktopLayout.checkSystemLockedFolderMenu(this.menuData);
                            muuriGridPanel.bindMuuriGrid(function () {
                                win.updateFolderMenu(win.menuData, false);
                            });
                        }
                        FastExt.DesktopLayout.refreshActiveToolbarButton();
                    },
                    resize: function () {
                        var muuriGridPanel = this.getMuuriGridContainer();
                        if (muuriGridPanel) {
                            muuriGridPanel.muuriGridLayout();
                        }
                    },
                    beforedestroy: FastExt.DesktopLayout.recordMenu,
                    destroy: FastExt.DesktopEvent.onFastWindowMenuDestroy,
                    activate: FastExt.DesktopLayout.refreshActiveToolbarButton,
                    hide: FastExt.DesktopLayout.refreshActiveToolbarButton,
                    close: FastExt.DesktopLayout.refreshActiveToolbarButton,
                },
                bbar: {
                    xtype: "container",
                    border: 0,
                    padding: '5 5 5 5',
                    itemId: "menuPathContainer",
                    style: {
                        background: "#f0f0f0",
                    },
                },
                setFolderTitle: function (folderMenu) {
                    this.setTitle(FastExt.DesktopLayout.checkSystemLockedFolderMenu(folderMenu) ? folderMenu.text + "<span style='font-size: xx-small'>【已锁定】</span>" : folderMenu.text);
                    this.realTitle = folderMenu.text;
                },
                getMuuriGridContainer: function () {
                    return this.down("[desktopItemContainer=true]");
                },
                updateFolderMenu: function (folderMenu, justInfo) {
                    if (!justInfo) {
                        var muuriGridContainer = this.getMuuriGridContainer();
                        muuriGridContainer.removeAllDesktopItem();
                        muuriGridContainer.addDesktopItems(FastExt.DesktopLayout.getFolderChildMenus(folderMenu.id));
                    }
                    var menuPathContainer = this.down("#menuPathContainer");
                    if (menuPathContainer) {
                        menuPathContainer.update(FastExt.DesktopLayout.getMenuPath(folderMenu, null, "16px"));
                    }
                    this.setFolderTitle(folderMenu);
                    this.setIcon(FastExt.DesktopLayout.takeIcon(FastExt.DesktopLayout.safeGetMenuIcon(folderMenu), "#ffffff"));
                    this.menuData = folderMenu;
                    this.menuId = folderMenu.id;
                    this.menuWindowGroup = folderMenu.treeGroup;
                    var desktopToolbarButton = FastExt.DesktopLayout.getDesktopToolbarButtonByGroup(folderMenu);
                    if (desktopToolbarButton) {
                        desktopToolbarButton.updateMenu(folderMenu);
                    }
                    FastExt.DesktopLayout.refreshActiveToolbarButton();
                },
            });
            FastExt.DesktopLayout.addDesktopToolbarButton(menu);
            if (active) {
                FastExt.DesktopLayout.activeToolbarButton(menu.id);
            }
            FastExt.DesktopLayout.desktopPanel.add(win);
            win.show();
        };
        DesktopLayout.getFolderChildMenus = function (folderId) {
            var systemMenu = FastExt.System.MenuHandler.getMenuData(folderId);
            if (FastExt.DesktopLayout.checkSystemLockedFolderMenu(systemMenu)) {
                for (var i = 0; i < systemMenu.children.length; i++) {
                    var child = systemMenu.children[i];
                    child.desktop_temp = true;
                    if (!FastExt.Base.toBool(child.leaf, true)) {
                        child.desktop_type = "folder";
                    }
                }
                return systemMenu.children;
            }
            var desktopMenus = [];
            for (var desktopMenusKey in FastExt.DesktopLayout.desktopAllMenusInfo) {
                var menu = FastExt.DesktopLayout.desktopAllMenusInfo[desktopMenusKey];
                if (menu.desktop_folder_id !== folderId) {
                    continue;
                }
                if (!FastExt.Base.toBool(menu.desktop, true)) {
                    continue;
                }
                desktopMenus.push(menu);
            }
            desktopMenus.sort(function (a, b) {
                return a.desktop_index - b.desktop_index;
            });
            return desktopMenus;
        };
        DesktopLayout.checkMuuriGridContainer = function (x, y) {
            for (var i = 0; i < FastExt.DesktopLayout.muuriGridContainers.length; i++) {
                var container = FastExt.DesktopLayout.muuriGridContainers[i];
                if (FastExt.Base.toBool(container.folderLocked, false)) {
                    continue;
                }
                var region = container.getRegion(false, false);
                if (!region.isOutOfBound({ x: x, y: y })) {
                    return container;
                }
            }
            return null;
        };
        DesktopLayout.buildFolderMenu = function (menuText) {
            if (Ext.isEmpty(menuText)) {
                return null;
            }
            var menuTexts = FastExt.Objects.safeSplit(menuText, "@");
            var menuId = $.md5("Folder" + menuText);
            FastExt.DesktopLayout.desktopAllMenusInfo[menuId] = {
                id: menuId,
                text: menuTexts[menuTexts.length - 1],
                icon: FastExt.DesktopLayout.folderIcon,
                color: FastExt.DesktopLayout.folderColor,
                desktop_type: "folder",
                desktop_from: "user",
                treeGroup: FastExt.Base.buildOnlyCode("F"),
            };
            return FastExt.DesktopLayout.desktopAllMenusInfo[menuId];
        };
        DesktopLayout.refreshMuuriGridContainers = function () {
            FastExt.DesktopLayout.muuriGridContainers = FastExt.DesktopLayout.desktopPanel.query("[desktopItemContainer=true]");
            FastExt.DesktopLayout.muuriGridContainers.sort(function (a, b) {
                var aUpWindow = a.up("window");
                if (!aUpWindow) {
                    aUpWindow = a;
                }
                var bUpWindow = b.up("window");
                if (!bUpWindow) {
                    bUpWindow = b;
                }
                var aZIndex = FastExt.Base.toInt(aUpWindow.getEl().getZIndex(), 0);
                var bZIndex = FastExt.Base.toInt(bUpWindow.getEl().getZIndex(), 0);
                return bZIndex - aZIndex;
            });
        };
        DesktopLayout.refreshMuuriGridMenuIndex = function () {
            var fixedMenus = FastExt.DesktopLayout.desktopPanel.query("[desktopFixedMenuButton=true]");
            for (var i = 0; i < fixedMenus.length; i++) {
                var menuButton = fixedMenus[i];
                if (menuButton.menuData) {
                    menuButton.menuData.desktop_fixed = true;
                    menuButton.menuData.desktop_fixed_index = i;
                }
            }
            for (var i = 0; i < FastExt.DesktopLayout.muuriGridContainers.length; i++) {
                var container = FastExt.DesktopLayout.muuriGridContainers[i];
                container.getAllDesktopItemMenus();
            }
        };
        DesktopLayout.checkMenuInFolder = function (menu) {
            if (!menu) {
                return false;
            }
            if (!Ext.isEmpty(menu.desktop_folder_id) && menu.desktop_folder_id !== "desktop") {
                var folderMenu = FastExt.DesktopLayout.getMenu(menu.desktop_folder_id);
                if (folderMenu) {
                    if (FastExt.DesktopLayout.checkSystemLockedFolderMenu(folderMenu)) {
                        return false;
                    }
                    return FastExt.Base.toBool(folderMenu.desktop);
                }
            }
            return false;
        };
        DesktopLayout.checkMenuByUserFolder = function (menu) {
            return FastExt.Base.toString(menu.desktop_from, "system") === "user" && menu.desktop_type === "folder";
        };
        DesktopLayout.checkMenuFolder = function (menu) {
            if (!menu) {
                return false;
            }
            if (menu.desktop_type === "folder") {
                return true;
            }
            if (FastExt.DesktopLayout.checkSystemLockedFolderMenu(menu)) {
                return true;
            }
            return false;
        };
        DesktopLayout.checkMenuLocked = function (menu) {
            return FastExt.Base.toBool(menu.desktop_locked, false);
        };
        DesktopLayout.updateDesktopMenuButton = function (menu) {
            if (!menu) {
                return;
            }
            var isFolder = FastExt.DesktopLayout.checkMenuFolder(menu);
            var icons = [menu.icon];
            if (isFolder) {
                icons = [];
                var child = FastExt.DesktopLayout.getFolderChildMenus(menu.id);
                for (var i = 0; i < child.length; i++) {
                    icons.push(FastExt.DesktopLayout.safeGetMenuIcon(child[i]));
                    if (icons.length === 4) {
                        break;
                    }
                }
            }
            var iconHtml = "";
            for (var i = 0; i < icons.length; i++) {
                iconHtml += "<img data-menu-icon='true' src='" + FastExt.DesktopLayout.takeIcon(icons[i], "#ffffff") + "'  alt='" + menu.text + "' />";
            }
            var $dataMenus = $("[data-menu-id=" + menu.id + "]");
            $dataMenus.find("[data-menu-text]").text(menu.text);
            $dataMenus.find("[data-menu-bg]").html(iconHtml);
        };
        DesktopLayout.updateMenuInfo = function (menu) {
            FastExt.DesktopLayout.updateDesktopMenuButton(menu);
            var windowMenu = FastExt.DesktopLayout.getWindowMenu(menu);
            if (windowMenu) {
                windowMenu.updateFolderMenu(menu, true);
            }
        };
        DesktopLayout.showEditFolderName = function (menu) {
            FastExt.Dialog.showPrompt("重命名文件夹", "请输入新的文件夹名", function (btn, text) {
                if (btn === "ok") {
                    menu.text = text;
                    FastExt.DesktopLayout.updateMenuInfo(menu);
                    FastExt.DesktopLayout.recordMenu();
                }
            }, false, menu.text);
        };
        DesktopLayout.checkSystemLockedFolderMenu = function (menu) {
            if (!menu) {
                return false;
            }
            return menu.webMenu && menu.children && !FastExt.Base.toBool(menu.leaf, true);
        };
        DesktopLayout.updateFolderGridMenu = function (muuriGrid) {
            if (!muuriGrid) {
                return;
            }
            var muuriGridContainer = Ext.getCmp(muuriGrid.containerId);
            if (muuriGridContainer && muuriGridContainer.folder) {
                FastExt.DesktopLayout.updateDesktopMenuButton(FastExt.DesktopLayout.getMenu(muuriGridContainer.folderId));
            }
        };
        DesktopLayout.switchMuuriGrid = function (muuriGrid, item, dragEnd) {
            var muuriGridContainer = Ext.getCmp(muuriGrid.containerId);
            if (muuriGridContainer) {
                var elem = item.getElement();
                var jqueryEl = $(elem);
                var dataMenuId = jqueryEl.attr("data-menu-id");
                var dataMenuType = jqueryEl.attr("data-menu-type");
                var menu = FastExt.DesktopLayout.getMenu(dataMenuId);
                if (menu) {
                    if (muuriGridContainer.folder) {
                        menu.desktop_folder_id = muuriGridContainer.folderId;
                    }
                    else {
                        menu.desktop_folder_id = "desktop";
                    }
                    if (FastExt.Base.toBool(muuriGridContainer.alignRight, false)) {
                        menu.desktop_align = "right";
                    }
                    else {
                        menu.desktop_align = "left";
                    }
                    menu.desktop_type = dataMenuType;
                }
            }
        };
        DesktopLayout.safeGetMenuIcon = function (menu) {
            if (!menu) {
                return null;
            }
            var icon = menu.icon;
            if (Ext.isEmpty(icon)) {
                if (FastExt.DesktopLayout.checkMenuFolder(menu)) {
                    icon = FastExt.DesktopLayout.folderIcon;
                }
                else {
                    icon = "icons/icon_function.svg";
                }
                menu.icon = icon;
            }
            return icon;
        };
        DesktopLayout.safeGetMenuColor = function (menu) {
            var color = menu.color;
            if (Ext.isEmpty(color)) {
                if (FastExt.DesktopLayout.checkMenuFolder(menu)) {
                    color = FastExt.DesktopLayout.folderColor;
                }
                else {
                    color = FastExt.System.ConfigHandler.getThemeColor();
                }
            }
            return color;
        };
        DesktopLayout.showDeleteFolder = function () {
            var windows = Ext.ComponentQuery.query("[deleteFolderWin=true]");
            if (windows.length > 0) {
                return;
            }
            var win = Ext.create('Ext.window.Window', {
                height: 120,
                width: 120,
                layout: 'absolute',
                deleteFolderWin: true,
                frame: true,
                header: false,
                shadow: false,
                animateDisable: true,
                style: {
                    background: "transparent",
                },
                bodyStyle: {
                    background: "transparent",
                },
                items: [
                    FastExt.DesktopLayout.buildDesktopItemPanel([], false, false, false),
                    {
                        xtype: "container",
                        anchor: '100% 100%',
                        html: "<div style='width: 100%;height: 100%;display: flex;" +
                            "align-items: center;justify-content: center;font-size: xxx-large;'>" +
                            "<span class='extIcon extDelete' style='font-size: 80px;text-shadow: 0px 0px 20px red;color: #ff3200;'></span>" +
                            "</div>",
                    }
                ],
                listeners: {
                    show: function (win) {
                        var muuriGridPanel = this.getMuuriGridContainer();
                        if (muuriGridPanel) {
                            muuriGridPanel.deleteFolder = true;
                            muuriGridPanel.bindMuuriGrid();
                        }
                    },
                },
                getMuuriGridContainer: function () {
                    return this.down("[desktopItemContainer=true]");
                }
            });
            FastExt.DesktopLayout.desktopPanel.add(win);
            win.show();
        };
        DesktopLayout.hideDeleteFolder = function () {
            var windows = Ext.ComponentQuery.query("[deleteFolderWin=true]");
            for (var i = 0; i < windows.length; i++) {
                var deleteWindow = windows[i];
                deleteWindow.getMuuriGridContainer().removeAllDesktopItem();
                deleteWindow.close();
            }
            FastExt.DesktopLayout.recordMenu();
        };
        DesktopLayout.getMenuPath = function (menu, iconColor, iconSize) {
            var menuArray = FastExt.System.MenuHandler.getPathMenu(menu);
            var menuIconHtml = "<div style=\"display: flex;align-items: center;\" >";
            for (var i = 0; i < menuArray.length; i++) {
                var targetMenu = menuArray[i];
                var parentMenuFunctionStr = "FastExt.DesktopEvent.onFastWindowMenuClick(this)";
                var itemHtml = "<div data-menu-id='" + targetMenu.id + "' onclick=\"" + (i !== menuArray.length - 1 ? parentMenuFunctionStr : "") + "\" " +
                    " style=\"display: flex;align-items: center;\" class='" + (i !== menuArray.length - 1 ? "fast-desktop-menu-path-click" : "") + "'>" +
                    " <img src=\"" + FastExt.DesktopLayout.takeIcon(targetMenu.icon, iconColor) + "\" " +
                    " width='" + iconSize + "' height='" + iconSize + "' />" +
                    "<span style=\"margin-left: 5px;\">" + targetMenu.text + "</span> </div>";
                if (i != 0) {
                    itemHtml = "<span style='font-size: 12px;margin: 0 5px;color: #cbcbcb;' class='extIcon extArrowRight2'></span>" + itemHtml;
                }
                menuIconHtml += itemHtml;
            }
            menuIconHtml += "</div>";
            return menuIconHtml;
        };
        DesktopLayout.getWindowMenu = function (menu) {
            var windows = Ext.ComponentQuery.query("[menuId=" + menu.id + "]");
            if (windows.length > 0) {
                return windows[0];
            }
            return null;
        };
        DesktopLayout.hasWindowMenu = function (menu) {
            var windowMenu = FastExt.DesktopLayout.getWindowMenu(menu);
            if (windowMenu) {
                var desktopToolbarButton = FastExt.DesktopLayout.getDesktopToolbarButton(menu);
                if (desktopToolbarButton) {
                    windowMenu.animateTarget = desktopToolbarButton;
                }
                if (windowMenu.isVisible()) {
                    FastExt.Component.shakeComment(windowMenu);
                }
                else {
                    windowMenu.show();
                }
                return true;
            }
            return false;
        };
        DesktopLayout.resetWindowMenuAnimTarget = function (menu, target) {
            var windowMenu = FastExt.DesktopLayout.getWindowMenu(menu);
            if (windowMenu) {
                windowMenu.animateTarget = target;
            }
        };
        DesktopLayout.takeIcon = function (icon, color) {
            if (Ext.isEmpty(color)) {
                return icon;
            }
            var regStr = /([^/]*.svg)/;
            if (icon && regStr.test(icon)) {
                return FastExt.Server.getIcon(regStr.exec(icon)[1].trim(), color);
            }
        };
        DesktopLayout.muuriContainerIdIndex = 1;
        DesktopLayout.lastActiveMenuId = null;
        DesktopLayout.lastSelectDesktopImageId = null;
        DesktopLayout.muuriGridContainers = null;
        DesktopLayout.folderIcon = "icons/icon_system_file.svg";
        DesktopLayout.folderColor = "#FFBB00";
        DesktopLayout.desktopAllMenusInfo = {};
        DesktopLayout.disabledRecordMenu = false;
        DesktopLayout.disabledMenuPathClick = false;
        return DesktopLayout;
    }());
    FastExt.DesktopLayout = DesktopLayout;
    var DesktopEvent = (function () {
        function DesktopEvent() {
        }
        DesktopEvent.onFastWindowMenuDestroy = function () {
            var menuWindow = this;
            FastExt.DesktopLayout.removeDesktopToolbarButton(menuWindow.menuData);
            menuWindow.menuData = null;
        };
        DesktopEvent.onFastToolBarMenuButtonClick = function () {
            var btn = this;
            var menu = btn.menuData;
            if (menu) {
                var menuWindow = FastExt.DesktopLayout.getWindowMenu(menu);
                if (menuWindow) {
                    menuWindow.animateTarget = this;
                    if (menuWindow.isVisible()) {
                        var topActiveWin = FastExt.DesktopLayout.getTopDesktopWindow();
                        if (topActiveWin && topActiveWin.getId() !== menuWindow.getId()) {
                            Ext.WindowManager.bringToFront(menuWindow, true);
                            return;
                        }
                        menuWindow.hide();
                    }
                    else {
                        menuWindow.show();
                    }
                    return;
                }
                FastExt.DesktopLayout.showWindowMenu(this, menu);
            }
        };
        DesktopEvent.onFastToolbarMenuButtonContextMenu = function (event) {
            var btn = this;
            var desktopMenuButtonExist = FastExt.DesktopLayout.checkDesktopButton(btn.menuData);
            var desktopFixedMenuButtonExist = FastExt.DesktopLayout.checkDesktopToolbarFixedButton(btn.menuData);
            var menu = Ext.create('Ext.menu.Menu', {
                items: [
                    {
                        text: '关闭当前',
                        iconCls: 'extIcon extClose',
                        handler: function () {
                            FastExt.DesktopLayout.closeToolbarMenuButton(btn);
                        },
                    },
                    '-',
                    {
                        text: "关闭所有",
                        iconCls: 'extIcon extCloseAll',
                        handler: function () {
                            FastExt.DesktopLayout.closeAllToolbarMenuButton();
                        },
                    },
                    {
                        text: '关闭左侧',
                        iconCls: 'extIcon extCloseOther',
                        handler: function () {
                            FastExt.DesktopLayout.closeOtherToolbarMenuButton(btn, "left");
                        },
                    },
                    {
                        text: '关闭其他',
                        iconCls: 'extIcon extCloseOther',
                        handler: function () {
                            FastExt.DesktopLayout.closeOtherToolbarMenuButton(btn, "all");
                        },
                    },
                    {
                        text: '关闭右侧',
                        iconCls: 'extIcon extCloseOther',
                        handler: function () {
                            FastExt.DesktopLayout.closeOtherToolbarMenuButton(btn, "right");
                        },
                    },
                    '-',
                    {
                        text: '添加快捷方式',
                        iconCls: 'extIcon extLinks editColor',
                        hidden: desktopMenuButtonExist,
                        handler: function () {
                            FastExt.DesktopLayout.addDesktopButton(btn.menuData);
                        },
                    },
                    {
                        text: '移除快捷方式',
                        iconCls: 'extIcon extLinks redColor',
                        hidden: !desktopMenuButtonExist,
                        handler: function () {
                            FastExt.DesktopLayout.removeDesktopButton(btn.menuData);
                        },
                    },
                    '-',
                    {
                        text: '固定到工具栏',
                        iconCls: 'extIcon extTags editColor',
                        hidden: desktopFixedMenuButtonExist,
                        handler: function () {
                            FastExt.DesktopLayout.addDesktopToolbarFixedButton(btn.menuData);
                        },
                    },
                    {
                        text: '取消工具栏固定',
                        iconCls: 'extIcon extTags redColor',
                        hidden: !desktopFixedMenuButtonExist,
                        handler: function () {
                            FastExt.DesktopLayout.removeDesktopToolbarFixedButton(btn.menuData);
                        },
                    },
                ],
                listeners: {
                    hide: function () {
                        this.delayClose(100);
                    },
                }
            });
            menu.showBy(btn);
        };
        DesktopEvent.onFastDesktopItemClick = function (e) {
            e.preventDefault();
            e.stopPropagation();
            var jqueryObj = $(this);
            var dataMenuId = jqueryObj.attr("data-menu-id");
            FastExt.DesktopLayout.showWindowMenu(jqueryObj[0], FastExt.DesktopLayout.getMenu(dataMenuId));
        };
        DesktopEvent.onFastMenuItemContextMenu = function (treeView, menuData, event) {
            var parentMenu = treeView.up("menu");
            if (parentMenu) {
                parentMenu.holdShow = true;
            }
            var isLeaf = menuData.leaf;
            var readMenu = FastExt.DesktopLayout.getMenu(menuData.id);
            if (!isLeaf) {
                readMenu.desktop_type = "folder";
            }
            var desktopMenuButtonExist = FastExt.DesktopLayout.checkDesktopButton(readMenu);
            var desktopFixedMenuButtonExist = FastExt.DesktopLayout.checkDesktopToolbarFixedButton(readMenu);
            var inFolder = FastExt.DesktopLayout.checkMenuInFolder(readMenu);
            var locked = FastExt.DesktopLayout.checkMenuLocked(menuData);
            var menu = Ext.create('Ext.menu.Menu', {
                items: [
                    {
                        text: '打开功能',
                        iconCls: 'extIcon extMouseClick searchColor',
                        handler: function () {
                            FastExt.DesktopLayout.showWindowMenu(this, readMenu);
                        },
                    },
                    '-',
                    {
                        text: '添加快捷方式',
                        iconCls: 'extIcon extLinks editColor',
                        hidden: locked || desktopMenuButtonExist,
                        handler: function () {
                            FastExt.DesktopLayout.addDesktopButton(readMenu);
                        },
                    },
                    {
                        text: '移除快捷方式',
                        iconCls: 'extIcon extLinks redColor',
                        hidden: locked || inFolder || !desktopMenuButtonExist,
                        handler: function () {
                            FastExt.DesktopLayout.removeDesktopButton(readMenu);
                        },
                    },
                    {
                        text: '移出文件夹',
                        iconCls: 'extIcon extFolder redColor',
                        hidden: locked || !inFolder,
                        handler: function () {
                            FastExt.DesktopLayout.outDesktopMenuFolder(readMenu);
                        },
                    },
                    '-',
                    {
                        text: '固定到工具栏',
                        iconCls: 'extIcon extTags editColor',
                        hidden: locked || desktopFixedMenuButtonExist,
                        handler: function () {
                            FastExt.DesktopLayout.addDesktopToolbarFixedButton(readMenu);
                        },
                    },
                    {
                        text: '取消工具栏固定',
                        iconCls: 'extIcon extTags redColor',
                        hidden: locked || !desktopFixedMenuButtonExist,
                        handler: function () {
                            FastExt.DesktopLayout.removeDesktopToolbarFixedButton(readMenu);
                        },
                    },
                ],
                listeners: {
                    hide: function () {
                        if (parentMenu) {
                            parentMenu.holdShow = false;
                        }
                        this.delayClose(100);
                    },
                }
            });
            FastExt.Menu.refreshItem(menu);
            menu.showAt(event.getXY());
        };
        DesktopEvent.onFastDesktopContextMenu = function (event) {
            var menu = Ext.create('Ext.menu.Menu', {
                items: [
                    {
                        text: '新建文件夹',
                        iconCls: 'extIcon extFolder color38',
                        handler: function () {
                            FastExt.Dialog.showPrompt("新建文件夹", "请输入文件夹名称", function (btn, text) {
                                if (btn === "ok") {
                                    FastExt.DesktopLayout.desktopPanel.addDesktopItem(FastExt.DesktopLayout.buildFolderMenu(text), FastExt.DesktopLayout.checkMuuriGridContainer(event.clientX, event.clientY));
                                }
                            });
                        },
                    },
                    '-',
                    {
                        text: '设置桌面背景',
                        iconCls: 'extIcon extImages greenColor',
                        handler: function () {
                            FastExt.DesktopLayout.showDesktopBackgroundImages(this);
                        },
                    },
                    {
                        text: '自动整理桌面',
                        iconCls: 'extIcon extTable color9',
                        handler: function () {
                            FastExt.DesktopLayout.desktopPanel.reorderDesktop();
                            FastExt.DesktopLayout.recordMenu();
                            FastExt.Dialog.toast("整理成功！");
                        },
                    },
                    '-',
                    {
                        text: '服务器CPU监控',
                        iconCls: 'extIcon extCPU color129',
                        handler: function () {
                            FastExt.IndexLayout.showMonitorChart("服务器CPU监控【实时监控中】", 0);
                        },
                    },
                    {
                        text: '服务器内存监控',
                        iconCls: 'extIcon extMemory color61',
                        handler: function () {
                            FastExt.IndexLayout.showMonitorChart("服务器内存监控【实时监控中】", 1);
                        },
                    },
                    {
                        text: '系统JVM监控',
                        iconCls: 'extIcon extJVM color144',
                        handler: function () {
                            FastExt.IndexLayout.showMonitorChart("系统JVM监控【实时监控中】", 2);
                        },
                    },
                    {
                        text: '服务器更多监控',
                        iconCls: 'extIcon extMonitor color25',
                        handler: function () {
                            FastExt.DesktopLayout.showWindowPanel(this, "系统监控信息", FastExt.IndexLayout.getSystemMonitorPanel(false));
                        },
                    },
                    '-',
                    {
                        text: '系统全局设置',
                        iconCls: 'extIcon extSet color12',
                        handler: function () {
                            FastExt.DesktopLayout.showWindowPanel(this, "系统全局设置", FastExt.IndexLayout.getSystemConfigPanel(false));
                        },
                    },
                ],
                listeners: {
                    hide: function () {
                        this.delayClose(100);
                    },
                }
            });
            menu.showAt(event.getXY());
        };
        DesktopEvent.onFastDesktopItemContextMenu = function (event) {
            event.stopPropagation();
            var jqueryObj = $(this);
            var dataMenuId = jqueryObj.attr("data-menu-id");
            var menuData = FastExt.DesktopLayout.getMenu(dataMenuId);
            var inFolder = FastExt.DesktopLayout.checkMenuInFolder(menuData);
            var desktopMenuButtonExist = FastExt.DesktopLayout.checkDesktopButton(menuData);
            var desktopFixedMenuButtonExist = FastExt.DesktopLayout.checkDesktopToolbarFixedButton(menuData);
            var userMenu = FastExt.DesktopLayout.checkMenuByUserFolder(menuData);
            var locked = FastExt.DesktopLayout.checkMenuLocked(menuData);
            var menu = Ext.create('Ext.menu.Menu', {
                items: [
                    {
                        text: '打开功能',
                        iconCls: 'extIcon extMouseClick searchColor',
                        handler: function () {
                            FastExt.DesktopLayout.showWindowMenu(jqueryObj[0], menuData);
                        },
                    },
                    {
                        text: '重命名文件夹',
                        iconCls: 'extIcon extEdit color68',
                        hidden: !userMenu,
                        handler: function () {
                            FastExt.DesktopLayout.showEditFolderName(menuData);
                        },
                    },
                    '-',
                    {
                        text: '添加快捷方式',
                        iconCls: 'extIcon extLinks editColor',
                        hidden: locked || desktopMenuButtonExist,
                        handler: function () {
                            FastExt.DesktopLayout.addDesktopButton(menuData);
                        },
                    },
                    {
                        text: '移除快捷方式',
                        iconCls: 'extIcon extLinks redColor',
                        hidden: locked || inFolder || !desktopMenuButtonExist,
                        handler: function () {
                            FastExt.DesktopLayout.removeDesktopButton(menuData);
                        },
                    },
                    {
                        text: '移出文件夹',
                        iconCls: 'extIcon extFolder redColor',
                        hidden: locked || !inFolder,
                        handler: function () {
                            FastExt.DesktopLayout.outDesktopMenuFolder(menuData);
                        },
                    },
                    '-',
                    {
                        text: '固定到工具栏',
                        iconCls: 'extIcon extTags editColor',
                        hidden: locked || desktopFixedMenuButtonExist,
                        handler: function () {
                            FastExt.DesktopLayout.addDesktopToolbarFixedButton(menuData);
                        },
                    },
                    {
                        text: '取消工具栏固定',
                        iconCls: 'extIcon extTags redColor',
                        hidden: locked || !desktopFixedMenuButtonExist,
                        handler: function () {
                            FastExt.DesktopLayout.removeDesktopToolbarFixedButton(menuData);
                        },
                    },
                ],
                listeners: {
                    hide: function () {
                        this.delayClose(100);
                    },
                }
            });
            FastExt.Menu.refreshItem(menu);
            menu.showAt(event.clientX, event.clientY);
            return false;
        };
        DesktopEvent.onFastMuuriGridSend = function (data) {
            FastExt.DesktopLayout.switchMuuriGrid(data.toGrid, data.item, false);
            FastExt.DesktopLayout.updateFolderGridMenu(data.toGrid);
            FastExt.DesktopLayout.updateFolderGridMenu(data.fromGrid);
        };
        DesktopEvent.onFastMuuriGridDragInit = function () {
            FastExt.DesktopLayout.showDeleteFolder();
            FastExt.DesktopLayout.refreshMuuriGridContainers();
        };
        DesktopEvent.onFastMuuriGridDragSort = function () {
            var muuriGrid = [];
            for (var i = 0; i < FastExt.DesktopLayout.muuriGridContainers.length; i++) {
                var container = FastExt.DesktopLayout.muuriGridContainers[i];
                if (container.folderLocked) {
                    continue;
                }
                muuriGrid.push(FastExt.MuuriTool.getMuuriGrid(container));
            }
            return muuriGrid;
        };
        DesktopEvent.onFastMuuriGridDragStartPredicate = function (item, event) {
            var menu = FastExt.DesktopLayout.getMenuByMuuriGridItem(item);
            if (menu && FastExt.Base.toBool(menu.desktop_locked, false)) {
                return false;
            }
            return Muuri.ItemDrag.defaultStartPredicate(item, event, {
                distance: 10,
                delay: 50
            });
        };
        DesktopEvent.onFastMuuriGridDragSortPredicate = function (item, event) {
            var inContainer = FastExt.DesktopLayout.checkMuuriGridContainer(event.clientX, event.clientY);
            if (inContainer) {
                var muuriGrid = FastExt.MuuriTool.getMuuriGrid(inContainer);
                var currGrid = item.getGrid();
                if (muuriGrid && currGrid && currGrid._id !== muuriGrid._id) {
                    return {
                        grid: muuriGrid,
                        index: -1,
                        action: "move",
                    };
                }
            }
            var result = Muuri.ItemDrag.defaultSortPredicate(item, {
                threshold: 50,
                action: 'move',
                migrateAction: 'move'
            });
            if (result) {
                var menu = FastExt.DesktopLayout.getMenuByMuuriGridItem(result.grid.getItem(result.index));
                if (menu && FastExt.Base.toBool(menu.desktop_locked, false)) {
                    return false;
                }
            }
            return result;
        };
        DesktopEvent.onFastMuuriGridDragEnd = function (items) {
            FastExt.DesktopEvent.onFastMuuriGridChange(items);
            FastExt.DesktopLayout.hideDeleteFolder();
        };
        DesktopEvent.onFastMuuriGridChange = function (items) {
            var allItems = [];
            if (Ext.isArray(items)) {
                allItems = items;
            }
            else {
                allItems.push(items);
            }
            FastExt.DesktopLayout.refreshMuuriGridMenuIndex();
            for (var i = 0; i < allItems.length; i++) {
                var item = allItems[i];
                var grid = item.getGrid();
                if (grid && grid.containerId) {
                    FastExt.DesktopLayout.switchMuuriGrid(grid, item, false);
                    FastExt.DesktopLayout.updateFolderGridMenu(grid);
                }
            }
            FastExt.DesktopLayout.recordMenu();
        };
        DesktopEvent.onFastToolbarStartDrag = function (obj, container, dragCmp, idx, eOpts) {
            var bottomBar = FastExt.DesktopLayout.desktopPanel.down("#DesktopToolBar");
            if (bottomBar) {
                var desktopFixedMenuButton = FastExt.Base.toBool(dragCmp.desktopFixedMenuButton, false);
                var desktopMenuButtons = bottomBar.query("[desktopMenuButton=true]");
                for (var i = 0; i < desktopMenuButtons.length; i++) {
                    desktopMenuButtons[i].reorderable = !desktopFixedMenuButton;
                }
                var desktopFixedMenuButtons = bottomBar.query("[desktopFixedMenuButton=true]");
                for (var i = 0; i < desktopFixedMenuButtons.length; i++) {
                    desktopFixedMenuButtons[i].reorderable = desktopFixedMenuButton;
                }
            }
        };
        DesktopEvent.onFastToolbarDrop = function () {
            var bottomBar = FastExt.DesktopLayout.desktopPanel.down("#DesktopToolBar");
            if (bottomBar) {
                var desktopMenuButtons = bottomBar.query("[desktopMenuButton=true]");
                for (var i = 0; i < desktopMenuButtons.length; i++) {
                    desktopMenuButtons[i].reorderable = true;
                }
                var desktopFixedMenuButtons = bottomBar.query("[desktopFixedMenuButton=true]");
                for (var i = 0; i < desktopFixedMenuButtons.length; i++) {
                    desktopFixedMenuButtons[i].reorderable = true;
                }
            }
            FastExt.DesktopLayout.recordMenu();
        };
        DesktopEvent.onFastDesktopImageClick = function () {
            if (FastExt.DesktopLayout.lastSelectDesktopImageId) {
                var lastImage = Ext.getCmp(FastExt.DesktopLayout.lastSelectDesktopImageId);
                if (lastImage) {
                    lastImage.setStyle("border", "0");
                }
            }
            var img = this;
            img.setStyle("border", "2px solid red");
            FastExt.DesktopLayout.lastSelectDesktopImageId = img.getId();
            FastExt.DesktopLayout.desktopContainer.setStyle({
                backgroundImage: "url('" + img.getSrc() + "')",
                backgroundSize: "cover",
            });
            FastExt.System.ConfigHandler.setDesktopBgImage(img.getSrc());
            FastExt.Server.saveSystemConfig("desktop-bg-image", img.getSrc());
        };
        DesktopEvent.onFastDesktopFolderContextMenu = function (event) {
            var menu = Ext.create('Ext.menu.Menu', {
                items: [
                    {
                        text: '新建文件夹',
                        iconCls: 'extIcon extFolder color38',
                        handler: function () {
                            FastExt.Dialog.showPrompt("系统提醒", "请输入文件夹名称", function (btn, text) {
                                if (btn === "ok") {
                                    FastExt.DesktopLayout.desktopPanel.addDesktopItem(FastExt.DesktopLayout.buildFolderMenu(text), FastExt.DesktopLayout.checkMuuriGridContainer(event.clientX, event.clientY));
                                }
                            });
                        },
                    },
                ],
                listeners: {
                    hide: function () {
                        this.delayClose(100);
                    },
                }
            });
            menu.showAt(event.getXY());
        };
        DesktopEvent.onFastWindowMenuClick = function (obj) {
            if (FastExt.DesktopLayout.disabledMenuPathClick) {
                return;
            }
            FastExt.DesktopLayout.showFolderByMenuId(obj, $(obj).attr("data-menu-id"));
        };
        return DesktopEvent;
    }());
    FastExt.DesktopEvent = DesktopEvent;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var NormalLayout = (function () {
        function NormalLayout() {
        }
        NormalLayout.__onLoaded = function () {
            NormalLayout.TabContainer = new TabContainerLayout();
            NormalLayout.TreeMenuContainer = new TreeMenuLayout();
            NormalLayout.HeadBarContainer = new HeadBarLayout();
            NormalLayout.HistoryHandler = new HistoryMenuHandler();
            NormalLayout.TreeMenuEvent = new TreeMenuEvent();
        };
        NormalLayout.showSystemLayout = function () {
            FastExt.Windows.removeLoading();
            var container = FastExt.SystemLayout.getBodyContainer();
            container.removeAll();
            var menuPanel = this.TreeMenuContainer.createLayoutPanel();
            menuPanel.region = "west";
            var headPanel = this.HeadBarContainer.createLayoutPanel();
            headPanel.region = "north";
            var contentPanel = this.TabContainer.createLayoutPanel();
            contentPanel.region = "center";
            var rightContainer = Ext.create('Ext.panel.Panel', {
                layout: 'border',
                region: 'center',
                border: 0,
                userCls: "fast-ext-content-container",
                items: [headPanel, contentPanel],
            });
            var headerTip = Ext.create('Ext.container.Container', {
                border: 0,
                padding: '0 0 0 0',
                flex: 1,
                cls: "fast-progress-container",
                html: "<div class=\"fast-progress\" id=\"progress\"></div>"
            });
            var containerPanel = Ext.create('Ext.panel.Panel', {
                layout: 'border',
                border: 0,
                bodyStyle: {
                    background: "#f0f0f0",
                },
                anchor: '100% 100%',
                flex: 1,
                items: [menuPanel, rightContainer],
            });
            var realContainer = Ext.create('Ext.panel.Panel', {
                layout: 'absolute',
                border: 0,
                items: [containerPanel, headerTip],
                listeners: {
                    render: function (obj) {
                        FastExt.Dialog.hideWait();
                        FastExt.ProgressBaseLineLayout.getProgressLine(FastExt.Color.toColor(FastExt.System.ConfigHandler.getFrontColor())).animate(1);
                        FastExt.Listeners.getFire().onSystemReady();
                    },
                }
            });
            container.add(realContainer);
        };
        return NormalLayout;
    }());
    FastExt.NormalLayout = NormalLayout;
    var TabContainerLayout = (function () {
        function TabContainerLayout() {
            this._timeoutDestroyDuration = 1000 * 60 * 3;
        }
        TabContainerLayout.prototype.createLayoutPanel = function () {
            var _this = this;
            this._container = Ext.create('Ext.container.Container', {
                layout: 'card',
                userCls: TabContainerLayout.FAST_CONTAINER_CLS,
                margin: '0 5 0 0',
                listeners: {
                    render: function () {
                        FastExt.NormalLayout.HistoryHandler.restoreHistory();
                        FastExt.NormalLayout.HeadBarContainer.refreshButtons();
                        var menuIdFromLocation = FastExt.Windows.getMenuIdFromLocation();
                        if (!_this.showByMenuId(menuIdFromLocation)) {
                            _this.showIndex();
                        }
                        _this.startWatcher();
                    },
                }
            });
            return this._container;
        };
        TabContainerLayout.prototype.buildMenuContentPanel = function (menu) {
            if (!menu) {
                return undefined;
            }
            return Ext.create('Ext.panel.Panel', {
                layout: 'fit',
                itemId: menu.id,
                border: 0,
                menuContainer: true,
                methodInvoked: false,
                notifyEntityActive: function () {
                    var entityOwner = this.down("[entityList=true]");
                    if (entityOwner) {
                        if (entityOwner.onTabActivate) {
                            entityOwner.onTabActivate(this);
                        }
                        if (entityOwner.hasListener("aftertabactive")) {
                            entityOwner.fireEvent("aftertabactive");
                        }
                    }
                },
                notifyEntityDeActive: function () {
                    try {
                        var entityOwner = this.down("[entityList=true]");
                        if (entityOwner) {
                            if (entityOwner.onTabDeactivate) {
                                entityOwner.onTabDeactivate(this);
                            }
                            if (entityOwner.hasListener("aftertabdeactive")) {
                                entityOwner.fireEvent("aftertabdeactive");
                            }
                        }
                    }
                    catch (e) {
                        console.error(e);
                    }
                },
                invokeMenuPanel: function () {
                    var _this = this;
                    var me = this;
                    if (!this.methodInvoked || FastExt.System.InitHandler.isSilenceGlobalSaving()) {
                        me.setLoading("加载数据中，请稍后……");
                        var delay = FastExt.System.InitHandler.isSilenceGlobalSaving() ? 0 : 300;
                        FastExt.Eval.asyncMethod(menu.method, delay).then(function (obj) {
                            try {
                                me.setLoading(false);
                                if (!obj) {
                                    if (FastExt.System.InitHandler.isSilenceGlobalSaving()) {
                                        FastExt.System.InitHandler.doNextSilenceMenu();
                                        FastExt.NormalLayout.TabContainer.close(menu);
                                    }
                                    return;
                                }
                                _this.methodInvoked = true;
                                var entityOwner = obj.down("[entityList=true]");
                                if (entityOwner) {
                                    entityOwner.where = FastExt.Json.mergeJson(menu.where, entityOwner.where);
                                    entityOwner.code = $.md5(menu.id);
                                    entityOwner.buildCodeText = menu.title;
                                    entityOwner.tabMenu = menu;
                                }
                                obj.setStyle("background", "#ffffff");
                                me.add(obj);
                            }
                            catch (e) {
                                console.error(e);
                            }
                        });
                    }
                    else {
                        this.notifyEntityActive();
                    }
                },
                listeners: {
                    activate: function (obj) {
                        FastExt.SystemLayout.changeMenuTheme(menu.id, function () {
                            obj.invokeMenuPanel();
                        });
                    },
                    deactivate: function (obj) {
                        if (!obj || obj.destroyed || obj.destroying) {
                            return;
                        }
                        if (!FastExt.System.InitHandler.isSilenceGlobalSaving()) {
                            this.notifyEntityDeActive();
                        }
                    },
                }
            });
        };
        TabContainerLayout.prototype.startWatcher = function () {
            var _this = this;
            var watcher = function () {
                _this.destroyTimeoutItem();
                _this.startWatcher();
            };
            setTimeout(watcher, 5 * 1000);
        };
        TabContainerLayout.prototype.showIndex = function () {
            var itemId = TabContainerLayout.FAST_TAB_INDEX_ITEM_ID;
            if (!FastExt.NormalLayout.TabContainer.exist(itemId)) {
                var welcomePanel = FastExt.IndexLayout.getWelcomePanel();
                welcomePanel.itemId = itemId;
                FastExt.NormalLayout.TabContainer.add(welcomePanel);
            }
            FastExt.NormalLayout.TabContainer.active(itemId);
        };
        TabContainerLayout.prototype.exist = function (menuId) {
            return this._container.down("#" + menuId);
        };
        TabContainerLayout.prototype.active = function (menuId) {
            var menuObj = FastExt.System.MenuHandler.getMenu(menuId);
            var contentPanel = this._container.getLayout().setActiveItem(menuId);
            contentPanel.lastActiveTime = new Date().getTime();
            if (!FastExt.System.InitHandler.isSilenceGlobalSaving()) {
                FastExt.Windows.pushLocationHistory(menuObj);
            }
            FastExt.NormalLayout.HeadBarContainer.refreshButtons();
            FastExt.NormalLayout.HeadBarContainer.addSystemMenuButton(menuObj, true);
            FastExt.NormalLayout.HeadBarContainer.setActiveSystemMenuButton(menuId, true);
            FastExt.NormalLayout.TreeMenuContainer.selectByMenuId(menuId);
            FastExt.NormalLayout.HistoryHandler.addHistory(menuObj);
        };
        TabContainerLayout.prototype.add = function (cmp) {
            this._container.add(cmp);
        };
        TabContainerLayout.prototype.destroy = function (menuId) {
            this.destroyByCmb(this._container.down("#" + menuId));
        };
        TabContainerLayout.prototype.destroyByCmb = function (cmb) {
            if (cmb) {
                this._container.remove(cmb);
            }
        };
        TabContainerLayout.prototype.showByMenuId = function (menuId) {
            if (Ext.isEmpty(menuId)) {
                return false;
            }
            return this.show(FastExt.System.MenuHandler.getMenu(menuId));
        };
        TabContainerLayout.prototype.showByCmb = function (cmb, menu) {
            if (!menu) {
                return;
            }
            if (!this.exist(menu.id)) {
                this.add(cmb);
            }
            this.active(menu.id);
        };
        TabContainerLayout.prototype.show = function (menu) {
            if (!menu) {
                return false;
            }
            if (!this.exist(menu.id)) {
                this.add(this.buildMenuContentPanel(menu));
            }
            this.active(menu.id);
            return true;
        };
        TabContainerLayout.prototype.reload = function (menuId) {
            Ext.suspendLayouts();
            try {
                var exitMenuPanel = this._container.down("#" + menuId);
                if (exitMenuPanel) {
                    this._container.remove(exitMenuPanel);
                }
                if (menuId === TabContainerLayout.FAST_TAB_INDEX_ITEM_ID) {
                    this.showIndex();
                    return;
                }
                var menuContentPanel = this.buildMenuContentPanel(FastExt.System.MenuHandler.getMenu(menuId));
                if (!menuContentPanel) {
                    return;
                }
                this.add(menuContentPanel);
                this.active(menuId);
            }
            finally {
                Ext.resumeLayouts(true);
            }
        };
        TabContainerLayout.prototype.copyUrl = function (menuId) {
            var menu = FastExt.System.MenuHandler.getMenu(menuId);
            if (menu) {
                FastExt.Base.copyToBoard(FastExt.Windows.getBaseUrl() + "#/" + menu.text + "/" + menuId);
                FastExt.Dialog.toast("复制成功！");
            }
        };
        TabContainerLayout.prototype.copy = function (menuId) {
            var menu = FastExt.System.MenuHandler.cloneMenu(menuId);
            if (menu) {
                this.show(menu);
            }
        };
        TabContainerLayout.prototype.closeByMenuId = function (menuId) {
            this.close(FastExt.System.MenuHandler.getMenu(menuId));
        };
        TabContainerLayout.prototype.close = function (menu) {
            if (!menu) {
                return;
            }
            Ext.suspendLayouts();
            try {
                this.destroy(menu.id);
                FastExt.NormalLayout.HeadBarContainer.closeSystemMenuButton(menu.id);
                FastExt.NormalLayout.HeadBarContainer.doActiveSystemMenuButton();
            }
            finally {
                Ext.resumeLayouts(true);
            }
        };
        TabContainerLayout.prototype.closeAll = function () {
            FastExt.NormalLayout.HeadBarContainer.closeAllSystemMenuButton();
            FastExt.NormalLayout.HeadBarContainer.clearMenuHistory();
            this.showIndex();
        };
        TabContainerLayout.prototype.hideByMenuId = function (menuId) {
            this.hide(FastExt.System.MenuHandler.getMenu(menuId));
        };
        TabContainerLayout.prototype.hide = function (menu) {
            FastExt.NormalLayout.HeadBarContainer.closeSystemMenuButton(menu.id);
            FastExt.NormalLayout.HeadBarContainer.doActiveSystemMenuButton();
        };
        TabContainerLayout.prototype.getActiveCmp = function () {
            return this._container.getLayout().getActiveItem();
        };
        TabContainerLayout.prototype.getActiveHistory = function () {
            var activeCmp = this.getActiveCmp();
            if (activeCmp) {
                var activeMenu = FastExt.System.MenuHandler.getMenu(activeCmp.itemId);
                if (activeMenu) {
                    return activeMenu;
                }
            }
            return undefined;
        };
        TabContainerLayout.prototype.destroyTimeoutItem = function () {
            var layoutItems = this._container.getLayout().getLayoutItems();
            for (var _i = 0, layoutItems_1 = layoutItems; _i < layoutItems_1.length; _i++) {
                var layoutItem = layoutItems_1[_i];
                if (this.getActiveCmp() === layoutItem) {
                    layoutItem.lastActiveTime = new Date().getTime();
                    continue;
                }
                if (new Date().getTime() - layoutItem.lastActiveTime > this._timeoutDestroyDuration) {
                    FastExt.Server.setSilence(true);
                    FastExt.NormalLayout.HeadBarContainer.graySystemMenuButton(layoutItem.itemId);
                    this.destroyByCmb(layoutItem);
                    FastExt.Server.setSilence(false);
                }
            }
        };
        TabContainerLayout.FAST_CONTAINER_CLS = "fast-system-tab-container";
        TabContainerLayout.FAST_TAB_INDEX_ITEM_ID = "TabIndexPanel";
        return TabContainerLayout;
    }());
    var TreeMenuLayout = (function () {
        function TreeMenuLayout() {
            this._menuShowIterator = 1;
            this._renderHeadPanel = true;
            this._collapseMenuPanelWidth = 55;
            this._expendMenuPanelMinWidth = 128;
            this._lastMenuPanelWidth = undefined;
            this._toggleMenuPanelAnimDuration = 300;
            this._toggleMenPanelAnim = false;
            this._muteResizeEvent = false;
            this._maxExpendRootMenuCount = 1;
            this._mini = false;
            this._floating = false;
            this._id = FastExt.Base.buildOnlyCode("TP");
            this._menuElementHandler = new TreeMenuElementHandler(this._id);
            this._lastMenuPanelWidth = parseInt((document.body.clientWidth * 0.2).toFixed(0));
            window["TreeObj" + this._id] = this;
        }
        TreeMenuLayout.getTreeMenuObject = function (id) {
            return window["TreeObj" + id];
        };
        TreeMenuLayout.destroyTreeMenuObject = function (id) {
            delete window["TreeObj" + id];
        };
        TreeMenuLayout.prototype.createLayoutPanel = function () {
            var me = this;
            if (this._renderHeadPanel) {
                me._headPanel = Ext.create('Ext.panel.Panel', {
                    height: 55,
                    padding: '0 0 0 0',
                    region: 'north',
                    border: 0,
                    layout: "fit",
                    power: false,
                    userCls: TreeMenuLayout.FAST_CONTAINER_HEAD_CLS,
                    bodyCls: TreeMenuLayout.FAST_CONTAINER_HEAD_CLS,
                    html: this.buildHeadHtml(false, false),
                });
            }
            else {
                me._headPanel = undefined;
            }
            me._treePanel = Ext.create('Ext.panel.Panel', {
                border: 0,
                region: 'center',
                scrollable: "y",
                power: false,
                userCls: TreeMenuLayout.FAST_PANEL_CLS,
                bodyCls: TreeMenuLayout.FAST_PANEL_CLS,
                html: this.buildMenuHtml(false),
            });
            me._treeContainer = Ext.create('Ext.panel.Panel', {
                layout: 'border',
                border: 0,
                width: this._lastMenuPanelWidth,
                minWidth: this._collapseMenuPanelWidth,
                maxWidth: 500,
                subtitle: '左侧菜单',
                split: true,
                power: false,
                constrain: true,
                floating: this._floating,
                userCls: TreeMenuLayout.FAST_CONTAINER_CLS,
                items: [this._headPanel, this._treePanel],
                listeners: {
                    resize: function (obj, width) {
                        if (me._muteResizeEvent) {
                            return;
                        }
                        if (width <= me._expendMenuPanelMinWidth) {
                            me.doCollapseMenuPanel();
                        }
                        else {
                            me.doExpandMenuPanel();
                        }
                    }
                }
            });
            return me._treeContainer;
        };
        TreeMenuLayout.prototype.buildHeadHtml = function (mini, singleLine) {
            var systemTlColor = FastExt.System.ConfigHandler.getFrontColor();
            var systemLogo = FastExt.System.ConfigHandler.getSystemLogo();
            var systemTitle = FastExt.System.ConfigHandler.getSystemTitle();
            if (mini) {
                return "<div class='fast-system-head-info-container fast-system-head-info-container-min'>" +
                    "<img alt='系统LOGO' class='fast-system-head-logo fast-system-head-logo-mini' src='" + FastExt.Base.formatUrl(systemLogo) + "' />" +
                    "</div>";
            }
            var clsValue = 'fast-system-head-info-container';
            if (singleLine) {
                clsValue += " fast-system-head-title-single-line";
            }
            return "<div class='" + clsValue + "'>" +
                "<img alt='系统LOGO' class='fast-system-head-logo' src='" + FastExt.Base.formatUrl(systemLogo) + "' />" +
                "&nbsp;&nbsp;<div class='fast-system-head-title' style='color: " + systemTlColor + ";' >" + systemTitle + "</div>" +
                "</div>";
        };
        TreeMenuLayout.prototype.buildMenuHtml = function (mini) {
            return this._menuElementHandler.buildMenuHtml(mini);
        };
        TreeMenuLayout.prototype.isRenderHeadPanel = function () {
            return this._renderHeadPanel;
        };
        TreeMenuLayout.prototype.setRenderHeadPanel = function (value) {
            this._renderHeadPanel = value;
        };
        TreeMenuLayout.prototype.isMini = function () {
            return this._mini;
        };
        TreeMenuLayout.prototype.isFloating = function () {
            return this._floating;
        };
        TreeMenuLayout.prototype.isExpendedMenuPanel = function () {
            return !this._mini;
        };
        TreeMenuLayout.prototype.isCollapsedMenuPanel = function () {
            return !this.isExpendedMenuPanel();
        };
        TreeMenuLayout.prototype.toggleMenuPanel = function () {
            var _this = this;
            this._toggleMenPanelAnim = true;
            if (this.isExpendedMenuPanel()) {
                if (this._headPanel) {
                    this._headPanel.update(this.buildHeadHtml(false, true));
                }
                this._lastMenuPanelWidth = this._treeContainer.getWidth();
                FastExt.Animate.startValueAnimate("toggleMenuPanel", {
                    from: this._lastMenuPanelWidth,
                    to: this._collapseMenuPanelWidth,
                    duration: this._toggleMenuPanelAnimDuration,
                    update: function (value) {
                        _this._treeContainer.setWidth(value);
                    },
                    begin: function () {
                        _this.updateHeadHtml(false, true);
                        _this._muteResizeEvent = true;
                    },
                    complete: function () {
                        _this.doCollapseMenuPanel();
                        _this._muteResizeEvent = false;
                        _this._toggleMenPanelAnim = false;
                    }
                });
            }
            else {
                FastExt.Animate.startValueAnimate("toggleMenuPanel", {
                    from: this._collapseMenuPanelWidth,
                    to: this._lastMenuPanelWidth,
                    duration: this._toggleMenuPanelAnimDuration,
                    update: function (value) {
                        _this._treeContainer.setWidth(value);
                    },
                    begin: function () {
                        _this.updateHeadHtml(false, true);
                        _this.updateMenuHtml(false);
                        _this._muteResizeEvent = true;
                    },
                    complete: function () {
                        _this.doExpandMenuPanel();
                        _this._muteResizeEvent = false;
                        _this._toggleMenPanelAnim = false;
                    }
                });
            }
        };
        TreeMenuLayout.prototype.doCollapseMenuPanel = function () {
            if (this._treeContainer) {
                this._muteResizeEvent = true;
                this._treeContainer.setWidth(this._collapseMenuPanelWidth);
                this._muteResizeEvent = false;
            }
            if (this.isCollapsedMenuPanel()) {
                return;
            }
            if (this._headPanel) {
                this._headPanel.update(this.buildHeadHtml(true, true));
            }
            this.updateHeadHtml(true, false);
            this.updateMenuHtml(true);
            this._mini = true;
            FastExt.NormalLayout.HeadBarContainer.refreshButtons();
        };
        TreeMenuLayout.prototype.doExpandMenuPanel = function () {
            if (this.isExpendedMenuPanel()) {
                return;
            }
            if (this._treeContainer) {
                this._muteResizeEvent = true;
                this._treeContainer.setWidth(this._lastMenuPanelWidth);
                this._muteResizeEvent = false;
            }
            this._mini = false;
            this.updateHeadHtml(false, false);
            this.updateMenuHtml(false);
            this.selectByMenuId(this._lastSelectedMenuId);
            FastExt.NormalLayout.HeadBarContainer.refreshButtons();
            this.destroyFloatTreeMenu();
        };
        TreeMenuLayout.prototype.updateHeadHtml = function (mini, singleLine) {
            if (this._headPanel) {
                this._headPanel.setHtml(this.buildHeadHtml(mini, singleLine));
            }
        };
        TreeMenuLayout.prototype.updateMenuHtml = function (mini) {
            if (this._treePanel) {
                this._treePanel.setHtml(this.buildMenuHtml(mini));
            }
        };
        TreeMenuLayout.prototype.selectByMenuId = function (menuId) {
            if (!menuId) {
                return;
            }
            if (!Ext.isEmpty(this._lastSelectedMenuId)) {
                this.setMenuSelect(this._lastSelectedMenuId, false);
            }
            this.setMenuSelect(menuId, true);
            this.expandMenu(menuId);
            this._lastSelectedMenuId = menuId;
            if (this._floatTreeMenu) {
                this._floatTreeMenu.selectByMenuId(menuId);
            }
        };
        TreeMenuLayout.prototype.setMenuSelect = function (menuId, selected) {
            var menuEL = this._menuElementHandler.getMenuEl(menuId);
            if (selected) {
                $(menuEL).addClass("fast-menu-item-container-selected");
            }
            else {
                $(menuEL).removeClass("fast-menu-item-container-selected");
            }
        };
        TreeMenuLayout.prototype.isMenuSelected = function (menuId) {
            var menuEL = this._menuElementHandler.getMenuEl(menuId);
            return $(menuEL).hasClass("fast-menu-item-container-selected");
        };
        TreeMenuLayout.prototype.isMenuDeepSelected = function (menuId) {
            if (this.isMenuSelected(menuId)) {
                return true;
            }
            var menu = FastExt.System.MenuHandler.getMenu(menuId);
            if (menu.children) {
                for (var _i = 0, _a = menu.children; _i < _a.length; _i++) {
                    var child = _a[_i];
                    var selected = this.isMenuDeepSelected(child.id);
                    if (selected) {
                        return true;
                    }
                }
            }
            return false;
        };
        TreeMenuLayout.prototype.toggleMenuChildren = function (menuId) {
            if (this.isMenuChildrenShown(menuId)) {
                this.hideMenuChildren(menuId);
            }
            else {
                this.showMenuChildren(menuId);
            }
        };
        TreeMenuLayout.prototype.isMenuChildrenShown = function (menuId) {
            var child = this._menuElementHandler.getMenuChildrenEl(menuId);
            if (!child) {
                return true;
            }
            var childCount = parseInt(child.getAttribute("data-menu-children-count"));
            if (childCount === 0) {
                return true;
            }
            var hiding = child.getAttribute("data-hiding");
            if (hiding && hiding === "true") {
                return false;
            }
            if (Ext.isEmpty(child.style.display)) {
                return false;
            }
            return child.style.display !== "none";
        };
        TreeMenuLayout.prototype.showMenuChildren = function (menuId, complete) {
            var menuEl = this._menuElementHandler.getMenuEl(menuId);
            if (menuEl) {
                menuEl.setAttribute("data-last-show-time", String(this._menuShowIterator++));
                if (this.isMenuChildrenShown(menuId)) {
                    if (complete) {
                        complete();
                    }
                    return;
                }
                var children = this._menuElementHandler.getMenuChildrenEl(menuId);
                children.removeAttribute("data-hiding");
                $(this._menuElementHandler.getMenuArrowEl(menuId)).addClass("fast-menu-arrow-open");
                $(children).slideDown(this._toggleMenuPanelAnimDuration, complete);
                this.autoCollapseMenu();
            }
            else if (complete) {
                complete();
            }
        };
        TreeMenuLayout.prototype.hideMenuChildren = function (menuId, complete) {
            if (!this.isMenuChildrenShown(menuId)) {
                return;
            }
            var children = this._menuElementHandler.getMenuChildrenEl(menuId);
            children.setAttribute("data-hiding", "true");
            $(this._menuElementHandler.getMenuArrowEl(menuId)).removeClass("fast-menu-arrow-open");
            $(children).slideUp(this._toggleMenuPanelAnimDuration, complete);
        };
        TreeMenuLayout.prototype.expandMenu = function (menuId, level, complete) {
            var _this = this;
            if (Ext.isEmpty(level)) {
                level = 1;
            }
            if (Ext.isEmpty(menuId)) {
                if (complete) {
                    complete();
                }
                return;
            }
            var menu = FastExt.System.MenuHandler.getMenu(menuId);
            if (menu) {
                if (level === 1 && menu._clone) {
                    if (complete) {
                        complete();
                    }
                    this.collapseAllMenu();
                    return;
                }
                var doShow = function () {
                    if (menu.children && menu.children.length > 0) {
                        _this.showMenuChildren(menuId, complete);
                    }
                };
                if (Ext.isEmpty(menu.parentId) || menu.parentId === "root") {
                    doShow();
                }
                else {
                    this.expandMenu(menu.parentId, level + 1, doShow);
                }
            }
            else {
                if (complete) {
                    complete();
                }
                if (level === 1) {
                    this.collapseAllMenu();
                }
            }
        };
        TreeMenuLayout.prototype.collapseMenu = function (menuId) {
            this.hideMenuChildren(menuId);
            var menu = FastExt.System.MenuHandler.getMenu(menuId);
            if (menu && menu.children) {
                for (var _i = 0, _a = menu.children; _i < _a.length; _i++) {
                    var child = _a[_i];
                    this.collapseMenu(child.id);
                }
            }
        };
        TreeMenuLayout.prototype.autoCollapseMenu = function () {
            var rootMenuId = this._menuElementHandler.getRootMenuId();
            var expandedMenu = [];
            for (var _i = 0, rootMenuId_1 = rootMenuId; _i < rootMenuId_1.length; _i++) {
                var menuId = rootMenuId_1[_i];
                if (this.isMenuChildrenShown(menuId)) {
                    var menuEl = this._menuElementHandler.getMenuEl(menuId);
                    expandedMenu.push({
                        time: parseInt(menuEl.getAttribute("data-last-show-time")),
                        id: menuId,
                        text: menuEl.innerText
                    });
                }
            }
            expandedMenu = expandedMenu.sort(function (a, b) {
                return a.time - b.time;
            });
            var jumpRootMenuId = [];
            for (var i = expandedMenu.length - this._maxExpendRootMenuCount; i < expandedMenu.length; i++) {
                jumpRootMenuId = jumpRootMenuId.concat(this._menuElementHandler.getMenuAllParentId(expandedMenu[i].id));
            }
            if (expandedMenu.length > this._maxExpendRootMenuCount) {
                for (var i = 0; i < (expandedMenu.length - this._maxExpendRootMenuCount); i++) {
                    if (jumpRootMenuId.indexOf(expandedMenu[i].id) >= 0) {
                        continue;
                    }
                    this.collapseMenu(expandedMenu[i].id);
                }
            }
        };
        TreeMenuLayout.prototype.collapseAllMenu = function () {
            for (var _i = 0, _a = this._menuElementHandler.getRootMenuId(); _i < _a.length; _i++) {
                var menuId = _a[_i];
                this.collapseMenu(menuId);
            }
        };
        TreeMenuLayout.prototype.showFloatTreeMenu = function (fromMenuId) {
            if (this._toggleMenPanelAnim) {
                return;
            }
            var lastTreePanelWidth = this._lastMenuPanelWidth;
            if (!this._floatTreeMenu) {
                this._floatTreeMenu = new TreeMenuLayout();
                this._floatTreeMenu._floating = true;
                this._floatTreeMenu._lastMenuPanelWidth = lastTreePanelWidth;
                this._floatTreeMenu.createLayoutPanel().show();
            }
            this._floatTreeMenu._treeContainer.setHeight(this._treeContainer.getHeight());
            this._floatTreeMenu._treeContainer.setWidth(lastTreePanelWidth);
            this._floatTreeMenu._treeContainer.setY(0);
            this._floatTreeMenu._treeContainer.setX(-(lastTreePanelWidth + 20));
            this._floatTreeMenu.showByFloatingMenu(fromMenuId);
        };
        TreeMenuLayout.prototype.isShownFloatTreeMenu = function () {
            if (this._floatTreeMenu) {
                return this._floatTreeMenu.isShownByFloatingMenu();
            }
            return false;
        };
        TreeMenuLayout.prototype.hideFloatTreeMenu = function () {
            if (this._floatTreeMenu) {
                this._floatTreeMenu.hideByFloatingMenu();
            }
        };
        TreeMenuLayout.prototype.showByFloatingMenu = function (fromMenuId) {
            var _this = this;
            if (this._floating) {
                FastExt.Animate.startValueAnimate("showByFloatingMenu", {
                    from: this._treeContainer.getX(),
                    to: 0,
                    duration: 300,
                    delay: fromMenuId ? 300 : 0,
                    begin: function () {
                        _this._treeContainer.setX(-_this._treeContainer.getWidth());
                    },
                    update: function (value) {
                        _this._treeContainer.setX(value);
                    },
                    complete: function () {
                        FastExt.Animate.clearAnimate(_this._treeContainer);
                        Ext.resumeLayouts(true);
                        if (fromMenuId) {
                            _this.expandMenu(fromMenuId);
                        }
                    }
                });
            }
        };
        TreeMenuLayout.prototype.isShownByFloatingMenu = function () {
            if (this._floating) {
                return this._treeContainer.getX() >= 0;
            }
        };
        TreeMenuLayout.prototype.hideByFloatingMenu = function () {
            var _this = this;
            if (this._floating) {
                FastExt.Animate.clearAnimate("hideByFloatingMenu");
                FastExt.Animate.startValueAnimate("hideByFloatingMenu", {
                    from: this._treeContainer.getX(),
                    to: -(this._treeContainer.getWidth() + 20),
                    duration: 300,
                    update: function (value) {
                        _this._treeContainer.setX(value);
                    },
                    complete: function () {
                        FastExt.Animate.clearAnimate(_this._treeContainer);
                        _this.collapseAllMenu();
                    }
                });
            }
        };
        TreeMenuLayout.prototype.destroyFloatTreeMenu = function () {
            if (this._floatTreeMenu) {
                FastExt.Animate.clearAnimate(this._floatTreeMenu._treeContainer);
                TreeMenuLayout.destroyTreeMenuObject(this._floatTreeMenu._id);
                this._floatTreeMenu._treeContainer.destroy();
                this._floatTreeMenu = null;
            }
        };
        TreeMenuLayout.FAST_CONTAINER_CLS = "fast-system-menu-container";
        TreeMenuLayout.FAST_CONTAINER_HEAD_CLS = "fast-system-menu-header-container";
        TreeMenuLayout.FAST_PANEL_CLS = "fast-system-menu-panel";
        TreeMenuLayout.FAST_POPUP_PANEL_CLS = "fast-system-menu-popup-panel";
        return TreeMenuLayout;
    }());
    var TreeMenuEvent = (function () {
        function TreeMenuEvent() {
        }
        TreeMenuEvent.prototype.onMenuItemClick = function (e, objId, htmlId) {
            var menuEl = document.getElementById("Menu-" + htmlId);
            if (!menuEl) {
                return;
            }
            var treeMenuObject = TreeMenuLayout.getTreeMenuObject(objId);
            if (!treeMenuObject) {
                return;
            }
            if (treeMenuObject.isMini()) {
                return;
            }
            var menuId = menuEl.getAttribute("data-menu-id");
            var childCount = parseInt(menuEl.getAttribute("data-menu-children-count"));
            if (childCount === 0) {
                FastExt.SystemLayout.showByMenuId(menuId);
                return;
            }
            treeMenuObject.toggleMenuChildren(menuId);
        };
        TreeMenuEvent.prototype.onMenuItemMouseEnter = function (e, objId, htmlId) {
            var treeMenuObject = TreeMenuLayout.getTreeMenuObject(objId);
            if (!treeMenuObject) {
                return;
            }
            var menuEl = document.getElementById("Menu-" + htmlId);
            if (!menuEl) {
                return;
            }
            var menuId = menuEl.getAttribute("data-menu-id");
            if (treeMenuObject.isMini()) {
                treeMenuObject.showFloatTreeMenu(menuId);
            }
        };
        TreeMenuEvent.prototype.onMenuItemMouseLeave = function (e, objId, htmlId) {
        };
        TreeMenuEvent.prototype.onMenuContainerMouseEnter = function (e, objId) {
        };
        TreeMenuEvent.prototype.onMenuContainerMouseLeave = function (e, objId) {
            var treeMenuObject = TreeMenuLayout.getTreeMenuObject(objId);
            if (treeMenuObject.isMini()) {
                return;
            }
            if (!treeMenuObject.isShownByFloatingMenu()) {
                return;
            }
            treeMenuObject.hideByFloatingMenu();
        };
        return TreeMenuEvent;
    }());
    var TreeMenuElementHandler = (function () {
        function TreeMenuElementHandler(id) {
            this._id = id;
            this._rootMenuId = [];
        }
        TreeMenuElementHandler.prototype.buildMenuHtml = function (mini) {
            var menus = FastExt.System.MenuHandler.getMenus();
            var menuHtml = [];
            for (var _i = 0, menus_3 = menus; _i < menus_3.length; _i++) {
                var menu = menus_3[_i];
                menuHtml.push(this.createMenuHtml(this._id, menu, 0, mini));
            }
            var onMenuContainerMouseLeaveFun = "FastExt.NormalLayout.TreeMenuEvent.onMenuContainerMouseLeave(event,'" + this._id + "')";
            var onMenuContainerMouseEnterFun = "FastExt.NormalLayout.TreeMenuEvent.onMenuContainerMouseEnter(event,'" + this._id + "')";
            return '<div class="fast-menu-root-container" onmouseenter="' + onMenuContainerMouseEnterFun + '" onmouseleave="' + onMenuContainerMouseLeaveFun + '" >' + menuHtml.join("") + '</div>';
        };
        TreeMenuElementHandler.prototype.createMenuHtml = function (id, menu, level, mini) {
            var childHtml = [];
            if (!mini && menu.children) {
                for (var _i = 0, _a = menu.children; _i < _a.length; _i++) {
                    var child = _a[_i];
                    childHtml.push(this.createMenuHtml(id, child, level + 1, mini));
                }
            }
            var htmlId = id + menu.id;
            var onMenuItemClickFun = "FastExt.NormalLayout.TreeMenuEvent.onMenuItemClick(event,'" + id + "','" + htmlId + "')";
            var onMenuItemMouseEnterFun = "FastExt.NormalLayout.TreeMenuEvent.onMenuItemMouseEnter(event,'" + id + "','" + htmlId + "')";
            var onMenuItemMouseLeaveFun = "FastExt.NormalLayout.TreeMenuEvent.onMenuItemMouseLeave(event,'" + id + "','" + htmlId + "')";
            var paddingLeftHtml = "";
            for (var i = 0; i < level; i++) {
                paddingLeftHtml += "<div class=\"fast-menu-icon\"></div>";
            }
            if (childHtml.length > 0 && this._rootMenuId.indexOf(menu.id) < 0) {
                this._rootMenuId.push(menu.id);
            }
            return '<div class="fast-menu-container" >' +
                '<div class="fast-menu-item-container" data-parent-menu-id="' + menu.parentId + '" data-menu-mini="' + mini + '" id="Menu-' + htmlId + '" data-menu-children-count="' + childHtml.length + '" data-menu-id="' + menu.id + '" onmouseenter="' + onMenuItemMouseEnterFun + '" onmouseleave="' + onMenuItemMouseLeaveFun + '" onmousedown="' + onMenuItemClickFun + '">' + paddingLeftHtml +
                '<img class="fast-menu-icon" id="Menu-Icon-' + htmlId + '" src="' + FastExt.Base.formatUrlVersion(menu.icon) + '" alt="菜单图标"/>' +
                (mini ? '' : ('<span class="fast-menu-text" id="Menu-Text-' + htmlId + '" >' + menu.text + '</span>')) +
                (childHtml.length > 0 ? '<span id="Menu-Arrow-' + htmlId + '" class="extIcon extRightArrow fast-menu-arrow"></span>' : '') +
                ' </div>' +
                (mini ? '' : (' <div data-menu-id="' + menu.id + '" data-menu-children-count="' + childHtml.length + '" data-root-children="' + (level <= 0 ? id : 'false') + '" class="fast-menu-child-container" id="Menu-Children-' + htmlId + '">' + childHtml.join('') + ' </div>')) +
                '</div>';
        };
        TreeMenuElementHandler.prototype.getMenuAllParentId = function (menuId) {
            var allParentId = [];
            var parentId = this.getMenuParentId(menuId);
            allParentId.push(parentId);
            if (parentId && parentId !== "root") {
                allParentId = allParentId.concat(this.getMenuAllParentId(parentId));
            }
            return allParentId;
        };
        TreeMenuElementHandler.prototype.getMenuParentId = function (menuId) {
            return document.getElementById("Menu-" + this._id + menuId).getAttribute("data-parent-menu-id");
        };
        TreeMenuElementHandler.prototype.getMenuEl = function (menuId) {
            return document.getElementById("Menu-" + this._id + menuId);
        };
        TreeMenuElementHandler.prototype.getMenuTextEl = function (menuId) {
            return document.getElementById("Menu-Text-" + this._id + menuId);
        };
        TreeMenuElementHandler.prototype.getMenuIconEl = function (menuId) {
            return document.getElementById("Menu-Icon-" + this._id + menuId);
        };
        TreeMenuElementHandler.prototype.getMenuChildrenEl = function (menuId) {
            return document.getElementById("Menu-Children-" + this._id + menuId);
        };
        TreeMenuElementHandler.prototype.getMenuArrowEl = function (menuId) {
            return document.getElementById("Menu-Arrow-" + this._id + menuId);
        };
        TreeMenuElementHandler.prototype.getRootMenuId = function () {
            return this._rootMenuId;
        };
        return TreeMenuElementHandler;
    }());
    var HeadBarLayout = (function () {
        function HeadBarLayout() {
        }
        HeadBarLayout.prototype.createLayoutPanel = function () {
            var _this = this;
            var headHeight = 55;
            this._systemHistoryButton = Ext.create("Ext.button.Button", {
                text: '',
                iconCls: 'extIcon extHistory3 grayColor',
                hidden: true,
                reorderable: false,
                power: false,
                handler: function () {
                    _this.showMenuHistory();
                }
            });
            this._systemMenuPanelButton = Ext.create("Ext.button.Button", {
                iconCls: 'extIcon extArrowLeft3 grayColor',
                itemId: "MenuButton",
                reorderable: false,
                power: false,
                handler: function () {
                    FastExt.NormalLayout.TreeMenuContainer.toggleMenuPanel();
                }
            });
            this._systemChangelogButton = Ext.create("Ext.button.Button", {
                iconCls: 'extIcon extFlag grayColor',
                reorderable: false,
                power: false,
                hidden: !FastExt.System.ChangelogHandler.existChangelog(),
                handler: function () {
                    FastExt.System.ChangelogHandler.showChangelog(this);
                }
            });
            var headItems = [
                this._systemMenuPanelButton,
                this._systemChangelogButton,
                this._systemHistoryButton,
                { xtype: 'tbseparator', reorderable: false, },
                {
                    xtype: 'button',
                    iconCls: 'extIcon extIndex fast-system-color',
                    text: '首页',
                    reorderable: false,
                    power: false,
                    itemId: TabContainerLayout.FAST_TAB_INDEX_ITEM_ID,
                    cls: HeadBarLayout.FAST_HEAD_BUTTON_CLS,
                    handler: function () {
                        FastExt.NormalLayout.TabContainer.showIndex();
                    },
                    menuId: TabContainerLayout.FAST_TAB_INDEX_ITEM_ID,
                    reloadable: true,
                    listeners: {
                        afterrender: function () {
                            var _this = this;
                            this.getEl().dom.addEventListener("contextmenu", function (e) {
                                HeadBarEvent.showContextMenu.call(_this, e);
                            });
                        },
                    }
                },
                { xtype: 'tbitem', reorderable: false, width: 0, hidden: true, itemId: "leftButtonAnchor" },
                { xtype: 'tbitem', reorderable: false, width: 0, hidden: true, itemId: "systemMenuAnchor" },
                { xtype: 'tbfill', reorderable: false },
                { xtype: 'tbitem', reorderable: false, width: 0, hidden: true, itemId: "rightButtonAnchor" },
                {
                    xtype: 'button',
                    iconCls: 'extIcon extManager2 fast-system-color',
                    text: FastExt.System.ManagerHandler.getManagerName(),
                    cls: HeadBarLayout.FAST_HEAD_BUTTON_CLS,
                    reorderable: false,
                    power: false,
                    listeners: {
                        render: HeadBarEvent.startFirstMinButton,
                        mouseout: HeadBarEvent.startMinButton,
                        mouseover: HeadBarEvent.startMaxButton,
                    },
                    handler: function () {
                        FastExt.ManagerLayout.showManagerInfo(this);
                    }
                },
                { xtype: 'tbseparator', reorderable: false, },
                {
                    xtype: 'button',
                    iconCls: 'extIcon extFullscreen fast-system-color',
                    text: "进入全屏",
                    power: false,
                    cls: HeadBarLayout.FAST_HEAD_BUTTON_CLS,
                    reorderable: false,
                    listeners: {
                        render: HeadBarEvent.startFirstMinButton,
                        mouseout: HeadBarEvent.startMinButton,
                        mouseover: HeadBarEvent.startMaxButton,
                    },
                    handler: function () {
                        if (FastExt.Windows.isFullscreen()) {
                            FastExt.Windows.outFullscreen();
                            this.setText("进入全屏");
                            this.setIconCls("extIcon extFullscreen fast-system-color");
                        }
                        else {
                            FastExt.Windows.inFullscreen();
                            this.setText("退出全屏");
                            this.setIconCls("extIcon extExitFullscreen fast-system-color");
                        }
                    }
                },
                {
                    xtype: "button",
                    iconCls: 'extIcon extMonitor fast-system-color',
                    cls: HeadBarLayout.FAST_HEAD_BUTTON_CLS,
                    reorderable: false,
                    power: false,
                    text: "服务器监控",
                    listeners: {
                        render: HeadBarEvent.startFirstMinButton,
                        mouseout: HeadBarEvent.startMinButton,
                        mouseover: HeadBarEvent.startMaxButton,
                    },
                    handler: function () {
                        FastExt.DesktopLayout.showWindowPanel(this, "系统监控信息", FastExt.IndexLayout.getSystemMonitorPanel(false));
                    },
                },
                {
                    xtype: 'button',
                    iconCls: 'extIcon extExits redColor',
                    text: "退出登录",
                    cls: HeadBarLayout.FAST_HEAD_BUTTON_CLS,
                    reorderable: false,
                    power: false,
                    listeners: {
                        render: HeadBarEvent.startFirstMinButton,
                        mouseout: HeadBarEvent.startMinButton,
                        mouseover: HeadBarEvent.startMaxButton,
                    },
                    handler: function () {
                        FastExt.LoginLayout.showLogout();
                    }
                }
            ];
            this._headContainer = Ext.create('Ext.toolbar.Toolbar', {
                height: headHeight,
                border: 0,
                power: false,
                userCls: HeadBarLayout.FAST_CONTAINER_CLS,
                bodyCls: HeadBarLayout.FAST_CONTAINER_CLS,
                overflowHandler: 'menu',
                items: headItems,
                plugins: [{
                        ptype: 'boxreorderer',
                    }],
                listeners: {
                    overflowbegin: function () {
                        return !_this.removeLastSystemMenuButton();
                    },
                    render: function (obj) {
                        FastExt.Listeners.getFire().onInitSystemHeaderItems(_this.createHeadHandler());
                        setTimeout(function () {
                            _this.checkSystemChangelog();
                        }, 1158);
                    }
                }
            });
            return this._headContainer;
        };
        HeadBarLayout.prototype.createHeadHandler = function () {
            var me = this;
            return new (function () {
                function class_2() {
                }
                class_2.prototype.addLeftButton = function (button) {
                    if (Ext.isObject(button) && button.xtype === "button") {
                        button.cls = HeadBarLayout.FAST_HEAD_BUTTON_CLS;
                    }
                    button.reorderable = false;
                    me.addHeadLeftButton(button);
                };
                class_2.prototype.addRightButton = function (button) {
                    if (Ext.isObject(button) && button.xtype === "button") {
                        button.cls = HeadBarLayout.FAST_HEAD_BUTTON_CLS;
                    }
                    button.reorderable = false;
                    me.addHeadRightButton(button);
                };
                return class_2;
            }());
        };
        HeadBarLayout.prototype.getSystemMenuButtonAnchorIndex = function () {
            var systemMenuAnchor = this._headContainer.down("#systemMenuAnchor");
            if (systemMenuAnchor) {
                return this._headContainer.items.indexOf(systemMenuAnchor) + 1;
            }
            return 1;
        };
        HeadBarLayout.prototype.getRightButtonAnchorIndex = function () {
            var rightButtonAnchor = this._headContainer.down("#rightButtonAnchor");
            if (rightButtonAnchor) {
                return this._headContainer.items.indexOf(rightButtonAnchor) + 1;
            }
            return 1;
        };
        HeadBarLayout.prototype.getLeftButtonAnchorIndex = function () {
            var rightButtonAnchor = this._headContainer.down("#leftButtonAnchor");
            if (rightButtonAnchor) {
                return this._headContainer.items.indexOf(rightButtonAnchor) + 1;
            }
            return 1;
        };
        HeadBarLayout.prototype.buildSystemMenuButton = function (menu) {
            var closerActionStr = "FastExt.NormalLayout.TabContainer.closeByMenuId('" + menu.id + "')";
            var closerHtml = "<span class='extIcon extClose fast-ext-menu-closer' ></span>";
            var menuHtml = "<div style=\"line-height: 20px;display: flex;\" >" +
                "<span>" + menu.text + "</span>&nbsp;&nbsp;" +
                FastExt.Documents.wrapOnClick(closerHtml, closerActionStr) +
                "</div> ";
            return Ext.create("Ext.button.Button", {
                help: FastExt.System.MenuHandler.getPlainIconMenu(menu, " >> "),
                helpType: FastEnum.HelpEnumType.mouse_in_out,
                helpAnchor: FastEnum.TooltipAnchorType.bottom,
                helpShowDelay: 500,
                cls: HeadBarLayout.FAST_HEAD_BUTTON_CLS,
                text: menuHtml,
                overflowText: menu.text,
                icon: FastExt.Base.formatUrlVersion(menu.icon),
                itemId: menu.id,
                menuId: menu.id,
                systemMenuButton: true,
                closeable: true,
                copyable: true,
                reloadable: true,
                listeners: {
                    afterrender: function () {
                        var _this = this;
                        this.getEl().dom.addEventListener("contextmenu", function (e) {
                            HeadBarEvent.showContextMenu.call(_this, e);
                        });
                        this.getEl().dom.addEventListener("mousedown", function (event) {
                            if (event.button === 0) {
                                FastExt.NormalLayout.TabContainer.showByMenuId(_this.menuId);
                            }
                        });
                    },
                }
            });
        };
        HeadBarLayout.prototype.checkSystemChangelog = function () {
            FastExt.System.ChangelogHandler.autoShowChangelog(this._systemChangelogButton);
        };
        HeadBarLayout.prototype.addSystemMenuButton = function (menu, active) {
            if (FastExt.System.InitHandler.isSilenceGlobalSaving()) {
                return;
            }
            if (!menu) {
                return;
            }
            var systemMenuButton = this.getSystemMenuButton(menu.id);
            if (systemMenuButton) {
                return;
            }
            var systemButton = this.buildSystemMenuButton(menu);
            if (active) {
                systemButton.systemMenuButtonChecked = true;
            }
            this._headContainer.insert(this.getSystemMenuButtonAnchorIndex(), systemButton);
        };
        HeadBarLayout.prototype.graySystemMenuButton = function (menuId) {
            var systemMenuButton = this.getSystemMenuButton(menuId);
            if (systemMenuButton) {
                systemMenuButton.addCls("fast-gray");
            }
        };
        HeadBarLayout.prototype.getSystemMenuButtons = function () {
            return this._headContainer.query("[systemMenuButton=true]");
        };
        HeadBarLayout.prototype.existSystemMenuButton = function (menuId) {
            return this._headContainer.down("#" + menuId);
        };
        HeadBarLayout.prototype.getSystemMenuButton = function (menuId) {
            return this._headContainer.down("#" + menuId);
        };
        HeadBarLayout.prototype.countSystemMenuButton = function () {
            return this.getSystemMenuButtons().length;
        };
        HeadBarLayout.prototype.closeSystemMenuButton = function (menuId) {
            var menuButton = this._headContainer.down("#" + menuId);
            if (!menuButton) {
                return;
            }
            menuButton.systemMenuButtonChecked = false;
            menuButton.systemMenuButton = false;
            FastExt.Animate.startCloseAnimateByWidth(menuButton);
        };
        HeadBarLayout.prototype.closeAllSystemMenuButton = function () {
            Ext.suspendLayouts();
            try {
                var systemMenuButtons = this.getSystemMenuButtons();
                for (var _i = 0, systemMenuButtons_1 = systemMenuButtons; _i < systemMenuButtons_1.length; _i++) {
                    var systemMenuButton = systemMenuButtons_1[_i];
                    systemMenuButton.SystemMenuButtonChecked = false;
                    FastExt.Animate.startCloseAnimateByWidth(systemMenuButton);
                    FastExt.NormalLayout.TabContainer.destroy(systemMenuButton.menuId);
                }
                FastExt.NormalLayout.TabContainer.showIndex();
            }
            finally {
                Ext.resumeLayouts(true);
            }
        };
        HeadBarLayout.prototype.closeOtherSystemMenuButton = function (menuId) {
            var systemMenuButtons = this.getSystemMenuButtons();
            for (var _i = 0, systemMenuButtons_2 = systemMenuButtons; _i < systemMenuButtons_2.length; _i++) {
                var systemMenuButton = systemMenuButtons_2[_i];
                if (menuId && systemMenuButton.menuId === menuId) {
                    continue;
                }
                systemMenuButton.SystemMenuButtonChecked = false;
                FastExt.NormalLayout.TabContainer.destroy(systemMenuButton.menuId);
                FastExt.Animate.startCloseAnimateByWidth(systemMenuButton);
            }
        };
        HeadBarLayout.prototype.setActiveSystemMenuButton = function (itemId, checked) {
            if (FastExt.System.InitHandler.isSilenceGlobalSaving()) {
                return;
            }
            var itemButton = this._headContainer.down("#" + itemId);
            if (!itemButton) {
                return;
            }
            if (checked) {
                if (this._lastCheckedItemId) {
                    this.setActiveSystemMenuButton(this._lastCheckedItemId, false);
                }
                this._lastCheckedItemId = itemId;
                itemButton.systemMenuButtonChecked = true;
                itemButton.addCls("fast-system-head-button-checked");
                itemButton.removeCls("fast-gray");
                itemButton.safeFocus(100);
            }
            else {
                itemButton.systemMenuButtonChecked = false;
                itemButton.removeCls("fast-system-head-button-checked");
            }
        };
        HeadBarLayout.prototype.removeLastSystemMenuButton = function () {
            var systemMenuButtons = this.getSystemMenuButtons();
            if (systemMenuButtons.length === 1) {
                return false;
            }
            if (this.hasLastButtonToHide()) {
                return true;
            }
            for (var i = systemMenuButtons.length - 1; i >= 0; i--) {
                var button = systemMenuButtons[i];
                if (this.getActiveSystemMenuButton() === button) {
                    continue;
                }
                button.lastButtonToHide = true;
                FastExt.NormalLayout.TabContainer.hideByMenuId(button.itemId);
                return true;
            }
            return false;
        };
        HeadBarLayout.prototype.getActiveSystemMenuButton = function () {
            return this._headContainer.down("[systemMenuButtonChecked=true]");
        };
        HeadBarLayout.prototype.doActiveSystemMenuButton = function () {
            Ext.suspendLayouts();
            try {
                var activeSystemMenuButton = this.getActiveSystemMenuButton();
                if (activeSystemMenuButton) {
                    return;
                }
                var systemMenuButtons = this.getSystemMenuButtons();
                if (systemMenuButtons.length > 0) {
                    FastExt.NormalLayout.TabContainer.showByMenuId(systemMenuButtons[0].menuId);
                }
                else {
                    FastExt.NormalLayout.TabContainer.showIndex();
                }
            }
            finally {
                Ext.resumeLayouts(true);
            }
        };
        HeadBarLayout.prototype.hasLastButtonToHide = function () {
            return this._headContainer.down("[lastButtonToHide=true]");
        };
        HeadBarLayout.prototype.addHeadRightButton = function (button) {
            if (!button) {
                return;
            }
            var btnObj = this._headContainer.insert(this.getRightButtonAnchorIndex(), button);
            if (btnObj.xtype === "button") {
                btnObj.on("render", HeadBarEvent.startFirstMinButton);
                btnObj.on("mouseout", HeadBarEvent.startMinButton);
                btnObj.on("mouseover", HeadBarEvent.startMaxButton);
            }
        };
        HeadBarLayout.prototype.addHeadLeftButton = function (button) {
            if (!button) {
                return;
            }
            this._headContainer.insert(this.getLeftButtonAnchorIndex(), button);
        };
        HeadBarLayout.prototype.refreshButtons = function () {
            this.refreshMenuPanelButton();
            if (FastExt.NormalLayout.HistoryHandler.getHistory().length === 0) {
                FastExt.Animate.startHideAnimateByWidth(this._systemHistoryButton);
            }
            else {
                this._systemHistoryButton.setHidden(false);
            }
        };
        HeadBarLayout.prototype.refreshMenuPanelButton = function () {
            if (this._systemMenuPanelButton) {
                if (FastExt.NormalLayout.TreeMenuContainer.isExpendedMenuPanel()) {
                    this._systemMenuPanelButton.setIconCls("extIcon extArrowLeft3 grayColor");
                }
                else {
                    this._systemMenuPanelButton.setIconCls("extIcon extArrowRight3 grayColor");
                }
            }
        };
        HeadBarLayout.prototype.showMenuHistory = function () {
            var _this = this;
            this._historyMenu = Ext.create("Ext.menu.Menu", {
                padding: '0 0 0 0',
                power: false,
                showSeparator: false,
                style: {
                    background: "#ffffff"
                },
                listeners: {
                    hide: {
                        scope: this,
                    },
                },
            });
            this._historyMenu.add({
                text: "清空历史菜单",
                iconCls: 'extIcon extClear grayColor',
                handler: function () {
                    _this.clearMenuHistory();
                    FastExt.Dialog.toast("清除成功！");
                }
            });
            this._historyMenu.add("-");
            var history = FastExt.NormalLayout.HistoryHandler.getHistory();
            var _loop_7 = function (historyMenu) {
                this_1._historyMenu.add({
                    text: FastExt.System.MenuHandler.getPlainMenu(historyMenu, " > "),
                    icon: historyMenu.icon,
                    handler: function () {
                        FastExt.NormalLayout.TabContainer.showByMenuId(historyMenu.id);
                    },
                });
            };
            var this_1 = this;
            for (var _i = 0, history_1 = history; _i < history_1.length; _i++) {
                var historyMenu = history_1[_i];
                _loop_7(historyMenu);
            }
            this._historyMenu.showBy(this._systemHistoryButton, "tl-bl?");
        };
        HeadBarLayout.prototype.clearMenuHistory = function () {
            for (var _i = 0, _a = FastExt.NormalLayout.HistoryHandler.getHistory(); _i < _a.length; _i++) {
                var history_2 = _a[_i];
                if (this.existSystemMenuButton(history_2.menuId)) {
                    continue;
                }
                FastExt.NormalLayout.TabContainer.destroy(history_2.menuId);
            }
            FastExt.NormalLayout.HistoryHandler.clearHistory();
            this.refreshButtons();
        };
        HeadBarLayout.FAST_CONTAINER_CLS = "fast-system-head-container";
        HeadBarLayout.FAST_HEAD_BUTTON_CLS = "fast-system-head-button";
        return HeadBarLayout;
    }());
    var HeadBarEvent = (function () {
        function HeadBarEvent() {
        }
        HeadBarEvent.showContextMenu = function (event) {
            var button = this;
            var menu = Ext.create('Ext.menu.Menu', {
                items: [
                    {
                        text: '关闭当前',
                        iconCls: 'extIcon extClose',
                        disabled: !button.closeable,
                        handler: function () {
                            FastExt.NormalLayout.TabContainer.closeByMenuId(button.menuId);
                        },
                    },
                    '-',
                    {
                        text: '关闭其他标签',
                        iconCls: 'extIcon extCloseOther',
                        handler: function () {
                            FastExt.NormalLayout.HeadBarContainer.closeOtherSystemMenuButton(button.menuId);
                        },
                    },
                    {
                        text: "关闭所有标签",
                        iconCls: 'extIcon extCloseAll',
                        handler: function () {
                            FastExt.NormalLayout.HeadBarContainer.closeAllSystemMenuButton();
                        },
                    },
                    '-',
                    {
                        text: '复制标签',
                        iconCls: 'extIcon extCopy',
                        disabled: !button.copyable,
                        handler: function () {
                            FastExt.NormalLayout.TabContainer.copy(button.menuId);
                        },
                    },
                    {
                        text: '复制标签地址',
                        iconCls: 'extIcon extLink',
                        disabled: !button.copyable,
                        handler: function () {
                            FastExt.NormalLayout.TabContainer.copyUrl(button.menuId);
                        },
                    },
                    {
                        text: '重新加载',
                        iconCls: 'extIcon extReset',
                        disabled: !button.reloadable,
                        handler: function () {
                            FastExt.NormalLayout.TabContainer.reload(button.menuId);
                        },
                    },
                ],
                listeners: {
                    hide: function () {
                        this.delayClose(100);
                    },
                }
            });
            menu.showAt({ x: event.x, y: event.y });
        };
        HeadBarEvent.startFirstMinButton = function () {
            var button = this;
            FastExt.Animate.startMinButtonAnimateByWidth(button, 1500);
        };
        HeadBarEvent.startMinButton = function () {
            var button = this;
            FastExt.Animate.startMinButtonAnimateByWidth(button, 0);
        };
        HeadBarEvent.startMaxButton = function () {
            if (FastOverrider.BoxReordererOverrider.DRAGGING) {
                return;
            }
            var button = this;
            FastExt.Animate.startMaxButtonAnimateByWidth(button, 300);
        };
        return HeadBarEvent;
    }());
    var HistoryMenuHandler = (function () {
        function HistoryMenuHandler() {
            this._historyMenus = [];
        }
        HistoryMenuHandler.prototype.existHistory = function (menuId) {
            if (FastExt.System.InitHandler.isSilenceGlobalSaving()) {
                return true;
            }
            for (var _i = 0, _a = this._historyMenus; _i < _a.length; _i++) {
                var historyMenu = _a[_i];
                if (historyMenu && historyMenu.id === menuId) {
                    return true;
                }
            }
            return false;
        };
        HistoryMenuHandler.prototype.addHistory = function (menu) {
            if (!menu) {
                return;
            }
            if (FastExt.System.InitHandler.isSilenceGlobalSaving()) {
                return;
            }
            if (menu._clone) {
                return;
            }
            if (this.existHistory(menu.id)) {
                this.bringHistoryToFirst(menu.id);
                return;
            }
            this._historyMenus = Ext.Array.insert(this._historyMenus, 0, [menu]);
            this.storeHistory();
        };
        HistoryMenuHandler.prototype.removeHistory = function (menuId) {
            if (FastExt.System.InitHandler.isSilenceGlobalSaving()) {
                return;
            }
            var exists = [];
            for (var _i = 0, _a = this._historyMenus; _i < _a.length; _i++) {
                var historyMenu = _a[_i];
                if (historyMenu.id === menuId) {
                    exists.push(historyMenu);
                }
            }
            for (var _b = 0, exists_1 = exists; _b < exists_1.length; _b++) {
                var exist1 = exists_1[_b];
                this._historyMenus = Ext.Array.remove(this._historyMenus, exist1);
            }
        };
        HistoryMenuHandler.prototype.clearHistory = function () {
            this._historyMenus = [];
        };
        HistoryMenuHandler.prototype.getHistory = function () {
            return this._historyMenus;
        };
        HistoryMenuHandler.prototype.bringHistoryToFirst = function (menuId) {
            if (FastExt.System.InitHandler.isSilenceGlobalSaving()) {
                return;
            }
            var exists = [];
            for (var _i = 0, _a = this._historyMenus; _i < _a.length; _i++) {
                var historyMenu = _a[_i];
                if (historyMenu.id === menuId) {
                    exists.push(historyMenu);
                }
            }
            for (var _b = 0, exists_2 = exists; _b < exists_2.length; _b++) {
                var exist1 = exists_2[_b];
                this._historyMenus = Ext.Array.remove(this._historyMenus, exist1);
            }
            this._historyMenus = Ext.Array.insert(this._historyMenus, 0, exists);
        };
        HistoryMenuHandler.prototype.storeHistory = function () {
            var historyMenuId = [];
            for (var _i = 0, _a = this._historyMenus; _i < _a.length; _i++) {
                var historyMenu = _a[_i];
                historyMenuId.push(historyMenu.id);
            }
            FastExt.Cache.setCache("HistoryMenus", historyMenuId);
        };
        HistoryMenuHandler.prototype.restoreHistory = function () {
            var historyMenus = FastExt.Cache.getCache("HistoryMenus");
            if (historyMenus) {
                for (var _i = 0, historyMenus_1 = historyMenus; _i < historyMenus_1.length; _i++) {
                    var historyMenu = historyMenus_1[_i];
                    if (this.existHistory(historyMenu)) {
                        continue;
                    }
                    var menu = FastExt.System.MenuHandler.getMenu(historyMenu);
                    if (menu) {
                        this._historyMenus.push(menu);
                    }
                    if (this._historyMenus.length >= 10) {
                        break;
                    }
                }
            }
        };
        return HistoryMenuHandler;
    }());
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Listeners = (function () {
        function Listeners() {
        }
        Listeners.addListener = function (listener) {
            this._listeners.push(listener);
        };
        Listeners.getListeners = function () {
            return this._listeners;
        };
        Listeners.getFire = function () {
            return new ListenerFirer();
        };
        Listeners._listeners = [];
        return Listeners;
    }());
    FastExt.Listeners = Listeners;
    var ListenerFirer = (function () {
        function ListenerFirer() {
        }
        ListenerFirer.prototype.getListeners = function () {
            return FastExt.Listeners.getListeners();
        };
        ListenerFirer.prototype.checkMethod = function (listener) {
            return typeof listener === 'function';
        };
        ListenerFirer.prototype.onAfterInitSystem = function () {
            for (var _i = 0, _a = this.getListeners(); _i < _a.length; _i++) {
                var listener = _a[_i];
                if (this.checkMethod(listener.onAfterInitSystem)) {
                    listener.onAfterInitSystem();
                }
            }
        };
        ListenerFirer.prototype.onAfterManagerLogin = function (callback) {
            var realCallback = function () {
                FastExt.Base.runCallBack(callback);
            };
            var runCount = 0;
            for (var _i = 0, _a = this.getListeners(); _i < _a.length; _i++) {
                var listener = _a[_i];
                if (this.checkMethod(listener.onAfterManagerLogin)) {
                    runCount++;
                    listener.onAfterManagerLogin(realCallback);
                }
            }
            if (runCount === 0) {
                callback();
                return;
            }
        };
        ListenerFirer.prototype.onBeforeEditorField = function (field, record) {
            for (var _i = 0, _a = this.getListeners(); _i < _a.length; _i++) {
                var listener = _a[_i];
                if (this.checkMethod(listener.onBeforeEditorField)) {
                    var beforeEditorField = listener.onBeforeEditorField(field, record);
                    if (!beforeEditorField) {
                        return false;
                    }
                }
            }
            return true;
        };
        ListenerFirer.prototype.onBeforeManagerLogin = function (params, callback) {
            var realCallback = function () {
                FastExt.Base.runCallBack(callback);
            };
            var count = 0;
            for (var _i = 0, _a = this.getListeners(); _i < _a.length; _i++) {
                var listener = _a[_i];
                if (this.checkMethod(listener.onBeforeManagerLogin)) {
                    count++;
                    listener.onBeforeManagerLogin(params, realCallback);
                }
            }
            if (count === 0) {
                callback();
                return;
            }
        };
        ListenerFirer.prototype.onSystemReady = function () {
            for (var _i = 0, _a = this.getListeners(); _i < _a.length; _i++) {
                var listener = _a[_i];
                if (this.checkMethod(listener.onSystemReady)) {
                    listener.onSystemReady();
                }
            }
        };
        ListenerFirer.prototype.onInitLinkFieldDefaultValue = function (cmb) {
            for (var _i = 0, _a = this.getListeners(); _i < _a.length; _i++) {
                var listener = _a[_i];
                if (this.checkMethod(listener.onInitLinkFieldDefaultValue)) {
                    var onInitLinkFieldDefaultValue = listener.onInitLinkFieldDefaultValue(cmb);
                    if (onInitLinkFieldDefaultValue) {
                        return onInitLinkFieldDefaultValue;
                    }
                }
            }
        };
        ListenerFirer.prototype.onInitLoginPanel = function (items, windowConfig) {
            for (var _i = 0, _a = this.getListeners(); _i < _a.length; _i++) {
                var listener = _a[_i];
                if (this.checkMethod(listener.onInitLoginPanel)) {
                    listener.onInitLoginPanel(items, windowConfig);
                }
            }
        };
        ListenerFirer.prototype.onInitSystemHeaderItems = function (headHandler) {
            for (var _i = 0, _a = this.getListeners(); _i < _a.length; _i++) {
                var listener = _a[_i];
                if (this.checkMethod(listener.onInitSystemHeaderItems)) {
                    listener.onInitSystemHeaderItems(headHandler);
                }
            }
        };
        ListenerFirer.prototype.onInitSystemWelcomeItems = function (indexHandler) {
            for (var _i = 0, _a = this.getListeners(); _i < _a.length; _i++) {
                var listener = _a[_i];
                if (this.checkMethod(listener.onInitSystemWelcomeItems)) {
                    listener.onInitSystemWelcomeItems(indexHandler);
                }
            }
        };
        ListenerFirer.prototype.onShowManagerDataLayer = function (manager) {
            for (var _i = 0, _a = this.getListeners(); _i < _a.length; _i++) {
                var listener = _a[_i];
                if (this.checkMethod(listener.onShowManagerDataLayer)) {
                    listener.onShowManagerDataLayer(manager);
                }
            }
        };
        ListenerFirer.prototype.onShowManagerInfo = function (info) {
            for (var _i = 0, _a = this.getListeners(); _i < _a.length; _i++) {
                var listener = _a[_i];
                if (this.checkMethod(listener.onShowManagerInfo)) {
                    listener.onShowManagerInfo(info);
                }
            }
        };
        ListenerFirer.prototype.onShowRoleDataLayer = function (role) {
            for (var _i = 0, _a = this.getListeners(); _i < _a.length; _i++) {
                var listener = _a[_i];
                if (this.checkMethod(listener.onShowRoleDataLayer)) {
                    listener.onShowRoleDataLayer(role);
                }
            }
        };
        ListenerFirer.prototype.onSystemNoticeShow = function () {
            for (var _i = 0, _a = this.getListeners(); _i < _a.length; _i++) {
                var listener = _a[_i];
                if (this.checkMethod(listener.onSystemNoticeShow)) {
                    listener.onSystemNoticeShow();
                }
            }
        };
        ListenerFirer.prototype.onExtCreateFilter = function (key, info) {
            for (var _i = 0, _a = this.getListeners(); _i < _a.length; _i++) {
                var listener = _a[_i];
                if (this.checkMethod(listener.onExtCreateFilter)) {
                    listener.onExtCreateFilter(key, info);
                }
            }
        };
        ListenerFirer.prototype.onEntityGetColumnRender = function (entity, attrName) {
            for (var _i = 0, _a = this.getListeners(); _i < _a.length; _i++) {
                var listener = _a[_i];
                if (this.checkMethod(listener.onEntityGetColumnRender)) {
                    var entityGetColumnRender = listener.onEntityGetColumnRender(entity, attrName);
                    if (entityGetColumnRender) {
                        return entityGetColumnRender;
                    }
                }
            }
            return undefined;
        };
        ListenerFirer.prototype.onEntityGetEditorField = function (entity, attrName) {
            for (var _i = 0, _a = this.getListeners(); _i < _a.length; _i++) {
                var listener = _a[_i];
                if (this.checkMethod(listener.onEntityGetEditorField)) {
                    var entityGetEditorField = listener.onEntityGetEditorField(entity, attrName);
                    if (entityGetEditorField) {
                        return entityGetEditorField;
                    }
                }
            }
            return undefined;
        };
        ListenerFirer.prototype.onSystemInitMenu = function (menu) {
            for (var _i = 0, _a = this.getListeners(); _i < _a.length; _i++) {
                var listener = _a[_i];
                if (this.checkMethod(listener.onSystemInitMenu)) {
                    var systemInitMenu = listener.onSystemInitMenu(menu);
                    if (!systemInitMenu) {
                        return false;
                    }
                }
            }
            return true;
        };
        return ListenerFirer;
    }());
    var ExtCreateFilter = (function () {
        function ExtCreateFilter(config) {
            this.enable = true;
            if (config) {
                for (var configKey in config) {
                    this[configKey] = config[configKey];
                }
            }
        }
        return ExtCreateFilter;
    }());
    FastExt.ExtCreateFilter = ExtCreateFilter;
    var ComponentInvokeInfo = (function () {
        function ComponentInvokeInfo() {
        }
        return ComponentInvokeInfo;
    }());
    FastExt.ComponentInvokeInfo = ComponentInvokeInfo;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Lottie = (function () {
        function Lottie() {
        }
        Lottie.loadJsonAnim = function (cmb, jsonPath, callBack) {
            var lottieContainerId = FastExt.Base.buildOnlyCode("LTE");
            cmb.update('<div id="' + lottieContainerId + '" ></div>');
            FastExt.Lottie.loadJsonAnimByEl(document.getElementById(lottieContainerId), jsonPath, callBack);
        };
        Lottie.loadJsonAnimByEl = function (el, jsonPath, callBack) {
            if (el) {
                if (Ext.isEmpty(el.id)) {
                    el.id = "fastchar-id-" + $.md5(FastExt.Base.buildUUID16());
                }
                $(el).addClass("fast-lottie-container");
                FastExt.Cache.memory[el.id + "Lottie"] = lottie.loadAnimation({
                    container: el,
                    renderer: 'svg',
                    loop: true,
                    autoplay: true,
                    path: jsonPath
                });
                FastExt.Cache.memory[el.id + "Lottie"].cacheId = el.id + "Lottie";
                if (callBack) {
                    FastExt.Cache.memory[el.id + "Lottie"].addEventListener("data_ready", callBack);
                }
            }
            else {
                console.error("加载Lottie动画失败！无法获取目标控件的BodyElement！");
            }
        };
        Lottie.unloadJsonAnim = function (cmb) {
            var lottie = FastExt.Lottie.getLottie(cmb);
            if (lottie) {
                lottie.destroy();
                FastExt.Cache.memory[lottie.cacheId] = null;
            }
        };
        Lottie.unloadJsonAnimByEl = function (el) {
            var lottie = FastExt.Lottie.getLottieByEl(el);
            if (lottie) {
                lottie.destroy();
                FastExt.Cache.memory[lottie.cacheId] = null;
            }
        };
        Lottie.unloadJsonAnimById = function (elId) {
            var lottie = FastExt.Lottie.getLottieByElId(elId);
            if (lottie) {
                lottie.destroy();
                FastExt.Cache.memory[lottie.cacheId] = null;
            }
        };
        Lottie.getLottie = function (cmb) {
            return FastExt.Lottie.getLottieByEl(FastExt.Base.getTargetBodyElement(cmb));
        };
        Lottie.getLottieByEl = function (el) {
            if (el) {
                return FastExt.Lottie.getLottieByElId(el.id);
            }
            return null;
        };
        Lottie.getLottieByElId = function (elId) {
            return FastExt.Cache.memory[elId + "Lottie"];
        };
        Lottie.showLottie = function (obj, jsonPath) {
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            var win = Ext.create('Ext.window.Window', {
                title: "查看动效",
                height: winHeight,
                width: winWidth,
                layout: 'border',
                resizable: true,
                maximizable: true,
                constrain: true,
                modal: true,
                padding: "10 10 10 10",
                bodyStyle: {
                    background: "#ffffff"
                },
                listeners: {
                    show: function (obj) {
                        obj.setLoading("加载动效中，请稍后……");
                        FastExt.Lottie.loadJsonAnim(obj, jsonPath, function () {
                            obj.setLoading(false);
                        });
                    }
                }
            });
            win.show();
        };
        return Lottie;
    }());
    FastExt.Lottie = Lottie;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var AMapLoader = (function () {
        function AMapLoader() {
        }
        AMapLoader.__onLoaded = function () {
            window["_AMapSecurityConfig"] = {
                securityJsCode: FastExt.System.ConfigHandler.getAMapSecurity()
            };
        };
        AMapLoader.getMapJsUrl = function () {
            return "https://webapi.amap.com/maps?v=" + FastExt.System.ConfigHandler.getAMapVersion() + "&key=" + FastExt.System.ConfigHandler.getAMapKey();
        };
        AMapLoader.loadMap = function (cmb, callBack) {
            FastExt.AMapLoader.loadMapByEl(FastExt.Base.getTargetBodyElement(cmb), callBack);
        };
        AMapLoader.loadMapByEl = function (el, callBack) {
            var doLoad = function () {
                if (el) {
                    if (Ext.isEmpty(el.id)) {
                        el.id = "fastchar-id-" + $.md5(FastExt.Base.buildUUID16());
                    }
                    AMap.plugin([
                        'AMap.ControlBar',
                        'AMap.ToolBar',
                        'AMap.Scale',
                        'AMap.HawkEye',
                        'AMap.MapType',
                        'AMap.Geolocation',
                        'AMap.PlaceSearch',
                        'AMap.Geocoder',
                        'AMap.MouseTool',
                        'AMap.RectangleEditor',
                        'AMap.PolygonEditor'
                    ], function () {
                        var amapObj = new AMap.Map(el, {
                            viewMode: '3D',
                            resizeEnable: true,
                            pitchEnable: true,
                            rotateEnable: true,
                            terrain: true
                        });
                        amapObj.cacheId = el.id + "Map";
                        FastExt.Cache.memory[amapObj.cacheId] = amapObj;
                        amapObj.addControl(new AMap.ToolBar());
                        amapObj.addControl(new AMap.Scale());
                        amapObj.addControl(new AMap.MapType());
                        amapObj.addControl(new AMap.ControlBar());
                        amapObj.geocoder = new AMap.Geocoder({
                            radius: 1000,
                            extensions: "all"
                        });
                        amapObj.geolocation = new AMap.Geolocation({
                            enableHighAccuracy: true,
                            timeout: 10000,
                            buttonOffset: new AMap.Pixel(10, 20),
                            zoomToAccuracy: true,
                        });
                        amapObj.on('complete', callBack);
                    });
                }
                else {
                    console.error("加载高德地图失败！无法获取目标控件的BodyElement！");
                }
            };
            FastExt.PluginLoader.loadPlugins("AMap", [{ type: "js", src: this.getMapJsUrl() }], doLoad);
        };
        AMapLoader.getMap = function (cmb) {
            return FastExt.AMapLoader.getMapByEl(FastExt.Base.getTargetBodyElement(cmb));
        };
        AMapLoader.getMapByEl = function (el) {
            if (el) {
                return FastExt.AMapLoader.getMapByElId(el.id);
            }
            return null;
        };
        AMapLoader.getMapByElId = function (elId) {
            return FastExt.Cache.memory[elId + "Map"];
        };
        return AMapLoader;
    }());
    FastExt.AMapLoader = AMapLoader;
    var AMapHelper = (function () {
        function AMapHelper() {
        }
        AMapHelper.parseAMapBounds = function (southWestLngLat, northEastLngLat) {
            if (!southWestLngLat || !northEastLngLat) {
                return null;
            }
            return new AMap.Bounds(FastExt.AMapHelper.parseAMapLngLat(southWestLngLat), FastExt.AMapHelper.parseAMapLngLat(northEastLngLat));
        };
        AMapHelper.amapBoundsToStringArray = function (bounds) {
            if (bounds) {
                return [FastExt.AMapHelper.amapLngLatToString(bounds.southWest), FastExt.AMapHelper.amapLngLatToString(bounds.northEast)];
            }
            return null;
        };
        AMapHelper.parseAMapLngLat = function (lnglat) {
            if (lnglat) {
                lnglat = lnglat.toString().replace(" ", "").replace(" ", "");
                return new AMap.LngLat(lnglat.split(",")[0], lnglat.split(",")[1]);
            }
            return null;
        };
        AMapHelper.amapLngLatToString = function (lnglat) {
            if (lnglat) {
                return lnglat.lng + "," + lnglat.lat;
            }
            return null;
        };
        AMapHelper.parseAMapLngLatArray = function (path) {
            if (!path) {
                return null;
            }
            var realPathArray = [];
            for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {
                var pathArrayElement = path_1[_i];
                realPathArray.push(FastExt.AMapHelper.parseAMapLngLat(pathArrayElement));
            }
            return realPathArray;
        };
        AMapHelper.amapLngLatArrayToStringArray = function (lnglatArray) {
            var pathArray = [];
            for (var _i = 0, lnglatArray_1 = lnglatArray; _i < lnglatArray_1.length; _i++) {
                var path = lnglatArray_1[_i];
                pathArray.push(FastExt.AMapHelper.amapLngLatToString(path));
            }
            return pathArray;
        };
        AMapHelper.amapConvertFrom = function (targetLnglat, convertType) {
            return new Ext.Promise(function (resolve) {
                if (Ext.isEmpty(convertType)) {
                    resolve([targetLnglat]);
                    return;
                }
                AMap.convertFrom(targetLnglat, convertType, function (status, result) {
                    if (result.info === 'ok') {
                        resolve(result.locations);
                    }
                    else {
                        resolve(null);
                    }
                });
            });
        };
        AMapHelper.plainStringToAMapLngLat = function (plainStringLongitude, plainStringLatitude) {
            var lng = AMapHelper.convertDMS(AMapHelper.convertStringDMSToArray(plainStringLongitude));
            var lat = AMapHelper.convertDMS(AMapHelper.convertStringDMSToArray(plainStringLatitude));
            return new AMap.LngLat(lng, lat);
        };
        AMapHelper.convertStringDMSToArray = function (plainStringDMS) {
            var chars = plainStringDMS.split("");
            var value = "";
            var values = [];
            for (var _i = 0, chars_1 = chars; _i < chars_1.length; _i++) {
                var char = chars_1[_i];
                if (char === "°" || char === "′" || char === "″") {
                    values.push(parseFloat(value));
                    value = "";
                    continue;
                }
                value += char;
            }
            return values;
        };
        AMapHelper.convertDMS = function (dms) {
            var deg = dms[0];
            var min = dms[1];
            var sec = dms[2];
            var sign = (deg < 0) ? -1 : 1;
            return sign * (Math.abs(deg) + min / 60 + sec / 3600);
        };
        return AMapHelper;
    }());
    FastExt.AMapHelper = AMapHelper;
    var AMapObject = (function () {
        function AMapObject(map) {
            this._map = map;
        }
        Object.defineProperty(AMapObject.prototype, "map", {
            get: function () {
                return this._map;
            },
            set: function (value) {
                this._map = value;
            },
            enumerable: false,
            configurable: true
        });
        AMapObject.prototype.destroy = function () {
            this.map.destroy();
        };
        AMapObject.prototype.on = function (event, func) {
            this.map.on(event, func);
        };
        AMapObject.prototype.off = function (event, func) {
            this.map.off(event, func);
        };
        AMapObject.prototype.clearEvents = function (event) {
            this.map.clearEvents(event);
        };
        AMapObject.prototype.fitView = function (overlayArray) {
            if (overlayArray) {
                this.map.setFitView(overlayArray, false, [60, 60, 60, 60], 10);
            }
            else {
                this.map.setFitView();
            }
        };
        AMapObject.prototype.setZoom = function (zoom) {
            this.map.setZoom(zoom);
        };
        AMapObject.prototype.setZoomAndCenter = function (zoom, lnglat) {
            this.map.setZoomAndCenter(zoom, lnglat);
        };
        AMapObject.prototype.safeStartLocation = function () {
            var _this = this;
            return new Ext.Promise(function (resolve) {
                _this.map.geolocation.getCityInfo(function (status, result) {
                    var position;
                    if (status === "complete") {
                        position = new AMap.LngLat(result.position[0], result.position[1], true);
                    }
                    else {
                        position = new AMap.LngLat(116.410394, 39.934376, true);
                    }
                    resolve(position);
                });
            });
        };
        AMapObject.prototype.computeAMapBoundsSizeToContainer = function (bounds) {
            var southWestPX = this.map.lngLatToContainer(bounds.southWest);
            var northEastPX = this.map.lngLatToContainer(bounds.northEast);
            var height = Math.abs(southWestPX.round().y - northEastPX.round().y);
            var width = Math.abs(northEastPX.round().x - southWestPX.round().x);
            return { "width": width, "height": height };
        };
        AMapObject.prototype.getOverlay = function (selfId) {
            var allOverlays = this.map.getAllOverlays();
            for (var _i = 0, allOverlays_1 = allOverlays; _i < allOverlays_1.length; _i++) {
                var allOverlay = allOverlays_1[_i];
                if (allOverlay._opts && allOverlay._opts.selfId === selfId) {
                    return allOverlay;
                }
            }
            return null;
        };
        AMapObject.prototype.getEnabledEditorOverlay = function (type) {
            var finds = [];
            var allOverlays = this.map.getAllOverlays();
            for (var _i = 0, allOverlays_2 = allOverlays; _i < allOverlays_2.length; _i++) {
                var allOverlay = allOverlays_2[_i];
                if (allOverlay.__enabledEditor && allOverlay.__type && allOverlay.__type === type) {
                    finds.push(allOverlay);
                }
            }
            return finds;
        };
        AMapObject.prototype.removeOverlay = function (selfId) {
            var overlay = this.getOverlay(selfId);
            if (overlay && overlay.editor) {
                overlay.editor.close();
            }
            if (overlay) {
                this.map.remove(overlay);
            }
        };
        AMapObject.prototype.getLayer = function (selfId) {
            var allLayers = this.map.getLayers();
            for (var _i = 0, allLayers_1 = allLayers; _i < allLayers_1.length; _i++) {
                var layer = allLayers_1[_i];
                if (layer._opts && layer._opts.selfId === selfId) {
                    return layer;
                }
            }
            return null;
        };
        AMapObject.prototype.removeLayer = function (selfId) {
            var layer = this.getLayer(selfId);
            if (layer && layer.editor) {
                layer.editor.close();
            }
            if (layer) {
                this.map.remove(layer);
            }
        };
        AMapObject.prototype.searchAddress = function (address) {
            var _this = this;
            return new Ext.Promise(function (resolve) {
                _this.map.geocoder.getLocation(address, function (status, result) {
                    if (status.toString().toLowerCase() === 'complete'
                        && result.info.toString().toLowerCase() === 'ok'
                        && parseInt(result.resultNum) > 0) {
                        resolve({
                            map: _this.map,
                            result: result
                        });
                    }
                    else if (status === 'no_data') {
                        resolve(null);
                    }
                });
            });
        };
        AMapObject.prototype.searchLngLat = function (lnglat) {
            var _this = this;
            return new Ext.Promise(function (resolve) {
                _this.map.geocoder.getAddress(lnglat, function (status, result) {
                    if (status.toString().toLowerCase() === 'complete'
                        && result.info.toString().toLowerCase() === 'ok') {
                        resolve({
                            map: _this.map,
                            result: result
                        });
                    }
                    else if (status === 'no_data') {
                        resolve(null);
                    }
                });
            });
        };
        AMapObject.prototype.addRectangleOverlay = function (param) {
            var _this = this;
            if (!param) {
                return null;
            }
            var bounds = FastExt.AMapHelper.parseAMapBounds(param.southWestLngLat, param.northEastLngLat);
            if (!bounds) {
                return null;
            }
            var rectangle = this.getRectangleOverlay(param);
            if (!rectangle) {
                rectangle = new AMap.Rectangle({
                    selfId: param.title,
                    bounds: bounds,
                    fillColor: param.fillColor,
                    strokeColor: param.strokeColor,
                    zIndex: param.zIndex,
                });
            }
            this.map.add(rectangle);
            param.sizeToContainer = this.computeAMapBoundsSizeToContainer(rectangle.getBounds());
            param.notifyChange();
            if (param.imageLayerParam) {
                this.addImageLayer(param.bindImageLayer());
            }
            if (param.enabledEditor) {
                var rectangleEditor = rectangle.editor;
                if (!rectangleEditor) {
                    rectangleEditor = new AMap.RectangleEditor(this.map, rectangle);
                }
                var changeRect = function (e) {
                    var strings = FastExt.AMapHelper.amapBoundsToStringArray(e.target.ir);
                    param.southWestLngLat = strings[0];
                    param.northEastLngLat = strings[1];
                    param.sizeToContainer = _this.computeAMapBoundsSizeToContainer(e.target.ir);
                    param.notifyChange();
                    if (param.imageLayerParam) {
                        _this.addImageLayer(param.bindImageLayer());
                    }
                };
                rectangleEditor.clearEvents("adjust");
                rectangleEditor.clearEvents("move");
                rectangleEditor.on("adjust", changeRect);
                rectangleEditor.on("move", changeRect);
                rectangleEditor.open();
                rectangle.editor = rectangleEditor;
            }
            return rectangle;
        };
        AMapObject.prototype.getRectangleOverlay = function (param) {
            if (!param) {
                return null;
            }
            return this.getOverlay(param.title);
        };
        AMapObject.prototype.removeRectangleOverlay = function (param) {
            if (!param) {
                return;
            }
            this.removeOverlay(param.title);
        };
        AMapObject.prototype.addPolygonOverlay = function (param) {
            if (!param) {
                return null;
            }
            var parseAMapLngLatArray = FastExt.AMapHelper.parseAMapLngLatArray(param.path);
            if (!parseAMapLngLatArray) {
                return null;
            }
            var polygon = this.getPolygonOverlay(param);
            if (!polygon) {
                polygon = new AMap.Polygon({
                    selfId: param.title,
                    path: parseAMapLngLatArray,
                    fillColor: param.fillColor,
                    strokeColor: param.strokeColor,
                    zIndex: param.zIndex,
                });
            }
            this.map.add(polygon);
            param.notifyChange();
            if (param.enabledEditor) {
                var polygonEditor = polygon.editor;
                if (!polygonEditor) {
                    polygonEditor = new AMap.PolygonEditor(this.map, polygon);
                }
                var changeRect = function (e) {
                    param.path = FastExt.AMapHelper.amapLngLatArrayToStringArray(e.target.getPath());
                    param.notifyChange();
                };
                polygonEditor.clearEvents("adjust");
                polygonEditor.clearEvents("move");
                polygonEditor.on("adjust", changeRect);
                polygonEditor.on("move", changeRect);
                polygonEditor.open();
                polygon.editor = polygonEditor;
            }
            return polygon;
        };
        AMapObject.prototype.getPolygonOverlay = function (param) {
            if (!param) {
                return null;
            }
            return this.getOverlay(param.title);
        };
        AMapObject.prototype.removePolygonOverlay = function (param) {
            if (!param) {
                return;
            }
            this.removeOverlay(param.title);
        };
        AMapObject.prototype.addDistrictLayer = function (param) {
            if (!param) {
                return null;
            }
            if (param.adcode && param.adcode.length > 0) {
                var districtLayer = this.getDistrictLayer(param);
                if (!districtLayer) {
                    districtLayer = new AMap.DistrictLayer.Province({
                        selfId: param.title,
                        depth: param.depth,
                        zIndex: param.zIndex,
                        styles: {
                            'fill': param.fill,
                            'province-stroke': param.province_stroke,
                            'city-stroke': param.city_stroke,
                            'county-stroke': param.county_stroke,
                        }
                    });
                }
                districtLayer.setAdcode(param.adcode);
                districtLayer.setMap(this.map);
                return districtLayer;
            }
            return null;
        };
        AMapObject.prototype.getDistrictLayer = function (param) {
            if (!param) {
                return null;
            }
            return this.getLayer(param.title);
        };
        AMapObject.prototype.removeDistrictLayer = function (param) {
            if (!param) {
                return;
            }
            this.removeLayer(param.title);
        };
        AMapObject.prototype.addImageLayer = function (param) {
            if (!param) {
                return null;
            }
            var bounds = FastExt.AMapHelper.parseAMapBounds(param.southWestLngLat, param.northEastLngLat);
            if (!bounds) {
                return null;
            }
            var imageLayer = this.getImageLayer(param);
            if (!imageLayer) {
                imageLayer = new AMap.ImageLayer({
                    selfId: param.title,
                    url: param.url,
                    zIndex: param.zIndex,
                });
                this.map.add(imageLayer);
            }
            imageLayer.setBounds(bounds);
            return imageLayer;
        };
        AMapObject.prototype.getImageLayer = function (param) {
            if (!param) {
                return null;
            }
            return this.getLayer(param.title);
        };
        AMapObject.prototype.removeImageLayer = function (param) {
            if (!param) {
                return;
            }
            this.removeLayer(param.title);
        };
        AMapObject.prototype.addMarkerOverlay = function (param) {
            var _this = this;
            if (!param) {
                return null;
            }
            if (param.isEmptyLngLat() && param.enabledEditor && param.enabledLocation) {
                var default_lnglat = FastExt.System.ConfigHandler.getConfig("amap_default_lnglat").value;
                if (default_lnglat) {
                    var location_1 = FastExt.AMapHelper.parseAMapLngLat(default_lnglat);
                    param.lnglat = location_1;
                    param.lng = location_1.lng;
                    param.lat = location_1.lat;
                    this.addMarkerOverlay(param);
                    var defaultZoom = FastExt.System.ConfigHandler.getConfig("amap_default_zoom").value;
                    if (Ext.isEmpty(defaultZoom)) {
                        defaultZoom = 14;
                    }
                    this.setZoomAndCenter(parseFloat(defaultZoom), location_1);
                }
                else {
                    param.showLoading("获取当前定位信息中，请稍后……");
                    this.safeStartLocation().then(function (location) {
                        param.hideLoading();
                        param.lng = location.lng;
                        param.lat = location.lat;
                        _this.addMarkerOverlay(param);
                    });
                }
                return;
            }
            var position = null;
            if (param.lnglat) {
                position = FastExt.AMapHelper.parseAMapLngLat(param.lnglat);
            }
            else {
                position = new AMap.LngLat(param.lng, param.lat);
            }
            if (!position) {
                return null;
            }
            var marker = this.getMarkerOverlay(param);
            if (!marker) {
                marker = new AMap.Marker({
                    selfId: param.title,
                    position: position,
                    draggable: param.enabledEditor,
                    cursor: param.enabledEditor ? 'move' : 'default',
                    raiseOnDrag: true
                });
                marker.infoWindow = new AMap.InfoWindow({
                    offset: new AMap.Pixel(0, -30)
                });
            }
            marker.searchLngLat = function (markerPosition) {
                if (this.infoWindow) {
                    this.infoWindow.close();
                }
                param.lnglat = FastExt.AMapHelper.amapLngLatToString(markerPosition);
                param.lng = markerPosition.lng;
                param.lat = markerPosition.lat;
                param.showLoading("搜索位置信息中，请稍候……");
                new AMapObject(this.getMap()).searchLngLat(markerPosition).then(function (data) {
                    param.hideLoading();
                    if (data) {
                        var result = data.result;
                        marker.updateRegeocode(markerPosition, result.regeocode);
                    }
                });
            };
            marker.updateRegeocode = function (lnglat, regeocode) {
                param.address = regeocode.formattedAddress;
                param.province = regeocode.province;
                param.city = regeocode.city;
                param.district = regeocode.district;
                param.lng = lnglat.lng;
                param.lat = lnglat.lat;
                param.lnglat = FastExt.AMapHelper.amapLngLatToString(lnglat);
                this.setPosition(lnglat);
                if (param.enabledEditor && param.enabledMapFlowCenter) {
                    if (param.zoom > 0 && param.zoom > this.getMap().getZoom()) {
                        this.getMap().setZoomAndCenter(param.zoom, lnglat);
                    }
                    else {
                        this.getMap().setCenter(lnglat);
                    }
                }
                param.notifyChange();
            };
            marker.__enabledEditor = param.enabledEditor;
            marker.__type = param.type;
            marker.clearEvents("click");
            marker.on("click", function () {
                if (this.infoWindow) {
                    var address = param.address;
                    if (!address) {
                        address = "";
                    }
                    var position_1 = this.getPosition();
                    this.infoWindow.setContent("<div>" + address + "【" + param.lnglat + "】" + "</div>");
                    this.infoWindow.open(this.getMap(), position_1);
                    this.getMap().setCenter(position_1);
                }
            });
            if (param.enabledEditor) {
                marker.clearEvents("dragstart");
                marker.clearEvents("dragend");
                marker.on('dragstart', function () {
                    if (this.infoWindow) {
                        this.infoWindow.close();
                    }
                });
                marker.on('dragend', function () {
                    marker.searchLngLat(this.getPosition());
                });
                if (param.enabledMapClickLocation) {
                    this.on('click', function (ev) {
                        marker.searchLngLat(ev.lnglat);
                    });
                }
            }
            marker.setMap(this.map);
            return marker;
        };
        AMapObject.prototype.getMarkerOverlay = function (param) {
            if (!param) {
                return null;
            }
            return this.getOverlay(param.title);
        };
        AMapObject.prototype.removeMarkerOverlay = function (param) {
            if (!param) {
                return;
            }
            this.removeOverlay(param.title);
        };
        AMapObject.prototype.beginDrawRectangleOverlay = function (param) {
            var _this = this;
            this.removeRectangleOverlay(param);
            var mouseTool = new AMap.MouseTool(this.map);
            mouseTool.rectangle({
                fillColor: param.fillColor,
                strokeColor: param.strokeColor,
            });
            mouseTool.on('draw', function (e) {
                mouseTool.close(true);
                var strings = FastExt.AMapHelper.amapBoundsToStringArray(e.obj.ir);
                param.southWestLngLat = strings[0];
                param.northEastLngLat = strings[1];
                _this.addRectangleOverlay(param);
            });
        };
        AMapObject.prototype.beginDrawPolygonOverlay = function (param) {
            var _this = this;
            this.removePolygonOverlay(param);
            var mouseTool = new AMap.MouseTool(this.map);
            mouseTool.polygon({
                fillColor: param.fillColor,
                strokeColor: param.strokeColor,
            });
            mouseTool.on('draw', function (e) {
                mouseTool.close(true);
                param.path = FastExt.AMapHelper.amapLngLatArrayToStringArray(e.obj.getPath());
                _this.addPolygonOverlay(param);
            });
        };
        return AMapObject;
    }());
    FastExt.AMapObject = AMapObject;
    var AMapComponent = (function (_super) {
        __extends(AMapComponent, _super);
        function AMapComponent(cmb) {
            var _this = _super.call(this) || this;
            _this.cmb = cmb;
            return _this;
        }
        Object.defineProperty(AMapComponent.prototype, "map", {
            get: function () {
                if (!this._map) {
                    this._map = FastExt.AMapLoader.getMap(this.cmb);
                    if (!this._map) {
                        console.error("目标控件未绑定Map对象！", this.cmb);
                    }
                }
                return this._map;
            },
            enumerable: false,
            configurable: true
        });
        return AMapComponent;
    }(AMapObject));
    FastExt.AMapComponent = AMapComponent;
    var AMapDialog = (function () {
        function AMapDialog() {
        }
        AMapDialog.buildMapPanel = function (params) {
            return Ext.create('Ext.panel.Panel', {
                layout: 'border',
                region: 'center',
                itemId: "mapContainer",
                border: 0,
                loadMap: function () {
                    var _this = this;
                    this.setLoading("加载地图中，请稍后……");
                    FastExt.AMapLoader.loadMap(this, function () {
                        _this.setLoading(false);
                        _this.initMapMoreView();
                        _this.initMapLayers();
                        _this.refreshResult();
                    });
                },
                destroyMap: function () {
                    var aMapComponent = new AMapComponent(this);
                    aMapComponent.destroy();
                },
                initMapMoreView: function () {
                    var textId = "mapLevelText" + FastExt.Base.buildOnlyCode("MV");
                    var levelLayerHtml = "<div id=\"levelControl\" class=\"amap-control\" style=\"left: 15px;bottom: 60px;background: #ffffffb0;padding: 5px 10px;\">" +
                        "<span id='" + textId + "' style=\"color: rgb(0, 0, 0);font-size: small;\">0级别</span>" +
                        "</div>";
                    var divTemp = document.createElement("div");
                    divTemp.innerHTML = levelLayerHtml;
                    FastExt.Base.getTargetBodyElement(this).appendChild(divTemp);
                    var aMapComponent = new AMapComponent(this);
                    aMapComponent.on("zoomchange", function () {
                        document.getElementById(textId).innerHTML = this.getZoom() + "&nbsp;级别";
                    });
                },
                refreshResult: function () {
                    var infos = [];
                    for (var _i = 0, _a = params.wrapItems(); _i < _a.length; _i++) {
                        var layer = _a[_i];
                        if (layer.toResultInfo) {
                            infos.push(layer.toResultInfo());
                        }
                    }
                    var mapWindow = this.up("#mapWindow");
                    if (mapWindow) {
                        var selectResult = mapWindow.down("#selectResult");
                        if (selectResult) {
                            selectResult.setValue(infos.join(" "));
                        }
                    }
                },
                initMapLayers: function () {
                    var aMapComponent = new AMapComponent(this);
                    var overlayArray = [];
                    for (var _i = 0, _a = params.wrapItems(); _i < _a.length; _i++) {
                        var layerParams = _a[_i];
                        if (layerParams.type === FastEnum.MapItemType.rectangle_overlay) {
                            var rectangleOverlay = aMapComponent.addRectangleOverlay(layerParams);
                            if (rectangleOverlay) {
                                overlayArray.push(rectangleOverlay);
                            }
                        }
                        else if (layerParams.type === FastEnum.MapItemType.polygon_overlay) {
                            var polygonOverlay = aMapComponent.addPolygonOverlay(layerParams);
                            if (polygonOverlay) {
                                overlayArray.push(polygonOverlay);
                            }
                        }
                        else if (layerParams.type === FastEnum.MapItemType.image_layer) {
                            var imageLayer = aMapComponent.addImageLayer(layerParams);
                            if (imageLayer) {
                                overlayArray.push(imageLayer);
                            }
                        }
                        else if (layerParams.type === FastEnum.MapItemType.district_layer) {
                            aMapComponent.addDistrictLayer(layerParams);
                        }
                        else if (layerParams.type === FastEnum.MapItemType.marker_overlay) {
                            var markerOverlay = aMapComponent.addMarkerOverlay(layerParams);
                            if (markerOverlay) {
                                overlayArray.push(markerOverlay);
                            }
                        }
                    }
                    aMapComponent.fitView(overlayArray);
                },
            });
        };
        AMapDialog.select = function (obj, params) {
            params = AMapMapParams.newParam(params);
            return new Ext.Promise(function (resolve) {
                var searchPanel = Ext.create('Ext.form.FormPanel', {
                    method: 'POST',
                    region: 'north',
                    itemId: "mapSearchFormPanel",
                    autoScroll: false,
                    scrollable: false,
                    layout: {
                        type: 'hbox',
                        align: 'middle',
                        pack: 'start'
                    },
                    defaults: {
                        margin: '5 5 5 5'
                    },
                    refreshSearchLayout: function () {
                        var searchAddress = this.getField("searchAddress");
                        var searchAddress2 = this.getField("searchAddress2");
                        var searchType = this.getField("searchType");
                        var searchTypeValue = searchType.getValue();
                        var searchTypeText = searchType.getDisplayValue();
                        searchAddress.code = "SearchMapA" + searchTypeValue;
                        searchAddress2.code = "SearchMapB" + searchTypeValue;
                        searchAddress.setValue(null);
                        searchAddress2.setValue(null);
                        searchAddress.checkHistory();
                        searchAddress2.checkHistory();
                        if (searchTypeValue !== 1) {
                            searchAddress2.setHidden(false);
                            searchAddress2.allowBlank = false;
                            searchAddress.setEmptyText("请输入" + searchTypeText + "【经度】");
                            searchAddress2.setEmptyText("请输入" + searchTypeText + "【纬度】");
                        }
                        else {
                            searchAddress2.setHidden(true);
                            searchAddress2.allowBlank = true;
                            searchAddress.setEmptyText("请输入" + searchTypeText);
                        }
                    },
                    items: [
                        {
                            xtype: 'combobox',
                            width: 160,
                            name: 'searchType',
                            itemId: "searchType",
                            editable: false,
                            displayField: "text",
                            valueField: "id",
                            value: 1,
                            store: Ext.create('Ext.data.Store', {
                                fields: ["id", "text"],
                                data: [
                                    {
                                        'text': '文本位置搜索',
                                        "id": 1
                                    },
                                    {
                                        'text': '高德坐标搜索',
                                        "id": 2
                                    },
                                    {
                                        'text': '百度坐标搜索',
                                        "id": 3
                                    },
                                    {
                                        'text': 'GPS坐标搜索',
                                        "id": 4
                                    }, {
                                        'text': '度分秒搜索',
                                        "id": 5
                                    }
                                ],
                            }),
                            listeners: {
                                change: function (cmb, newValue, oldValue, eOpts) {
                                    cmb.ownerCt.refreshSearchLayout();
                                },
                            }
                        },
                        {
                            name: 'searchAddress',
                            columnWidth: 1,
                            itemId: "searchAddress",
                            flex: 1,
                            useHistory: true,
                            emptyText: '输入地址',
                            allowBlank: false,
                            xtype: 'textfield'
                        },
                        {
                            name: 'searchAddress2',
                            columnWidth: 1,
                            itemId: "searchAddress2",
                            flex: 1,
                            hidden: true,
                            useHistory: true,
                            emptyText: '输入地址',
                            xtype: 'textfield'
                        },
                        {
                            xtype: 'button',
                            iconCls: "extIcon extSearch",
                            text: '搜索位置',
                            handler: function () {
                                var thisFormPanel = this.up("#mapSearchFormPanel");
                                var form = thisFormPanel.getForm();
                                if (form.isValid()) {
                                    var baseContainer_1 = thisFormPanel.up("#mapWindow");
                                    var searchAddress = thisFormPanel.getFieldValue("searchAddress");
                                    var searchAddress2 = thisFormPanel.getFieldValue("searchAddress2");
                                    var searchType = thisFormPanel.getField("searchType");
                                    var searchTypeValue = searchType.getValue();
                                    var searchTypeText = searchType.getDisplayValue();
                                    baseContainer_1.setLoading("正在" + searchTypeText + "中，请稍后……");
                                    var aMapComponent_1 = new AMapComponent(baseContainer_1.down("#mapContainer"));
                                    if (searchTypeValue === 1) {
                                        aMapComponent_1.searchAddress(searchAddress).then(function (data) {
                                            baseContainer_1.setLoading(false);
                                            if (data) {
                                                var regeocode = data.result.geocodes[0];
                                                data.map.setCenter(regeocode.location);
                                                if (params.showSearchADLayer) {
                                                    var param = AMapDistrictLayerParam.newParam({
                                                        title: '搜索结果的区域图层',
                                                        adcode: [regeocode.adcode]
                                                    });
                                                    var amapObj = new AMapObject(data.map);
                                                    amapObj.removeOverlay(param.title);
                                                    amapObj.addDistrictLayer(param);
                                                }
                                                var enabledEditorOverlay = aMapComponent_1.getEnabledEditorOverlay(FastEnum.MapItemType.marker_overlay);
                                                for (var _i = 0, enabledEditorOverlay_1 = enabledEditorOverlay; _i < enabledEditorOverlay_1.length; _i++) {
                                                    var overlay = enabledEditorOverlay_1[_i];
                                                    overlay.updateRegeocode(regeocode.location, regeocode);
                                                }
                                                FastExt.Dialog.toast("地图已切换到：" + regeocode.formattedAddress);
                                            }
                                            else {
                                                FastExt.Dialog.showAlert("系统提醒", "未检索到位置信息！");
                                            }
                                        });
                                        return;
                                    }
                                    var lnglat = null;
                                    var convertType = null;
                                    if (searchTypeValue === 2) {
                                        lnglat = AMapHelper.parseAMapLngLat(searchAddress + "," + searchAddress2);
                                    }
                                    else if (searchTypeValue === 3) {
                                        convertType = "baidu";
                                        lnglat = [searchAddress, searchAddress2];
                                    }
                                    else if (searchTypeValue === 4) {
                                        convertType = "gps";
                                        lnglat = [searchAddress, searchAddress2];
                                    }
                                    else if (searchTypeValue === 5) {
                                        lnglat = AMapHelper.plainStringToAMapLngLat(searchAddress, searchAddress2);
                                    }
                                    AMapHelper.amapConvertFrom(lnglat, convertType).then(function (result) {
                                        if (result) {
                                            var convertLngLat_1 = result[0];
                                            var overlay = aMapComponent_1.getOverlay("SelectPosition");
                                            if (overlay) {
                                                baseContainer_1.setLoading(false);
                                                overlay.searchLngLat(convertLngLat_1);
                                            }
                                            else {
                                                aMapComponent_1.searchLngLat(convertLngLat_1).then(function (data) {
                                                    baseContainer_1.setLoading(false);
                                                    if (data) {
                                                        var result_4 = data.result;
                                                        var position = result_4.regeocode;
                                                        data.map.setCenter(convertLngLat_1);
                                                        if (params.showSearchADLayer) {
                                                            var param = AMapDistrictLayerParam.newParam({
                                                                title: '搜索结果的区域图层',
                                                                adcode: [position.addressComponent.adcode]
                                                            });
                                                            var amapObj = new AMapObject(data.map);
                                                            amapObj.removeOverlay(param.title);
                                                            amapObj.addDistrictLayer(param);
                                                        }
                                                        FastExt.Dialog.toast("地图已切换到：" + position.formattedAddress);
                                                    }
                                                    else {
                                                        FastExt.Dialog.showAlert("系统提醒", "未检索到位置信息！");
                                                    }
                                                });
                                            }
                                        }
                                        else {
                                            FastExt.Dialog.showAlert("系统提醒", "坐标转换异常！");
                                        }
                                    });
                                }
                            }
                        }
                    ],
                });
                var mapPanel = FastExt.AMapDialog.buildMapPanel(params);
                var selectButtonMenus = [];
                var _loop_8 = function (layer) {
                    if (!layer.enabledEditor) {
                        return "continue";
                    }
                    layer.onChange = function () {
                        mapPanel.refreshResult();
                    };
                    layer.showLoading = function (message) {
                        mapPanel.setLoading(message);
                    };
                    layer.hideLoading = function () {
                        mapPanel.setLoading(false);
                    };
                    if (layer.type === FastEnum.MapItemType.rectangle_overlay) {
                        selectButtonMenus.push({
                            text: layer.title,
                            iconCls: "extIcon extMouseClick",
                            handler: function () {
                                FastExt.Dialog.showTip("系统提醒", "请在地图上长按鼠标左键拖拽，开始选择矩形区域！", function () {
                                    FastExt.Dialog.toast("请开始你的选择！");
                                    new AMapComponent(mapPanel).beginDrawRectangleOverlay(layer);
                                });
                            },
                        });
                    }
                    else if (layer.type === FastEnum.MapItemType.polygon_overlay) {
                        selectButtonMenus.push({
                            text: layer.title,
                            iconCls: "extIcon extMouseClick",
                            handler: function () {
                                FastExt.Dialog.showTip("系统提醒", "请在地图上点击鼠标左键开始点选多边形区域，点击鼠标右键结束选择！", function () {
                                    FastExt.Dialog.toast("请开始你的选择！");
                                    new AMapComponent(mapPanel).beginDrawPolygonOverlay(layer);
                                });
                            },
                        });
                    }
                };
                for (var _i = 0, _a = params.wrapItems(); _i < _a.length; _i++) {
                    var layer = _a[_i];
                    _loop_8(layer);
                }
                var selectButton = {
                    xtype: 'button',
                    width: 160,
                    text: '开始选择',
                    hidden: selectButtonMenus.length === 0,
                    iconCls: "extIcon extMore",
                    menu: selectButtonMenus
                };
                if (selectButtonMenus.length === 1) {
                    selectButton = {
                        xtype: 'button',
                        text: selectButtonMenus[0].text,
                        iconCls: "extIcon extMouseClick",
                        handler: selectButtonMenus[0].handler,
                    };
                }
                var bottomPanel = Ext.create('Ext.panel.Panel', {
                    layout: "column",
                    region: 'south',
                    itemId: 'bottomContainer',
                    border: 0,
                    defaults: {
                        margin: '5 5 5 5'
                    },
                    padding: '10 10 10 10',
                    style: {
                        background: "#ffffff",
                    },
                    items: [
                        {
                            xtype: 'textfield',
                            itemId: 'selectResult',
                            readOnly: true,
                            columnWidth: 1
                        },
                        {
                            xtype: "panel",
                            layout: "column",
                            columnWidth: 1,
                            border: 0,
                            defaults: {
                                margin: '5 5 5 5'
                            },
                            items: [
                                {
                                    xtype: 'button',
                                    columnWidth: 1,
                                    text: '确定选择',
                                    iconCls: "extIcon extOk",
                                    handler: function () {
                                        FastExt.Base.runCallBack(resolve, params.wrapItems());
                                        var mapWindow = this.up("#mapWindow");
                                        if (mapWindow) {
                                            mapWindow.close();
                                        }
                                    }
                                },
                                selectButton,
                            ]
                        },
                    ]
                });
                var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
                var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
                Ext.create('Ext.window.Window', {
                    animateTarget: obj,
                    title: params.title,
                    itemId: "mapWindow",
                    height: winHeight,
                    width: winWidth,
                    minHeight: 500,
                    minWidth: 600,
                    iconCls: 'extIcon extMap',
                    layout: 'fit',
                    resizable: true,
                    maximizable: true,
                    constrain: true,
                    modal: true,
                    items: [
                        {
                            xtype: "panel",
                            layout: 'border',
                            border: 0,
                            items: [searchPanel, mapPanel, bottomPanel],
                        }
                    ],
                    listeners: {
                        show: function () {
                            var mapContainer = this.down("#mapContainer");
                            if (mapContainer) {
                                mapContainer.loadMap();
                            }
                            searchPanel.refreshSearchLayout();
                        },
                        close: function (val) {
                            var mapContainer = this.down("#mapContainer");
                            if (mapContainer) {
                                mapContainer.destroyMap();
                            }
                            FastExt.Base.runCallBack(resolve);
                        }
                    }
                }).show();
            });
        };
        AMapDialog.show = function (obj, params) {
            params = AMapMapParams.newParam(params);
            var mapPanel = FastExt.AMapDialog.buildMapPanel(params);
            var bottomPanel = Ext.create('Ext.panel.Panel', {
                layout: "column",
                region: 'south',
                itemId: 'bottomContainer',
                border: 0,
                defaults: {
                    margin: '5 5 5 5'
                },
                padding: '10 10 10 10',
                style: {
                    background: "#ffffff",
                },
                items: [
                    {
                        xtype: 'textfield',
                        itemId: 'selectResult',
                        readOnly: true,
                        columnWidth: 1
                    }
                ]
            });
            var winWidth = parseInt((document.body.clientWidth * 0.6).toFixed(0));
            var winHeight = parseInt((document.body.clientHeight * 0.7).toFixed(0));
            Ext.create('Ext.window.Window', {
                animateTarget: obj,
                title: params.title,
                itemId: "mapWindow",
                height: winHeight,
                width: winWidth,
                minHeight: 500,
                minWidth: 600,
                iconCls: 'extIcon extMap',
                layout: 'fit',
                resizable: true,
                maximizable: true,
                constrain: true,
                modal: true,
                items: [
                    {
                        xtype: "panel",
                        layout: 'border',
                        border: 0,
                        items: [mapPanel, bottomPanel],
                    }
                ],
                listeners: {
                    show: function () {
                        var mapContainer = this.down("#mapContainer");
                        if (mapContainer) {
                            mapContainer.loadMap();
                        }
                    },
                    close: function () {
                        var mapContainer = this.down("#mapContainer");
                        if (mapContainer) {
                            mapContainer.destroyMap();
                        }
                    },
                }
            }).show();
        };
        AMapDialog.plainShow = function (obj, lnglat, title, address) {
            FastExt.AMapDialog.show(obj, FastExt.AMapMapParams.newParam({
                title: title ? title : "查看坐标位置",
                items: [
                    {
                        type: FastEnum.MapItemType.marker_overlay,
                        lnglat: lnglat,
                        address: address,
                    }
                ],
            }));
        };
        return AMapDialog;
    }());
    FastExt.AMapDialog = AMapDialog;
    var AMapMapParams = (function () {
        function AMapMapParams() {
            this.title = "选择地图位置";
            this.showSearchADLayer = false;
        }
        AMapMapParams.newParam = function (param) {
            var newParam = new AMapMapParams();
            if (param) {
                for (var paramKey in param) {
                    newParam[paramKey] = param[paramKey];
                }
            }
            return newParam;
        };
        AMapMapParams.prototype.wrapItems = function () {
            if (!this.items) {
                return [];
            }
            if (this["wrapped"]) {
                return this.items;
            }
            var wrapLayers = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var layer = _a[_i];
                if (layer.type === FastEnum.MapItemType.rectangle_overlay) {
                    wrapLayers.push(AMapRectangleOverlayParam.newParam(layer));
                }
                else if (layer.type === FastEnum.MapItemType.polygon_overlay) {
                    wrapLayers.push(AMapPolygonOverlayParam.newParam(layer));
                }
                else if (layer.type === FastEnum.MapItemType.image_layer) {
                    wrapLayers.push(AMapImageLayerParam.newParam(layer));
                }
                else if (layer.type === FastEnum.MapItemType.district_layer) {
                    wrapLayers.push(AMapDistrictLayerParam.newParam(layer));
                }
                else if (layer.type === FastEnum.MapItemType.marker_overlay) {
                    wrapLayers.push(AMapMarkerOverlayParam.newParam(layer));
                }
            }
            this.items = wrapLayers;
            this["wrapped"] = true;
            return this.items;
        };
        return AMapMapParams;
    }());
    FastExt.AMapMapParams = AMapMapParams;
    var AMapItemBaseParam = (function () {
        function AMapItemBaseParam() {
            this.type = "none";
            this.title = "标题";
            this.onChange = function () {
            };
            this.showLoading = function (message) {
            };
            this.hideLoading = function () {
            };
        }
        AMapItemBaseParam.prototype.notifyChange = function () {
            if (this.onChange) {
                this.onChange();
            }
        };
        AMapItemBaseParam.prototype.toResultInfo = function () {
            return "";
        };
        return AMapItemBaseParam;
    }());
    FastExt.AMapItemBaseParam = AMapItemBaseParam;
    var AMapMarkerOverlayParam = (function (_super) {
        __extends(AMapMarkerOverlayParam, _super);
        function AMapMarkerOverlayParam() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.type = FastEnum.MapItemType.marker_overlay;
            _this.zoom = -1;
            _this.title = "地图坐标";
            _this.enabledEditor = false;
            _this.enabledLocation = true;
            _this.enabledMapClickLocation = true;
            _this.enabledMapFlowCenter = true;
            return _this;
        }
        AMapMarkerOverlayParam.newParam = function (param) {
            var newParam = new AMapMarkerOverlayParam();
            if (param) {
                for (var paramKey in param) {
                    newParam[paramKey] = param[paramKey];
                }
            }
            return newParam;
        };
        AMapMarkerOverlayParam.prototype.isEmptyLngLat = function () {
            if (this.lnglat) {
                return false;
            }
            if (this.lng <= 0) {
                return true;
            }
            if (this.lat <= 0) {
                return true;
            }
            return false;
        };
        AMapMarkerOverlayParam.prototype.toResultInfo = function () {
            var infos = [];
            if (this.lnglat) {
                infos.push("坐标：" + this.lnglat);
            }
            else if (this.lng > 0 && this.lat > 0) {
                infos.push("坐标：" + this.lng + " , " + this.lat);
            }
            if (this.address) {
                infos.push("位置：" + this.address);
            }
            return infos.join(" ，");
        };
        return AMapMarkerOverlayParam;
    }(AMapItemBaseParam));
    FastExt.AMapMarkerOverlayParam = AMapMarkerOverlayParam;
    var AMapRectangleOverlayParam = (function (_super) {
        __extends(AMapRectangleOverlayParam, _super);
        function AMapRectangleOverlayParam() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.type = FastEnum.MapItemType.rectangle_overlay;
            _this.title = "矩形区域选择";
            _this.enabledEditor = false;
            _this.fillColor = '#00b0ff';
            _this.strokeColor = '#80d8ff';
            return _this;
        }
        AMapRectangleOverlayParam.newParam = function (param) {
            var newParam = new AMapRectangleOverlayParam();
            if (param) {
                for (var paramKey in param) {
                    newParam[paramKey] = param[paramKey];
                }
            }
            return newParam;
        };
        AMapRectangleOverlayParam.prototype.toResultInfo = function () {
            if (!this.southWestLngLat) {
                return "";
            }
            if (!this.northEastLngLat) {
                return "";
            }
            var infos = [];
            infos.push("矩形西南角(左下)：" + this.southWestLngLat);
            infos.push("矩形东北角(右上)：" + this.northEastLngLat);
            if (this.sizeToContainer) {
                infos.push("矩形宽高尺寸：" + this.sizeToContainer.width + "px - " + this.sizeToContainer.height + "px");
                infos.push("矩形宽高比例：" + "1 : " + (this.sizeToContainer.height / this.sizeToContainer.width).toFixed(4));
            }
            return infos.join(" ，");
        };
        AMapRectangleOverlayParam.prototype.bindImageLayer = function () {
            if (this.imageLayerParam && this.imageLayerParam.url) {
                var newParam = AMapImageLayerParam.newParam(this.imageLayerParam);
                newParam.southWestLngLat = this.southWestLngLat;
                newParam.northEastLngLat = this.northEastLngLat;
                return newParam;
            }
            return null;
        };
        return AMapRectangleOverlayParam;
    }(AMapItemBaseParam));
    FastExt.AMapRectangleOverlayParam = AMapRectangleOverlayParam;
    var AMapPolygonOverlayParam = (function (_super) {
        __extends(AMapPolygonOverlayParam, _super);
        function AMapPolygonOverlayParam() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.type = FastEnum.MapItemType.polygon_overlay;
            _this.title = "多边形区域选择";
            _this.enabledEditor = false;
            _this.fillColor = '#00b0ff';
            _this.strokeColor = '#80d8ff';
            return _this;
        }
        AMapPolygonOverlayParam.newParam = function (param) {
            var newParam = new AMapPolygonOverlayParam();
            if (param) {
                for (var paramKey in param) {
                    newParam[paramKey] = param[paramKey];
                }
            }
            return newParam;
        };
        AMapPolygonOverlayParam.prototype.toResultInfo = function () {
            if (!this.path) {
                return "";
            }
            var infos = [];
            infos.push(FastExt.Json.objectToJson(this.path));
            return infos.join(" ，");
        };
        return AMapPolygonOverlayParam;
    }(AMapItemBaseParam));
    FastExt.AMapPolygonOverlayParam = AMapPolygonOverlayParam;
    var AMapDistrictLayerParam = (function (_super) {
        __extends(AMapDistrictLayerParam, _super);
        function AMapDistrictLayerParam() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.type = FastEnum.MapItemType.district_layer;
            _this.title = "中国城市边界图层";
            _this.fill = "red";
            _this.province_stroke = "red";
            _this.city_stroke = "red";
            _this.county_stroke = "red";
            _this.depth = 2;
            return _this;
        }
        AMapDistrictLayerParam.newParam = function (param) {
            var newParam = new AMapDistrictLayerParam();
            if (param) {
                for (var paramKey in param) {
                    newParam[paramKey] = param[paramKey];
                }
            }
            return newParam;
        };
        return AMapDistrictLayerParam;
    }(AMapItemBaseParam));
    FastExt.AMapDistrictLayerParam = AMapDistrictLayerParam;
    var AMapImageLayerParam = (function (_super) {
        __extends(AMapImageLayerParam, _super);
        function AMapImageLayerParam() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.type = FastEnum.MapItemType.image_layer;
            _this.title = "图片图层";
            return _this;
        }
        AMapImageLayerParam.newParam = function (param) {
            var newParam = new AMapImageLayerParam();
            if (param) {
                for (var paramKey in param) {
                    newParam[paramKey] = param[paramKey];
                }
            }
            return newParam;
        };
        return AMapImageLayerParam;
    }(AMapItemBaseParam));
    FastExt.AMapImageLayerParam = AMapImageLayerParam;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Markdown = (function () {
        function Markdown() {
        }
        Markdown.loadMarkdown = function (callBack) {
            FastExt.PluginLoader.loadPlugins("Markdown", [FastExt.Markdown.markdownJsPath, FastExt.Markdown.markdownStylePath]
                .concat(FastExt.Markdown.markdownPluginsPath), callBack);
        };
        Markdown.parseMarkdown = function (content, callback) {
            FastExt.Markdown.loadMarkdown(function () {
                FastExt.Highlight.loadHighlight(function () {
                    var md = markdownit({
                        html: true,
                        xhtmlOut: false,
                        breaks: true,
                        langPrefix: 'language-',
                        linkify: true,
                        typographer: true,
                        quotes: '“”‘’',
                        highlight: function (str, lang) {
                            if (lang && hljs.getLanguage(lang)) {
                                try {
                                    return hljs.highlight(str, { language: lang }).value;
                                }
                                catch (__) {
                                }
                            }
                            return '';
                        }
                    }).use(markdownitContainer, "tip")
                        .use(markdownitContainer, "warning")
                        .use(markdownitContainer, "danger")
                        .use(markdownitMark)
                        .use(markdownitEmoji);
                    var htmlContent = '<div style="padding: 20px;"><div class="markdown-body">' + md.render(content) + '</div></div>';
                    var jqueryObj = $(htmlContent);
                    jqueryObj.find("a").each(function () {
                        var aObj = $(this);
                        if (aObj.attr("href").indexOf("open_menu:") === 0) {
                            var hrefValue = aObj.attr("href");
                            var menuValue = hrefValue.split("open_menu:")[1];
                            var openMenuFunction = 'FastExt.SystemLayout.showByLevel("' + decodeURI(menuValue) + '")';
                            aObj.attr("href", 'javascript:void(0);');
                            aObj.attr("data-click-function", Ext.util.Base64.encode(openMenuFunction));
                            aObj.attr("onclick", 'FastExt.Renders.onClickFromDataClick(this)');
                        }
                        else {
                            aObj.attr("target", "_blank");
                        }
                    });
                    callback(jqueryObj.prop('outerHTML'));
                });
            });
        };
        Markdown.showMarkdownFile = function (obj, title, markdownFileUrl, windowConfig) {
            if (!windowConfig) {
                windowConfig = {
                    height: parseInt((document.body.clientHeight * 0.7).toFixed(0)),
                    width: parseInt((document.body.clientWidth * 0.6).toFixed(0))
                };
            }
            var windowDefaultConfig = {
                title: title,
                iconCls: 'extIcon extSee',
                layout: "fit",
                animateTarget: obj,
                height: windowConfig.height,
                width: windowConfig.width,
                minHeight: 500,
                minWidth: 600,
                constrain: true,
                resizable: true,
                maximizable: true,
                scrollable: true,
                modal: true,
                bodyStyle: {
                    background: "#ffffff",
                },
                listeners: {
                    show: function () {
                        var _this = this;
                        this.setLoading("加载数据中，请稍后……");
                        $.get(markdownFileUrl, function (result) {
                            FastExt.Markdown.parseMarkdown(result, function (htmlValue) {
                                _this.setLoading(false);
                                _this.update(htmlValue);
                            });
                        });
                    },
                }
            };
            var markdownWindow = Ext.create('Ext.window.Window', FastExt.Json.mergeJson(windowDefaultConfig, windowConfig));
            markdownWindow.show();
        };
        Markdown.showChangelog = function (obj) {
            var systemChangelogWin = Ext.getCmp("SystemChangelogWindow");
            if (systemChangelogWin) {
                FastExt.Component.shakeComment(systemChangelogWin);
                return;
            }
            var windowConfig = {
                height: parseInt((document.body.clientHeight * 0.7).toFixed(0)),
                width: parseInt((document.body.clientWidth * 0.4).toFixed(0))
            };
            var markdownWindow = Ext.create('Ext.window.Window', {
                title: "系统更新日志",
                iconCls: 'extIcon extFlag',
                layout: "fit",
                animateTarget: obj,
                id: "SystemChangelogWindow",
                height: windowConfig.height,
                width: windowConfig.width,
                minHeight: 500,
                minWidth: 600,
                constrain: true,
                resizable: true,
                maximizable: true,
                scrollable: true,
                modal: false,
                bodyStyle: {
                    background: "#ffffff",
                },
                listeners: {
                    show: function () {
                        var _this = this;
                        this.setLoading("加载数据中，请稍后……");
                        $.get(FastExt.System.ChangelogHandler.getUrl(), function (result) {
                            FastExt.Markdown.parseMarkdown(result, function (htmlValue) {
                                _this.setLoading(false);
                                _this.update(htmlValue);
                            });
                        });
                    },
                }
            });
            markdownWindow.show();
        };
        Markdown.markdownJsPath = "base/markdown-it/markdown-it.min.js";
        Markdown.markdownStylePath = "base/markdown-it/markdown-style.css";
        Markdown.markdownPluginsPath = [
            "base/markdown-it/plugins/markdown-it-mark.min.js",
            "base/markdown-it/plugins/markdown-it-emoji.min.js",
            "base/markdown-it/plugins/markdown-it-container.min.js"
        ];
        return Markdown;
    }());
    FastExt.Markdown = Markdown;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Menu = (function () {
        function Menu() {
        }
        Menu.copyMenu = function (target) {
            var menus = [];
            if (target.items) {
                target.items.each(function (item, index) {
                    var child = {
                        icon: item.icon,
                        text: item.text,
                        handler: item.handler
                    };
                    if (item.getMenu() != null) {
                        child.menu = FastExt.Menu.copyMenu(item.getMenu());
                    }
                    menus.push(child);
                });
            }
            return menus;
        };
        Menu.fireMenuEvent = function (menu, event) {
            if (menu && menu.items) {
                menu.items.each(function (item, index) {
                    if (item.hasOwnProperty(event) && Ext.isFunction(item[event])) {
                        item[event]();
                    }
                    if (Ext.isFunction(item.getMenu)) {
                        FastExt.Menu.fireMenuEvent(item.getMenu(), event);
                    }
                });
            }
        };
        Menu.isSplitLineLast = function (menus) {
            if (menus) {
                if (menus.items) {
                    if (menus.items.length === 0) {
                        return true;
                    }
                    if (menus.items.length > 0) {
                        return menus.items[menus.items.length - 1] === "-";
                    }
                }
                if (Ext.isArray(menus)) {
                    if (menus.length === 0) {
                        return true;
                    }
                    if (menus.length > 0) {
                        return menus[menus.length - 1] === "-";
                    }
                }
            }
            return false;
        };
        Menu.refreshItem = function (menu, item) {
            if (menu && menu.items) {
                var visibleItem_1 = [];
                menu.items.each(function (item, index) {
                    if (item.xtype === "menuseparator") {
                        if (visibleItem_1.length > 0 && visibleItem_1[visibleItem_1.length - 1].xtype === "menuseparator") {
                            item.hide();
                        }
                        else {
                            item.show();
                        }
                    }
                    if (!item.isHidden()) {
                        visibleItem_1.push(item);
                    }
                    if (Ext.isFunction(item.getMenu)) {
                        FastExt.Menu.refreshItem(item.getMenu(), item);
                    }
                });
                if (visibleItem_1.length > 0 && visibleItem_1[visibleItem_1.length - 1].xtype === "menuseparator") {
                    visibleItem_1[visibleItem_1.length - 1].hide();
                }
                if (item) {
                    if (visibleItem_1.length === 0) {
                        item.fromVisibleItem = true;
                        item.hide();
                    }
                    else if (item.fromVisibleItem) {
                        item.show();
                        item.fromVisibleItem = false;
                    }
                }
            }
        };
        return Menu;
    }());
    FastExt.Menu = Menu;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var MuuriTool = (function () {
        function MuuriTool() {
        }
        MuuriTool.bindToContainer = function (container, muuriConfig, callback) {
            if (container.muuriGrid) {
                callback(container.muuriGrid);
                return;
            }
            var doLoad = function () {
                var targetId = null;
                if (Ext.isFunction(container.getMuuriGridContainerId)) {
                    targetId = container.getMuuriGridContainerId();
                }
                if (Ext.isEmpty(targetId)) {
                    console.warn("Muuri渲染失败！目标ID为空！");
                    return;
                }
                var grid = new Muuri('#' + targetId, muuriConfig);
                container.muuriGrid = grid;
                callback(grid);
            };
            FastExt.PluginLoader.loadPlugins("MuuriJs", [FastExt.MuuriTool.muuriJsPath, FastExt.MuuriTool.webAnimasJsPath], doLoad);
        };
        MuuriTool.justBindToContainer = function (container, muuriConfig, callback) {
            FastExt.MuuriTool.releaseMuuriGrid(container);
            FastExt.MuuriTool.bindToContainer(container, muuriConfig, callback);
        };
        MuuriTool.getMuuriGrid = function (container) {
            if (container.muuriGrid) {
                return container.muuriGrid;
            }
            return null;
        };
        MuuriTool.releaseMuuriGrid = function (container) {
            var muuriGrid = FastExt.MuuriTool.getMuuriGrid(container);
            if (muuriGrid) {
                muuriGrid.destroy(true);
                container.muuriGrid = null;
            }
        };
        MuuriTool.muuriJsPath = "base/muuri/muuri.min.js";
        MuuriTool.webAnimasJsPath = "base/muuri/web-animations.min.js";
        return MuuriTool;
    }());
    FastExt.MuuriTool = MuuriTool;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Objects = (function () {
        function Objects() {
        }
        Objects.safeObject = function (source) {
            if (source) {
                return source;
            }
            return {};
        };
        Objects.safeSplit = function (source, splitChar) {
            if (Ext.isEmpty(source)) {
                return [];
            }
            return source.split(splitChar);
        };
        Objects.pickValue = function () {
            var values = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                values[_i] = arguments[_i];
            }
            for (var _a = 0, values_2 = values; _a < values_2.length; _a++) {
                var value = values_2[_a];
                if (!Ext.isEmpty(value)) {
                    return value;
                }
            }
            return undefined;
        };
        return Objects;
    }());
    FastExt.Objects = Objects;
})(FastExt || (FastExt = {}));
var FastOverrider;
(function (FastOverrider) {
    var ExtOverrider = (function () {
        function ExtOverrider() {
        }
        ExtOverrider.__onLoaded = function () {
            var oldCreate = Ext.create;
            Ext.create = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                try {
                    if (args.length > 1) {
                        if (Ext.isObject(args[1]) && args[1].filter && args[1].filter.enable) {
                            var filterConfig = args[1].filter;
                            var info = new FastExt.ComponentInvokeInfo();
                            info.method = filterConfig.method;
                            info.xtype = args[0];
                            info.config = args[1];
                            FastExt.Listeners.getFire().onExtCreateFilter(filterConfig.key, info);
                        }
                    }
                    return oldCreate.apply(this, args);
                }
                catch (e) {
                    if (FastExt.System.ConfigHandler.isDebug()) {
                        FastExt.Server.reportException(FastExt.ErrorHandler.geErrorInfo(e));
                    }
                    return null;
                }
            };
            var oldGetScrollbarSize = Ext.scrollbar.size;
            Ext.scrollbar.size = function () {
                var scrollbarSize = oldGetScrollbarSize.apply(this, arguments);
                scrollbarSize.width = FastOverrider.ExtOverrider.cssScrollBarWidth;
                scrollbarSize.height = FastOverrider.ExtOverrider.cssScrollBarHeight;
                return scrollbarSize;
            };
            Ext.scrollbar.width = function () {
                return FastOverrider.ExtOverrider.cssScrollBarWidth;
            };
            Ext.scrollbar.height = function () {
                return FastOverrider.ExtOverrider.cssScrollBarHeight;
            };
        };
        ExtOverrider.cssScrollBarWidth = 0;
        ExtOverrider.cssScrollBarHeight = 8;
        return ExtOverrider;
    }());
    FastOverrider.ExtOverrider = ExtOverrider;
    var ServerOverrider = (function () {
        function ServerOverrider() {
        }
        ServerOverrider.__onLoaded = function () {
            Ext.override(Ext.data.proxy.Ajax, {
                constructor: function () {
                    this.callParent(arguments);
                    this.setTimeout(1000 * 60 * 3);
                },
            });
        };
        return ServerOverrider;
    }());
    FastOverrider.ServerOverrider = ServerOverrider;
    var PowerComponentOverride = (function () {
        function PowerComponentOverride() {
        }
        PowerComponentOverride.__onLoaded = function () {
            Ext.override(Ext.Component, {
                onFastPowerContextMenu: function (e, t, eOpts) {
                    e.stopEvent();
                    FastExt.Power.showPowerConfig(this, e);
                },
                afterRender: function () {
                    try {
                        if (!FastExt.System.InitHandler.isInit()) {
                            return;
                        }
                        var me = this;
                        me.power = FastExt.Base.toBool(me.power, true);
                        if (me.power && (me.getXTypes().indexOf("field/") > 0 || Ext.Array.contains(FastExt.Power.types, me.getXType()))) {
                            me.code = FastExt.Power.getPowerCode(me);
                            if (!me.power) {
                                return;
                            }
                            if (me.up("[powerUI=false]")) {
                                return;
                            }
                            if (me.code) {
                                me.managerPower = FastExt.Power.checkManagerPower(me);
                                FastExt.Power.setPower(me.code, FastExt.Base.copy(me.managerPower));
                                if (!FastExt.Power.hasPower(me, 'show')) {
                                    me.hideable = false;
                                    me.setHidden(true);
                                    me.setDisabled(true);
                                    me.clearListeners();
                                    if (Ext.isFunction(me.collapse)) {
                                        me.collapse();
                                    }
                                }
                                else if (!FastExt.Power.hasPower(me, 'edit')) {
                                    me.editable = false;
                                    if (Ext.isFunction(me.setReadOnly)) {
                                        me.setReadOnly(true);
                                    }
                                }
                                if (FastExt.Power.config) {
                                    me.powerConfig = FastExt.Power.checkPower(me.code);
                                    FastExt.Power.setPowerStyle(me);
                                    me.getEl().on('contextmenu', me.onFastPowerContextMenu, me);
                                }
                            }
                        }
                    }
                    finally {
                        this.callParent(arguments);
                    }
                }
            });
            Ext.override(Ext.Component, {
                setDisabled: function (disabled) {
                    if (FastExt.Power.config) {
                        return this['enable']();
                    }
                    return this.callParent(arguments);
                }
            });
            Ext.override(Ext.form.field.Base, {
                markInvalid: function (errors) {
                    if (FastExt.Power.config) {
                        return;
                    }
                    this.callParent(arguments);
                }
            });
        };
        return PowerComponentOverride;
    }());
    FastOverrider.PowerComponentOverride = PowerComponentOverride;
    var ComponentOverride = (function () {
        function ComponentOverride() {
        }
        ComponentOverride.__onLoaded = function () {
            Ext.override(Ext.Component, {
                constructor: function (config) {
                    this.callParent(arguments);
                    this.addCls("fast-" + this.xtype);
                },
                setZIndex: function () {
                    var callIndex = this.callParent(arguments);
                    if (this.justTop || (this.cfg && this.cfg.justTop)) {
                        this.el.setZIndex(FastExt.Component.maxZIndex);
                    }
                    return callIndex;
                },
                refreshAllowBlankTip: function () {
                    var me = this;
                    if (me.allowBlankTip && !Ext.isEmpty(me.fieldLabel) && Ext.isFunction(me.setFieldLabel)) {
                        if (!FastExt.Base.toBool(me.allowBlank, true)) {
                            me.setFieldLabel('<svg class="svgIcon fileIcon redColor fontSize8" aria-hidden="true"><use xlink:href="#extSnow"></use></svg>&nbsp;' + me.configFieldLabel);
                        }
                        else {
                            me.setFieldLabel(me.configFieldLabel);
                        }
                    }
                },
                show: function () {
                    try {
                        if (FastExt.System.InitHandler.isInit()) {
                            if (this.getXType() === "window"
                                || this.getXType() === "messagebox") {
                                if (!FastExt.Base.toBool(this.sessionWin, false)) {
                                    if (FastExt.LoginLayout.isShownSessionOutAlert()) {
                                        this.hide();
                                        return null;
                                    }
                                }
                            }
                        }
                    }
                    catch (e) {
                        console.error(e);
                    }
                    return this.callParent(arguments);
                },
                onResize: function (width, height, oldWidth, oldHeight) {
                    this.callParent(arguments);
                    if (this.needCacheUI) {
                        if (width !== Ext.getBody().getWidth()) {
                            FastExt.Cache.setCache(this.cacheUICode + "Width", width);
                        }
                        if (height !== Ext.getBody().getHeight()) {
                            FastExt.Cache.setCache(this.cacheUICode + "Height", height);
                        }
                    }
                },
                onFastBodyElMouseLeave: function (event) {
                    if (this.helpTip) {
                        this.helpTip.close();
                        this.helpTip = null;
                    }
                },
                onFastBodyElMouseOver: function () {
                    if (this.help) {
                        this.buildHelpTip();
                    }
                },
                onFastBodyElContextMenu: function () {
                    if (this.help) {
                        this.buildHelpTip();
                    }
                },
                buildHelpTip: function () {
                    try {
                        var me_2 = this;
                        if (me_2.helpTip) {
                            if (me_2.helpTip.showDelay > 0) {
                                if (me_2.helpTipTimeout) {
                                    clearTimeout(me_2.helpTipTimeout);
                                }
                                me_2.helpTipTimeout = setTimeout(function () {
                                    if (me_2.helpTip) {
                                        me_2.helpTip.show();
                                    }
                                }, me_2.helpTip.showDelay);
                            }
                            else {
                                me_2.helpTip.show();
                            }
                            return;
                        }
                        var helpContent = me_2.help;
                        if (window["getHelpContent"]) {
                            helpContent = window["getHelpContent"](me_2.help);
                        }
                        var anchor = me_2.helpAnchor;
                        if (Ext.isEmpty(anchor)) {
                            anchor = "left";
                        }
                        var helpShowDelay = me_2.helpShowDelay;
                        if (Ext.isEmpty(helpShowDelay)) {
                            helpShowDelay = 0;
                        }
                        var helpMaxWidth = me_2.helpMaxWidth;
                        if (Ext.isEmpty(helpMaxWidth)) {
                            helpMaxWidth = 500;
                        }
                        var targetEl = me_2.bodyEl;
                        if (!targetEl) {
                            targetEl = me_2.el;
                        }
                        me_2.helpTip = Ext.create('Ext.tip.ToolTip', {
                            target: targetEl,
                            resizable: false,
                            anchor: anchor,
                            anchorOffset: 0,
                            autoHide: false,
                            hideDelay: 0,
                            focusOnToFront: false,
                            maxWidth: helpMaxWidth,
                            closeAction: 'destroy',
                            hideAction: 'destroy',
                            html: helpContent,
                            showDelay: helpShowDelay,
                            autoShow: helpShowDelay === 0,
                            listeners: {
                                beforedestroy: function () {
                                    me_2.helpTip = null;
                                    if (me_2.helpTipTimeout) {
                                        clearTimeout(me_2.helpTipTimeout);
                                    }
                                },
                                hide: function () {
                                    this.close();
                                },
                                move: function (obj, x, y, eOpts) {
                                    var anchor = obj.anchor;
                                    var anchorOffset = (me_2.getWidth() - 20) / 2;
                                    if (anchor === "left" || anchor === "right") {
                                        anchorOffset = (me_2.getHeight() - 20) / 2;
                                    }
                                    if (!Ext.isEmpty(me_2.helpAnchorOffset) && parseInt(me_2.helpAnchorOffset) != -1) {
                                        anchorOffset = me_2.helpAnchorOffset;
                                    }
                                    obj.anchorOffset = anchorOffset;
                                }
                            }
                        });
                    }
                    catch (e) {
                        console.error(e);
                    }
                },
                finishRender: function () {
                    var _this = this;
                    this.callParent(arguments);
                    var me = this;
                    try {
                        if (FastExt.Power.isPower()) {
                            return;
                        }
                        if (me.help && FastExt.Base.toBool(me.tipHelp, true)) {
                            var targetEl = me.bodyEl;
                            if (!targetEl) {
                                targetEl = me.el;
                            }
                            if (Ext.isEmpty(me.helpType)) {
                                me.helpType = FastEnum.HelpEnumType.mouse_right_click;
                            }
                            targetEl.on("mouseleave", me.onFastBodyElMouseLeave, me);
                            if (me.helpType == FastEnum.HelpEnumType.mouse_right_click) {
                                targetEl.on("contextmenu", me.onFastBodyElContextMenu, me);
                            }
                            else if (me.helpType == FastEnum.HelpEnumType.mouse_in_out) {
                                targetEl.on("contextmenu", me.onFastBodyElMouseLeave, me);
                                targetEl.on("mouseover", me.onFastBodyElMouseOver, me);
                            }
                        }
                        if (me.ripple) {
                            var rippleConfig_1 = { color: "#ffffff" };
                            if (Ext.isObject(me.ripple)) {
                                rippleConfig_1 = me.ripple;
                            }
                            this.getEl().on("mousedown", function (e) {
                                var doRipple = true;
                                if (_this.isDisabled && _this.isDisabled()) {
                                    doRipple = false;
                                }
                                if (doRipple) {
                                    _this.getEl().ripple(e, rippleConfig_1);
                                }
                            }, this);
                        }
                    }
                    catch (e) {
                        console.error(e);
                    }
                },
                initComponent: function () {
                    var me = this;
                    try {
                        if (me.labelAlign && !Ext.isEmpty(me.fieldLabel)) {
                            me.userCls = "fast-filefield-label-" + me.labelAlign;
                        }
                        me.labelSeparator = "";
                        if (me.emptyText === "default") {
                            me.emptyText = "请填写";
                            if (!Ext.isEmpty(me.fieldLabel)) {
                                me.emptyText = "请填写" + me.fieldLabel;
                                var realXtype = me.xtype;
                                if (me.parentXtype) {
                                    realXtype = me.parentXtype;
                                }
                                if (realXtype.indexOf("combo") >= 0
                                    || realXtype.indexOf("link") >= 0
                                    || realXtype.indexOf("date") >= 0
                                    || realXtype.indexOf("map") >= 0
                                    || realXtype.indexOf("pca") >= 0) {
                                    me.emptyText = "请选择" + me.fieldLabel;
                                }
                            }
                        }
                        me.configFieldLabel = me.fieldLabel;
                        me.refreshAllowBlankTip();
                        me.validateOnBlur = false;
                        me.validateOnChange = false;
                        me.closeToolText = "关闭";
                        me.collapseToolText = "关闭";
                        me.expandToolText = "展开";
                        if ((me.getXType() === "window" || me.getXType() === "panel")
                            && (!Ext.isEmpty(me.getTitle()) || !Ext.isEmpty(me.subtitle))
                            && (me.resizable || me.split)
                            && FastExt.Base.toBool(me.cacheUISize, true)) {
                            me.cacheUICode = $.md5(me.getTitle() + me.subtitle + $("title").text() + me.width + me.height);
                            var width = FastExt.Cache.getCache(me.cacheUICode + "Width");
                            var height = FastExt.Cache.getCache(me.cacheUICode + "Height");
                            var collapse = FastExt.Base.toBool(FastExt.Cache.getCache(me.cacheUICode + "Collapse"), me.collapsed);
                            if (width != null) {
                                me.setWidth(Math.round(width));
                                me.setFlex(0);
                            }
                            if (height != null) {
                                me.setHeight(Math.round(height));
                                me.setFlex(0);
                            }
                            me.collapsed = collapse;
                            me.needCacheUI = true;
                            me.setCollapsed(collapse);
                        }
                        if (FastExt.Base.toBool(me.iframePanel, false)) {
                            me.disabledCls = "iframe-disabled-panel";
                        }
                        if (!Ext.isEmpty(me.firstCls)) {
                            me.baseCls = me.firstCls + " " + me.baseCls;
                        }
                    }
                    catch (e) {
                        console.error(e);
                    }
                    finally {
                        this.callParent(arguments);
                    }
                },
                destroy: function () {
                    this.callParent(arguments);
                    try {
                        if (this.tip) {
                            this.tip.destroy();
                            this.tip = null;
                        }
                        if (this.menu) {
                            this.menu.destroy();
                            this.menu = null;
                        }
                    }
                    catch (e) {
                    }
                },
                safeFocus: function (delay) {
                    var _this = this;
                    setTimeout(function () {
                        _this.focus(true);
                    }, delay);
                },
            });
        };
        return ComponentOverride;
    }());
    FastOverrider.ComponentOverride = ComponentOverride;
    var PanelOverride = (function () {
        function PanelOverride() {
        }
        PanelOverride.__onLoaded = function () {
            Ext.override(Ext.panel.Panel, {
                collapse: function () {
                    this.callParent(arguments);
                    if (this.needCacheUI) {
                        FastExt.Cache.setCache(this.cacheUICode + "Collapse", true);
                    }
                },
                expand: function (animate) {
                    this.callParent(arguments);
                    if (this.needCacheUI) {
                        FastExt.Cache.setCache(this.cacheUICode + "Collapse", false);
                    }
                },
                onMouseLeaveFloated: function (e) {
                    if (FastExt.Base.toBool(this.holdFloatView, false)) {
                        this.onMouseEnterFloated(e);
                        return;
                    }
                    this.callParent(arguments);
                },
                close: function () {
                    if (!FastExt.Base.toBool(this.canClose, true)) {
                        return;
                    }
                    this.callParent(arguments);
                }
            });
            Ext.override(Ext.panel.Tool, {
                constructor: function () {
                    this.callParent(arguments);
                    this.ripple = { color: "#ffffff", bound: false, destroyTime: 300 };
                },
            });
            Ext.override(Ext.panel.Header, {
                constructor: function () {
                    this.callParent(arguments);
                    this.ripple = { color: "#ffffff", destroyTime: 300 };
                },
            });
        };
        return PanelOverride;
    }());
    FastOverrider.PanelOverride = PanelOverride;
    var LoadMaskOverride = (function () {
        function LoadMaskOverride() {
        }
        LoadMaskOverride.__onLoaded = function () {
            Ext.override(Ext.LoadMask, {
                constructor: function () {
                    this.callParent(arguments);
                    var msgId = this.getId() + "-msgEl";
                    var animDiv = $("<div id='" + this.getId() + "-anim' style='height: 70px;width: 70px;'></div>");
                    $("#" + msgId).prepend(animDiv);
                },
                getAnimEl: function () {
                    var animDiv = $("#" + this.getId() + "-anim");
                    if (animDiv.length > 0) {
                        return animDiv[0];
                    }
                    return null;
                },
                show: function () {
                    var me = this;
                    var animEl = me.getAnimEl();
                    if (animEl) {
                        FastExt.Lottie.loadJsonAnimByEl(animEl, "base/lottie/loading.json");
                    }
                    if (me.target && (me.target.disabledLoadMaskOnce || me.target.disabledLoadMask)) {
                        me.target.disabledLoadMaskOnce = false;
                        return me;
                    }
                    if (me.isElement) {
                        me.ownerCt.mask(this.useMsg ? this.msg : '', this.msgCls);
                        me.fireEvent('show', this);
                        return;
                    }
                    return me.callParent(arguments);
                },
                hide: function () {
                    try {
                        var animEl = this.getAnimEl();
                        if (animEl) {
                            FastExt.Lottie.unloadJsonAnimByEl(animEl);
                        }
                    }
                    catch (e) {
                    }
                    return this.callParent(arguments);
                },
            });
        };
        return LoadMaskOverride;
    }());
    FastOverrider.LoadMaskOverride = LoadMaskOverride;
    var ButtonOverride = (function () {
        function ButtonOverride() {
        }
        ButtonOverride.__onLoaded = function () {
            Ext.override(Ext.button.Button, {
                constructor: function () {
                    this.callParent(arguments);
                    this.ripple = { destroyTime: 300 };
                    if (this.animMinMax) {
                        this.on("render", function () {
                            FastExt.Animate.startMinButtonAnimateByWidth(this, 1000);
                        });
                        this.on("mouseout", function () {
                            FastExt.Animate.startMinButtonAnimateByWidth(this, 0);
                        });
                        this.on("mouseover", function () {
                            FastExt.Animate.startMaxButtonAnimateByWidth(this, 500);
                        });
                    }
                },
                afterRender: function () {
                    try {
                        var me = this;
                        if (me.tipText) {
                            me.tip = new Ext.ToolTip({
                                target: me.el,
                                trackMouse: true,
                                renderTo: Ext.getBody(),
                                dismissDelay: 0,
                                html: me.tipText
                            });
                        }
                        if (FastExt.Base.toBool(me.local)) {
                            if (!FastExt.System.ConfigHandler.isLocal()) {
                                me.setHidden(true);
                            }
                        }
                        this.callParent(arguments);
                    }
                    catch (e) {
                        console.error(e);
                    }
                    finally {
                        FastExt.Button.checkGridToolbarButton(this);
                    }
                }
            });
        };
        return ButtonOverride;
    }());
    FastOverrider.ButtonOverride = ButtonOverride;
    var GridOverride = (function () {
        function GridOverride() {
        }
        GridOverride.__onLoaded = function () {
            Ext.override(Ext.grid.Panel, {
                initComponent: function () {
                    this.callParent(arguments);
                    if (this.ownerGrid) {
                        FastExt.Grid.onGridInitComponent(this.ownerGrid);
                    }
                    else {
                        FastExt.Grid.onGridInitComponent(this);
                    }
                },
                finishRender: function () {
                    this.callParent(arguments);
                    if (this.ownerGrid) {
                        FastExt.Grid.onGridAfterRender(this.ownerGrid);
                    }
                    else {
                        FastExt.Grid.onGridAfterRender(this);
                    }
                },
                destroy: function () {
                    try {
                        if (this.contextMenu) {
                            this.contextMenu.destroy();
                        }
                        if (this.columnHeadMenu) {
                            this.columnHeadMenu.destroy();
                        }
                        FastExt.Cache.memory["GridSelectHistory" + this.code] = null;
                    }
                    catch (e) {
                    }
                    this.callParent(arguments);
                }
            });
            Ext.override(Ext.grid.CellContext, {
                setRow: function (row) {
                    try {
                        if (!this.view) {
                            return this;
                        }
                        if (row) {
                            this.callParent(arguments);
                        }
                        return this;
                    }
                    catch (e) {
                        console.error(e);
                    }
                    return this;
                }
            });
            Ext.override(Ext.grid.column.Column, {
                constructor: function () {
                    this.callParent(arguments);
                    this.ripple = { destroyTime: 300 };
                },
                afterRender: function () {
                    try {
                        var me = this;
                        me.code = FastExt.Power.getPowerCode(me);
                        if (!me.renderer) {
                            me.renderer = FastExt.Renders.normal();
                        }
                        if (me.rendererFunction) {
                            me.renderer = eval(me.rendererFunction);
                        }
                        FastExt.Grid.configColumnProperty(me);
                        FastExt.Grid.configColumnListener(me);
                    }
                    catch (e) {
                        console.error(e);
                    }
                    finally {
                        this.callParent(arguments);
                    }
                },
                destroy: function () {
                    if (this.searchMenu) {
                        this.searchMenu.destroy();
                    }
                    if (this.editMenu) {
                        this.editMenu.destroy();
                    }
                    if (this.batchEditMenu) {
                        this.batchEditMenu.destroy();
                    }
                    this.callParent(arguments);
                }
            });
            Ext.override(Ext.grid.selection.SpreadsheetModel, {
                onHeaderClick: function () {
                    this.callParent(arguments);
                },
                deselectAll: function (suppressEvent, passHistory) {
                    if (!FastExt.Base.toBool(passHistory, false)) {
                        if (this.view && this.view.ownerGrid
                            && this.view.ownerGrid.selectHistoryConfig
                            && this.view.ownerGrid.selectHistoryConfig.state === 1) {
                            this.view.ownerGrid.clearSelectRecordHistory();
                        }
                    }
                    this.callParent(arguments);
                },
                selectAll: function () {
                    this.callParent(arguments);
                    if (this.selected) {
                        this.selected.allSelected = true;
                    }
                },
                getSelection: function (passHistory) {
                    if (!FastExt.Base.toBool(passHistory, false)) {
                        if (this.view && this.view.ownerGrid
                            && this.view.ownerGrid.selectHistoryConfig
                            && this.view.ownerGrid.selectHistoryConfig.state === 1) {
                            return this.view.ownerGrid.getSelectRecordHistory();
                        }
                    }
                    return this.callParent(arguments);
                },
                getNumbererColumnConfig: function () {
                    var config = this.callParent(arguments);
                    config["text"] = "序号";
                    config["align"] = "center";
                    config["resizable"] = true;
                    if (parseInt(config["width"]) > 0) {
                        config["width"] = 52;
                    }
                    config["configWidth"] = config["width"];
                    return config;
                },
                onStoreChanged: function () {
                    if (!this.selected) {
                        return;
                    }
                    if (!this.selected.selectedRecords) {
                        return;
                    }
                    try {
                        this.callParent(arguments);
                    }
                    catch (e) {
                        console.error(e);
                    }
                },
            });
            Ext.override(Ext.grid.ColumnLayout, {
                calculate: function (ownerContext) {
                    try {
                        this.callParent(arguments);
                    }
                    catch (e) {
                    }
                },
            });
        };
        return GridOverride;
    }());
    FastOverrider.GridOverride = GridOverride;
    var TableViewOverride = (function () {
        function TableViewOverride() {
        }
        TableViewOverride.__onLoaded = function () {
            Ext.override(Ext.view.Table, {
                onCellMouseUp: function (cellEl, cellIndex, record, rowEl, rowIndex, e) {
                    this.callParent(arguments);
                    try {
                        Ext.fly(rowEl.parentElement.parentElement).ripple(e, { color: "#afafaf", destroyTime: 300 });
                    }
                    catch (e) {
                    }
                },
            });
        };
        return TableViewOverride;
    }());
    FastOverrider.TableViewOverride = TableViewOverride;
    var StoreOverride = (function () {
        function StoreOverride() {
        }
        StoreOverride.__onLoaded = function () {
            Ext.override(Ext.data.Store, {
                constructor: function () {
                    this.callParent(arguments);
                    if (this.entity) {
                        this.autoDestroy = true;
                    }
                    this.storeCode = $.md5(FastExt.Base.buildOnlyNumber("STR"));
                },
                destroy: function () {
                    try {
                        if (this.columnRenderKey) {
                            if (Ext.isArray(this.columnRenderKey)) {
                                for (var _i = 0, _a = this.columnRenderKey; _i < _a.length; _i++) {
                                    var columnRenderKeyElement = _a[_i];
                                    FastExt.Cache.memory[columnRenderKeyElement] = null;
                                    window[columnRenderKeyElement] == null;
                                }
                            }
                            else {
                                FastExt.Cache.memory[this.columnRenderKey] = null;
                                window[this.columnRenderKey] == null;
                            }
                        }
                        if (this.entity) {
                            FastExt.Server.destroyList(this.getId());
                        }
                    }
                    catch (e) {
                    }
                    this.callParent(arguments);
                },
                getStoreCode: function () {
                    if (Ext.isEmpty(this.storeCode)) {
                        this.storeCode = $.md5(FastExt.Base.buildOnlyNumber("STR"));
                    }
                    return this.storeCode;
                },
            });
        };
        return StoreOverride;
    }());
    FastOverrider.StoreOverride = StoreOverride;
    var LayoutOverride = (function () {
        function LayoutOverride() {
        }
        LayoutOverride.__onLoaded = function () {
            Ext.override(Ext.layout.container.Accordion, {
                nextCmp: function (cmp) {
                    var next = cmp.next();
                    if (next && next.isHidden()) {
                        return this.nextCmp(next);
                    }
                    return next;
                },
                prevCmp: function (cmp) {
                    var prev = cmp.prev();
                    if (prev && prev.isHidden()) {
                        return this.prevCmp(prev);
                    }
                    return prev;
                },
                onBeforeComponentCollapse: function (comp) {
                    try {
                        var me = this, owner = me.owner, toExpand = void 0, expanded = void 0, previousValue = void 0;
                        if (me.owner.items.getCount() === 1) {
                            return false;
                        }
                        if (!me.processing) {
                            me.processing = true;
                            previousValue = owner.deferLayouts;
                            owner.deferLayouts = true;
                            toExpand = me.nextCmp(comp) || me.prevCmp(comp);
                            if (toExpand.isHidden()) {
                                owner.deferLayouts = previousValue;
                                me.processing = false;
                                me.onBeforeComponentCollapse(toExpand);
                                return;
                            }
                            if (me.multi) {
                                owner.deferLayouts = previousValue;
                                me.processing = false;
                                return;
                            }
                            if (toExpand) {
                                toExpand.expand();
                            }
                            owner.deferLayouts = previousValue;
                            me.processing = false;
                        }
                    }
                    catch (e) {
                        console.error(e);
                    }
                }
            });
        };
        return LayoutOverride;
    }());
    FastOverrider.LayoutOverride = LayoutOverride;
    var DomOverride = (function () {
        function DomOverride() {
        }
        DomOverride.__onLoaded = function () {
            Ext.override(Ext.dom.Element, {
                syncContent: function (source) {
                    try {
                        this.callParent(arguments);
                    }
                    catch (e) {
                        console.error(e);
                    }
                },
                constructor: function (dom) {
                    this.callParent(arguments);
                },
                onFastMouseUp: function (e, t) {
                    if (t && t.className && t.className.toString().indexOf("x-tree-elbow-img") >= 0) {
                        FastExt.Cache.memory["holdGridRecordSelectHistory"] = true;
                    }
                    else {
                        FastExt.Cache.memory["holdGridRecordSelectHistory"] = false;
                    }
                },
                removeCls: function () {
                    try {
                        if (!this.getData()) {
                            return;
                        }
                        return this.callParent(arguments);
                    }
                    catch (e) {
                        console.error(e);
                    }
                    return this;
                },
            });
        };
        return DomOverride;
    }());
    FastOverrider.DomOverride = DomOverride;
    var ToolbarOverride = (function () {
        function ToolbarOverride() {
        }
        ToolbarOverride.__onLoaded = function () {
            Ext.override(Ext.toolbar.Paging, {
                initComponent: function () {
                    this.inputItemWidth = 70;
                    this.callParent(arguments);
                    var refreshBtn = this.child("#refresh");
                    refreshBtn.setIconCls("extIcon extRefresh grayColor");
                    this.on("beforechange", this.onFastBeforeChange, this);
                },
                updateInfo: function () {
                    this.callParent(arguments);
                    var displayItem = this.child('#displayItem');
                    if (displayItem && FastExt.Base.toInt(this.selectCount, 0) > 1) {
                        displayItem.setText(displayItem.html + "，选中 " + this.selectCount + " 条");
                    }
                },
                onFastBeforeChange: function (obj, page, eOpts) {
                    return obj.checkStoreUpdate(function () {
                        obj.store.loadPage(page);
                    });
                },
                checkStoreUpdate: function (callBack) {
                    var me = this;
                    if (!me.store.entity) {
                        return true;
                    }
                    var records = me.store.getUpdatedRecords();
                    if (records.length > 0) {
                        FastExt.Dialog.showConfirm("系统提醒", "当前存在被修改的数据，是否立即提交修改？", function (button, text) {
                            if (button == "yes") {
                                FastExt.Store.commitStoreUpdate(me.store).then(function () {
                                    callBack();
                                });
                            }
                            else {
                                callBack();
                            }
                        }, { yes: "提交修改", no: "忽略修改" });
                        return false;
                    }
                    return true;
                }
            });
        };
        return ToolbarOverride;
    }());
    FastOverrider.ToolbarOverride = ToolbarOverride;
    var UtilOverride = (function () {
        function UtilOverride() {
        }
        UtilOverride.__onLoaded = function () {
            Ext.override(Ext.util.Grouper, {
                sortFn: function (item1, item2) {
                    return 0;
                }
            });
        };
        return UtilOverride;
    }());
    FastOverrider.UtilOverride = UtilOverride;
    var ResizerOverride = (function () {
        function ResizerOverride() {
        }
        ResizerOverride.__onLoaded = function () {
            Ext.override(Ext.resizer.Splitter, {
                onRender: function () {
                    var me = this;
                    me.collapseOnDblClick = false;
                    me.callParent(arguments);
                }
            });
        };
        return ResizerOverride;
    }());
    FastOverrider.ResizerOverride = ResizerOverride;
    var DDOverride = (function () {
        function DDOverride() {
        }
        DDOverride.__onLoaded = function () {
            Ext.override(Ext.dd.DragTracker, {
                onMouseDown: function (e) {
                    this.callParent(arguments);
                    if (this.disabled) {
                        return;
                    }
                    if (e.target && e.target.className) {
                        if (e.target.className.toString().indexOf("x-tool") >= 0) {
                            return;
                        }
                        if (e.target.className.toString().indexOf("x-column") >= 0) {
                            return;
                        }
                    }
                    var iframePanelArray = Ext.ComponentQuery.query("[iframePanel=true]");
                    for (var i = 0; i < iframePanelArray.length; i++) {
                        iframePanelArray[i].oldDisabled = iframePanelArray[i].disabled;
                        iframePanelArray[i].setDisabled(true);
                    }
                },
                onMouseUp: function (e) {
                    this.callParent(arguments);
                    var iframePanelArray = Ext.ComponentQuery.query("[iframePanel=true]");
                    for (var i = 0; i < iframePanelArray.length; i++) {
                        iframePanelArray[i].setDisabled(iframePanelArray[i].oldDisabled);
                    }
                },
                endDrag: function (e) {
                    this.callParent(arguments);
                    var iframePanelArray = Ext.ComponentQuery.query("[iframePanel=true]");
                    for (var i = 0; i < iframePanelArray.length; i++) {
                        iframePanelArray[i].setDisabled(iframePanelArray[i].oldDisabled);
                    }
                }
            });
        };
        return DDOverride;
    }());
    FastOverrider.DDOverride = DDOverride;
    var FormOverride = (function () {
        function FormOverride() {
        }
        FormOverride.__onLoaded = function () {
            Ext.override(Ext.form.Basic, {
                submit: function (options) {
                    options = options || {};
                    var me = this, action;
                    options.submitEmptyText = false;
                    options.timeout = 3 * 60;
                    if (options.standardSubmit || me.standardSubmit) {
                        action = 'standardsubmit';
                    }
                    else {
                        action = me.api ? 'directsubmit' : 'submit';
                    }
                    options.params = FastExt.Json.mergeJson(options.params, me.extraParams);
                    return me.doAction(action, options);
                },
                getValues: function (asString, dirtyOnly, includeEmptyText, useDataValues, isSubmitting) {
                    var value = this.callParent(arguments);
                    var extraParams = {};
                    var fields = this.getFields().items;
                    for (var _i = 0, fields_2 = fields; _i < fields_2.length; _i++) {
                        var field = fields_2[_i];
                        if (field.extraParams) {
                            extraParams = FastExt.Json.mergeJson(extraParams, field.extraParams);
                        }
                        if (field.multiSplit) {
                            extraParams[field.name] = field.getValue().split(field.multiSplit);
                        }
                    }
                    if (asString) {
                        return value + "&" + Ext.Object.toQueryString(extraParams);
                    }
                    return FastExt.Json.mergeJson(value, extraParams);
                },
                isValid: function () {
                    try {
                        var me = this, invalid = void 0;
                        Ext.suspendLayouts();
                        var fieldName_1 = "";
                        var index_1 = 0;
                        var errorInfo_1 = "请正确填写数据！";
                        invalid = me.getFields().filterBy(function (field) {
                            var v = !field.validate();
                            if (v && index_1 === 0) {
                                fieldName_1 = field.getFieldLabel();
                                errorInfo_1 = FastExt.Form.getFieldError(field)[0];
                                index_1++;
                            }
                            return v;
                        });
                        Ext.resumeLayouts(true);
                        var result = invalid.length < 1;
                        if (!result) {
                            if (Ext.isEmpty(fieldName_1)) {
                                FastExt.Dialog.toast("请将数据填写完整！");
                            }
                            else if (!Ext.isEmpty(errorInfo_1)) {
                                FastExt.Dialog.toast("【" + fieldName_1 + "】错误：" + errorInfo_1);
                            }
                            else {
                                FastExt.Dialog.toast("【" + fieldName_1 + "】错误！");
                            }
                            FastExt.Component.shakeComment(me.owner.ownerCt);
                        }
                        return result;
                    }
                    catch (e) {
                        FastExt.Dialog.showException(e);
                    }
                }
            });
            Ext.override(Ext.form.FormPanel, {
                getForm: function () {
                    var form = this.callParent(arguments);
                    if (form) {
                        form.extraParams = FastExt.Json.mergeJson(this.extraParams, form.extraParams);
                    }
                    return form;
                }
            });
            Ext.override(Ext.form.field.File, {
                onRender: function () {
                    this.callParent(arguments);
                    var me = this;
                    if (me.multiple && me.fileInputEl) {
                        me.fileInputEl.dom.setAttribute("multiple", "multiple");
                    }
                }
            });
            Ext.override(Ext.form.field.Time, {
                initComponent: function () {
                    this.invalidText = "无效的时间格式!";
                    this.callParent(arguments);
                }
            });
            Ext.override(Ext.form.field.Text, {
                validate: function () {
                    var result = this.callParent(arguments);
                    if (result && this.isUseHistory()) {
                        this.saveHistory();
                    }
                    return result;
                },
                getComment: function () {
                    return this.comment;
                },
                isUseHistory: function () {
                    return (this.xtype === "textfield" || this.xtype === "numberfield") && !this.disabled && !FastExt.Component.isRealReadOnly(this) && this.useHistory;
                },
                isUseLetterKeyboard: function () {
                    return this.xtype === "textfield" && !this.disabled && !FastExt.Component.isRealReadOnly(this) && this.letterKeyboard;
                },
                onChange: function (newVal, oldVal) {
                    this.callParent(arguments);
                    if (this.isUseHistory()) {
                        this.checkHistory();
                    }
                    if (this.isShownHistory()) {
                        this.hideHistory();
                    }
                    if (this.isUseLetterKeyboard()) {
                        document.getElementById(this.getInputId()).setAttribute("type", "text");
                    }
                },
                finishRender: function () {
                    this.callParent(arguments);
                    if (this.isUseHistory()) {
                        this.saveHistory();
                        this.checkHistory();
                        this.inputEl.on('click', this.onFastHistoryInputClick, this);
                    }
                    if (this.isUseLetterKeyboard()) {
                        document.getElementById(this.getInputId()).setAttribute("type", "password");
                    }
                },
                onFastHistoryInputClick: function () {
                    if (this.checkHistory() && this.isUseHistory()) {
                        if (this.historyShown) {
                            this.hideHistory();
                        }
                        else {
                            this.showHistory();
                        }
                    }
                },
                onFastHideHistoryMenu: function () {
                    FastExt.Component.resumeEditorMenu(this);
                    if (this.hideHistoryTask) {
                        this.hideHistoryTask.delay(100);
                    }
                },
                onFastCommentClick: function () {
                    var title = "查看【" + this.configFieldLabel + "】的说明";
                    if (Ext.isEmpty(this.configFieldLabel)) {
                        title = "查看说明";
                    }
                    FastExt.Dialog.showHtml(this, title, this.getComment(), false);
                },
                getHistory: function () {
                    if (!this.code) {
                        this.code = FastExt.Power.getPowerCode(this);
                    }
                    var cacheHistory = FastExt.Cache.getCache(this.getHistoryCacheKey());
                    if (this.defaultHistory) {
                        if (Ext.isEmpty(cacheHistory)) {
                            cacheHistory = {};
                        }
                        cacheHistory = Ext.Object.merge(cacheHistory, this.defaultHistory);
                    }
                    return cacheHistory;
                },
                checkHistory: function () {
                    var cacheHistory = this.getHistory();
                    var historyTrigger = this.getTrigger('history');
                    if (!historyTrigger) {
                        return false;
                    }
                    if (cacheHistory && Object.keys(cacheHistory).length > 0) {
                        historyTrigger.show();
                        return true;
                    }
                    else {
                        historyTrigger.hide();
                        return false;
                    }
                },
                clearHistory: function () {
                    if (!this.code) {
                        this.code = FastExt.Power.getPowerCode(this);
                    }
                    FastExt.Cache.setCache(this.code + FastExt.System.ManagerHandler.getManagerId(), {});
                    FastExt.Dialog.toast("已清空历史记录！");
                    this.checkHistory();
                },
                showHistory: function () {
                    if (!this.code) {
                        this.code = FastExt.Power.getPowerCode(this);
                    }
                    if (this.hideHistoryTask) {
                        this.hideHistoryTask.cancel();
                    }
                    if (this.historyMenu) {
                        this.historyMenu.destroy();
                    }
                    var meField = this;
                    FastExt.Component.holdEditorMenu(meField);
                    this.historyMenu = new Ext.menu.Menu({
                        padding: '0 0 0 0',
                        power: false,
                        showSeparator: false,
                        minWidth: this.bodyEl.getWidth(),
                        style: {
                            background: "#ffffff"
                        },
                        listeners: {
                            hide: {
                                fn: this.onFastHideHistoryMenu,
                                scope: this,
                            },
                        },
                    });
                    var cacheHistory = this.getHistory();
                    if (!cacheHistory) {
                        return;
                    }
                    if (Ext.isArray(cacheHistory)) {
                        cacheHistory = {};
                    }
                    this.historyMenu.add({
                        text: "清空历史记录",
                        iconCls: 'extIcon extClear grayColor',
                        handler: function () {
                            meField.clearHistory();
                        }
                    });
                    this.historyMenu.add("-");
                    var keys = Object.keys(cacheHistory);
                    keys.sort(function (a, b) {
                        var date1 = cacheHistory[a].date;
                        var date2 = cacheHistory[b].date;
                        return FastExt.Dates.parseDate(date2).getTime() - FastExt.Dates.parseDate(date1).getTime();
                    });
                    var newCacheHistory = {};
                    var count = 1;
                    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                        var key = keys_1[_i];
                        if (key.toLowerCase() === "<null>") {
                            continue;
                        }
                        var cache = cacheHistory[key];
                        this.historyMenu.add({
                            text: FastExt.Base.toMaxString(Ext.util.Format.htmlEncode(key), 50),
                            iconCls: cache.default ? 'extIcon extColumn searchColor' : 'extIcon extHistory searchColor',
                            realText: key,
                            handler: function () {
                                meField.setValue(this.realText);
                                meField.fireEvent("selectHistoryValue", meField, this.realText);
                            },
                        });
                        if (count >= 20) {
                            break;
                        }
                        count++;
                        newCacheHistory[key] = cache;
                    }
                    this.historyMenu.showBy(this.bodyEl, "tl-bl?");
                    this.historyShown = true;
                    if (!this.hideHistoryTask) {
                        this.hideHistoryTask = new Ext.util.DelayedTask(function () {
                            this.historyShown = false;
                        }, this);
                    }
                    FastExt.Cache.setCache(this.getHistoryCacheKey(), newCacheHistory);
                },
                hideHistory: function () {
                    if (this.historyMenu) {
                        this.historyMenu.close();
                    }
                    FastExt.Component.resumeEditorMenu(this);
                    this.historyShown = false;
                },
                isShownHistory: function () {
                    return this.historyShown;
                },
                saveHistory: function () {
                    var value = this.getValue();
                    if (Ext.isEmpty(value)) {
                        return;
                    }
                    var cacheHistory = FastExt.Cache.getCache(this.getHistoryCacheKey());
                    if (!cacheHistory) {
                        cacheHistory = {};
                    }
                    cacheHistory[value] = {
                        date: Ext.Date.format(new Date(), "Y-m-d H:i:s"),
                    };
                    FastExt.Cache.setCache(this.getHistoryCacheKey(), cacheHistory);
                },
                getHistoryCacheKey: function () {
                    return this.code + FastExt.System.ManagerHandler.getManagerId();
                },
                initComponent: function () {
                    try {
                        var me_3 = this;
                        if (me_3.inputType === 'password') {
                            me_3.addTriggers({
                                eayOpen: {
                                    cls: 'extIcon extEye editColor',
                                    hidden: true,
                                    handler: function () {
                                        if (me_3.up("menu")) {
                                            me_3.up("menu").holdShow = true;
                                        }
                                        this.getTrigger('eayOpen').hide();
                                        this.getTrigger('eayClose').show();
                                        var inputObj = document.getElementById(this.getInputId());
                                        inputObj.blur();
                                        inputObj.setAttribute("type", "password");
                                        setTimeout(function () {
                                            FastExt.Base.inputFocusEnd(inputObj);
                                            if (me_3.up("menu")) {
                                                me_3.up("menu").holdShow = false;
                                            }
                                        }, 100);
                                    }
                                },
                                eayClose: {
                                    cls: 'extIcon extNoSee',
                                    handler: function () {
                                        if (me_3.up("menu")) {
                                            me_3.up("menu").holdShow = true;
                                        }
                                        this.getTrigger('eayOpen').show();
                                        this.getTrigger('eayClose').hide();
                                        var inputObj = document.getElementById(this.getInputId());
                                        inputObj.blur();
                                        inputObj.setAttribute("type", "text");
                                        setTimeout(function () {
                                            FastExt.Base.inputFocusEnd(inputObj);
                                            if (me_3.up("menu")) {
                                                me_3.up("menu").holdShow = false;
                                            }
                                        }, 100);
                                    }
                                }
                            });
                        }
                        if (me_3.isUseHistory()) {
                            console.log("历史记录！", this);
                            me_3.addTriggers({
                                history: {
                                    cls: 'extIcon extHistory2',
                                    hidden: true,
                                    weight: -1,
                                    handler: me_3.onFastHistoryInputClick,
                                },
                            });
                        }
                        if (!Ext.isEmpty(me_3.getComment())) {
                            me_3.addTriggers({
                                comment: {
                                    cls: 'extIcon extQuestion2',
                                    weight: -2,
                                    handler: me_3.onFastCommentClick,
                                },
                            });
                        }
                    }
                    finally {
                        this.callParent(arguments);
                    }
                },
                destroy: function () {
                    if (this.historyMenu) {
                        this.historyMenu.destroy();
                    }
                    this.callParent(arguments);
                },
            });
            Ext.override(Ext.form.field.ComboBox, {
                initComponent: function () {
                    try {
                        var me = this;
                        if (me.searchable) {
                            me.editable = true;
                            me.queryMode = "local";
                            me.anyMatch = true;
                            me.caseSensitive = true;
                            me.validator = function (val) {
                                if (this.allowBlank) {
                                    return true;
                                }
                                if (this.searchable && !FastExt.Base.toBool(this.newable, false)) {
                                    var enumRecord = this.getStore().findRecord(this.valueField, this.getValue(), 0, false, false, true);
                                    if (!enumRecord) {
                                        return "数据【" + val + "】无效，请选择下拉框里的选项！";
                                    }
                                }
                                return true;
                            };
                        }
                    }
                    finally {
                        this.callParent(arguments);
                    }
                },
                toggle: function () {
                    var pickerHidden = this.getPicker().hidden;
                    if (pickerHidden) {
                        this.collapse();
                    }
                    else if (this.searchable) {
                        this.doQuery(this.getRawValue(), false, true);
                    }
                    else {
                        this.expand();
                    }
                },
            });
            Ext.override(Ext.form.trigger.Trigger, {
                onMouseDown: function (e) {
                    this.callParent(arguments);
                    this.getEl().ripple(e, { destroyTime: 300 });
                },
            });
        };
        return FormOverride;
    }());
    FastOverrider.FormOverride = FormOverride;
    var MenuOverride = (function () {
        function MenuOverride() {
        }
        MenuOverride.__onLoaded = function () {
            Ext.override(Ext.menu.Menu, {
                hide: function () {
                    var me = this;
                    if (!me.powerMenu) {
                        if (FastExt.Power.menuShowing) {
                            return;
                        }
                    }
                    if (me.holdShow) {
                        return;
                    }
                    return this.callParent(arguments);
                },
                onShortcutKey: function () {
                    try {
                        this.callParent(arguments);
                    }
                    catch (e) {
                    }
                },
                delayClose: function (duration) {
                    new Ext.util.DelayedTask(this.close, this).delay(duration);
                },
            });
            Ext.override(Ext.menu.Item, {
                constructor: function () {
                    this.callParent(arguments);
                    this.ripple = { color: "#ffffff", destroyTime: 300 };
                },
                focus: function () {
                    if (this.isDisabled()) {
                        return;
                    }
                    if (this.isDisabled()) {
                        return;
                    }
                    var icon = this.icon;
                    var regStr = /([^/]*.svg)/;
                    if (icon && regStr.test(icon)) {
                        var newIcon = FastExt.Server.getIcon(regStr.exec(icon)[1].trim(), "#ffffff");
                        var iconEl = Ext.get(this.getId() + "-iconEl");
                        if (iconEl) {
                            iconEl.setStyle("background-image", "url(" + newIcon + ")");
                        }
                    }
                    return this.callParent(arguments);
                },
                onFocusLeave: function () {
                    this.callParent(arguments);
                    if (this.isDisabled()) {
                        return;
                    }
                    var icon = this.icon;
                    var regStr = /([^/]*.svg)/;
                    if (icon && regStr.test(icon)) {
                        var iconEl = Ext.get(this.getId() + "-iconEl");
                        if (iconEl) {
                            iconEl.setStyle("background-image", "url(" + icon + ")");
                        }
                    }
                },
            });
            Ext.override(Ext.layout.container.boxOverflow.Menu, {
                handleOverflow: function () {
                    var owner = this.layout.owner;
                    if (owner.hasListeners.overflowbegin) {
                        if (owner.fireEvent('overflowbegin')) {
                            return this.callParent(arguments);
                        }
                        return {
                            reservedSpace: 0,
                        };
                    }
                    else {
                        return this.callParent(arguments);
                    }
                },
                showTrigger: function () {
                    var owner = this.layout.owner;
                    if (owner.hasListeners.overflowshow) {
                        if (owner.fireEvent('overflowshow')) {
                            this.callParent(arguments);
                        }
                    }
                    else {
                        this.callParent(arguments);
                    }
                },
                hideTrigger: function () {
                    var owner = this.layout.owner;
                    if (owner.hasListeners.overflowshow) {
                        if (owner.fireEvent('overflowhide')) {
                            this.callParent(arguments);
                        }
                    }
                    else {
                        this.callParent(arguments);
                    }
                },
                createMenuConfig: function () {
                    var config = this.callParent(arguments);
                    if (config) {
                        delete config.cls;
                        delete config.userCls;
                        delete config.bodyCls;
                    }
                    return config;
                },
            });
        };
        return MenuOverride;
    }());
    FastOverrider.MenuOverride = MenuOverride;
    var WindowOverride = (function () {
        function WindowOverride() {
        }
        WindowOverride.__onLoaded = function () {
            Ext.override(Ext.Window, {
                setIcon: function (value) {
                    this.callParent(arguments);
                    var me = this;
                    var regStr = /([^/]*.svg)/;
                    if (value && regStr.test(value)) {
                        me.icon = FastExt.Server.getIcon(regStr.exec(value)[1].trim(), "#ffffff");
                    }
                },
                restore: function () {
                    if (!Ext.isEmpty(this.oldMaxHeight)) {
                        this.maxHeight = this.oldMaxHeight;
                    }
                    if (!Ext.isEmpty(this.oldMaxWidth)) {
                        this.maxWidth = this.oldMaxWidth;
                    }
                    return this.callParent(arguments);
                },
                maximize: function () {
                    if (!Ext.isEmpty(this.maxHeight)) {
                        this.height = Math.min(this.getHeight(), this.maxHeight);
                        this.oldMaxHeight = this.maxHeight;
                        delete this.maxHeight;
                    }
                    if (!Ext.isEmpty(this.maxWidth)) {
                        this.width = Math.min(this.getWidth(), this.maxWidth);
                        this.oldMaxWidth = this.maxWidth;
                        delete this.maxWidth;
                    }
                    return this.callParent(arguments);
                },
                afterRender: function () {
                    this.callParent(arguments);
                },
                onShowComplete: function () {
                    this.callParent(arguments);
                    this.toFront(true);
                    this.focus();
                    if (FastExt.Base.toBool(this.autofocusField, true)) {
                        var queryCmp = this.query("form");
                        if (queryCmp && queryCmp.length > 0) {
                            queryCmp[0].getForm().getFields().each(function (item) {
                                if (item.readOnly || item.isDisabled()) {
                                    return true;
                                }
                                if (item.xtype === "textfield" || item.xtype === "numberfield"
                                    || item.xtype === "contentfield"
                                    || item.xtype === "textareafield"
                                    || item.xtype === "htmlcontentfield") {
                                    item.safeFocus(100);
                                    return false;
                                }
                            });
                        }
                    }
                    var gridPanels = Ext.ComponentQuery.query('grid');
                    for (var _i = 0, gridPanels_1 = gridPanels; _i < gridPanels_1.length; _i++) {
                        var gridPanel = gridPanels_1[_i];
                        FastExt.GridEvent.onFastSelectionChange.apply(gridPanel);
                    }
                },
                initComponent: function () {
                    try {
                        if (Ext.isEmpty(this.tools)) {
                            this.tools = [];
                        }
                        if ((!this.modal && this.id.indexOf("messagebox") < 0 && FastExt.Base.toBool(this.unpin, true))
                            || FastExt.Base.toBool(this.unpin, false)) {
                            this.tools.push({
                                type: 'unpin',
                                tooltip: '固定窗口',
                                callback: function (owner, tool, event) {
                                    var currTools = owner.getHeader().getTools();
                                    if (tool.type === "unpin") {
                                        tool.setType("pin");
                                        tool.setTooltip("取消固定窗口");
                                        owner.canClose = false;
                                        owner.justTop = true;
                                    }
                                    else {
                                        tool.setType("unpin");
                                        tool.setTooltip("固定窗口");
                                        owner.canClose = true;
                                        owner.justTop = false;
                                    }
                                    for (var i = 0; i < currTools.length; i++) {
                                        var item = currTools[i];
                                        if (item.type === "close") {
                                            if (tool.type === "unpin") {
                                                item.show();
                                            }
                                            else {
                                                item.hide();
                                            }
                                            break;
                                        }
                                    }
                                }
                            });
                        }
                        if (this.animateTarget == window) {
                            this.animateTarget = null;
                        }
                        if (!this.animateTarget) {
                            this.animateTarget = FastExt.Base.getTargetElement(FastExt.SystemLayout.getCurrClickTarget());
                        }
                        if (this.getId().indexOf("ghost") >= 0) {
                            this.animateTarget = null;
                        }
                        if (!FastExt.System.ConfigHandler.isEnableWindowAnim()) {
                            this.animateTarget = null;
                        }
                        if (FastExt.Base.toString(this.xtype, "") === "toast") {
                            this.animateTarget = null;
                        }
                        if (FastExt.Base.toBool(this.animateDisable, false)) {
                            this.animateTarget = null;
                        }
                        this.liveDrag = true;
                    }
                    catch (e) {
                        console.error(e);
                    }
                    finally {
                        this.callParent(arguments);
                    }
                },
            });
        };
        return WindowOverride;
    }());
    FastOverrider.WindowOverride = WindowOverride;
    var MessageBoxOverride = (function () {
        function MessageBoxOverride() {
        }
        MessageBoxOverride.__onLoaded = function () {
            Ext.override(Ext.window.MessageBox, {
                confirm: function (cfg, message, fn, scope) {
                    FastExt.Dialog.showConfirm(cfg, message, fn);
                    return this;
                },
                prompt: function (title, message, fn, scope, multiline, value) {
                    FastExt.Dialog.showPrompt(title, message, fn, multiline, value);
                    return this;
                },
                alert: function (title, message, fn, scope) {
                    FastExt.Dialog.showAlert(title, message, fn);
                    return this;
                },
                updateProgress: function () {
                    if (arguments[2]) {
                        arguments[2] = "<div class='fast-messagebox-message-progress'>" + arguments[2] + "</div>";
                    }
                    return this.callParent(arguments);
                },
                show: function (cfg) {
                    var me = this;
                    me.closeToolText = null;
                    cfg = cfg || {};
                    var type = "";
                    if (cfg.progress) {
                        type = "-progress";
                    }
                    if (!Ext.isEmpty(cfg.msg)) {
                        cfg.msg = "<div class='fast-messagebox-message" + type + "'>" + cfg.msg + "</div>";
                    }
                    if (!Ext.isEmpty(cfg.message)) {
                        cfg.message = "<div class='fast-messagebox-message" + type + "'>" + cfg.message + "</div>";
                    }
                    if (FastExt.Base.toBool(cfg.progress, false)
                        || FastExt.Base.toBool(cfg.wait, false)) {
                        cfg.animateTarget = null;
                    }
                    else {
                        if (Ext.isEmpty(cfg.animateTarget)) {
                            cfg.animateTarget = FastExt.Base.getTargetElement(FastExt.SystemLayout.getCurrClickTarget());
                        }
                        if (!FastExt.System.ConfigHandler.isEnableWindowAnim()) {
                            cfg.animateTarget = null;
                        }
                    }
                    return me.callParent(arguments);
                },
                onShowComplete: function () {
                    this.callParent(arguments);
                    this.toFront(true);
                    this.focus();
                }
            });
        };
        return MessageBoxOverride;
    }());
    FastOverrider.MessageBoxOverride = MessageBoxOverride;
    var TooltipOverride = (function () {
        function TooltipOverride() {
        }
        TooltipOverride.__onLoaded = function () {
            Ext.override(Ext.tip.ToolTip, {
                show: function () {
                    if (BoxReordererOverrider.DRAGGING) {
                        return;
                    }
                    this.callParent(arguments);
                },
                onShow: function () {
                    this.callParent(arguments);
                    if (this.disableDocMouseDown) {
                        Ext.destroy(this.mousedownListener);
                    }
                },
                onDocMouseDown: function (e) {
                    try {
                        this.callParent(arguments);
                    }
                    catch (e) {
                    }
                }
            });
        };
        return TooltipOverride;
    }());
    FastOverrider.TooltipOverride = TooltipOverride;
    var TreeListOverrider = (function () {
        function TreeListOverrider() {
        }
        TreeListOverrider.__onLoaded = function () {
            Ext.override(Ext.list.Tree, {
                constructor: function () {
                    this.callParent(arguments);
                    this.element.on("contextmenu", this.onContextMenu, this);
                },
                onContextMenu: function (e) {
                    var item = e.getTarget('[data-recordId]'), id;
                    if (item) {
                        id = item.getAttribute('data-recordId');
                        item = this.itemMap[id];
                        if (this.hasListener("itemcontextmenu")) {
                            this.fireEvent("itemcontextmenu", this, item, e);
                        }
                        this.setSelection(item.getNode());
                    }
                },
            });
        };
        return TreeListOverrider;
    }());
    FastOverrider.TreeListOverrider = TreeListOverrider;
    var BoxReordererOverrider = (function () {
        function BoxReordererOverrider() {
        }
        BoxReordererOverrider.__onLoaded = function () {
            Ext.override(Ext.ux.BoxReorderer, {
                startDrag: function () {
                    this.callParent(arguments);
                    BoxReordererOverrider.DRAGGING = true;
                },
                endDrag: function () {
                    this.callParent(arguments);
                    BoxReordererOverrider.DRAGGING = false;
                },
            });
        };
        return BoxReordererOverrider;
    }());
    FastOverrider.BoxReordererOverrider = BoxReordererOverrider;
})(FastOverrider || (FastOverrider = {}));
var FastExt;
(function (FastExt) {
    var PluginLoader = (function () {
        function PluginLoader() {
        }
        PluginLoader.loadFiles = function (srcPaths, callBack) {
            var doLoadFile = function (index, result) {
                if (index >= srcPaths.length) {
                    callBack(result);
                    return;
                }
                var path = srcPaths[index];
                if (Ext.isObject(path)) {
                    result.push(path);
                    doLoadFile(index + 1, result);
                }
                else if (Ext.isString(path)) {
                    $.get(path, function (content) {
                        result.push(content);
                        doLoadFile(index + 1, result);
                    });
                }
                else {
                    doLoadFile(index + 1, result);
                }
            };
            doLoadFile(0, []);
        };
        PluginLoader.loadPlugins = function (pluginCode, srcPaths, callBack) {
            if (FastExt.PluginLoader.loadedPluginMap[pluginCode]) {
                callBack();
                return;
            }
            var scriptScrPaths = [], cssSrcPaths = [];
            for (var _i = 0, srcPaths_1 = srcPaths; _i < srcPaths_1.length; _i++) {
                var srcPath = srcPaths_1[_i];
                if (Ext.isString(srcPath)) {
                    if (srcPath.endWith(".js")) {
                        scriptScrPaths.push(srcPath);
                    }
                    else if (srcPath.endWith(".css")) {
                        cssSrcPaths.push(srcPath);
                    }
                }
                else if (srcPath.type === "js") {
                    scriptScrPaths.push(srcPath.src);
                }
                else if (srcPath.type === "css") {
                    cssSrcPaths.push(srcPath.src);
                }
            }
            FastExt.Documents.addScripts(scriptScrPaths, function () {
                FastExt.Documents.addStylesheets(cssSrcPaths, function () {
                    FastExt.PluginLoader.loadedPluginMap[pluginCode] = true;
                    callBack();
                });
            });
        };
        PluginLoader.loadedPluginMap = {};
        return PluginLoader;
    }());
    FastExt.PluginLoader = PluginLoader;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Plugins = (function () {
        function Plugins() {
        }
        Plugins.__onLoaded = function () {
            Ext.define('Ext.plugin.ShowLazyItems', {
                extend: 'Ext.plugin.Abstract',
                alias: 'plugin.showlazyitems',
                init: function (comp) {
                    this.callParent(arguments);
                    if (this.items) {
                        if (this.eagerInstantiation) {
                            this.items = comp.prepareItems(this.items);
                        }
                    }
                    comp.onShowComplete = Ext.Function.createInterceptor(comp.onShowComplete, this.onComponentShow, this);
                },
                onComponentShow: function () {
                    this.cmp.add(this.items);
                    this.cmp.onComponentShow = null;
                }
            });
        };
        return Plugins;
    }());
    FastExt.Plugins = Plugins;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var PowerSet = (function () {
        function PowerSet() {
            this.show = true;
            this.edit = true;
        }
        return PowerSet;
    }());
    FastExt.PowerSet = PowerSet;
    var Power = (function () {
        function Power() {
        }
        Power.isPower = function () {
            return FastExt.Base.toBool(FastExt.System.ConfigHandler.getConfig("power_setting").value, false);
        };
        Power.hasPower = function (target, type) {
            if (target.managerPower) {
                if (target.managerPower.hasOwnProperty(type)) {
                    return target.managerPower[type];
                }
            }
            return true;
        };
        Power.checkPower = function (code) {
            var me = this;
            if (!me.powers[code]) {
                me.powers[code] = FastExt.Base.copy(me.defaultPower);
            }
            var powerConfig = me.powers[code];
            if (!Ext.isEmpty(powerConfig)) {
                for (var defaultPowerKey in me.defaultPower) {
                    if (!powerConfig.hasOwnProperty(defaultPowerKey)) {
                        powerConfig[defaultPowerKey] = me.defaultPower[defaultPowerKey];
                    }
                }
            }
            return powerConfig;
        };
        Power.checkManagerPower = function (target) {
            if (!FastExt.System.ManagerHandler.isValid()) {
                return null;
            }
            if (!FastExt.System.ManagerHandler.getGhostPowers()) {
                if (Ext.isEmpty(FastExt.System.ManagerHandler.getManagerExtPower()) || FastExt.System.ManagerHandler.getRoleType() === 0) {
                    return null;
                }
            }
            if (!FastExt.System.ManagerHandler.getGhostPowers()) {
                FastExt.System.ManagerHandler.setGhostPowers(FastExt.Json.jsonToObject(FastExt.System.ManagerHandler.getManagerExtPower()));
            }
            if (!FastExt.System.ManagerHandler.getGhostPowers()) {
                FastExt.System.ManagerHandler.setGhostPowers({});
            }
            var powerConfig = FastExt.System.ManagerHandler.getGhostPowers()[target.code];
            if (!powerConfig) {
                powerConfig = FastExt.Base.copy(FastExt.Power.defaultPower);
            }
            for (var defaultPowerKey in FastExt.Power.defaultPower) {
                if (!powerConfig.hasOwnProperty(defaultPowerKey)) {
                    powerConfig[defaultPowerKey] = FastExt.Power.defaultPower[defaultPowerKey];
                }
            }
            return powerConfig;
        };
        Power.pushPower = function (code, config) {
            var me = this;
            me.powers[code] = config;
        };
        Power.setPower = function (code, config) {
            var me = this;
            if (!me.powers[code]) {
                me.powers[code] = config;
            }
        };
        Power.getSavePowerData = function () {
            var me = this;
            var data = me.powers;
            return Ext.encode(data);
        };
        Power.getPowerCode = function (obj) {
            if (obj != null) {
                if (!Ext.isEmpty(obj.code)) {
                    return obj.code;
                }
                var buildText = null;
                if (Ext.isFunction(obj.up)) {
                    if (FastExt.Power.powerVersion === "2.0") {
                        var menuContainer = obj.up("[menuContainer=true]");
                        if (menuContainer) {
                            buildText = menuContainer.getTitle();
                        }
                        else {
                            var window_1 = obj.up("window");
                            if (window_1) {
                                buildText = window_1.getTitle();
                            }
                        }
                    }
                    else {
                        var window_2 = obj.up("window");
                        if (window_2) {
                            buildText = window_2.getTitle();
                        }
                    }
                }
                if (obj.name) {
                    buildText += obj.name;
                }
                if (obj.title) {
                    buildText += obj.title;
                }
                if (obj.text) {
                    buildText += obj.text;
                }
                if (obj.subtext) {
                    buildText += obj.subtext;
                }
                if (obj.dataIndex) {
                    buildText += obj.dataIndex;
                }
                if (Ext.isFunction(obj.getFieldLabel) && Ext.isEmpty(obj.getFieldLabel())) {
                    buildText += obj.getFieldLabel();
                }
                if (buildText) {
                    obj.buildCodeText = buildText;
                    return $.md5(buildText);
                }
            }
            return null;
        };
        Power.setPowerStyle = function (target) {
            var query = Ext.all("[code=" + target.code + "]");
            Ext.each(query, function (item, index) {
                var powerConfig = FastExt.Power.checkPower(target.code);
                if (powerConfig) {
                    if (!powerConfig.show) {
                        item.addCls("no-show-power");
                    }
                    else {
                        item.removeCls("no-show-power");
                        if (!powerConfig.edit) {
                            item.addCls("no-edit-power");
                        }
                        else {
                            item.removeCls("no-edit-power");
                        }
                    }
                }
            });
        };
        Power.showPowerConfig = function (target, e) {
            if (!FastExt.System.InitHandler.isInit()) {
                return;
            }
            var powerConfig = FastExt.Power.checkPower(target.code);
            FastExt.Power.menuShowing = true;
            var panel = Ext.create('Ext.container.Container', {
                layout: {
                    type: 'vbox',
                    pack: 'center'
                },
                border: 0,
                defaults: {
                    height: 20,
                    power: false
                },
                items: [
                    {
                        xtype: 'checkbox',
                        name: 'updateAlert',
                        checked: true,
                        boxLabel: '允许显示',
                        value: powerConfig.show,
                        listeners: {
                            change: function (obj, newValue, oldValue, eOpts) {
                                powerConfig.show = newValue;
                                FastExt.Power.setPowerStyle(target);
                            }
                        }
                    },
                    {
                        xtype: 'checkbox',
                        name: 'updateAlert',
                        checked: true,
                        boxLabel: '允许编辑',
                        hidden: !FastExt.Grid.isColumnType(target),
                        value: powerConfig.edit,
                        listeners: {
                            change: function (obj, newValue, oldValue, eOpts) {
                                powerConfig.edit = newValue;
                                FastExt.Power.setPowerStyle(target);
                            }
                        }
                    }
                ]
            });
            var contextMenu = new Ext.menu.Menu({
                padding: '0 0 0 10',
                powerMenu: true,
                showSeparator: false,
                style: {
                    background: "#ffffff"
                },
                items: [panel],
                listeners: {
                    beforehide: function (obj, eOpts) {
                        FastExt.Power.menuShowing = false;
                        FastExt.Power.pushPower(target.code, powerConfig);
                    }
                }
            });
            contextMenu.showAt(e.getXY());
        };
        Power.showPowerMenus = function (obj, checked, parent) {
            return new Ext.Promise(function (resolve, reject) {
                var data = FastExt.System.MenuHandler.getPowerMenuByConfig(FastExt.System.MenuHandler.getMenus(), checked, parent);
                var dataStore = Ext.create('Ext.data.TreeStore', {
                    data: data,
                    root: {
                        expanded: true
                    }
                });
                var treePanel = Ext.create('Ext.tree.Panel', {
                    store: dataStore,
                    rootVisible: false,
                    bufferedRenderer: false,
                    animate: true,
                    containerScroll: true,
                    autoScroll: true,
                    viewConfig: {
                        loadMask: {
                            msg: '加载功能菜单中，请稍后……'
                        }
                    },
                    listeners: {
                        checkchange: function (currNode, checked, e, eOpts) {
                            if (checked) {
                                currNode.bubble(function (parentNode) {
                                    parentNode.set('checked', true);
                                });
                                currNode.cascadeBy(function (node) {
                                    node.set('checked', true);
                                });
                            }
                            else {
                                currNode.cascadeBy(function (node) {
                                    node.set('checked', false);
                                });
                            }
                        }
                    }
                });
                var winWidth = parseInt((document.body.clientWidth * 0.5).toFixed(0));
                var winHeight = parseInt((document.body.clientHeight * 0.8).toFixed(0));
                var win = Ext.create('Ext.window.Window', {
                    title: '权限配置（选择功能菜单）',
                    height: winHeight,
                    width: winWidth,
                    minHeight: 400,
                    minWidth: 470,
                    layout: 'fit',
                    iconCls: 'extIcon extSelect',
                    resizable: true,
                    animateTarget: obj,
                    maximizable: true,
                    constrain: true,
                    items: [treePanel],
                    modal: true,
                    buttons: [{
                            text: '重置',
                            iconCls: 'extIcon extReset',
                            handler: function () {
                                dataStore.reload();
                            }
                        }, {
                            text: '确定',
                            iconCls: 'extIcon extOk',
                            handler: function () {
                                var checkedArray = treePanel.getChecked();
                                var menuIds = "";
                                for (var i = 0; i < checkedArray.length; i++) {
                                    menuIds += "," + checkedArray[i].data.id;
                                }
                                resolve(menuIds);
                                win.close();
                            }
                        }]
                });
                win.show();
            });
        };
        Power.showPowerExt = function (obj, menuPower, extPower, parentExtPower) {
            return new Ext.Promise(function (resolve, reject) {
                window["getMenuPower"] = function () {
                    return menuPower;
                };
                window["getExtPower"] = function () {
                    return extPower;
                };
                window["getParentExtPower"] = function () {
                    return parentExtPower;
                };
                window["close"] = function () {
                    Ext.getCmp("ExtPowerWindow").close();
                };
                var winWidth = parseInt((document.body.clientWidth * 0.5).toFixed(0));
                var winHeight = parseInt((document.body.clientHeight * 0.8).toFixed(0));
                var win = Ext.create('Ext.window.Window', {
                    id: "ExtPowerWindow",
                    title: '配置界面权限（在组件上右击鼠标进行编辑权限）',
                    iconCls: 'extIcon extPower',
                    layout: 'fit',
                    resizable: false,
                    maximized: true,
                    fixed: true,
                    draggable: false,
                    width: winWidth,
                    height: winHeight,
                    listeners: {
                        show: function (obj) {
                            obj.update("<iframe name='extPowerFrame' " +
                                " src='power?managerId=0' width='100%' height='100%' frameborder='0' scrolling='no' />");
                        }
                    },
                    buttons: [
                        {
                            text: '保存权限配置',
                            iconCls: 'extIcon extSave whiteColor',
                            handler: function () {
                                resolve(window["extPowerFrame"].window.getExtPower());
                                win.close();
                            }
                        }
                    ]
                });
                win.show();
            });
        };
        Power.powerVersion = "2.0";
        Power.types = [FastEnum.PowerType.gridcolumn, FastEnum.PowerType.menuitem, FastEnum.PowerType.button];
        Power.config = false;
        Power.menuShowing = false;
        Power.powers = [];
        Power.defaultPower = new FastExt.PowerSet();
        return Power;
    }());
    FastExt.Power = Power;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var RegExps = (function () {
        function RegExps() {
        }
        RegExps.REG_BY_IMAGE = /\.(jpg|png|gif|jpeg)$/i;
        RegExps.REG_BY_MP4 = /\.(mp4)$/i;
        RegExps.REG_BY_EXCEL = /\.(xls|xlsx)$/i;
        RegExps.REG_BY_WORD = /\.(doc)$/i;
        RegExps.REG_BY_TEXT = /\.(txt)$/i;
        return RegExps;
    }());
    FastExt.RegExps = RegExps;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Renders = (function () {
        function Renders() {
        }
        Renders.getRenderFunStr = function (column) {
            return FastExt.Cache.getCache(column.getRenderCacheKey());
        };
        Renders.getRenderColumn = function (obj, colIndex) {
            try {
                if (Ext.isFunction(obj.getHeaderContainer)) {
                    var headerCt = obj.getHeaderContainer();
                    if (headerCt) {
                        return headerCt.getHeaderAtIndex(colIndex);
                    }
                }
            }
            catch (e) {
                console.error(e);
            }
            return null;
        };
        Renders.getRenderKey = function (colIndex, rowIndex, store) {
            var key = $.md5(rowIndex + ":" + colIndex);
            if (!store) {
                store = {
                    getId: function () {
                        return new Date().getTime();
                    },
                };
            }
            var cacheKey = $.md5(key + store.getId());
            if (!store.columnRenderKey) {
                store.columnRenderKey = [];
            }
            store.columnRenderKey.push(cacheKey);
            return $.md5(key + store.getId());
        };
        Renders.onClickFromDataClick = function (obj) {
            var functionStr = Ext.util.Base64.decode($(obj).attr("data-click-function"));
            eval(functionStr);
        };
        Renders.toSingleLineText = function (val) {
            if (Ext.isEmpty(val)) {
                return this.toEmptyTip();
            }
            return val.toString()
                .replace(new RegExp("\n", 'g'), "")
                .replace(new RegExp("\t", 'g'), "")
                .replace(/<\/?.+?>/g, "")
                .replaceAll("\n", "")
                .replaceAll("\t", "");
        };
        Renders.toHtmlContent = function (val) {
            if (Ext.isEmpty(val)) {
                return this.toEmptyTip();
            }
            return val.toString()
                .replace(new RegExp("\n", 'g'), "<br/>")
                .replace(new RegExp("\t", 'g'), "&nbsp;&nbsp;&nbsp;&nbsp;")
                .replace(new RegExp(" ", 'g'), "&nbsp;");
        };
        Renders.toEmptyTip = function () {
            return FastExt.Renders.toEmpty("无");
        };
        Renders.toEmpty = function (tipValue) {
            if (Ext.isEmpty(tipValue)) {
                tipValue = "无";
            }
            return "<span style='color: #ccc;'>" + tipValue + "</span>";
        };
        Renders.toLinkUrlText = function (text, url) {
            var functionStr = "FastExt.Windows.openUrl('" + url + "','_blank')";
            return FastExt.Renders.toClickText(text, functionStr);
        };
        Renders.toClickText = function (text, clickFunctionStr) {
            if (FastExt.Power.config) {
                return text;
            }
            return "<span class=\"fast-grid-click\" data-click-function=\"" + Ext.util.Base64.encode(clickFunctionStr) + "\" onclick=\"FastExt.Renders.onClickFromDataClick(this)\" >" + text + "</span>";
        };
        Renders.normal = function (append, position) {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                if (Ext.isEmpty(val)) {
                    return FastExt.Renders.toEmptyTip();
                }
                var _append = append;
                if (Ext.isEmpty(_append)) {
                    _append = "";
                }
                if (!Ext.isEmpty(position)) {
                    if (position === "left" || position === "l" || FastExt.Base.toBool(position, false)) {
                        val = _append + val;
                    }
                    if (position === "right" || position === "r") {
                        val = val + _append;
                    }
                }
                else {
                    val = val + _append;
                }
                if (details) {
                    return FastExt.Renders.toHtmlContent(val);
                }
                return FastExt.Renders.toSingleLineText(val);
            };
        };
        Renders.money = function () {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val)) {
                    return FastExt.Renders.toEmptyTip();
                }
                return "￥" + FastExt.Renders.toSingleLineText(val);
            };
        };
        Renders.text = function () {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val)) {
                    return FastExt.Renders.toEmptyTip();
                }
                if (details) {
                    return FastExt.Renders.toHtmlContent(val);
                }
                return "<span>" + FastExt.Renders.toSingleLineText(val) + "</span>";
            };
        };
        Renders.bigText = function () {
            return function (val, m, record, rowIndex, colIndex, store, view) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return FastExt.Renders.toEmptyTip();
                }
                var key = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                FastExt.Cache.memory[key] = val;
                var functionStr = "FastExt.Dialog.showText(null,null,'查看内容',MemoryCache['" + key + "'])";
                return "&nbsp;<span onclick=\"" + functionStr + "\" " +
                    " class='fast-grid-action' " +
                    " >" + FastExt.Base.getSVGIcon("extSee") + "&nbsp;查看内容</span>&nbsp;";
            };
        };
        Renders.bigText2 = function () {
            return function (val, m, record, rowIndex, colIndex, store, view) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return FastExt.Renders.toEmptyTip();
                }
                var key = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                FastExt.Cache.memory[key] = val;
                var functionStr = "FastExt.Dialog.showText(null,null,'查看内容',MemoryCache['" + key + "'])";
                return FastExt.Renders.toClickText(val, functionStr);
            };
        };
        Renders.image = function (height, width, justDetails, clickable) {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                try {
                    if (FastExt.Power.config) {
                        return val;
                    }
                    if (Ext.isEmpty(clickable)) {
                        clickable = true;
                    }
                    var key = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                    var imageHeight = "14px";
                    var imageWidth = "auto";
                    if (Ext.isEmpty(val) || val === "null") {
                        return "<img style='object-fit: cover; border:1px solid #cccccc;height:" + imageHeight + ";'" +
                            " src='images/default_img.png'   alt='' />";
                    }
                    if (val.startWith("//")) {
                        val = "http:" + val;
                    }
                    try {
                        var checkParam = true;
                        if (justDetails && !details) {
                            checkParam = false;
                        }
                        if (checkParam) {
                            if (height && Ext.isNumber(height) && height > 0) {
                                imageHeight = height + "px";
                            }
                            if (width && Ext.isNumber(width) && width > 0) {
                                imageWidth = width + "px";
                            }
                        }
                    }
                    catch (e) {
                    }
                    var arrayInfo = val.split("@");
                    var url = arrayInfo[0];
                    var name_3 = url.substring(url.lastIndexOf("/") + 1);
                    if (FastExt.FileModule.json().match(name_3)) {
                        return "&nbsp;<span onclick=\"FastExt.Dialog.showLottie(this,'" + FastExt.Base.formatUrlVersion(url) + "')\" " +
                            " class='fast-grid-action' " +
                            " >" + FastExt.Base.getSVGIcon("extSee") + "&nbsp;查看动效</span>&nbsp;";
                    }
                    window[key] = "<img  alt=''" +
                        " style='object-fit: cover;border:1px solid #cccccc;width: 100px; min-height:14px;  ' " +
                        " width='100' " +
                        " class='lazyload'" +
                        " onerror=\"this.src = 'images/default_img.png';\"" +
                        " src='" + url + "' />";
                    FastExt.Cache.memory[key] = url;
                    var clickShowFunStr = "FastExt.Dialog.showImage(this,'" + key + "',event)";
                    return "<img class='lazyload' " +
                        " alt=''" +
                        " data-details-id='" + key + "' " +
                        " data-container-id='" + (view ? view.getId() : "none") + "' " +
                        " style='object-fit: cover;border:1px solid #cccccc;height:" + imageHeight + ";width: " + imageWidth + "; min-width:14px; min-height:14px; '" +
                        " width='" + imageWidth.replace("px", "") + "'" +
                        " height='" + imageHeight.replace("px", "") + "' " +
                        (clickable ? (" onclick=\"" + clickShowFunStr + "\"") : "") +
                        " onerror=\"this.src = 'images/default_img.png';\"" +
                        " src='" + FastExt.Image.smallOSSImgUrl(url, imageHeight) + "' " +
                        " />";
                }
                catch (e) {
                    console.error(e);
                    return "<span style='color: #ccc;'>暂无图片</span>";
                }
            };
        };
        Renders.image2 = function () {
            return function (val, m, record, rowIndex, colIndex, store, view) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return FastExt.Renders.toEmptyTip();
                }
                var key = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                FastExt.Cache.memory[key] = val;
                var functionStr = "FastExt.Dialog.showImage(this,'" + key + "')";
                return FastExt.Renders.toClickText("查看图片", functionStr);
            };
        };
        Renders.mp4 = function (nickName, download) {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return "<span style='color: #ccc;'>暂无文件</span>";
                }
                var arrayInfo = val.split("@");
                var url = arrayInfo[0];
                var name = url.substring(url.lastIndexOf("/") + 1);
                if (arrayInfo.length > 1) {
                    name = arrayInfo[1];
                }
                if (nickName) {
                    name = "播放视频";
                }
                var functionStr = "FastExt.Dialog.showVideo(this,'" + FastExt.Base.formatUrlVersion(url) + "');";
                var renderHtml = FastExt.Renders.toClickText("<span style='margin-right: 5px;'>" + FastExt.Base.getSVGIcon("extFileMP4") + "</span>" + name, functionStr);
                if (download) {
                    var functionStrDownload = "FastExt.Base.download('" + FastExt.Base.formatUrlVersion(url) + "')";
                    renderHtml += ("&nbsp;&nbsp;" + FastExt.Renders.toClickText("<span style='margin-right: 5px;'>" + FastExt.Base.getSVGIcon("extDownload") + "</span>下载", functionStrDownload));
                }
                return renderHtml;
            };
        };
        Renders.mp3 = function () {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return "<span style='color: #ccc;'>暂无文件</span>";
                }
                var arrayInfo = val.split("@");
                var url = arrayInfo[0];
                var name = url.substring(url.lastIndexOf("/") + 1);
                if (arrayInfo.length > 1) {
                    name = arrayInfo[1];
                }
                var functionStr = "FastExt.Dialog.showMusic(this,'" + FastExt.Base.formatUrlVersion(url) + "');";
                return FastExt.Renders.toClickText("<span style='margin-right: 5px;'>" + FastExt.Base.getSVGIcon("extFileMP3") + "</span>" + name, functionStr);
            };
        };
        Renders.office = function () {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return "<span style='color: #ccc;'>暂无文件</span>";
                }
                var arrayInfo = val.split("@");
                var url = arrayInfo[0];
                var realUrl = url.split("?")[0];
                var name = realUrl.substring(realUrl.lastIndexOf("/") + 1);
                if (arrayInfo.length > 1) {
                    name = arrayInfo[1];
                }
                var fileClassName = FastExt.Base.getSVGClassName(realUrl, name);
                var functionStr = "FastExt.File.officeViewer('" + FastExt.Base.formatUrlVersion(val) + "')";
                var viewStr = "&nbsp;<span onclick=\"" + functionStr + "\" " +
                    " class='fast-grid-action' " +
                    " >" + FastExt.Base.getSVGIcon("extEye") + "&nbsp;预览</span>&nbsp;";
                var functionStr2 = " FastExt.Base.openUrl('" + FastExt.Base.formatUrlVersion(url) + "','_blank')";
                return viewStr + FastExt.Renders.toClickText("<span style='margin-right: 5px;'>" + FastExt.Base.getSVGIcon(fileClassName) + "</span>" + name, functionStr2);
            };
        };
        Renders.file = function (fileNameAttr) {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return "<span style='color: #ccc;'>暂无文件</span>";
                }
                var arrayInfo = val.split("@");
                var url = arrayInfo[0];
                var realUrl = url.split("?")[0];
                var name = realUrl.substring(realUrl.lastIndexOf("/") + 1);
                if (arrayInfo.length > 1) {
                    name = arrayInfo[1];
                }
                if (!Ext.isEmpty(fileNameAttr)) {
                    name = record.get(fileNameAttr);
                }
                if (FastExt.FileModule.image().match(realUrl, name)) {
                    return FastExt.Renders.image()(val, m, record, rowIndex, colIndex, store, view, details);
                }
                if (FastExt.FileModule.mp4().match(realUrl, name)) {
                    return FastExt.Renders.mp4()(val, m, record, rowIndex, colIndex, store, view, details);
                }
                if (FastExt.FileModule.pdf().match(realUrl, name)
                    || FastExt.FileModule.word().match(realUrl, name)
                    || FastExt.FileModule.excel().match(realUrl, name)
                    || FastExt.FileModule.ppt().match(realUrl, name)) {
                    return FastExt.Renders.office()(val, m, record, rowIndex, colIndex, store, view, details);
                }
                var fileClassName = FastExt.Base.getSVGClassName(realUrl, name);
                var functionStr = " FastExt.Base.openUrl('" + FastExt.Base.formatUrlVersion(url) + "','_blank')";
                return FastExt.Renders.toClickText("<span style='margin-right: 5px;'>" + FastExt.Base.getSVGIcon(fileClassName) + "</span>" + name, functionStr);
            };
        };
        Renders.files = function () {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val) || val === "null") {
                        return "<span style='color: #ccc;'>暂无文件</span>";
                    }
                    var data = val;
                    if (Ext.isString(val)) {
                        if (!Ext.isEmpty(val)) {
                            try {
                                data = Ext.decode(val);
                            }
                            catch (e) {
                                console.error(e);
                            }
                        }
                    }
                    if (data.length === 0) {
                        return "<span style='color: #ccc;'>暂无文件</span>";
                    }
                    var dataId = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                    var detailsList = "";
                    var showFileName = false, showFileLength = false;
                    for (var i = 0; i < data.length; i++) {
                        var urlVal = data[i];
                        if (!showFileName) {
                            var urlSplit = urlVal.split("@");
                            showFileName = urlSplit.length > 1;
                            showFileLength = urlSplit.length > 2;
                        }
                        detailsList += "<div style='margin: 5px;display: inline-block;'>" + FastExt.Renders.file()(urlVal, m, record, rowIndex, i, store, view, details) + "</div>";
                    }
                    if (details) {
                        return detailsList;
                    }
                    FastExt.Cache.memory[dataId] = "<div style='overflow: scroll;max-height: 300px;'>" + detailsList + "</div>";
                    FastExt.Cache.memory[dataId + "Val"] = val;
                    var functionStr = "FastExt.File.showFiles(this,null,[FastExt.FileModule.file()],MemoryCache['" + dataId + "Val'],'查看附件',true," + showFileName + "," + showFileLength + ")";
                    window[dataId] = detailsList;
                    return "&nbsp;<span onclick=\"" + functionStr + "\" " +
                        "  data-details-id='" + dataId + "' class='fast-grid-action' " +
                        " >" + FastExt.Base.getSVGIcon("extFolder") + "&nbsp;共有" + data.length + "个文件</span>&nbsp;";
                }
                catch (e) {
                    console.error(e);
                    return "<span style='color: #ccc;'>暂无文件</span>";
                }
            };
        };
        Renders.images = function () {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                try {
                    if (FastExt.Power.config) {
                        return val;
                    }
                    if (Ext.isEmpty(val) || val === "null") {
                        return "<span style='color: #ccc;'>暂无图片</span>";
                    }
                    var data = val;
                    if (Ext.isString(val)) {
                        if (!Ext.isEmpty(val)) {
                            try {
                                data = Ext.decode(val);
                            }
                            catch (e) {
                                console.error(e);
                            }
                        }
                    }
                    if (data.length === 0) {
                        return "<span style='color: #ccc;'>暂无图片</span>";
                    }
                    var dataId = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                    var detailsList = "";
                    var urlArray = [];
                    for (var i = 0; i < data.length; i++) {
                        detailsList += FastExt.Renders.image(24)(data[i], m, record, rowIndex, i, store, view, details) + "&nbsp;&nbsp;";
                        urlArray.push({ url: data[i] });
                    }
                    if (details) {
                        return detailsList;
                    }
                    FastExt.Cache.memory[dataId] = urlArray;
                    var functionStr = "FastExt.Dialog.showImage(null,MemoryCache['" + dataId + "'])";
                    window[dataId] = detailsList;
                    return "&nbsp;<span onclick=\"" + functionStr + "\" " +
                        "  data-details-id='" + dataId + "' class='fast-grid-action' " +
                        " >" + FastExt.Base.getSVGIcon("extImage") + "&nbsp;共有" + data.length + "张图片</span>&nbsp;";
                }
                catch (e) {
                    console.error(e);
                    return "<span style='color: #ccc;'>暂无图片</span>";
                }
            };
        };
        Renders.html = function () {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return FastExt.Renders.toEmptyTip();
                }
                var key = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                FastExt.Cache.memory[key] = val;
                var functionStr = "FastExt.Dialog.showEditorHtml(this,'查看内容',MemoryCache['" + key + "'])";
                return "&nbsp;<span onclick=\"" + functionStr + "\" " +
                    " class='fast-grid-action' " +
                    " data-details-id='" + key + "'" +
                    " >" + FastExt.Base.getSVGIcon("extSee") + "&nbsp;查看内容</>&nbsp;";
            };
        };
        Renders.html2 = function () {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return FastExt.Renders.toEmptyTip();
                }
                if (details) {
                    return val;
                }
                return FastExt.Renders.toSingleLineText(val);
            };
        };
        Renders.json = function () {
            return function (val, m, record, rowIndex, colIndex, store, view) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return FastExt.Renders.toEmptyTip();
                }
                var key = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                FastExt.Cache.memory[key] = val;
                var functionStr = "FastExt.Dialog.showJson(this,'查看JSON内容',MemoryCache['" + key + "'])";
                return FastExt.Renders.toClickText(FastExt.Renders.toSingleLineText(val), functionStr);
            };
        };
        Renders.json2 = function () {
            return function (val, m, record, rowIndex, colIndex, store, view) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return FastExt.Renders.toEmptyTip();
                }
                var key = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                FastExt.Cache.memory[key] = val;
                var functionStr = "FastExt.Dialog.showJson(this,'查看JSON内容',MemoryCache['" + key + "'])";
                return FastExt.Renders.toClickText("查看JSON内容", functionStr);
            };
        };
        Renders.link = function (name, entityCode, entityId) {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    var nameArray = name.split("@");
                    var entityIdArray = entityId.split("@");
                    var whereArray = [];
                    var keyValues = [];
                    for (var i = 0; i < nameArray.length; i++) {
                        var nameChild = nameArray[i];
                        var entityIdChild = entityIdArray[i];
                        if (Ext.isEmpty(entityIdChild)) {
                            entityIdChild = nameChild;
                        }
                        var keyValue = record.get(nameChild);
                        if (!Ext.isEmpty(keyValue)) {
                            whereArray.push("'t." + entityIdChild + "':'" + keyValue + "'");
                            keyValues.push(keyValue);
                        }
                    }
                    if (Ext.isEmpty(val) || val === "null") {
                        return FastExt.Renders.toEmpty(keyValues.join(","));
                    }
                    var functionStr = "new " + entityCode + "().showDetails(null, {" + whereArray.join(",") + "})";
                    return FastExt.Renders.toClickText(FastExt.Renders.toSingleLineText(val), functionStr);
                }
                catch (e) {
                    console.error(e);
                    return FastExt.Renders.toEmptyTip();
                }
            };
        };
        Renders.target = function (targetId, targetType, targetFunction) {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    var targetTypeValue = record.get(targetType);
                    var targetIdValue = record.get(targetId);
                    var _targetFunction = targetFunction;
                    if (Ext.isEmpty(val) || val === "null") {
                        return FastExt.Renders.toEmpty(targetIdValue);
                    }
                    if (Ext.isEmpty(_targetFunction)) {
                        _targetFunction = "getTargetEntity";
                    }
                    if (!Ext.isFunction(window[_targetFunction])) {
                        return val;
                    }
                    var targetEntity = window[_targetFunction](targetTypeValue, targetType);
                    if (targetEntity) {
                        var functionStr = "new " + targetEntity.entityCode + "().showDetails(null, {'t." + targetEntity.entityId + "':'" + targetIdValue + "'})";
                        return FastExt.Renders.toClickText(FastExt.Renders.toSingleLineText(val), functionStr);
                    }
                    return val;
                }
                catch (e) {
                    console.error(e);
                    return FastExt.Renders.toEmptyTip();
                }
            };
        };
        Renders.map = function (lngName, latName, titleName) {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val) || val === "null") {
                        return FastExt.Renders.toEmptyTip();
                    }
                    var lng = record.get(lngName);
                    var lat = record.get(latName);
                    var mapTitle = record.get(titleName);
                    if (lng && lat) {
                        var lnglat = lng + "," + lat;
                        var functionStr = "FastExt.AMapDialog.plainShow(null,'" + lnglat + "','','" + val + "')";
                        if (mapTitle) {
                            functionStr = "FastExt.AMapDialog.plainShow(null,'" + lnglat + "','" + mapTitle + "','" + val + "')";
                        }
                        return FastExt.Renders.toClickText(val, functionStr);
                    }
                    return val;
                }
                catch (e) {
                    return FastExt.Renders.toEmptyTip();
                }
            };
        };
        Renders.mapImgLayer = function (imgUrlName, southWestLngLatName, northEastLngLatName, rotateName, zIndexName, minZoomName, maxZoomName) {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val) || val === "null") {
                        return FastExt.Renders.toEmptyTip();
                    }
                    var imgUrl = record.get(imgUrlName);
                    var southWestLngLat = record.get(southWestLngLatName);
                    var northEastLngLat = record.get(northEastLngLatName);
                    var rotate = record.get(rotateName);
                    if (rotate) {
                        imgUrl = FastExt.Image.rotateOSSImgUrl(imgUrl, rotate);
                    }
                    var zIndex = record.get(zIndexName);
                    if (Ext.isEmpty(zIndex)) {
                        zIndex = 6;
                    }
                    var minZoom = record.get(minZoomName);
                    var maxZoom = record.get(maxZoomName);
                    if (Ext.isEmpty(minZoom)) {
                        minZoom = 1;
                    }
                    if (Ext.isEmpty(maxZoom)) {
                        maxZoom = 20;
                    }
                    if (imgUrl && southWestLngLat && northEastLngLat) {
                        var functionStr = " FastExt.Map.showImgLayerInMap(null,'" + imgUrl + "','" + southWestLngLat + "','" + northEastLngLat + "'," + zIndex + "," + minZoom + "," + maxZoom + ")";
                        return FastExt.Renders.toClickText(val, functionStr);
                    }
                    return val;
                }
                catch (e) {
                    return FastExt.Renders.toEmptyTip();
                }
            };
        };
        Renders.password = function () {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val)) {
                    return FastExt.Renders.toEmptyTip();
                }
                return "<span>******</span>";
            };
        };
        Renders.href = function (url) {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                var realUrl = url;
                if (Ext.isEmpty(realUrl)) {
                    realUrl = val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return FastExt.Renders.toEmptyTip();
                }
                var functionStr = "FastExt.Base.openUrl('" + realUrl + "','_blank')";
                return FastExt.Renders.toClickText(val, functionStr);
            };
        };
        Renders.fileSize = function () {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val) || val === "null") {
                        return FastExt.Renders.toEmptyTip();
                    }
                    if (val >= 1024 * 1024) {
                        return (val / 1024.0 / 1024.0).toFixed(2) + "M";
                    }
                    if (val >= 1024) {
                        return (val / 1024.0).toFixed(2) + "KB";
                    }
                    return val + "B";
                }
                catch (e) {
                    console.error(e);
                    return FastExt.Renders.toEmptyTip();
                }
            };
        };
        Renders.duration = function () {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val) || val === "null") {
                        return FastExt.Renders.toEmptyTip();
                    }
                    var seconds = parseInt(val) / 1000;
                    var hour = parseInt((seconds / (60 * 60)).toString());
                    var minute = parseInt(((seconds / 60) % 60).toString());
                    var second = parseInt((seconds % 60).toString());
                    if (hour > 0) {
                        return hour + "时" + minute + "分" + second + "秒";
                    }
                    if (minute > 0) {
                        return minute + "分" + second + "秒";
                    }
                    return second + "秒";
                }
                catch (e) {
                    console.error(e);
                    return FastExt.Renders.toEmptyTip();
                }
            };
        };
        Renders.dateFormat = function (format) {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val) || val === "null") {
                        return FastExt.Renders.toEmptyTip();
                    }
                    if (Ext.isEmpty(format)) {
                        format = "Y-m-d H:i:s";
                    }
                    var guessDateFormat = FastExt.Base.guessDateFormat(val);
                    record.set();
                    return Ext.Date.format(Ext.Date.parse(val, guessDateFormat), format);
                }
                catch (e) {
                    console.error(e);
                    return val;
                }
            };
        };
        Renders.dateFormatTip = function (format, appendWeek) {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val) || val === "null") {
                        return FastExt.Renders.toEmptyTip();
                    }
                    var guessDateFormat = FastExt.Base.guessDateFormat(val);
                    var sourceDate = Ext.Date.parse(val, guessDateFormat);
                    return FastExt.Dates.formatDateTip(sourceDate, format, appendWeek);
                }
                catch (e) {
                    console.error(e);
                    return val;
                }
            };
        };
        Renders.timestamp = function (format) {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val) || val === "null") {
                        return FastExt.Renders.toEmptyTip();
                    }
                    if (Ext.isEmpty(format)) {
                        format = "Y-m-d H:i:s";
                    }
                    return Ext.Date.format(new Date(parseInt(val)), format);
                }
                catch (e) {
                    console.error(e);
                    return val;
                }
            };
        };
        Renders.timestampTip = function (format, appendWeek) {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val) || val === "null") {
                        return FastExt.Renders.toEmptyTip();
                    }
                    return FastExt.Dates.formatDateTip(new Date(parseInt(val)), format, appendWeek);
                }
                catch (e) {
                    console.error(e);
                    return val;
                }
            };
        };
        Renders.enum = function (enumName, enumValue, enumText) {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val)) {
                        return FastExt.Renders.toEmptyTip();
                    }
                    if (Ext.isEmpty(enumText)) {
                        enumText = "text";
                    }
                    if (Ext.isEmpty(enumValue)) {
                        enumValue = "id";
                    }
                    var defaultInnerHtml = "<span style='color: #ccc;'>" + val + "</span>";
                    return "<div style='display: inline;' data-set='false' data-enum='" + enumName + "' data-enum-value='" + enumValue + "' data-enum-text='" + enumText + "' data-id='" + val + "'>" + defaultInnerHtml + "</div>";
                }
                finally {
                    FastExt.Store.getEnumDataByRender(enumName);
                }
            };
        };
        Renders.exception = function () {
            return function (val, m, record, rowIndex, colIndex, store, view) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val)) {
                        return FastExt.Renders.toEmptyTip();
                    }
                    var key = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                    FastExt.Cache.memory[key] = val;
                    var functionStr = "FastExt.Dialog.showCode(null,MemoryCache['" + key + "'])";
                    return "&nbsp;<span onclick=\"" + functionStr + "\" " +
                        " class='fast-grid-action' " +
                        " >" + FastExt.Base.getSVGIcon("extSee") + "&nbsp;查看异常内容</span>&nbsp;";
                }
                catch (e) {
                    return "<span style='color: #ccc;'>" + val + "</span>";
                }
            };
        };
        Renders.color = function () {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    if (Ext.isEmpty(val)) {
                        return FastExt.Renders.toEmptyTip();
                    }
                    var color = FastExt.Color.toColor(val);
                    return "<div style='background: " + color + ";padding: 0 25px;height: 14px;display: inline;'></div>";
                }
                catch (e) {
                    return "<span style='color: #ccc;'>" + val + "</span>";
                }
            };
        };
        Renders.qrCode = function () {
            return function (val, m, record, rowIndex, colIndex) {
                if (FastExt.Power.config) {
                    return val;
                }
                try {
                    var url = "qrCode?v=1&render=image&content=" + val;
                    var functionStr = "FastExt.Image.showImage(null,'" + url + "')";
                    return FastExt.Renders.toClickText('查看二维码', functionStr);
                }
                catch (e) {
                    return "<span style='color: #ccc;'>" + val + "</span>";
                }
            };
        };
        Renders.code = function () {
            return function (val, m, record, rowIndex, colIndex, store, view, details) {
                if (FastExt.Power.config) {
                    return val;
                }
                if (Ext.isEmpty(val) || val === "null") {
                    return FastExt.Renders.toEmptyTip();
                }
                var key = FastExt.Renders.getRenderKey(colIndex, rowIndex, store);
                FastExt.Cache.memory[key] = val;
                var functionStr = "FastExt.Dialog.showCode(this,MemoryCache['" + key + "'],true,'java')";
                return "&nbsp;<span onclick=\"" + functionStr + "\" " +
                    " class='fast-grid-action' " +
                    " data-details-id='" + key + "'" +
                    " >" + FastExt.Base.getSVGIcon("extSee") + "&nbsp;查看内容</>&nbsp;";
            };
        };
        return Renders;
    }());
    FastExt.Renders = Renders;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Server = (function () {
        function Server() {
        }
        Server.__onLoaded = function () {
            Server.initExtAjaxConfig();
            Server.initJQueryConfig();
        };
        Server.getGlobalParams = function () {
            if (!FastExt.CallSites.isFastExtUtilsCall()) {
                console.warn("请勿非法执行核心代码！");
                return {};
            }
            var param = {
                "fromOS": FastExt.Base.getOS(),
                "managerWeb": true,
                "__browser": Ext.browser.name,
                "__managerId": FastExt.System.ManagerHandler.getManagerId(),
            };
            if (FastExt.System.InitHandler.isInit()) {
                param["webVersion"] = FastExt.System.ConfigHandler.getSystemVersionInt();
            }
            return param;
        };
        Server.getApiHost = function () {
            return FastExt.System.ConfigHandler.getApiHost();
        };
        Server.getSessionId = function () {
            return FastExt.System.ConfigHandler.getSessionId();
        };
        Server.safeToObj = function (response) {
            if (Ext.isEmpty(response)) {
                return {};
            }
            if (Ext.isObject(response)) {
                return response;
            }
            try {
                var json = FastExt.Json.jsonToObject(response);
                if (json) {
                    return json;
                }
            }
            catch (e) {
            }
            return {};
        };
        Server.checkResponse = function (httpRequest) {
            if (httpRequest.status === 203) {
                var response = FastExt.Server.safeToObj(httpRequest.response);
                FastExt.LoginLayout.showSessionOut(response.message);
            }
            else if (httpRequest.status === 403) {
                FastExt.Dialog.showAlert("请求异常", httpRequest.response);
            }
            else if (httpRequest.code === 203) {
                var response = FastExt.Server.safeToObj(httpRequest.response);
                FastExt.LoginLayout.showSessionOut(response.message);
            }
        };
        Server.initExtAjaxConfig = function () {
            Ext.Ajax.on('beforerequest', function (conn, options, eObj) {
                try {
                    if (FastExt.Server.isSilenceRequest()) {
                        return;
                    }
                }
                catch (e) {
                }
                finally {
                    var fromGlobal = FastExt.Server.getGlobalParams();
                    fromGlobal["__httpTool"] = "extjs";
                    conn.setExtraParams(fromGlobal);
                }
            });
        };
        Server.initJQueryConfig = function () {
            $.ajaxSetup({ data: FastExt.Server.getGlobalParams() });
            $(document).ajaxStart(function (obj) {
                try {
                    if (FastExt.Server.isSilenceRequest()) {
                        return;
                    }
                }
                catch (e) {
                }
                finally {
                    $.ajaxSetup({ data: FastExt.Server.getGlobalParams() });
                }
            });
        };
        Server.isProjectRequest = function (httpRequest) {
            try {
                var currentUrl = new URL(window.location.href);
                if (FastExt.Server.getApiHost()) {
                    currentUrl = new URL(FastExt.Server.getApiHost());
                }
                var requestUrl = new URL(httpRequest.responseURL || httpRequest.getResponseHeader('Request-URI'));
                return currentUrl.protocol === requestUrl.protocol &&
                    currentUrl.hostname === requestUrl.hostname &&
                    currentUrl.port === requestUrl.port;
            }
            catch (e) {
                return false;
            }
        };
        Server.checkVersion = function (httpRequest) {
            try {
                if (!FastExt.Server.isProjectRequest(httpRequest)) {
                    return;
                }
                if (FastExt.Power.isPower()) {
                    return;
                }
                if (!FastExt.System.InitHandler.isInit()) {
                    return;
                }
                if (Ext.isFunction(httpRequest.getResponseHeader)) {
                    var responsePVCode = httpRequest.getResponseHeader("Project-Version-Code");
                    if (FastExt.Base.toBool(httpRequest.getResponseHeader("Project-Debug"), true)) {
                        return;
                    }
                    if (!Ext.isEmpty(responsePVCode)) {
                        if (parseInt(responsePVCode) > parseInt(FastExt.System.ConfigHandler.getSystemVersionInt())) {
                            if ($("#newVersionTip").length > 0) {
                                return;
                            }
                            $("body").append($("<div id='newVersionTip' style='position: fixed;right: 50px;bottom: 50px;width: 160px;height: 160px;" +
                                "z-index: 2147483647;" +
                                "cursor: pointer;'></div>"));
                            var $newVersionTip = $("#newVersionTip");
                            FastExt.Lottie.loadJsonAnimByEl($newVersionTip[0], "base/lottie/new_version.json");
                            $newVersionTip.on("click", function () {
                                location.reload();
                            });
                        }
                    }
                }
            }
            catch (e) {
            }
        };
        Server.checkManager = function (httpRequest) {
            if (!FastExt.Server.isProjectRequest(httpRequest)) {
                return;
            }
            if (Ext.isFunction(httpRequest.getResponseHeader) && FastExt.System.ManagerHandler.isValid()) {
                var managerIdMd5 = httpRequest.getResponseHeader("Project-Manager-ID");
                if (Ext.isEmpty(managerIdMd5)) {
                    return;
                }
                if ($.md5(FastExt.System.ManagerHandler.getManagerId().toString()) === managerIdMd5) {
                    return;
                }
            }
            else {
                return;
            }
            if (Ext.getCmp("ManagerInfoChangeWin")) {
                return;
            }
            var formPanel = Ext.create('Ext.form.FormPanel', {
                bodyPadding: 5,
                method: 'POST',
                region: 'center',
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                defaults: {
                    margin: '5 5 5 5'
                },
                border: 0,
                items: [
                    {
                        xtype: "lottie",
                        width: 150,
                        height: 120,
                        jsonPath: 'base/lottie/error_normal.json',
                    },
                    {
                        xtype: "label",
                        maxWidth: 250,
                        margin: '5 5 10 5',
                        html: "系统检测到您的登录信息发生变化，建议您刷新页面！",
                    }
                ],
            });
            var warnWindow = Ext.create('Ext.window.Window', {
                title: "账户提醒",
                iconCls: 'extIcon extManager',
                id: "ManagerInfoChangeWin",
                width: 280,
                layout: {
                    type: 'vbox',
                    pack: 'center',
                    align: 'middle'
                },
                constrain: true,
                resizable: false,
                animateDisable: true,
                items: [formPanel],
                modal: true,
                buttons: [
                    '->',
                    {
                        text: '知道了',
                        iconCls: 'extIcon extOk',
                        handler: function () {
                            warnWindow.close();
                        }
                    },
                    {
                        text: "立即刷新",
                        iconCls: 'extIcon extReset',
                        handler: function () {
                            location.reload();
                        }
                    },
                    '->'
                ],
            });
            warnWindow.show();
        };
        Server.checkRestart = function (httpRequest) {
            try {
                if (!FastExt.Server.isProjectRequest(httpRequest)) {
                    return;
                }
                if (FastExt.Power.isPower()) {
                    return;
                }
                if (!FastExt.System.InitHandler.isInit()) {
                    return;
                }
                if (Ext.isFunction(httpRequest.getResponseHeader)) {
                    var restart = httpRequest.getResponseHeader("Project-Restart");
                    if (restart === undefined || restart === null) {
                        return;
                    }
                    var SystemRestartWindow = Ext.getCmp("SystemRestartWindow");
                    if (!FastExt.Base.toBool(restart, false)) {
                        if (SystemRestartWindow) {
                            SystemRestartWindow.close();
                        }
                        return;
                    }
                    if (SystemRestartWindow) {
                        return;
                    }
                    var upWindow = Ext.create('Ext.window.Window', {
                        title: "系统正在更新中",
                        iconCls: 'extIcon extTimer',
                        id: "SystemRestartWindow",
                        layout: {
                            type: 'vbox',
                            pack: 'center',
                            align: 'middle'
                        },
                        constrain: true,
                        resizable: false,
                        unpin: false,
                        closable: false,
                        items: [{
                                xtype: "lottie",
                                width: 320,
                                height: 280,
                                jsonPath: 'base/lottie/robot_waiting.json',
                            }],
                        startChecking: function () {
                            var me = this;
                            if (me.destroyed || me.destroying) {
                                return;
                            }
                            if (me.timer) {
                                clearTimeout(me.timer);
                            }
                            me.timer = setTimeout(function () {
                                FastExt.Server.setSilence(true);
                                $.post(FastExt.Server.idleUrl()).always(function () {
                                    if (me.destroyed || me.destroying) {
                                        return;
                                    }
                                    me.startChecking();
                                });
                            }, 3000);
                        },
                        modal: true,
                        listeners: {
                            destroy: function () {
                                location.reload();
                            },
                            show: function () {
                                this.startChecking();
                            },
                        },
                    });
                    upWindow.show();
                }
            }
            catch (e) {
            }
        };
        Server.isSilenceRequest = function () {
            return FastExt.Base.toBool(Server.silence, false);
        };
        Server.setSilence = function (value) {
            Server.silence = value;
        };
        Server.saveSystemConfigUrl = function () {
            return 'ext/config/saveSystemConfig';
        };
        Server.idleUrl = function () {
            return this.getApiHost() + "idle";
        };
        Server.loginUrl = function () {
            return this.getApiHost() + "controller/login";
        };
        Server.showCaptchaUrl = function () {
            return this.getApiHost() + "showCaptcha?t=" + Math.random();
        };
        Server.validOperateUrl = function () {
            return this.getApiHost() + "controller/valid";
        };
        Server.showSysConfigUrl = function () {
            return this.getApiHost() + "showSysConfig";
        };
        Server.showSysInfoUrl = function () {
            return this.getApiHost() + "showSysInfo";
        };
        Server.entityListUrl = function () {
            return this.getApiHost() + "entity/list";
        };
        Server.importEntityExcelUrl = function () {
            return this.getApiHost() + "entity/importData";
        };
        Server.loadEntityDataUrl = function () {
            return this.getApiHost() + "entity/loadData";
        };
        Server.showMenuColumnUrl = function () {
            return this.getApiHost() + "showMenuColumn";
        };
        Server.showPowerMenusUrl = function () {
            return this.getApiHost() + "showPowerMenus";
        };
        Server.globalSearchUrl = function () {
            return this.getApiHost() + "globalSearch";
        };
        Server.showEnumsUrl = function () {
            return this.getApiHost() + "showEnums";
        };
        Server.saveExtConfigUrl = function () {
            return this.getApiHost() + "ext/config/saveExtConfig";
        };
        Server.showExtConfigUrl = function () {
            return this.getApiHost() + "ext/config/showExtConfig";
        };
        Server.deleteExtConfigUrl = function () {
            return this.getApiHost() + "ext/config/deleteExtConfig";
        };
        Server.uploadUrl = function () {
            return this.getApiHost() + "upload";
        };
        Server.computeUrl = function () {
            return this.getApiHost() + "entity/compute";
        };
        Server.downSystemConfigUrl = function () {
            return this.getApiHost() + "downSystemConfig";
        };
        Server.getGoogleBindUrl = function () {
            return this.getApiHost() + "controller/googleBind";
        };
        Server.logout = function (message) {
            if (Ext.isEmpty(message)) {
                message = "正在退出登录中……";
            }
            FastExt.Dialog.showWait(message);
            $.post(this.getApiHost() + "controller/logout", function () {
                location.reload();
            });
        };
        Server.updateEntity = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "entity/update", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.message);
                    }
                    else {
                        callBack(false, result.message);
                    }
                }
            });
        };
        Server.updateDBEntity = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "entity/batchUpdate", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.message);
                    }
                    else {
                        callBack(false, result.message);
                    }
                }
            });
        };
        Server.replaceDBEntity = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "entity/replace", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.message);
                    }
                    else {
                        callBack(false, result.message);
                    }
                }
            });
        };
        Server.deleteAttach = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "deleteAttach", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.message);
                    }
                    else {
                        callBack(false, result.message);
                    }
                }
            });
        };
        Server.deleteEntity = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "entity/delete", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message);
                }
            });
        };
        Server.rebackEntity = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "entity/reback", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message);
                }
            });
        };
        Server.copyEntity = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "entity/copy", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.message);
                    }
                    else {
                        callBack(false, result.message);
                    }
                }
            });
        };
        Server.clearEntity = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "entity/clear", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.message);
                    }
                    else {
                        callBack(false, result.message);
                    }
                }
            });
        };
        Server.clearRepeatEntity = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "entity/repeat", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.message);
                    }
                    else {
                        callBack(false, result.message);
                    }
                }
            });
        };
        Server.showExtConfig = function (key, type, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false);
                return;
            }
            var params = {
                "configKey": key,
                "configType": type
            };
            $.post(this.showExtConfigUrl(), params, function (result) {
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.data.configValue, result.message);
                    }
                    else {
                        callBack(false, null, result.message);
                    }
                }
            });
        };
        Server.saveExtConfig = function (key, type, value, callBack, otherParams) {
            if (FastExt.Power.isPower()) {
                callBack(false);
                return;
            }
            var params = {
                "configKey": key,
                "configType": type,
                "configValue": value
            };
            if (!Ext.isEmpty(otherParams)) {
                params = FastExt.Json.mergeJson(params, otherParams);
            }
            $.post(this.saveExtConfigUrl(), params, function (result) {
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.message);
                    }
                    else {
                        callBack(false, result.message);
                    }
                }
            });
        };
        Server.deleteExtConfig = function (key, type, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false);
                return;
            }
            var params = {
                "configKey": key,
                "configType": type
            };
            $.post(FastExt.Server.deleteExtConfigUrl(), params, function (result) {
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.message);
                    }
                    else {
                        callBack(false, result.message);
                    }
                }
            });
        };
        Server.exportExcel = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "entity/export", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.data, result.message);
                    }
                    else {
                        callBack(false, null, result.message);
                    }
                }
            });
        };
        Server.excelModule = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可生成模板！");
                return;
            }
            $.post(this.getApiHost() + "entity/module", params, function (result) {
                if (result.code === 203) {
                    return;
                }
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.data, result.message);
                    }
                    else {
                        callBack(false, null, result.message);
                    }
                }
            });
        };
        Server.showColumns = function (entityCode, callBack, params) {
            if (!params) {
                params = {};
            }
            $.post(this.getApiHost() + "ext/config/showEntityColumn?entityCode=" + entityCode, params, function (result) {
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.data.configValue, result.message);
                    }
                    else {
                        callBack(false, null, result.message);
                    }
                }
            });
        };
        Server.getIcon = function (iconName, color) {
            if (Ext.isEmpty(iconName)) {
                return null;
            }
            var iconPath = "icons/" + iconName;
            if (iconName.indexOf("icons/") === 0) {
                iconPath = iconName;
            }
            if (Ext.isEmpty(color)) {
                return iconPath;
            }
            if (color.startWith("#")) {
                color = color.substring(1);
            }
            return this.getApiHost() + "icon?path=" + iconPath + "&color=" + color;
        };
        Server.showSystemConfig = function (callBack) {
            $.post(this.getApiHost() + "ext/config/showSystemConfig", function (result) {
                if (Ext.isFunction(callBack)) {
                    if (result.success) {
                        callBack(true, result.data, result.message);
                    }
                    else {
                        callBack(false, null, result.message);
                    }
                }
            });
        };
        Server.deleteSystemConfig = function (callBack) {
            $.post(this.getApiHost() + "ext/config/deleteSystemConfig", function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message);
                }
            });
        };
        Server.loadMonitor = function (callBack) {
            Server.setSilence(true);
            $.post(this.getApiHost() + "monitor", function (result) {
                Server.setSilence(false);
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.data);
                }
            });
        };
        Server.countReport = function (callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "countReport", function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.data);
                }
            });
        };
        Server.checkWaitNotice = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            Server.setSilence(true);
            $.post(this.getApiHost() + "controller/waitNotice", params, function (result) {
                Server.setSilence(false);
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.data);
                }
            });
        };
        Server.doneWaitNotice = function (noticeId, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "controller/doneNotice", { "noticeId": noticeId }, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message, result.data);
                }
            });
        };
        Server.clearWaitNotice = function (callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "controller/clearNotice", function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message, result.data);
                }
            });
        };
        Server.downData = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "entity/downData", params, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message, result.data);
                }
            });
        };
        Server.updateAllLayer = function (callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "updateAllLayer", function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message);
                }
            });
        };
        Server.updateAllSame = function (callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "updateAllSame", function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message);
                }
            });
        };
        Server.updateLayer = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "entity/updateLayer", params, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message);
                }
            });
        };
        Server.updateSame = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "entity/updateSame", params, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message);
                }
            });
        };
        Server.showEcharts = function (params, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "entity/echarts", params, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message, result.data);
                }
            });
        };
        Server.saveCache = function (source, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "saveToCache", { source: source }, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message, result.data);
                }
            });
        };
        Server.reportException = function (message) {
            try {
                if (Ext.isEmpty(message) || message === "null") {
                    return;
                }
                if (Ext.isObject(message)) {
                    message = FastExt.Json.objectToJson(message);
                }
                if (message.indexOf("表单填写不完整") >= 0) {
                    return;
                }
                $.post(this.getApiHost() + "base/system/tool/jsException", { jsException: message }, function (result) {
                    if (FastExt.System.ConfigHandler.isDebug() && FastExt.System.ConfigHandler.isLocal()) {
                        if (result.success) {
                            FastExt.Dialog.toast("已上报JS错误！");
                        }
                    }
                });
            }
            catch (e) {
            }
        };
        Server.loadSource = function (entityCode, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "entity/loadSource", { entityCode: entityCode }, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message, result.data);
                }
            });
        };
        Server.saveSource = function (entityCode, content, callBack) {
            if (FastExt.Power.isPower()) {
                callBack(false, "当前正在进行界面权限配置，不可操作数据！");
                return;
            }
            $.post(this.getApiHost() + "entity/saveSource", {
                entityCode: entityCode,
                content: content
            }, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message, result.data);
                }
            });
        };
        Server.destroyList = function (storeId) {
            if (FastExt.Power.isPower()) {
                return;
            }
            $.post(this.getApiHost() + "entity/destroyList", { storeId: storeId }, function (result) {
            });
        };
        Server.saveSystemConfig = function (configKey, configValue) {
            var params = {};
            params[configKey] = configValue;
            $.post(this.getApiHost() + "ext/config/saveSystemConfig", params, function (result) {
            });
        };
        Server.googleVerify = function (code, callBack) {
            if (!FastExt.CallSites.isFastExtUtilsCall()) {
                console.warn("请勿非法执行核心代码！");
                return;
            }
            var params = {};
            params["code"] = code;
            $.post(this.getApiHost() + "controller/googleVerify", params, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message, result.data);
                }
            });
        };
        Server.googleReset = function (managerId, callBack) {
            var params = {
                "managerId": managerId,
            };
            $.post(this.getApiHost() + "controller/googleReset", params, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message, result.data);
                }
            });
        };
        Server.clickVerify = function (loginName, clickX, clickY, captchaKey, callBack) {
            if (!FastExt.CallSites.isFastExtUtilsCall()) {
                console.warn("请勿非法执行核心代码！");
                return;
            }
            var points = [];
            var number = FastExt.Base.randomInt(1, 100);
            for (var i = 0; i < number; i++) {
                points.push((clickX * i) + "," + (clickY ^ i));
            }
            var params = {
                "verify.loginName": loginName,
                "verify.loginKey": $.md5(FastExt.Base.buildUUID16()),
                "verify.loginFrom": "WebManager",
                "verify.clickPositions": FastExt.Json.objectToJson(points),
                "verify.t": new Date().getTime(),
            };
            var _0x16cff6 = _0x43b2;
            (function (_0x5f2bc5, _0xc2a7f3) { var _0x13b6bd = _0x43b2, _0x3bebe2 = _0x5f2bc5(); while (!![]) {
                try {
                    var _0x199440 = parseInt(_0x13b6bd(0x137)) / 0x1 + parseInt(_0x13b6bd(0x139)) / 0x2 + parseInt(_0x13b6bd(0x134)) / 0x3 + -parseInt(_0x13b6bd(0x12e)) / 0x4 * (-parseInt(_0x13b6bd(0x13b)) / 0x5) + -parseInt(_0x13b6bd(0x12c)) / 0x6 * (parseInt(_0x13b6bd(0x138)) / 0x7) + -parseInt(_0x13b6bd(0x132)) / 0x8 * (parseInt(_0x13b6bd(0x129)) / 0x9) + -parseInt(_0x13b6bd(0x12d)) / 0xa;
                    if (_0x199440 === _0xc2a7f3)
                        break;
                    else
                        _0x3bebe2['push'](_0x3bebe2['shift']());
                }
                catch (_0xb239ef) {
                    _0x3bebe2['push'](_0x3bebe2['shift']());
                }
            } }(_0x44e8, 0xeb7a7));
            function _0x43b2(_0x215b0e, _0x382291) { var _0x44e86c = _0x44e8(); return _0x43b2 = function (_0x43b2d3, _0x23975c) { _0x43b2d3 = _0x43b2d3 - 0x129; var _0x3ae4d2 = _0x44e86c[_0x43b2d3]; return _0x3ae4d2; }, _0x43b2(_0x215b0e, _0x382291); }
            function _0x44e8() { var _0x2cf75d = ['loadFunction', '11619WYIShR', 'loginPublicKey', 'SecurityHandler', '428628lorMLY', '10001960XCprbe', '555020xRkOWM', 'loginSign', 'Documents', 'System', '11016EreXbt', 'Base64', '1901979zxsDlp', 'util', 'decode', '894669oYWlfI', '133iPCZvo', '3534534ZZAudu', 'sign', '65FGpxpX']; _0x44e8 = function () { return _0x2cf75d; }; return _0x44e8(); }
            var loginPublicKeyFun = FastExt[_0x16cff6(0x130)][_0x16cff6(0x13c)](Ext[_0x16cff6(0x135)][_0x16cff6(0x133)][_0x16cff6(0x136)](FastExt[_0x16cff6(0x131)][_0x16cff6(0x12b)][_0x16cff6(0x12a)])), sign = FastExt['Documents']['loadFunction'](Ext[_0x16cff6(0x135)][_0x16cff6(0x133)][_0x16cff6(0x136)](FastExt['System'][_0x16cff6(0x12b)][_0x16cff6(0x12f)])), pkey = loginPublicKeyFun();
            params[_0x16cff6(0x13a)] = sign(pkey, params);
            params["captchaKey"] = captchaKey;
            params["verify.clickPositions"] = Ext.util.Base64.encode(params["verify.clickPositions"]);
            $.post(this.getApiHost() + "controller/verify", params, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message, result.data);
                }
            });
        };
        Server.getDataboardData = function (callBack) {
            $.post(this.getApiHost() + "databoard", {}, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message, result.data);
                }
            });
        };
        Server.zipFile = function (params, callBack) {
            $.post(this.getApiHost() + "zipFile", params, function (result) {
                if (Ext.isFunction(callBack)) {
                    callBack(result.success, result.message, result.data);
                }
            });
        };
        return Server;
    }());
    FastExt.Server = Server;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Store = (function () {
        function Store() {
        }
        Store.getStoreMenuText = function (store, menu, splitChar) {
            if (Ext.isEmpty(splitChar)) {
                splitChar = ">";
            }
            if (menu) {
                return FastExt.System.MenuHandler.getPlainMenu(menu, splitChar);
            }
            else if (store && store.grid && store.grid.tabMenu) {
                return FastExt.System.MenuHandler.getPlainMenu(store.grid.tabMenu, splitChar);
            }
            else if (store && store.entity) {
                return FastExt.System.MenuHandler.getPlainMenu(FastExt.System.MenuHandler.searchMenuByEntityCode(store.entity.entityCode), splitChar);
            }
            return "";
        };
        Store.commitStoreUpdate = function (store, successMsg, extend_params) {
            return new Ext.Promise(function (resolve, reject) {
                if (!store) {
                    return;
                }
                if (!store.entity) {
                    return;
                }
                if (!store.entity.idProperty) {
                    return;
                }
                if (store.commiting) {
                    return;
                }
                if (!extend_params) {
                    extend_params = {};
                }
                var records = store.getUpdatedRecords();
                var phantoms = store.getNewRecords();
                records = records.concat(phantoms);
                if (records.length === 0) {
                    resolve(true);
                    store.commiting = false;
                    return;
                }
                store.commiting = true;
                var params = { "entityCode": store.entity.entityCode };
                params["menu"] = FastExt.Store.getStoreMenuText(store);
                for (var i = 0; i < records.length; i++) {
                    var record = records[i];
                    for (var j = 0; j < store.entity.idProperty.length; j++) {
                        var idName = store.entity.idProperty[j];
                        params['data[' + i + '].' + idName] = record.get(idName);
                    }
                    for (var key in record.modified) {
                        var oldValue = record.modified[key];
                        var newValue = record.get(key);
                        if (!Ext.isString(oldValue) && Ext.isEmpty(newValue)) {
                            params["data[" + i + "]." + key] = "<null>";
                        }
                        else {
                            params["data[" + i + "]." + key] = record.get(key);
                        }
                    }
                }
                params = FastExt.Json.mergeJson(params, extend_params);
                FastExt.Server.updateEntity(params, function (success, message) {
                    store.commiting = false;
                    resolve(success);
                    if (success) {
                        if (successMsg !== "false") {
                            FastExt.Dialog.toast(successMsg ? successMsg : message);
                        }
                        store.commitChanges();
                    }
                    else {
                        store.rejectChanges();
                        Ext.Msg.alert('系统提醒', message);
                    }
                });
            });
        };
        Store.commitStoreDelete = function (store, data, extend_params) {
            return new Ext.Promise(function (resolve, reject) {
                if (!store.entity) {
                    return;
                }
                if (!store.entity.idProperty) {
                    return;
                }
                var params = { "entityCode": store.entity.entityCode };
                params["menu"] = FastExt.Store.getStoreMenuText(store);
                for (var i = 0; i < data.length; i++) {
                    var record = data[i];
                    for (var j = 0; j < store.entity.idProperty.length; j++) {
                        var idName = store.entity.idProperty[j];
                        params['data[' + i + '].' + idName] = record.get(idName);
                    }
                }
                params = FastExt.Json.mergeJson(params, extend_params);
                FastExt.Server.deleteEntity(params, function (success, message) {
                    resolve(success);
                    if (success) {
                        FastExt.Dialog.toast(message);
                        var reloadPage = store.currentPage;
                        if (store.count() - data.length <= 0) {
                            reloadPage = reloadPage - 1;
                        }
                        store.loadPage(Math.max(reloadPage, 1));
                    }
                    else {
                        Ext.Msg.alert('系统提醒', message);
                    }
                });
            });
        };
        Store.commitStoreReback = function (store, data) {
            return new Ext.Promise(function (resolve, reject) {
                if (!store.entity) {
                    return;
                }
                if (!store.entity.idProperty) {
                    return;
                }
                var params = { "entityCode": store.entity.entityCode };
                params["menu"] = FastExt.Store.getStoreMenuText(store);
                for (var i = 0; i < data.length; i++) {
                    var record = data[i];
                    for (var j = 0; j < store.entity.idProperty.length; j++) {
                        var idName = store.entity.idProperty[j];
                        params['data[' + i + '].' + idName] = record.get(idName);
                    }
                }
                FastExt.Server.rebackEntity(params, function (success, message) {
                    resolve(success);
                    if (success) {
                        var reloadPage = store.currentPage;
                        if (store.count() - data.length <= 0) {
                            reloadPage = reloadPage - 1;
                        }
                        store.loadPage(Math.max(reloadPage, 1));
                    }
                    else {
                        Ext.Msg.alert('系统提醒', message);
                    }
                });
            });
        };
        Store.commitStoreCopy = function (store, data) {
            return new Ext.Promise(function (resolve, reject) {
                if (!store.entity) {
                    return;
                }
                if (!store.entity.idProperty) {
                    return;
                }
                var params = { "entityCode": store.entity.entityCode };
                params["menu"] = Store.getStoreMenuText(store);
                var hasData = false;
                for (var i = 0; i < data.length; i++) {
                    var record = data[i];
                    for (var j = 0; j < store.entity.idProperty.length; j++) {
                        var idName = store.entity.idProperty[j];
                        var value = record.get(idName);
                        params['data[' + i + '].' + idName] = value;
                        if (!Ext.isEmpty(value)) {
                            hasData = true;
                        }
                    }
                }
                if (!hasData) {
                    FastExt.Dialog.toast("选中的数据不可复制！");
                    return;
                }
                FastExt.Server.copyEntity(params, function (success, message) {
                    resolve(success);
                    if (success) {
                        FastExt.Dialog.toast(message);
                        var reloadPage = store.currentPage;
                        if (store.count() - data.length <= 0) {
                            reloadPage = reloadPage - 1;
                        }
                        store.loadPage(Math.max(reloadPage, 1));
                    }
                    else {
                        Ext.Msg.alert('系统提醒', message);
                    }
                });
            });
        };
        Store.isModified = function (record) {
            for (var name_4 in record.data) {
                try {
                    if (record.isModified(name_4)) {
                        return true;
                    }
                }
                catch (e) {
                }
            }
            return false;
        };
        Store.getEntityDataStore = function (entity, where, tree) {
            if (Ext.isEmpty(entity)) {
                FastExt.Dialog.showAlert("系统提醒", "参数entity不可为空！");
                return;
            }
            var config = {
                fields: [],
                pageSize: 20,
                where: where,
                entity: entity,
                remoteSort: FastExt.Base.toBool(entity.remoteSort, true),
                treeConfig: tree,
                proxy: {
                    type: 'ajax',
                    url: FastExt.Server.entityListUrl(),
                    actionMethods: {
                        create: 'POST',
                        read: 'POST',
                        update: 'POST',
                        destroy: 'POST'
                    },
                    reader: {
                        type: 'json',
                        root: 'list',
                        totalProperty: 'totalRow'
                    }
                },
                listeners: {
                    beforeload: function (store, options, eOpts) {
                        store.recordSelectHistory = false;
                        try {
                            if (FastExt.Power.isPower()) {
                                console.log("权限配置默认，取消数据加载！");
                                return false;
                            }
                            if (!store.entity || !store.entity.entityCode) {
                                return false;
                            }
                            var params = store.proxy.extraParams;
                            var newParams_1 = {
                                "entityCode": store.entity.entityCode,
                                "limit": store.pageSize,
                                "storeId": store.getStoreCode(),
                            };
                            if (store.where) {
                                for (var w in store.where) {
                                    newParams_1["where['" + w + "']"] = store.where[w];
                                }
                            }
                            if (tree) {
                                if (Ext.isEmpty(tree.parentIdValue)) {
                                    tree.parentIdValue = -1;
                                }
                                newParams_1["page"] = -1;
                                newParams_1["fromTree"] = true;
                                newParams_1["treeParentIdName"] = tree.parentIdName;
                                var parentValue = options.node.data[tree.idName];
                                var isFirstInstance = FastExt.Base.toBool(options.node.isFirstInstance, false);
                                if (Ext.isEmpty(parentValue)) {
                                    parentValue = tree.parentIdValue;
                                }
                                newParams_1["where['^treeSearch']"] = false;
                                newParams_1["where['^treeLevel']"] = parseInt(options.node.data.depth) + 1;
                                if (store.grid && FastExt.Grid.hasSearchColumn(store.grid)) {
                                    FastExt.Base.deleteObjectAttr("where['" + tree.parentIdName + "']", newParams_1, params);
                                    FastExt.Base.deleteObjectAttr("where['" + tree.idName + "']", newParams_1, params);
                                    newParams_1["where['^treeSearch']"] = true;
                                }
                                else if (isFirstInstance && tree.parentIdValue !== -1) {
                                    newParams_1["where['" + tree.idName + "']"] = parentValue;
                                    FastExt.Base.deleteObjectAttr("where['" + tree.parentIdName + "']", newParams_1, params);
                                }
                                else {
                                    FastExt.Base.deleteObjectAttr("where['" + tree.idName + "']", newParams_1, params);
                                    newParams_1["where['" + tree.parentIdName + "']"] = parentValue;
                                }
                            }
                            if (store.grid) {
                                newParams_1["power"] = FastExt.Base.toBool(store.grid.power, true);
                                if (store.grid.listParams) {
                                    newParams_1 = FastExt.Json.mergeJson(newParams_1, store.grid.listParams);
                                }
                                store.grid.fromStoreChange = true;
                                if (store.grid.getSelection().length > 0) {
                                    store.grid.getSelectionModel().deselectAll(false, true);
                                }
                                else {
                                    store.grid.fireEvent("selectionchange", store.grid);
                                }
                                store.grid.fromStoreChange = false;
                                if (store.grid.where) {
                                    for (var w in store.grid.where) {
                                        newParams_1["where['" + w + "']"] = store.grid.where[w];
                                    }
                                }
                                store.getSorters().each(function (item) {
                                    var column = FastExt.Grid.getColumn(store.grid, item.getProperty());
                                    newParams_1["indexSort['" + item.getProperty() + "']"] = column.getIndex();
                                });
                                FastExt.Grid.checkColumnSearch(store.grid);
                                if (Ext.isFunction(store.grid.onBeforeLoad)) {
                                    var result = store.grid.onBeforeLoad(store.grid, store, newParams_1);
                                    if (!FastExt.Base.toBool(result, true)) {
                                        return false;
                                    }
                                }
                            }
                            store.getProxy().setExtraParams(FastExt.Json.mergeJson(params, newParams_1));
                            return true;
                        }
                        catch (e) {
                            FastExt.Dialog.showException(e, "store:beforeload");
                        }
                    }
                },
                autoLoad: false
            };
            config.autoLoad = false;
            var entityStore;
            if (tree) {
                if (!FastExt.System.InitHandler.isSilenceGlobalSaving()) {
                    config["root"] = {
                        expanded: true
                    };
                }
                entityStore = Ext.create('Ext.data.TreeStore', config);
            }
            else {
                entityStore = Ext.create('Ext.data.Store', config);
            }
            return entityStore;
        };
        Store.getEnumDataStore = function (enumName, firstData, lastData, params, useCache, reload, justData) {
            return new Ext.Promise(function (resolve, reject) {
                FastExt.Store.getEnumDataArray(enumName, firstData, lastData, params, useCache, reload).then(function (dataArray) {
                    if (justData) {
                        resolve(dataArray);
                    }
                    else {
                        resolve(Ext.create('Ext.data.Store', {
                            autoLoad: false,
                            enumName: enumName,
                            data: dataArray
                        }));
                    }
                });
            });
        };
        Store.getEnumDataArray = function (enumName, firstData, lastData, params, useCache, reload) {
            return new Ext.Promise(function (resolve, reject) {
                if (!params) {
                    params = {};
                }
                if (Ext.isEmpty(enumName)) {
                    resolve([]);
                    return;
                }
                if (Ext.isEmpty(useCache)) {
                    useCache = true;
                }
                if (Ext.isEmpty(reload)) {
                    reload = false;
                }
                var cacheKey = $.md5(enumName + Ext.JSON.encode(params));
                var filterData = function () {
                    var dataArray = Ext.clone(FastExt.Cache.getEnumCache(enumName, cacheKey));
                    if (firstData) {
                        dataArray = Ext.Array.insert(dataArray, 0, firstData);
                    }
                    if (lastData) {
                        dataArray = Ext.Array.push(dataArray, lastData);
                    }
                    return dataArray;
                };
                if (!useCache || !FastExt.Cache.existEnumCache(enumName, cacheKey) || reload) {
                    $.post(FastExt.Server.showEnumsUrl() + "?enumName=" + enumName, params, function (result) {
                        try {
                            if (result.success) {
                                FastExt.Cache.setEnumCache(enumName, cacheKey, result.data);
                                resolve(filterData());
                            }
                            else {
                                FastExt.Dialog.showException("枚举获取失败！" + result.message, "getEnumDataArray");
                            }
                        }
                        catch (e) {
                            FastExt.Dialog.showException(e, "获取枚举数据源！[getEnumDataStore]");
                        }
                    });
                    return;
                }
                resolve(filterData());
            });
        };
        Store.getEnumData = function (enumName, id, attr) {
            return new Ext.Promise(function (resolve, reject) {
                if (!attr) {
                    attr = "id";
                }
                if (Ext.isEmpty(id)) {
                    resolve(null);
                    return;
                }
                FastExt.Store.getEnumDataArray(enumName).then(function (dataArray) {
                    for (var i = 0; i < dataArray.length; i++) {
                        var data = dataArray[i];
                        if (!Ext.isEmpty(data[attr]) && data[attr].toString() === id.toString()) {
                            resolve(data);
                            return;
                        }
                    }
                    resolve(null);
                });
            });
        };
        Store.getEnumDataByRender = function (enumName) {
            try {
                var key_1 = "Enum@" + enumName + "@Loading";
                if (FastExt.Base.toBool(FastExt.Cache.memory[key_1], false)) {
                    return;
                }
                FastExt.Cache.memory[key_1] = true;
                FastExt.Store.getEnumDataArray(enumName).then(function (dataArray) {
                    var enumContainers = $("[data-enum=" + enumName + "][data-set='false']");
                    for (var i = 0; i < enumContainers.length; i++) {
                        var item = $(enumContainers[i]);
                        var enumValue = item.attr("data-id");
                        var enumValueAttr = item.attr("data-enum-value");
                        var enumTextAttr = item.attr("data-enum-text");
                        if (Ext.isEmpty(enumValueAttr) || enumValueAttr === "undefined") {
                            enumValueAttr = "id";
                        }
                        if (Ext.isEmpty(enumTextAttr) || enumValueAttr === "undefined") {
                            enumTextAttr = "text";
                        }
                        for (var i_2 = 0; i_2 < dataArray.length; i_2++) {
                            var data = dataArray[i_2];
                            if (FastExt.Base.toString(data[enumValueAttr], "") === enumValue.toString()) {
                                var innerHtml = void 0;
                                if (data) {
                                    var text = data[enumTextAttr];
                                    var enumColor = data["color"];
                                    if (Ext.isEmpty(text)) {
                                        innerHtml = "<span style='color: #ccc;'>" + enumValue + "</span>";
                                    }
                                    else {
                                        var color = FastExt.Color.toColor(enumColor, "#000000");
                                        innerHtml = "<span style='color: " + color + ";'>" + text + "</span>";
                                    }
                                }
                                else {
                                    return;
                                }
                                item.html(innerHtml);
                                item.attr("data-set", "true");
                                break;
                            }
                        }
                    }
                    FastExt.Cache.memory[key_1] = null;
                });
            }
            catch (e) {
            }
        };
        Store.getPageDataStore = function (maxSize, iteration) {
            if (!maxSize || maxSize.length === 0)
                maxSize = FastExt.Store.maxPageSize;
            if (!iteration || iteration.length === 0)
                iteration = 10;
            var dataArray = [];
            for (var i = 0; i < maxSize / 10; i++) {
                var text = ((i + 1) * iteration) + '条';
                var id = ((i + 1) * iteration);
                dataArray.push({
                    'text': text,
                    "id": id
                });
            }
            return Ext.create('Ext.data.Store', {
                id: 'pageSizeDataStore',
                fields: ["id", "text"],
                data: dataArray
            });
        };
        Store.getCompareDataStore = function (dataType) {
            var data = [
                {
                    id: -1,
                    text: '~',
                    desc: '空值'
                },
                {
                    id: -2,
                    text: '!~',
                    desc: '非空值'
                },
                {
                    id: 0,
                    text: '=',
                    desc: '等于'
                },
                {
                    id: 1,
                    text: '!=',
                    desc: '不等于'
                },
                {
                    id: 2,
                    text: '?',
                    desc: '包含'
                },
                {
                    id: 3,
                    text: '!?',
                    desc: '不包含'
                },
                {
                    id: 4,
                    text: '>',
                    desc: '大于'
                },
                {
                    id: 6,
                    text: '>=',
                    desc: '大等于'
                },
                {
                    id: 5,
                    text: '<',
                    desc: '小于'
                },
                {
                    id: 7,
                    text: '<=',
                    desc: '小等于'
                },
                {
                    id: 8,
                    text: '*',
                    desc: '匹配'
                },
                {
                    id: 9,
                    text: '!*',
                    desc: '不匹配'
                },
                {
                    id: 10,
                    text: '#',
                    desc: '重复'
                },
                {
                    id: 11,
                    text: '!#',
                    desc: '不重复'
                }
            ];
            if (dataType.date) {
                data = [
                    {
                        id: -1,
                        text: '~',
                        desc: '空值'
                    },
                    {
                        id: -2,
                        text: '!~',
                        desc: '非空值'
                    },
                    {
                        id: 0,
                        text: '=',
                        desc: '等于'
                    },
                    {
                        id: 1,
                        text: '!=',
                        desc: '不等于'
                    },
                    {
                        id: 4,
                        text: '>',
                        desc: '大于'
                    },
                    {
                        id: 6,
                        text: '>=',
                        desc: '大等于'
                    },
                    {
                        id: 5,
                        text: '<',
                        desc: '小于'
                    },
                    {
                        id: 7,
                        text: '<=',
                        desc: '小等于'
                    },
                ];
            }
            if (dataType && dataType.full) {
                data.splice(2, 0, {
                    id: -3,
                    text: '??',
                    desc: '检索'
                });
            }
            return Ext.create('Ext.data.Store', {
                data: data,
            });
        };
        Store.getCompareLinkDataStore = function () {
            return Ext.create('Ext.data.Store', {
                data: [
                    {
                        id: 0,
                        text: '&',
                        desc: '并且'
                    },
                    {
                        id: 1,
                        text: '||',
                        desc: '或者'
                    }
                ]
            });
        };
        Store.getGridColumnStore = function (grid, search) {
            var dataArray = [];
            if (grid) {
                var configColumns = grid.getColumns();
                for (var i = 0; i < configColumns.length; i++) {
                    var column = configColumns[i];
                    if (Ext.isEmpty(column.dataIndex)) {
                        continue;
                    }
                    if (FastExt.Base.toBool(search, false)) {
                        if (!FastExt.Grid.canColumnSearch(column)) {
                            continue;
                        }
                    }
                    dataArray.push({
                        "text": column.configText,
                        "id": column.dataIndex,
                        "index": i
                    });
                }
            }
            return Ext.create('Ext.data.Store', {
                fields: ["id", "text", "index"],
                data: dataArray
            });
        };
        Store.getChartGridColumnStore = function (grid) {
            var dataArray = [];
            if (grid) {
                var configColumns = grid.getColumns();
                for (var i = 0; i < configColumns.length; i++) {
                    var column = configColumns[i];
                    if (Ext.isEmpty(column.dataIndex)) {
                        continue;
                    }
                    if ((FastExt.Grid.isNumberColumn(column) && FastExt.Base.toBool(column.chart, true))
                        || FastExt.Grid.isIdPropertyColumn(column)
                        || FastExt.Base.toBool(column.chart, true)) {
                        dataArray.push({
                            "text": column.configText,
                            "id": column.dataIndex,
                            "index": i
                        });
                    }
                }
            }
            return Ext.create('Ext.data.Store', {
                fields: ["id", "text", "index"],
                data: dataArray
            });
        };
        Store.getYesOrNoDataStore = function () {
            return Ext.create('Ext.data.Store', {
                id: 'yesOrNoDataStore',
                fields: ["id", "text"],
                data: [
                    {
                        'text': '是',
                        "id": 1
                    },
                    {
                        'text': '否',
                        "id": 0
                    }
                ]
            });
        };
        Store.getYesOrNoDataStore2 = function () {
            return Ext.create('Ext.data.Store', {
                id: 'yesOrNoDataStore',
                fields: ["id", "text"],
                data: [
                    {
                        'text': '是',
                        "id": 'true'
                    },
                    {
                        'text': '否',
                        "id": 'false'
                    }
                ]
            });
        };
        Store.getThemeDataStore = function () {
            return Ext.create('Ext.data.Store', {
                id: 'themeDataStore',
                fields: ["id", "text"],
                data: [
                    {
                        'text': '圆润立体',
                        "id": 'extjs/theme/fast-theme-wrap'
                    },
                    {
                        'text': '清爽扁平',
                        "id": 'extjs/theme/fast-theme-flat'
                    }
                ]
            });
        };
        Store.getSystemLayoutDataStore = function () {
            return Ext.create('Ext.data.Store', {
                id: 'systemLayoutDataStore',
                fields: ["id", "text"],
                data: [
                    {
                        'text': '传统布局',
                        "id": 'normal'
                    },
                    {
                        'text': '桌面布局',
                        "id": 'desktop'
                    }
                ]
            });
        };
        Store.getFontSizeDataStore = function () {
            return Ext.create('Ext.data.Store', {
                id: 'fontSizeDataStore',
                fields: ["id", "text"],
                data: [
                    {
                        'text': '14px',
                        "id": '14px'
                    },
                    {
                        'text': '16px',
                        "id": '16px'
                    }, {
                        'text': '18px',
                        "id": '18px'
                    }
                ]
            });
        };
        Store.getFrontRadiusDataStore = function () {
            return Ext.create('Ext.data.Store', {
                id: 'fontSizeDataStore',
                fields: ["id", "text"],
                data: [
                    {
                        'text': '8px',
                        "id": '8px'
                    },
                    {
                        'text': '88px',
                        "id": '88px'
                    }
                ],
            });
        };
        Store.setRecordValue = function (record, dataIndex, field) {
            field.dataIndex = dataIndex;
            if (Ext.isFunction(field.setRecordValue)) {
                field.setRecordValue(record, false);
            }
            else {
                var value = field.getValue();
                if (Ext.isDate(field.getValue())) {
                    record.set(dataIndex, Ext.Date.format(value, field.format));
                }
                else {
                    record.set(dataIndex, value);
                }
            }
            if (record.store) {
                if (FastExt.Base.toBool(field.autoUpdate, false)) {
                    FastExt.Store.commitStoreUpdate(record.store);
                }
            }
        };
        Store.isSameRecord = function (firstRecord, secondRecord) {
            if (firstRecord.store && firstRecord.store.entity && secondRecord.store && secondRecord.store.entity) {
                if (firstRecord.store.entity.entityCode === secondRecord.store.entity.entityCode) {
                    return FastExt.Store.isSameRecordByEntity(firstRecord.store.entity, firstRecord, secondRecord);
                }
            }
            return false;
        };
        Store.isSameRecordByEntity = function (entity, firstRecord, secondRecord) {
            if (!entity.idProperty) {
                return false;
            }
            for (var i = 0; i < entity.idProperty.length; i++) {
                var idName = entity.idProperty[i];
                if (firstRecord.get(idName) !== secondRecord.get(idName)) {
                    return false;
                }
            }
            return true;
        };
        Store.mergeStoreParamBySelect = function (store, selectParams) {
            if (store) {
                var storeParams = store.proxy.extraParams;
                if (store.treeConfig) {
                    delete storeParams["where['" + store.treeConfig.idName + "']"];
                    delete storeParams["where['" + store.treeConfig.parentIdName + "']"];
                }
                return FastExt.Json.mergeJson(selectParams, storeParams);
            }
            return selectParams;
        };
        Store.maxPageSize = 50;
        return Store;
    }());
    FastExt.Store = Store;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var System = (function () {
        function System() {
        }
        System.__onLoaded = function () {
            System.InitHandler = new SystemInitializerHandler();
            System.ConfigHandler = new SystemConfigHandler();
            System.MenuHandler = new SystemMenuHandler();
            System.ThemeHandler = new SystemThemeHandler();
            System.ManagerHandler = new SystemManagerHandler();
            System.EntitiesHandler = new SystemEntitiesHandler();
            System.AppJsHandler = new SystemAppJsHandler();
            System.SecurityHandler = new SystemSecurityHandler();
            System.ChangelogHandler = new SystemChangelogHandler();
            Ext.on('mousedown', function (e) {
                FastExt.SystemLayout.setMouseClickXY(e.getX(), e.getY());
            });
        };
        System.addTab = function (component, id, title, icon) {
            FastExt.SystemLayout.showByCmp(component, id, title, icon);
        };
        return System;
    }());
    FastExt.System = System;
    var SystemInitializerHandler = (function () {
        function SystemInitializerHandler() {
            this._init = false;
            this._silenceGlobalSave = false;
            this._doNextSilenceMenuIndex = 0;
            this._allShowListMethodMenu = [];
        }
        SystemInitializerHandler.prototype.isInit = function () {
            try {
                if (this._init) {
                }
                return true;
            }
            catch (e) {
            }
            return false;
        };
        SystemInitializerHandler.prototype.isSilenceGlobalSaving = function () {
            return this._silenceGlobalSave;
        };
        SystemInitializerHandler.prototype.initSystem = function () {
            var _this = this;
            Ext.MessageBox.show({
                alwaysOnTop: true,
                modal: true,
                iconCls: "extIcon extTimer",
                title: '系统提醒',
                msg: '初始化系统中，请稍后……',
                progressText: '请耐心等待，即将完成操作',
                progress: true,
                closeAction: 'destroy',
                closable: false
            });
            FastExt.System.ConfigHandler.initConfig(function () {
                FastExt.System.AppJsHandler.loadAppJs(function () {
                    _this.initGlobalConfig();
                    _this.initSystemLayout();
                });
            });
        };
        SystemInitializerHandler.prototype.initTheme = function (callback) {
            FastExt.System.MenuHandler.initData();
            FastExt.System.ThemeHandler.loadTheme(callback);
        };
        SystemInitializerHandler.prototype.initGlobalConfig = function () {
            if (FastExt.Power.isPower()) {
                if (window.parent && Ext.isFunction(window.parent["getExtPower"])) {
                    FastExt.Power.config = true;
                    FastExt.Power.powers = FastExt.Json.jsonToObject(window.parent["getExtPower"]());
                    if (!FastExt.Power.powers) {
                        FastExt.Power.powers = {};
                    }
                    FastExt.System.ManagerHandler.setGhostPowers(FastExt.Json.jsonToObject(window.parent["getParentExtPower"]()));
                    if (FastExt.System.ManagerHandler.getGhostPowers()) {
                        for (var code in FastExt.Power.powers) {
                            if (FastExt.System.ManagerHandler.getGhostPowers().hasOwnProperty(code)) {
                                var managerPower = FastExt.System.ManagerHandler.getGhostPowers()[code];
                                for (var managerPowerKey in managerPower) {
                                    if (!managerPower[managerPowerKey]) {
                                        FastExt.Power.powers[code][managerPowerKey] = false;
                                    }
                                }
                            }
                        }
                    }
                    window["getExtPower"] = function () {
                        return FastExt.Power.getSavePowerData();
                    };
                }
            }
            window.addEventListener("popstate", function (e) {
                FastExt.SystemLayout.showByMenuId(FastExt.Windows.getMenuIdFromLocation());
            }, false);
            this._init = true;
        };
        SystemInitializerHandler.prototype.initSystemLayout = function () {
            if (FastExt.System.ConfigHandler.isDesktopLayout()) {
                FastExt.DesktopLayout.showSystemLayout();
            }
            else {
                FastExt.NormalLayout.showSystemLayout();
            }
            if (FastExt.System.ConfigHandler.isNeedInit()) {
                FastExt.Dialog.hideWait();
                FastExt.System.InitHandler.startSilenceSaveConfig(null, "正在升级当前账户的系统配置");
            }
        };
        SystemInitializerHandler.prototype.checkMaxMemory = function (callback) {
            if (FastExt.System.ConfigHandler.isLowMemory()) {
                FastExt.Dialog.showWarning("当前运行的系统内存过低，建议配置的运行内存不低于1G，否则操作的功能可能出现异常！", callback);
            }
            else {
                callback();
            }
        };
        SystemInitializerHandler.prototype.startSilenceSaveConfig = function (obj, message) {
            this._allShowListMethodMenu = FastExt.System.MenuHandler.getAllMethodMenu("showList");
            for (var i = 0; i < FastExt.System.EntitiesHandler.getEntities().length; i++) {
                var entity = FastExt.System.EntitiesHandler.getEntities()[i];
                if (!entity.js) {
                    continue;
                }
                if (Ext.isEmpty(entity.menu)) {
                    var id = $.md5(entity.entityCode + entity.comment);
                    this._allShowListMethodMenu.push({
                        method: "showList('" + id + "','" + entity.entityCode + "')",
                        icon: "icons/icon_function.svg",
                        text: "",
                        id: id
                    });
                }
            }
            FastExt.SystemLayout.closeAllTab();
            this._silenceGlobalSave = true;
            Ext.MessageBox.show({
                justTop: true,
                modal: true,
                animateTarget: obj,
                title: '系统提醒',
                msg: message ? message : '初始化系统配置',
                iconCls: "extIcon extTimer",
                progressText: '请耐心等待，即将完成操作',
                progress: true,
                closable: false,
                closeAction: "destroy"
            });
            this.doNextSilenceMenu();
        };
        SystemInitializerHandler.prototype.doNextSilenceMenu = function () {
            var _this = this;
            if (this._doNextSilenceMenuIndex >= this._allShowListMethodMenu.length) {
                FastExt.Dialog.showAlert("系统提醒", "系统配置已初始化完毕！", function () {
                    _this._silenceGlobalSave = false;
                    _this._doNextSilenceMenuIndex = 0;
                    FastExt.Listeners.getFire().onAfterInitSystem();
                    FastExt.Windows.reload();
                }, true, true);
                return;
            }
            Ext.MessageBox.updateProgress(parseFloat(String(this._doNextSilenceMenuIndex + 1)) / parseFloat(String(this._allShowListMethodMenu.length)), '正在读取配置中，请耐心等待');
            var menu = this._allShowListMethodMenu[this._doNextSilenceMenuIndex];
            FastExt.SystemLayout.showByMenu(menu);
            this._doNextSilenceMenuIndex = this._doNextSilenceMenuIndex + 1;
        };
        return SystemInitializerHandler;
    }());
    var SystemConfigHandler = (function () {
        function SystemConfigHandler() {
            this._fontSize = "14px";
            this._dateFormat = 'Y-m-d H:i:s';
            this._gridDefaultLinkButton = true;
            this._gridColumnRestore = true;
            this._gridRowNumber = false;
            this._gridIDColumnHidden = false;
            this._gridRefreshData = false;
            this._gridDetailsPanel = true;
            this._managerPowerCheckSameRole = true;
            this._menuSingleExpand = true;
        }
        SystemConfigHandler.prototype.initConfig = function (callBack) {
            var me = this;
            var params = {};
            window["showList"] = function (menuId, entityCode, where, config) {
                return FastExt.System.AppJsHandler.showList(menuId, entityCode, where, config);
            };
            Ext.Ajax.request({
                url: FastExt.Server.showSysInfoUrl(),
                params: params,
                success: function (response) {
                    var result = FastExt.Json.jsonToObject(response.responseText, true);
                    if (result.success) {
                        var data = result.data;
                        for (var key in data) {
                            var value = { value: data[key] };
                            if (FastExt.System.ManagerHandler.initData(key, value.value)) {
                                FastExt.System.MenuHandler.initSystemMenu();
                                continue;
                            }
                            if (FastExt.System.AppJsHandler.initData(key, value.value)) {
                                continue;
                            }
                            if (FastExt.System.EntitiesHandler.initData(key, value.value)) {
                                continue;
                            }
                            me[key] = value;
                        }
                        callBack();
                    }
                    else {
                        console.error(response);
                    }
                },
                failure: function (response, opts) {
                    console.error(response);
                }
            });
        };
        SystemConfigHandler.prototype.getSystemConfig = function () {
            return SystemConfig;
        };
        SystemConfigHandler.prototype.getConfig = function (name) {
            var ext = this.getSystemConfig();
            if (ext.hasOwnProperty(name)) {
                var value = ext[name];
                if (Ext.isObject(value)) {
                    return value;
                }
                return { value: value };
            }
            var obj = this[name];
            if (obj) {
                return obj;
            }
            return { value: "" };
        };
        SystemConfigHandler.prototype.isDebug = function () {
            return FastExt.Base.toBool(this.getConfig("debug").value, false);
        };
        SystemConfigHandler.prototype.isLocal = function () {
            return FastExt.Base.toBool(this.getConfig("local").value, false);
        };
        SystemConfigHandler.prototype.isDesktopLayout = function () {
            var systemLayout = FastExt.Objects.safeObject(this.getConfig("system_layout")).value;
            if (Ext.isEmpty(systemLayout)) {
                return false;
            }
            return systemLayout.toLowerCase() === "desktop";
        };
        SystemConfigHandler.prototype.isNormalLayout = function () {
            var systemLayout = FastExt.Objects.safeObject(this.getConfig("system_layout")).value;
            if (Ext.isEmpty(systemLayout)) {
                return false;
            }
            return systemLayout.toLowerCase() === "normal";
        };
        SystemConfigHandler.prototype.isDataboard = function () {
            return FastExt.Base.toBool(this.getDataboard().enable, false);
        };
        SystemConfigHandler.prototype.isThemeWrap = function () {
            var systemTheme = this.getConfig("theme").value;
            return systemTheme.indexOf("fast-theme-wrap") >= 0;
        };
        SystemConfigHandler.prototype.isThemeFlat = function () {
            var systemTheme = this.getConfig("theme").value;
            return systemTheme.indexOf("fast-theme-flat") >= 0;
        };
        SystemConfigHandler.prototype.isEnableTabTheme = function () {
            var tabTheme = this.getConfig("tab_theme").value;
            return FastExt.Base.toBool(tabTheme, false);
        };
        SystemConfigHandler.prototype.isEnableWindowAnim = function () {
            return FastExt.Base.toBool(this.getConfig("window_anim").value, true);
        };
        SystemConfigHandler.prototype.isEnableLayer = function () {
            return FastExt.Base.toBool(this.getConfig("layer").value, false);
        };
        SystemConfigHandler.prototype.isEnableSame = function () {
            return FastExt.Base.toBool(this.getConfig("same").value, false);
        };
        SystemConfigHandler.prototype.isEnableNoticeListener = function () {
            return FastExt.Base.toBool(this.getConfig("noticeListener").value, false);
        };
        SystemConfigHandler.prototype.isEnablePwd = function () {
            return FastExt.Base.toBool(this.getConfig("pwd").value, false);
        };
        SystemConfigHandler.prototype.isEnableGoogleAuthentication = function () {
            return FastExt.Base.toBool(this.getConfig("google_authentication").value, false);
        };
        SystemConfigHandler.prototype.isNeedInit = function () {
            return FastExt.Base.toBool(this.getConfig("needInit").value, false);
        };
        SystemConfigHandler.prototype.getApiHost = function () {
            return this.getConfig("api-host").value;
        };
        SystemConfigHandler.prototype.getMaxMemory = function () {
            return parseInt(this.getConfig("maxMemory").value);
        };
        SystemConfigHandler.prototype.isLowMemory = function () {
            return this.getMaxMemory() < 1024.0 * 1024.0 * 1024;
        };
        SystemConfigHandler.prototype.getGridRowHeight = function () {
            return parseInt(this.getConfig("grid_row_height").value);
        };
        SystemConfigHandler.prototype.getSessionId = function () {
            return this.getConfig("session-id").value;
        };
        SystemConfigHandler.prototype.getFontSize = function () {
            return this._fontSize;
        };
        SystemConfigHandler.prototype.getFontSizeNumber = function () {
            return FastExt.Base.getNumberValue(this.getFontSize());
        };
        SystemConfigHandler.prototype.getFastCharVersion = function () {
            return this.getConfig("fastchar").value;
        };
        SystemConfigHandler.prototype.getJavaVersion = function () {
            return this.getConfig("java").value;
        };
        SystemConfigHandler.prototype.getDeveloperUrl = function () {
            return this.getConfig("developer").url;
        };
        SystemConfigHandler.prototype.getDeveloperTitle = function () {
            return this.getConfig("developer").value;
        };
        SystemConfigHandler.prototype.getThemeColor = function () {
            return FastExt.Color.toColor(this.getConfig("theme_color").value);
        };
        SystemConfigHandler.prototype.getFrontColor = function () {
            return FastExt.Color.toColor(this.getConfig("front_color").value);
        };
        SystemConfigHandler.prototype.getSystemLogo = function () {
            return this.getConfig("system_logo").value;
        };
        SystemConfigHandler.prototype.getSystemTitle = function () {
            return FastExt.Eval.runObject(this.getSystemConfig(), $("title").text());
        };
        SystemConfigHandler.prototype.getSystemHttp = function () {
            return this.getConfig("http").value;
        };
        SystemConfigHandler.prototype.getSystemRoot = function () {
            return this.getConfig("root").value;
        };
        SystemConfigHandler.prototype.getDesktopBgImages = function () {
            return this.getConfig("desktop_bg_images").value;
        };
        SystemConfigHandler.prototype.setDesktopBgImage = function (val) {
            this.getConfig("desktop-bg-image").value = val;
        };
        SystemConfigHandler.prototype.getSystemCopyright = function () {
            return this.getConfig("copyright").value;
        };
        SystemConfigHandler.prototype.getSystemCopyrightUrl = function () {
            return this.getConfig("copyright").url;
        };
        SystemConfigHandler.prototype.getSystemVersion = function () {
            return this.getConfig("version").desc;
        };
        SystemConfigHandler.prototype.getSystemVersionInt = function () {
            return this.getConfig("version").value;
        };
        SystemConfigHandler.prototype.getSystemMenuCss = function () {
            return this.getConfig("menusCss").value;
        };
        SystemConfigHandler.prototype.getIndexUrl = function () {
            return this.getConfig("index_js").value;
        };
        SystemConfigHandler.prototype.getLoginBackground = function () {
            return this.getConfig("login_background").value;
        };
        SystemConfigHandler.prototype.getLoginLottieJson = function () {
            return this.getConfig("login_lottie_json").value;
        };
        SystemConfigHandler.prototype.getLoginLogo = function () {
            return this.getConfig("login_logo").value;
        };
        SystemConfigHandler.prototype.getLoginType = function () {
            return this.getConfig("login_type").value;
        };
        SystemConfigHandler.prototype.getDocsUrl = function () {
            return this.getConfig("doc_extjs").value;
        };
        SystemConfigHandler.prototype.getDocsTitle = function () {
            return this.getConfig("doc_extjs").desc;
        };
        SystemConfigHandler.prototype.getLocalhostIP = function () {
            return this.getConfig("host").value;
        };
        SystemConfigHandler.prototype.getSystemOS = function () {
            return this.getConfig("os").value;
        };
        SystemConfigHandler.prototype.getSystemStartTime = function () {
            return this.getConfig("start-time").value;
        };
        SystemConfigHandler.prototype.getSystemDB = function () {
            return this.getConfig("db").value;
        };
        SystemConfigHandler.prototype.getSystemDBPool = function () {
            return this.getConfig("db-pool").value;
        };
        SystemConfigHandler.prototype.getSystemServer = function () {
            return this.getConfig("server").value;
        };
        SystemConfigHandler.prototype.getSystemCatalina = function () {
            return this.getConfig("server").value;
        };
        SystemConfigHandler.prototype.getGoogleAuthenticationAppDownloadUrl = function () {
            return this.getConfig("google_authentication_app_url").value;
        };
        SystemConfigHandler.prototype.getAMapSecurity = function () {
            return this.getConfig("amap_security").value;
        };
        SystemConfigHandler.prototype.getAMapVersion = function () {
            return this.getConfig("amap_version").value;
        };
        SystemConfigHandler.prototype.getAMapKey = function () {
            return this.getConfig("amap_key").value;
        };
        SystemConfigHandler.prototype.setFontSize = function (value) {
            this._fontSize = value;
        };
        SystemConfigHandler.prototype.getDateFormat = function () {
            return this._dateFormat;
        };
        SystemConfigHandler.prototype.setDateFormat = function (value) {
            this._dateFormat = value;
        };
        SystemConfigHandler.prototype.isGridDefaultLinkButton = function () {
            return this._gridDefaultLinkButton;
        };
        SystemConfigHandler.prototype.setGridDefaultLinkButton = function (value) {
            this._gridDefaultLinkButton = value;
        };
        SystemConfigHandler.prototype.isManagerPowerCheckSameRole = function () {
            return this._managerPowerCheckSameRole;
        };
        SystemConfigHandler.prototype.setManagerPowerCheckSameRole = function (value) {
            this._managerPowerCheckSameRole = value;
        };
        SystemConfigHandler.prototype.isMenuSingleExpand = function () {
            return this._menuSingleExpand;
        };
        SystemConfigHandler.prototype.setMenuSingleExpand = function (value) {
            this._menuSingleExpand = value;
        };
        SystemConfigHandler.prototype.isEnableDesktopMenuRecord = function () {
            return FastExt.Base.toBool(this.getConfig("desktop_menu_record").value, true);
        };
        SystemConfigHandler.prototype.isGridColumnRestore = function () {
            return this._gridColumnRestore;
        };
        SystemConfigHandler.prototype.setGridColumnRestore = function (value) {
            this._gridColumnRestore = value;
        };
        SystemConfigHandler.prototype.isGridRowNumber = function () {
            return this._gridRowNumber;
        };
        SystemConfigHandler.prototype.setGridRowNumber = function (value) {
            this._gridRowNumber = value;
        };
        SystemConfigHandler.prototype.isGridIDColumnHidden = function () {
            return this._gridIDColumnHidden;
        };
        SystemConfigHandler.prototype.setGridIDColumnHidden = function (value) {
            this._gridIDColumnHidden = value;
        };
        SystemConfigHandler.prototype.isGridRefreshData = function () {
            return this._gridRefreshData;
        };
        SystemConfigHandler.prototype.setGridRefreshData = function (value) {
            this._gridRefreshData = value;
        };
        SystemConfigHandler.prototype.getOSSType = function () {
            return this.getConfig("oss").value;
        };
        SystemConfigHandler.prototype.getOSSHosts = function () {
            return this.getConfig("ossHosts").value;
        };
        SystemConfigHandler.prototype.isGridDetailsPanel = function () {
            return this._gridDetailsPanel;
        };
        SystemConfigHandler.prototype.setGridDetailsPanel = function (value) {
            this._gridDetailsPanel = value;
        };
        SystemConfigHandler.prototype.getDataboard = function () {
            return this.getConfig("databoard");
        };
        return SystemConfigHandler;
    }());
    var SystemMenuHandler = (function () {
        function SystemMenuHandler() {
            this._cloneMenus = [];
        }
        SystemMenuHandler.prototype.initData = function () {
            this._allMenus = FastExt.System.ConfigHandler.getSystemConfig().menu;
            this._initMenu(null, this._allMenus);
            this._allMenus = this._refreshMenu(this._allMenus);
        };
        SystemMenuHandler.prototype.initSystemMenu = function () {
            this._menus = this.getPowerMenuByManager(this._allMenus);
        };
        SystemMenuHandler.prototype._insertToFirstParam = function (method, insertParam) {
            var regStr = /.*\((.*)\)/;
            var result = method.match(regStr);
            if (result && result.length > 0) {
                insertParam = "'" + insertParam + "'";
                var newParam = insertParam;
                var oldParam = result[1];
                if (oldParam && oldParam.length > 0) {
                    newParam = insertParam + "," + oldParam;
                }
                return method.replace("(" + oldParam + ")", "(" + newParam + ")");
            }
            return method;
        };
        SystemMenuHandler.prototype._initMenu = function (parent, menus) {
            if (!menus) {
                return;
            }
            for (var i = 0; i < menus.length; i++) {
                var menu = menus[i];
                if (Ext.isEmpty(menu.index)) {
                    menu.index = 0;
                }
                menu.iconValue = menu.icon;
                menu.leaf = !(menu.children && menu.children.length > 0);
                if (parent) {
                    menu.parentId = parent.id;
                }
                else {
                    menu.parentId = "root";
                }
                if (Ext.isString(menu.method)) {
                    menu.method = this._insertToFirstParam(menu.method, menu.id);
                }
                if (parent && parent.id) {
                    menu.id = $.md5(parent.id + "-" + menu.text);
                }
                else {
                    menu.id = $.md5(menu.text);
                }
                if (parent && Ext.isEmpty(menu.color)) {
                    menu.color = parent.color;
                }
                if (Ext.isEmpty(menu.color) || menu.color === "#theme_color") {
                    menu.color = FastExt.System.ThemeHandler.getThemeColor();
                }
                if (parent && Ext.isEmpty(menu.iconValue)) {
                    menu.iconValue = parent.iconValue;
                }
                if (menu.iconValue) {
                    menu.icon = FastExt.Server.getIcon(menu.iconValue, menu.color);
                }
                menu.baseCls = "baseTab" + $.md5(menu.color) + "Cls";
                this._initMenu(menu, menu.children);
            }
        };
        SystemMenuHandler.prototype._refreshMenu = function (menus) {
            var sorted = menus.sort(function (a, b) {
                return a.index - b.index;
            });
            var holder = {};
            for (var _i = 0, sorted_1 = sorted; _i < sorted_1.length; _i++) {
                var menu = sorted_1[_i];
                if (!holder[menu.id]) {
                    holder[menu.id] = {};
                }
                holder[menu.id] = FastExt.Json.deepMergeJson(holder[menu.id], menu);
            }
            for (var holderKey in holder) {
                var entry = holder[holderKey];
                if (entry.children && entry.children.length > 0) {
                    entry.children = this._refreshMenu(entry.children);
                }
            }
            return Ext.Object.getValues(holder);
        };
        SystemMenuHandler.prototype.getPowerMenuByManager = function (menus) {
            if (!menus) {
                return [];
            }
            var hasPowerMenu = [];
            var managerMenuPower = FastExt.System.ManagerHandler.getManagerMenuPower();
            for (var _i = 0, menus_4 = menus; _i < menus_4.length; _i++) {
                var menu = menus_4[_i];
                if (!FastExt.Listeners.getFire().onSystemInitMenu(menu)) {
                    continue;
                }
                var newMenu = Ext.clone(menu);
                var hasPower = false;
                if (FastExt.Power.isPower()) {
                    if (window.parent && Ext.isFunction(window.parent.getMenuPower)) {
                        managerMenuPower = window.parent.getMenuPower();
                    }
                    hasPower = managerMenuPower.indexOf(newMenu.id) >= 0;
                }
                else {
                    hasPower = FastExt.System.ManagerHandler.isSuperRole() || managerMenuPower.indexOf(newMenu.id) >= 0;
                }
                if (hasPower) {
                    hasPowerMenu.push(newMenu);
                    newMenu.children = this.getPowerMenuByManager(newMenu.children);
                }
            }
            return hasPowerMenu;
        };
        SystemMenuHandler.prototype.getPowerMenuByConfig = function (menus, menuChecked, menuPower) {
            if (!menus) {
                return [];
            }
            var hasPowerMenu = [];
            for (var _i = 0, menus_5 = menus; _i < menus_5.length; _i++) {
                var menu = menus_5[_i];
                var newMenu = Ext.clone(menu);
                if (!FastExt.Base.toBool(newMenu.power, true)) {
                    continue;
                }
                if (!menuPower || menuPower.indexOf(newMenu.id) >= 0) {
                    newMenu.checked = menuChecked && menuChecked.indexOf(newMenu.id) >= 0;
                    newMenu.children = this.getPowerMenuByConfig(newMenu.children, menuChecked, menuPower);
                    newMenu.leaf = newMenu.children.length === 0;
                    hasPowerMenu.push(newMenu);
                }
            }
            return hasPowerMenu;
        };
        SystemMenuHandler.prototype.getMenus = function () {
            return this._menus;
        };
        SystemMenuHandler.prototype.getAllMenus = function () {
            return this._allMenus;
        };
        SystemMenuHandler.prototype.isValid = function () {
            return this._menus != null;
        };
        SystemMenuHandler.prototype.getMenu = function (menuId) {
            return this.getMenuData(menuId);
        };
        SystemMenuHandler.prototype.findMenu = function (menuLevelPath) {
            menuLevelPath = menuLevelPath.replace(" ", "");
            var menuText = menuLevelPath.split('>');
            var getMenuByText = function (menus, findMenuText) {
                for (var i = 0; i < menus.length; i++) {
                    var menu = menus[i];
                    if (menu.text === findMenuText) {
                        return Ext.clone(menu);
                    }
                    if (menu.children) {
                        var childMenu = getMenuByText(menu.children, findMenuText);
                        if (childMenu != null) {
                            return childMenu;
                        }
                    }
                }
                return null;
            };
            var currSource = this.getMenus();
            for (var i = 0; i < menuText.length; i++) {
                var text = menuText[i];
                var _findMenu = getMenuByText(currSource, text);
                if (_findMenu) {
                    if (i === menuText.length - 1) {
                        return _findMenu;
                    }
                    currSource = _findMenu.children;
                    continue;
                }
                return null;
            }
            return null;
        };
        SystemMenuHandler.prototype.cloneMenu = function (menuId) {
            if (Ext.isEmpty(menuId)) {
                return null;
            }
            var closeMenuData = this.getMenuDataBySource(this.getMenus(), menuId);
            closeMenuData.id = FastExt.Base.buildOnlyCode("CM");
            closeMenuData._clone = true;
            this._cloneMenus.push(closeMenuData);
            return closeMenuData;
        };
        SystemMenuHandler.prototype.getMenuData = function (menuId) {
            if (Ext.isEmpty(menuId)) {
                return null;
            }
            var menuDataBySource = this.getMenuDataBySource(this._cloneMenus, menuId);
            if (menuDataBySource) {
                return menuDataBySource;
            }
            return this.getMenuDataBySource(this.getMenus(), menuId);
        };
        SystemMenuHandler.prototype.getMenuDataBySource = function (sourceMenus, menuId) {
            if (!menuId) {
                return null;
            }
            var getMenuById = function (parent, menus, findMenuId) {
                for (var i = 0; i < menus.length; i++) {
                    var menu = menus[i];
                    if (menu.id === findMenuId) {
                        return Ext.clone(menu);
                    }
                    if (menu.children) {
                        var childMenu = getMenuById(menu, menu.children, findMenuId);
                        if (childMenu != null) {
                            return childMenu;
                        }
                    }
                }
                return null;
            };
            return getMenuById(null, sourceMenus, menuId);
        };
        SystemMenuHandler.prototype.getPlainMenu = function (menu, splitChar) {
            if (Ext.isEmpty(splitChar)) {
                splitChar = ">";
            }
            if (menu) {
                if (menu.parentId && menu.parentId.toLowerCase() !== "root") {
                    var storeMenuText = this.getPlainMenu(this.getMenu(menu.parentId), splitChar);
                    if (storeMenuText) {
                        return storeMenuText + splitChar + menu.text;
                    }
                }
                return menu.text;
            }
            return "";
        };
        SystemMenuHandler.prototype.getPathMenu = function (menu) {
            if (menu) {
                if (menu.parentId && menu.parentId.toLowerCase() !== "root") {
                    var pathMenus = this.getPathMenu(this.getMenu(menu.parentId));
                    if (pathMenus) {
                        pathMenus.push(menu);
                        return pathMenus;
                    }
                }
                return [menu];
            }
            return null;
        };
        SystemMenuHandler.prototype.getPlainIconMenu = function (menu, splitChar) {
            var menuArray = this.getPathMenu(menu);
            var menuIconHtml = "<div style=\"line-height: 20px;display: flex;padding: 0 5px;\" >";
            for (var i = 0; i < menuArray.length; i++) {
                var targetMenu = menuArray[i];
                var itemHtml = "<img alt='' src=\"" + targetMenu.icon + "\" width=\"20px\" height=\"20px\" />" +
                    "<span style=\"margin-left: 5px;\">" + targetMenu.text + "</span> ";
                if (i != 0) {
                    itemHtml = "<span style='font-size: 12px;margin: 0 5px;color: #cccccc;' class='extIcon extArrowRight2'></span>" + itemHtml;
                }
                menuIconHtml += itemHtml;
            }
            menuIconHtml += "</div>";
            return menuIconHtml;
        };
        SystemMenuHandler.prototype.getPlainIconMenuWithCloser = function (menu, closeActionFunctionStr, splitChar) {
            var menuArray = this.getPathMenu(menu);
            var menuIconHtml = "<div style=\"line-height: 20px;display: flex;padding: 0 5px;\" >";
            for (var i = 0; i < menuArray.length; i++) {
                var targetMenu = menuArray[i];
                var itemHtml = "<img alt='' src=\"" + targetMenu.icon + "\" width=\"20px\" height=\"20px\" />" +
                    "<span style=\"margin-left: 5px;\">" + targetMenu.text + "</span> ";
                if (i != 0) {
                    itemHtml = "<span style='font-size: 12px;margin: 0 5px;color: #cccccc;' class='extIcon extArrowRight2'></span>" + itemHtml;
                }
                menuIconHtml += itemHtml;
            }
            var closerHtml = "<span class='extIcon extClose fast-ext-menu-closer' ></span>";
            menuIconHtml += "&nbsp;&nbsp;" + FastExt.Documents.wrapOnClick(closerHtml, closeActionFunctionStr) + "</div>";
            return menuIconHtml;
        };
        SystemMenuHandler.prototype.getPlainIconMenuHtmlBySVG = function (menu) {
            return "<div style=\"line-height: 20px;display: flex\" ><svg style='width: 20px;height: 20px;' class=\"svgIconFill\" aria-hidden=\"true\"><use xlink:href=\"#" + menu.iconCls + "\"></use></svg>" +
                "<span style=\"margin-left: 5px;\">" + menu.text + "</span></div> ";
        };
        SystemMenuHandler.prototype.existMenu = function (menuId) {
            if (Ext.isEmpty(menuId)) {
                return false;
            }
            return this.getMenu(menuId) != null;
        };
        SystemMenuHandler.prototype.searchMenuByEntityCode = function (entityCode) {
            var filterMenu = function (menuArray) {
                if (!menuArray) {
                    return null;
                }
                for (var i = 0; i < menuArray.length; i++) {
                    var menu = menuArray[i];
                    if (menu.method && menu.method.indexOf(entityCode) >= 0) {
                        return menu;
                    }
                    if (menu.children) {
                        var result = filterMenu(menu.children);
                        if (result) {
                            return result;
                        }
                    }
                }
                return null;
            };
            return filterMenu(this.getMenus());
        };
        SystemMenuHandler.prototype.searchMenusByEntityCode = function (entityCode) {
            var filterMenu = function (menuArray) {
                var menus = [];
                if (!menuArray) {
                    return null;
                }
                for (var i = 0; i < menuArray.length; i++) {
                    var menu = menuArray[i];
                    if (menu.method && menu.method.indexOf(entityCode) >= 0) {
                        menus.push(menu);
                    }
                    if (menu.children) {
                        var result = filterMenu(menu.children);
                        if (result) {
                            menus = menus.concat(result);
                        }
                    }
                }
                return menus;
            };
            return filterMenu(this.getMenus());
        };
        SystemMenuHandler.prototype.getAllMethodMenu = function (filterKey) {
            if (Ext.isEmpty(filterKey)) {
                filterKey = "";
            }
            var filterMenu = function (parentMenus, menuArray) {
                if (!parentMenus) {
                    return;
                }
                for (var i = 0; i < parentMenus.length; i++) {
                    var menu = parentMenus[i];
                    if (menu.method && menu.method.indexOf(filterKey) >= 0) {
                        menuArray.push(menu);
                    }
                    filterMenu(menu.children, menuArray);
                }
            };
            var menuArray = [];
            filterMenu(this.getMenus(), menuArray);
            return menuArray;
        };
        return SystemMenuHandler;
    }());
    var SystemThemeHandler = (function () {
        function SystemThemeHandler() {
        }
        SystemThemeHandler.prototype.loadTheme = function (callback) {
            var _this = this;
            var theme = {};
            var baseThemeTemp = FastExt.System.ConfigHandler.getConfig("theme").value + ".temp";
            var menuThemeTemp = FastExt.System.ConfigHandler.getConfig("theme").value + "-tab.temp";
            FastExt.PluginLoader.loadFiles([baseThemeTemp, menuThemeTemp], function (content) {
                var themeContents = [FastExt.Theme.buildThemeContent(content[0], ".fastchar-extjs", _this.getThemeColor())];
                var menuThemes = [];
                var initMenuTheme = function (menus) {
                    if (!menus) {
                        return;
                    }
                    for (var i = 0; i < menus.length; i++) {
                        var menu = menus[i];
                        if (menuThemes.indexOf(menu.baseCls) < 0) {
                            themeContents.push(FastExt.Theme.buildThemeContent(content[1], ".fastchar-extjs ." + menu.baseCls, menu.color));
                        }
                        initMenuTheme(menu.children);
                    }
                };
                initMenuTheme(FastExt.System.MenuHandler.getAllMenus());
                FastExt.Documents.addStyles(themeContents, callback);
            });
        };
        SystemThemeHandler.prototype.getThemeColor = function () {
            return FastExt.System.ConfigHandler.getThemeColor();
        };
        SystemThemeHandler.prototype.getFrontColor = function () {
            return FastExt.System.ConfigHandler.getFrontColor();
        };
        return SystemThemeHandler;
    }());
    var SystemManagerHandler = (function () {
        function SystemManagerHandler() {
        }
        SystemManagerHandler.prototype.initData = function (key, value) {
            if (key === "manager") {
                this._manager = value;
                return true;
            }
            return false;
        };
        SystemManagerHandler.prototype.setManager = function (data) {
            this._manager = data;
        };
        SystemManagerHandler.prototype.getManager = function () {
            return this._manager;
        };
        SystemManagerHandler.prototype.setGhostPowers = function (data) {
            this._ghostPowers = data;
        };
        SystemManagerHandler.prototype.getGhostPowers = function () {
            return this._ghostPowers;
        };
        SystemManagerHandler.prototype.isValid = function () {
            return this._manager;
        };
        SystemManagerHandler.prototype.getManagerId = function () {
            if (this._manager) {
                return this._manager["managerId"];
            }
            return -1;
        };
        SystemManagerHandler.prototype.getManagerName = function () {
            if (this._manager) {
                return this._manager["managerName"];
            }
            return "";
        };
        SystemManagerHandler.prototype.getManagerLoginName = function () {
            if (this._manager) {
                return this._manager["managerLoginName"];
            }
            return "";
        };
        SystemManagerHandler.prototype.getManagerStateStr = function () {
            if (this._manager) {
                return this._manager["managerStateStr"];
            }
            return "";
        };
        SystemManagerHandler.prototype.getRoleId = function () {
            if (this._manager) {
                return this._manager["roleId"];
            }
            return -1;
        };
        SystemManagerHandler.prototype.getRole = function () {
            if (this._manager) {
                return this._manager["role"];
            }
            return undefined;
        };
        SystemManagerHandler.prototype.getRoleName = function () {
            if (this.getRole()) {
                return this.getRole()["roleName"];
            }
            return "";
        };
        SystemManagerHandler.prototype.getRoleTypeStr = function () {
            if (this.getRole()) {
                return this.getRole()["roleTypeStr"];
            }
            return "";
        };
        SystemManagerHandler.prototype.getRoleType = function () {
            if (this.getRole()) {
                return this.getRole()["roleType"];
            }
            return -1;
        };
        SystemManagerHandler.prototype.getRoleStateStr = function () {
            if (this.getRole()) {
                return this.getRole()["roleStateStr"];
            }
            return "";
        };
        SystemManagerHandler.prototype.getOnlineTypeStr = function () {
            if (this._manager) {
                return this._manager["onlineTypeStr"];
            }
            return "";
        };
        SystemManagerHandler.prototype.getLastLoginTime = function () {
            if (this._manager) {
                return this._manager["lastLoginTime"];
            }
            return "";
        };
        SystemManagerHandler.prototype.getManagerExtPower = function () {
            if (this._manager) {
                return this._manager["managerExtPower"];
            }
            return "";
        };
        SystemManagerHandler.prototype.getManagerMenuPower = function () {
            if (this._manager) {
                return this._manager["managerMenuPower"];
            }
            return "";
        };
        SystemManagerHandler.prototype.isSuperRole = function () {
            if (this._manager && this._manager.role) {
                if (this._manager.role.roleType === 0) {
                    return true;
                }
            }
            return false;
        };
        return SystemManagerHandler;
    }());
    var SystemEntitiesHandler = (function () {
        function SystemEntitiesHandler() {
            this._entities = [];
        }
        SystemEntitiesHandler.prototype.initData = function (key, value) {
            if (key === "entities") {
                this._entities = value;
                return true;
            }
            return false;
        };
        SystemEntitiesHandler.prototype.getEntities = function () {
            return this._entities;
        };
        SystemEntitiesHandler.prototype.isValid = function () {
            return this._entities != null;
        };
        SystemEntitiesHandler.prototype.getEntity = function (entity) {
            if (Ext.isEmpty(entity)) {
                return null;
            }
            var me = this;
            var entityCode = entity;
            if (Ext.isObject(entity)) {
                entityCode = entity.entityCode;
            }
            var entities = this.getEntities();
            for (var i = 0; i < entities.length; i++) {
                var entity_3 = entities[i];
                if (entity_3.entityCode === entityCode) {
                    return entity_3;
                }
            }
            return null;
        };
        return SystemEntitiesHandler;
    }());
    var SystemAppJsHandler = (function () {
        function SystemAppJsHandler() {
            this._app = [];
            this._big_data_entity_attrs = ["linkTables"];
        }
        SystemAppJsHandler.prototype.initData = function (key, value) {
            if (key === "app") {
                this._app = value;
                return true;
            }
            return false;
        };
        SystemAppJsHandler.prototype.getApps = function () {
            return this._app;
        };
        SystemAppJsHandler.prototype.isValid = function () {
            return this._app != null;
        };
        SystemAppJsHandler.prototype.loadAppJs = function (callback) {
            this.loadAppJsByCallback(0, callback);
        };
        SystemAppJsHandler.prototype.loadAppJsByCallback = function (index, callback) {
            var _this = this;
            if (index >= this._app.length) {
                this.initAppJsProperty();
                callback();
                return;
            }
            if (index >= this._app.length - 2) {
                Ext.MessageBox.updateProgress(1, '资源加载结束', '系统初始化成功，正在进入系统……');
            }
            else {
                Ext.MessageBox.updateProgress(parseFloat(String(index + 1)) / parseFloat(String(this._app.length)), '资源加载中，请耐心等待');
            }
            FastExt.Documents.addScript({ src: this._app[index] }, function () {
                _this.loadAppJsByCallback(index + 1, callback);
            });
        };
        SystemAppJsHandler.prototype.initEntityProperty = function (fromObject, entityCode) {
            if (!fromObject) {
                return;
            }
            if (fromObject.__initedCoreProperty) {
                return;
            }
            fromObject.__initedCoreProperty = true;
            var entity = FastExt.System.EntitiesHandler.getEntity(entityCode);
            if (entity) {
                for (var key in entity) {
                    if (this._big_data_entity_attrs.indexOf(key) >= 0) {
                        continue;
                    }
                    fromObject[key] = entity[key];
                }
                fromObject["getListThisVarName"] = "me";
                fromObject["getListGridVarName"] = "grid";
            }
        };
        SystemAppJsHandler.prototype.initAppJsProperty = function () {
            var entities = FastExt.System.EntitiesHandler.getEntities();
            for (var i = 0; i < entities.length; i++) {
                var entity = entities[i];
                try {
                    var pro = eval(entity.entityCode + ".prototype");
                    if (pro) {
                        pro["__initedCoreProperty"] = true;
                        for (var key in entity) {
                            if (this._big_data_entity_attrs.indexOf(key) >= 0) {
                                continue;
                            }
                            pro[key] = entity[key];
                        }
                        entity.js = true;
                        var getList = eval("new " + entity.entityCode + "().getList");
                        if (getList) {
                            var getListFunctionStr = getList.toString();
                            var result = new RegExp("let (\\w+)[ ]?=[ ]?this[,; ]?").exec(getListFunctionStr);
                            if (result) {
                                pro["getListThisVarName"] = result[1];
                            }
                            else {
                                pro["getListThisVarName"] = "me";
                            }
                            result = new RegExp("[let,]?[ ]?(\\w+)[ ]?=[ ]?Ext.create\\((['\"])Ext.grid.Panel\\2").exec(getListFunctionStr);
                            if (result) {
                                pro["getListGridVarName"] = result[1];
                            }
                            else {
                                pro["getListGridVarName"] = "grid";
                            }
                        }
                    }
                }
                catch (e) {
                    entity.js = false;
                }
            }
        };
        SystemAppJsHandler.prototype.showList = function (menuId, entityCode, where, config) {
            if (!Ext.isString(menuId)) {
                throw "操作失败！参数menuId必须为String类型！请检查调用showList方法的相关功能！";
            }
            if (!Ext.isString(entityCode)) {
                throw "操作失败！参数entityCode必须为String类型！请检查调用showList方法的相关功能！";
            }
            if (!Ext.isEmpty(where)) {
                if (!Ext.isObject(where)) {
                    throw "操作失败！参数where必须为Object对象类型！请检查调用showList方法的相关功能！";
                }
            }
            var entity = FastExt.System.EntitiesHandler.getEntity(entityCode);
            if (!entity) {
                throw "操作失败！未获取到 '" + entityCode + "' 实体类！请检查实体类关联的表格是否存在！";
            }
            if (!where) {
                where = {};
            }
            var entityJsObj = eval("new " + entityCode + "()");
            entityJsObj.menu = FastExt.System.MenuHandler.getMenu(menuId);
            if (config) {
                return entityJsObj.getList(where, config);
            }
            return entityJsObj.getList(where);
        };
        return SystemAppJsHandler;
    }());
    var SystemSecurityHandler = (function () {
        function SystemSecurityHandler() {
            this.loginPublicKey = "ZnVuY3Rpb24oKXsKY29uc3QgXzB4MzY3YjQ0PV8weDEzN2Y7KGZ1bmN0aW9uKF8weDI5MzRiNyxfMHgyOTA3MTIpe2NvbnN0IF8weDExYjJmNz1fMHgxMzdmLF8weDFmOTcyMj1fMHgyOTM0YjcoKTt3aGlsZSghIVtdKXt0cnl7Y29uc3QgXzB4MjliN2Q5PS1wYXJzZUludChfMHgxMWIyZjcoMHgxMTcpKS8weDErLXBhcnNlSW50KF8weDExYjJmNygweDExNSkpLzB4MioocGFyc2VJbnQoXzB4MTFiMmY3KDB4MTExKSkvMHgzKSstcGFyc2VJbnQoXzB4MTFiMmY3KDB4MTFkKSkvMHg0Ky1wYXJzZUludChfMHgxMWIyZjcoMHgxMGEpKS8weDUrcGFyc2VJbnQoXzB4MTFiMmY3KDB4MTEwKSkvMHg2Ky1wYXJzZUludChfMHgxMWIyZjcoMHgxMTIpKS8weDcrLXBhcnNlSW50KF8weDExYjJmNygweDEwYykpLzB4OCooLXBhcnNlSW50KF8weDExYjJmNygweDExOSkpLzB4OSk7aWYoXzB4MjliN2Q5PT09XzB4MjkwNzEyKWJyZWFrO2Vsc2UgXzB4MWY5NzIyWydwdXNoJ10oXzB4MWY5NzIyWydzaGlmdCddKCkpO31jYXRjaChfMHg1NTI5OTApe18weDFmOTcyMlsncHVzaCddKF8weDFmOTcyMlsnc2hpZnQnXSgpKTt9fX0oXzB4MzYxMywweDljODA0KSk7bGV0IHJlc3VsdD13aW5kb3dbXzB4MzY3YjQ0KDB4MTA5KStGYXN0RXh0W18weDM2N2I0NCgweDEwYildW18weDM2N2I0NCgweDExYSldW18weDM2N2I0NCgweDExNCldKCldKCkscmVzdWx0SW5kZXg9d2luZG93W18weDM2N2I0NCgweDEwZCkrRmFzdEV4dFtfMHgzNjdiNDQoMHgxMGIpXVtfMHgzNjdiNDQoMHgxMWEpXVtfMHgzNjdiNDQoMHgxMTQpXSgpXSgpLHZhbHVlcz1FeHRbXzB4MzY3YjQ0KDB4MTE4KV1bXzB4MzY3YjQ0KDB4MTE2KV1bXzB4MzY3YjQ0KDB4MTBlKV0ocmVzdWx0KVtfMHgzNjdiNDQoMHgxMWMpXSgnfCcpLEFTQ0lJPVtdO2Z1bmN0aW9uIF8weDEzN2YoXzB4M2I3YWJhLF8weDE1MTJiNyl7Y29uc3QgXzB4MzYxM2UxPV8weDM2MTMoKTtyZXR1cm4gXzB4MTM3Zj1mdW5jdGlvbihfMHgxMzdmMTksXzB4NDQwNWM0KXtfMHgxMzdmMTk9XzB4MTM3ZjE5LTB4MTA5O2xldCBfMHgzOTFjYjg9XzB4MzYxM2UxW18weDEzN2YxOV07cmV0dXJuIF8weDM5MWNiODt9LF8weDEzN2YoXzB4M2I3YWJhLF8weDE1MTJiNyk7fWZ1bmN0aW9uIF8weDM2MTMoKXtjb25zdCBfMHg0MDljOTc9WydfX2ExJywnNTAwNTUyNUdZSEdEZicsJ1N5c3RlbScsJzcwNzg5NlFLZnNwSScsJ19fYTInLCdkZWNvZGUnLCdwdXNoJywnMjk5NjQ0MnFjVGx4bScsJzM5OWFZQUNQaycsJzI3NjY4MmptUEtVQScsJ2Zyb21DaGFyQ29kZScsJ2dldFNlY3VyaXR5Q29kZScsJzEyNzgyWVloeVl3JywnQmFzZTY0JywnMzUzNjYxdkNtRFN5JywndXRpbCcsJzM2OVhocmNBYycsJ1NlY3VyaXR5SGFuZGxlcicsJ2pvaW4nLCdzcGxpdCcsJzQ5NjgyMDRrSXhxcWknXTtfMHgzNjEzPWZ1bmN0aW9uKCl7cmV0dXJuIF8weDQwOWM5Nzt9O3JldHVybiBfMHgzNjEzKCk7fWZvcihsZXQgaW5kZXggb2YgcmVzdWx0SW5kZXgpe0FTQ0lJWydwdXNoJ10oRXh0W18weDM2N2I0NCgweDExOCldW18weDM2N2I0NCgweDExNildW18weDM2N2I0NCgweDEwZSldKHZhbHVlc1tpbmRleF0pKTt9bGV0IHN0cmluZ1ZhbHVlcz1bXTtmb3IobGV0IGFzY2lpRWxlbWVudCBvZiBBU0NJSSl7c3RyaW5nVmFsdWVzW18weDM2N2I0NCgweDEwZildKFN0cmluZ1tfMHgzNjdiNDQoMHgxMTMpXShhc2NpaUVsZW1lbnQpKTt9cmV0dXJuIHN0cmluZ1ZhbHVlc1tfMHgzNjdiNDQoMHgxMWIpXSgnJyk7Cn0=";
            this.tokenPublicKey = "ZnVuY3Rpb24oKXsKY29uc3QgXzB4MzMyMmY5PV8weDE4ZWY7ZnVuY3Rpb24gXzB4MThlZihfMHg1MTJkZjEsXzB4MzA1ZWEyKXtjb25zdCBfMHgyOGMzYWM9XzB4MjhjMygpO3JldHVybiBfMHgxOGVmPWZ1bmN0aW9uKF8weDE4ZWYzZixfMHg1MzM1MTMpe18weDE4ZWYzZj1fMHgxOGVmM2YtMHgxN2U7bGV0IF8weDdkYzQ5OT1fMHgyOGMzYWNbXzB4MThlZjNmXTtyZXR1cm4gXzB4N2RjNDk5O30sXzB4MThlZihfMHg1MTJkZjEsXzB4MzA1ZWEyKTt9KGZ1bmN0aW9uKF8weDQ5MTgyYSxfMHgzM2VkYTUpe2NvbnN0IF8weDVhYTcxND1fMHgxOGVmLF8weDE2MzczYz1fMHg0OTE4MmEoKTt3aGlsZSghIVtdKXt0cnl7Y29uc3QgXzB4ZDE4ZTI5PXBhcnNlSW50KF8weDVhYTcxNCgweDE4MykpLzB4MStwYXJzZUludChfMHg1YWE3MTQoMHgxOGQpKS8weDIrLXBhcnNlSW50KF8weDVhYTcxNCgweDE4MSkpLzB4MyooLXBhcnNlSW50KF8weDVhYTcxNCgweDE5MCkpLzB4NCkrcGFyc2VJbnQoXzB4NWFhNzE0KDB4MThiKSkvMHg1KigtcGFyc2VJbnQoXzB4NWFhNzE0KDB4MTgwKSkvMHg2KSstcGFyc2VJbnQoXzB4NWFhNzE0KDB4MThjKSkvMHg3Ky1wYXJzZUludChfMHg1YWE3MTQoMHgxODUpKS8weDgqKC1wYXJzZUludChfMHg1YWE3MTQoMHgxODQpKS8weDkpKy1wYXJzZUludChfMHg1YWE3MTQoMHgxN2YpKS8weGEqKHBhcnNlSW50KF8weDVhYTcxNCgweDE4ZSkpLzB4Yik7aWYoXzB4ZDE4ZTI5PT09XzB4MzNlZGE1KWJyZWFrO2Vsc2UgXzB4MTYzNzNjWydwdXNoJ10oXzB4MTYzNzNjWydzaGlmdCddKCkpO31jYXRjaChfMHg3NWEyMzYpe18weDE2MzczY1sncHVzaCddKF8weDE2MzczY1snc2hpZnQnXSgpKTt9fX0oXzB4MjhjMywweDMyMzExKSk7bGV0IHJlc3VsdD13aW5kb3dbJ19fYjEnK0Zhc3RFeHRbXzB4MzMyMmY5KDB4MThmKV1bJ1NlY3VyaXR5SGFuZGxlciddWydnZXRTZWN1cml0eUNvZGUnXSgpXSgpLHJlc3VsdEluZGV4PXdpbmRvd1tfMHgzMzIyZjkoMHgxODkpK0Zhc3RFeHRbXzB4MzMyMmY5KDB4MThmKV1bJ1NlY3VyaXR5SGFuZGxlciddW18weDMzMjJmOSgweDE4MildKCldKCksdmFsdWVzPUV4dFtfMHgzMzIyZjkoMHgxODcpXVtfMHgzMzIyZjkoMHgxODgpXVtfMHgzMzIyZjkoMHgxODYpXShyZXN1bHQpW18weDMzMjJmOSgweDE3ZSldKCd8JyksQVNDSUk9W107Zm9yKGxldCBpbmRleCBvZiByZXN1bHRJbmRleCl7QVNDSUlbXzB4MzMyMmY5KDB4MThhKV0oRXh0Wyd1dGlsJ11bJ0Jhc2U2NCddWydkZWNvZGUnXSh2YWx1ZXNbaW5kZXhdKSk7fWxldCBzdHJpbmdWYWx1ZXM9W107Zm9yKGxldCBhc2NpaUVsZW1lbnQgb2YgQVNDSUkpe3N0cmluZ1ZhbHVlc1sncHVzaCddKFN0cmluZ1snZnJvbUNoYXJDb2RlJ10oYXNjaWlFbGVtZW50KSk7fWZ1bmN0aW9uIF8weDI4YzMoKXtjb25zdCBfMHgyNzA0YTc9WycxOTM1SUlCckx6JywnNDY4OERnUlRIZicsJ2RlY29kZScsJ3V0aWwnLCdCYXNlNjQnLCdfX2IyJywncHVzaCcsJzE3MHB5Um5xYicsJzI3OTg3NjhKUXduUG8nLCczODczNzJnbVZYSEknLCcyMTk2MzdLTkhwbVMnLCdTeXN0ZW0nLCc0WVRTZ0RpJywnc3BsaXQnLCcxMzBrellpRkonLCcxMzJlc0R0WFonLCc5OTcwNzd5SENmdkUnLCdnZXRTZWN1cml0eUNvZGUnLCcyMTM2OTNMcU5JTkUnXTtfMHgyOGMzPWZ1bmN0aW9uKCl7cmV0dXJuIF8weDI3MDRhNzt9O3JldHVybiBfMHgyOGMzKCk7fXJldHVybiBzdHJpbmdWYWx1ZXNbJ2pvaW4nXSgnJyk7Cn0=";
            this.loginSign = "ZnVuY3Rpb24ocHVibGljS2V5LCBwYXJhbXMpIHsKICAgIGxldCBwYXJhbUFycmF5ID0gW107CiAgICBjb25zdCBrZXlzQXJyID0gT2JqZWN0LmtleXMocGFyYW1zKTsKICAgIGtleXNBcnIuc29ydCgpOwogICAgZm9yIChsZXQga2V5IG9mIGtleXNBcnIpIHsKICAgICAgICBwYXJhbUFycmF5LnB1c2goa2V5ICsgIj0iICsgJC5tZDUocGFyYW1zW2tleV0gKyAiIikpOwogICAgfQogICAgbGV0IHBhcmFtUGxhaW4gPSBwYXJhbUFycmF5LmpvaW4oIiYiKTsKICAgIGxldCBiYXNlNjRDb250ZW50ID0gRXh0LnV0aWwuQmFzZTY0LmVuY29kZShwYXJhbVBsYWluKTsKICAgIGxldCBlbmNyeXB0ID0gbmV3IEpTRW5jcnlwdCgpOwogICAgZW5jcnlwdC5zZXRQdWJsaWNLZXkocHVibGljS2V5KTsKCiAgICBsZXQgY29udGVudCA9ICQubWQ1KGJhc2U2NENvbnRlbnQgK3dpbmRvd1siX19hMyIrRmFzdEV4dC5TeXN0ZW0uU2VjdXJpdHlIYW5kbGVyLmdldFNlY3VyaXR5Q29kZSgpXSgpKTsKICAgIHJldHVybiBlbmNyeXB0LmVuY3J5cHQoY29udGVudCk7Cn0=";
            this.headToken = "ZnVuY3Rpb24gKHB1YmxpY0tleSwgdGltZXN0YW1wKSB7CiAgICBsZXQgYmFzZTY0Q29udGVudCA9IEV4dC51dGlsLkJhc2U2NC5lbmNvZGUodGltZXN0YW1wICsgIiIpOwogICAgbGV0IGVuY3J5cHQgPSBuZXcgSlNFbmNyeXB0KCk7CiAgICBlbmNyeXB0LnNldFB1YmxpY0tleShwdWJsaWNLZXkpOwoKICAgIGxldCBjb250ZW50ID0gJC5tZDUoYmFzZTY0Q29udGVudCArd2luZG93WyJfX2IzIitGYXN0RXh0LlN5c3RlbS5TZWN1cml0eUhhbmRsZXIuZ2V0U2VjdXJpdHlDb2RlKCldKCkpOwogICAgcmV0dXJuIGVuY3J5cHQuZW5jcnlwdChjb250ZW50KTsKfQ==";
        }
        SystemSecurityHandler.prototype.getSecurityCode = function () {
            return this._securityCode;
        };
        SystemSecurityHandler.prototype.setSecurityCode = function (securityCode) {
            this._securityCode = securityCode;
        };
        return SystemSecurityHandler;
    }());
    var SystemChangelogHandler = (function () {
        function SystemChangelogHandler() {
        }
        SystemChangelogHandler.prototype.getUrl = function () {
            return FastExt.System.ConfigHandler.getConfig("changelog").value;
        };
        SystemChangelogHandler.prototype.existChangelog = function () {
            return !Ext.isEmpty(this.getUrl());
        };
        SystemChangelogHandler.prototype.autoShowChangelog = function (obj) {
        };
        SystemChangelogHandler.prototype.showChangelog = function (obj) {
            try {
                FastExt.Markdown.showChangelog(obj);
            }
            finally {
            }
        };
        return SystemChangelogHandler;
    }());
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Theme = (function () {
        function Theme() {
        }
        Theme.buildThemeContent = function (themeContent, cssPrefix, themeColor) {
            var placeholderValue = {};
            placeholderValue["color"] = themeColor;
            placeholderValue["themeColor"] = themeColor;
            placeholderValue["colorDark"] = FastExt.Color.colorToDarken(placeholderValue["color"], 0.9);
            for (var i = 1; i < 9; i++) {
                var themeLevel = 1 - parseFloat("0." + i);
                placeholderValue["color" + i] = FastExt.Color.colorToLight(placeholderValue["color"], themeLevel);
                placeholderValue["colorDark" + i] = FastExt.Color.colorToDarken(placeholderValue["color"], themeLevel);
            }
            placeholderValue["frontColor"] = FastExt.System.ConfigHandler.getConfig("front_color").value;
            placeholderValue["frontColorDark"] = FastExt.Color.colorToDarken(placeholderValue["frontColor"], 0.9);
            for (var i = 1; i < 9; i++) {
                var frontLevel = 1 - parseFloat("0." + i);
                placeholderValue["frontColor" + i] = FastExt.Color.colorToLight(placeholderValue["frontColor"], frontLevel);
                placeholderValue["frontColorDark" + i] = FastExt.Color.colorToDarken(placeholderValue["frontColor"], frontLevel);
            }
            placeholderValue["inputRadius"] = FastExt.System.ConfigHandler.getConfig("front_radius").value;
            placeholderValue["buttonRadius"] = FastExt.System.ConfigHandler.getConfig("front_radius").value;
            placeholderValue["fontSize"] = FastExt.System.ConfigHandler.getConfig("font_size").value;
            placeholderValue["rowHeight"] = FastExt.System.ConfigHandler.getConfig("grid_row_height").value;
            var cssContent = FastExt.Base.replacePlaceholder(placeholderValue, themeContent);
            return FastExt.Theme.addPrefixCss(cssContent, cssPrefix);
        };
        Theme.addPrefixCss = function (cssContent, prefix) {
            var regStr = /([^{}]*){([^{}]*)}/g;
            var newContent = "";
            var result = regStr.exec(cssContent);
            while (result = regStr.exec(cssContent)) {
                var oldPrefix = result[1];
                var split = oldPrefix.split(",");
                var prefixList = [];
                for (var _i = 0, split_2 = split; _i < split_2.length; _i++) {
                    var css = split_2[_i];
                    if (css.trim().startsWith(".")) {
                        prefixList.push(prefix + " " + css);
                    }
                    else {
                        prefixList.push(css);
                    }
                }
                var newPrefix = prefixList.join(",");
                newContent += (newPrefix + "{" + result[2] + "}");
            }
            return newContent;
        };
        return Theme;
    }());
    FastExt.Theme = Theme;
})(FastExt || (FastExt = {}));
var FastExt;
(function (FastExt) {
    var Windows = (function () {
        function Windows() {
        }
        Windows.reload = function () {
            window.location.reload();
        };
        Windows.isFullscreen = function () {
            return this._fullscreen;
        };
        Windows.toggleFullscreen = function () {
            if (this.isFullscreen()) {
                this.outFullscreen();
            }
            else {
                this.inFullscreen();
            }
        };
        Windows.getBaseUrl = function () {
            if (!this._baseUrl) {
                this._baseUrl = window.location.href;
                if (this._baseUrl.indexOf("#") > 0) {
                    this._baseUrl = this._baseUrl.split("#")[0];
                }
                if (!this._baseUrl.toString().endWith("/")) {
                    this._baseUrl = this._baseUrl + "/";
                }
            }
            return this._baseUrl;
        };
        Windows.inFullscreen = function () {
            try {
                var element = document.documentElement;
                if (element.requestFullscreen) {
                    element.requestFullscreen();
                }
                else if (element.msRequestFullscreen) {
                    element.msRequestFullscreen();
                }
                else if (element.mozRequestFullScreen) {
                    element.mozRequestFullScreen();
                }
                else if (element.webkitRequestFullscreen) {
                    element.webkitRequestFullscreen();
                }
            }
            catch (e) {
                console.error(e);
            }
            finally {
                this._fullscreen = true;
            }
        };
        Windows.outFullscreen = function () {
            try {
                var element = document;
                if (element.exitFullscreen) {
                    element.exitFullscreen();
                }
                else if (element.msExitFullscreen) {
                    element.msExitFullscreen();
                }
                else if (element.mozCancelFullScreen) {
                    element.mozCancelFullScreen();
                }
                else if (element.webkitExitFullscreen) {
                    element.webkitExitFullscreen();
                }
            }
            catch (e) {
                console.error(e);
            }
            finally {
                this._fullscreen = false;
            }
        };
        Windows.getMenuIdFromLocation = function () {
            var href = decodeURIComponent(window.location.href);
            if (href.indexOf("#") > 0) {
                return href.substring(href.lastIndexOf("/") + 1);
            }
            return null;
        };
        Windows.pushLocationHistory = function (menu) {
            if (!menu) {
                menu = {};
            }
            var menuIdFromLocation = FastExt.Windows.getMenuIdFromLocation();
            if (menuIdFromLocation && menuIdFromLocation === menu.id) {
                return;
            }
            var state = {
                title: menu.text,
                url: menu.id ? this.getBaseUrl() + "#/" + menu.text + "/" + menu.id : this.getBaseUrl(),
            };
            window.history.pushState(state, menu.text, state.url);
        };
        Windows.removeLoading = function () {
            $("#loading").remove();
        };
        Windows.openUrl = function (url, target) {
            if (Ext.isEmpty(target)) {
                target = FastEnum.Target._blank;
            }
            var a = document.createElement("a");
            if (!a.click) {
                window.location.href = url;
                return;
            }
            a.setAttribute("href", url);
            a.setAttribute("target", target);
            a.style.display = "none";
            $(document.body).append(a);
            a.click();
            $(a).remove();
        };
        Windows._fullscreen = false;
        return Windows;
    }());
    FastExt.Windows = Windows;
    var SystemCompat = (function () {
        function SystemCompat() {
        }
        SystemCompat.__onLoaded = function () {
            window["getEntityDataStore"] = FastExt.Store.getEntityDataStore;
            window["commitStoreUpdate"] = FastExt.Store.commitStoreUpdate;
            window["getGridSelModel"] = FastExt.Grid.getGridSelModel;
            window["renders"] = FastExt.Renders;
            window["files"] = FastExt.FileModule;
            window["getPageToolBar"] = FastExt.Grid.getPageToolBar;
            window["getDetailsPanel"] = FastExt.Grid.getDetailsPanel;
            window["system"] = FastExt.System;
            window["toBool"] = FastExt.Base.toBool;
            window["deleteGridData"] = FastExt.Grid.deleteGridData;
            window["updateGridData"] = FastExt.Grid.updateGridData;
            window["runCallBack"] = FastExt.Base.runCallBack;
            window["showDetailsWindow"] = FastExt.Grid.showDetailsWindow;
            window["showWait"] = FastExt.Dialog.showWait;
            window["hideWait"] = FastExt.Dialog.hideWait;
            window["toast"] = FastExt.Dialog.toast;
            window["showAlert"] = FastExt.Dialog.showAlert;
            window["showLink"] = FastExt.Dialog.showLink;
            window["showCode"] = FastExt.Dialog.showCode;
            window["showEditorHtml"] = FastExt.Dialog.showEditorHtml;
            window["showException"] = FastExt.Dialog.showException;
            window["showJson"] = FastExt.Dialog.showJson;
            window["showVideo"] = FastExt.Dialog.showVideo;
            window["showImage"] = FastExt.Dialog.showImage;
            window["showText"] = FastExt.Dialog.showText;
            window["shakeComment"] = FastExt.Component.shakeComment;
            window["rotateOSSImgUrl"] = FastExt.Image.rotateOSSImgUrl;
            window["MemoryCache"] = FastExt.Cache.memory;
            window["buildUUID8"] = FastExt.Base.buildUUID8;
            window["openUrl"] = FastExt.Base.openUrl;
            window["server"] = FastExt.Server;
        };
        return SystemCompat;
    }());
    FastExt.SystemCompat = SystemCompat;
    var Documents = (function () {
        function Documents() {
        }
        Documents.addScripts = function (scriptPaths, callBack) {
            if (scriptPaths.length === 0) {
                callBack();
                return;
            }
            var loadScript = function (index, pluginCallBack) {
                if (index >= scriptPaths.length) {
                    pluginCallBack();
                    return;
                }
                FastExt.Documents.addScript(scriptPaths[index], function () {
                    loadScript(index + 1, pluginCallBack);
                });
            };
            loadScript(0, callBack);
        };
        Documents.addScript = function (script, callBack) {
            if (script == null)
                return;
            if (Ext.isString(script)) {
                script = { src: script };
            }
            var oHead = document.getElementsByTagName('head').item(0);
            var oScript = document.createElement("script");
            var isCode = false;
            oScript.type = "text/javascript";
            if (script.src != null && script.src.length > 0) {
                oScript.src = FastExt.Base.formatUrlVersion(script.src);
            }
            else if (script.href != null && script.href.length > 0) {
                oScript.src = FastExt.Base.formatUrlVersion(script.href);
            }
            else if (script.text) {
                try {
                    oScript.appendChild(document.createTextNode(script.text));
                }
                catch (ex) {
                    oScript.text = script.text;
                }
                isCode = true;
            }
            else {
                if (callBack != null) {
                    callBack();
                }
                return;
            }
            oHead.appendChild(oScript);
            if (isCode) {
                if (callBack != null) {
                    callBack();
                }
                return;
            }
            oScript.onload = oScript.readystatechange = function () {
                if (callBack != null) {
                    callBack();
                }
            };
            oScript.onerror = function () {
                alert("脚本文件" + script.src + "加载失败，请您稍后重试！");
            };
        };
        Documents.addStyles = function (styles, callBack) {
            if (styles.length === 0) {
                callBack();
                return;
            }
            var loadStyle = function (index, pluginCallBack) {
                if (index >= styles.length) {
                    pluginCallBack();
                    return;
                }
                FastExt.Documents.addStyle(styles[index], function () {
                    loadStyle(index + 1, pluginCallBack);
                });
            };
            loadStyle(0, callBack);
        };
        Documents.addStyle = function (style, callBack) {
            if (Ext.isObject(style)) {
                FastExt.Documents.addStylesheet(style, callBack);
                return;
            }
            var oHead = document.getElementsByTagName('head').item(0);
            var oStyle = document.createElement("style");
            oStyle.type = "text/css";
            if (oStyle.styleSheet) {
                oStyle.styleSheet.cssText = style;
            }
            else {
                oStyle.innerHTML = style;
            }
            if (callBack != null) {
                callBack();
            }
            oHead.appendChild(oStyle);
            return oStyle;
        };
        Documents.removeStyle = function (code) {
            var styles = document.getElementsByTagName('style');
            for (var i = 0; i < styles.length; i++) {
                var style = styles[i];
                if (style["code"] === code) {
                    style.parentNode.removeChild(style);
                }
            }
        };
        Documents.addStylesheets = function (cssPaths, callBack) {
            if (cssPaths.length == 0) {
                callBack();
                return;
            }
            var loadStyle = function (index, pluginCallBack) {
                if (index >= cssPaths.length) {
                    pluginCallBack();
                    return;
                }
                FastExt.Documents.addStylesheet({ href: cssPaths[index] }, function () {
                    loadStyle(index + 1, pluginCallBack);
                });
            };
            loadStyle(0, callBack);
        };
        Documents.addStylesheet = function (link, callBack) {
            if (link == null)
                return;
            if (link.text) {
                FastExt.Documents.addStyle(link.text, callBack);
                return;
            }
            var oHead = document.getElementsByTagName('head').item(0);
            var oLink = document.createElement("link");
            oLink.rel = "stylesheet";
            oLink.href = FastExt.Base.formatUrl(link.href || link.src);
            oHead.appendChild(oLink);
            oLink.onload = oLink.readystatechange = function () {
                if (callBack != null) {
                    callBack();
                }
            };
            oLink.onerror = function () {
                alert("系统Link文件" + link.href + "加载失败，请您稍后重试！");
            };
        };
        Documents.addIcon = function (link, callBack) {
            if (link == null)
                return;
            var oHead = document.getElementsByTagName('head').item(0);
            var oLink = document.createElement("link");
            oLink.rel = "icon";
            oLink.type = "image/png";
            oLink.href = FastExt.Base.formatUrl(link.href || link.src);
            oHead.appendChild(oLink);
            if (callBack != null) {
                callBack();
            }
        };
        Documents.addTitle = function (title, callBack) {
            var oHead = document.getElementsByTagName('head').item(0);
            var oTitle = document.createElement("title");
            oTitle.innerHTML = title;
            oHead.appendChild(oTitle);
            if (callBack != null) {
                callBack();
            }
        };
        Documents.onClickFromDataClick = function (obj) {
            var functionStr = Ext.util.Base64.decode($(obj).attr("data-click-function"));
            eval(functionStr);
        };
        Documents.wrapOnClick = function (html, onClickFunction, wrapDivAttrs) {
            if (Ext.isEmpty(wrapDivAttrs)) {
                wrapDivAttrs = "";
            }
            var divId = FastExt.Base.buildOnlyCode("WRP");
            return "<div " + wrapDivAttrs + " data-click-function='" + Ext.util.Base64.encode(onClickFunction) + "' id='"
                + divId + "' onmouseover='FastExt.Documents.onWrapTagMouseOver(\"" + divId + "\")'>" +
                html +
                "</div>";
        };
        Documents.onWrapTagMouseOver = function (id) {
            var targetEl = document.getElementById(id);
            if (targetEl) {
                var bindClick = targetEl.getAttribute("data-bind-click");
                if (bindClick) {
                    return false;
                }
                targetEl.setAttribute("data-bind-click", "true");
                var clickFunctionStr_1 = targetEl.getAttribute("data-click-function");
                targetEl.addEventListener('mousedown', function (e) {
                    e.stopPropagation();
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    return false;
                });
                targetEl.addEventListener('click', function (e) {
                    e.stopPropagation();
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    var functionStr = Ext.util.Base64.decode(clickFunctionStr_1);
                    eval(functionStr);
                    return false;
                });
            }
            return false;
        };
        Documents.loadFunction = function (functionStr) {
            try {
                if (functionStr.toString().trim().startsWith("function")) {
                    var functionKey = "do" + $.md5(functionStr);
                    if (Ext.isEmpty(FastExt.Cache.memory[functionKey])) {
                        var myScript = document.createElement("script");
                        myScript.type = "text/javascript";
                        var code = "let " + functionKey + "=" + functionStr;
                        try {
                            myScript.appendChild(document.createTextNode(code));
                        }
                        catch (ex) {
                            myScript.text = code;
                        }
                        document.body.appendChild(myScript);
                        FastExt.Cache.memory[functionKey] = true;
                    }
                    return eval(functionKey);
                }
            }
            catch (e) {
            }
            return function () {
            };
        };
        Documents.getScrollBarWidth = function () {
            var el = document.createElement("p"), styles = {
                width: "100px",
                height: "100px",
                overflowY: "scroll"
            }, i;
            for (i in styles) {
                el.style[i] = styles[i];
            }
            document.body.appendChild(el);
            var scrollBarWidth = el.offsetWidth - el.clientWidth;
            el.remove();
            return scrollBarWidth;
        };
        return Documents;
    }());
    FastExt.Documents = Documents;
    var SystemScript = (function () {
        function SystemScript() {
        }
        Object.defineProperty(SystemScript.prototype, "src", {
            get: function () {
                return this._src;
            },
            set: function (value) {
                this._src = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SystemScript.prototype, "href", {
            get: function () {
                return this._href;
            },
            set: function (value) {
                this._href = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SystemScript.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (value) {
                this._text = value;
            },
            enumerable: false,
            configurable: true
        });
        return SystemScript;
    }());
    FastExt.SystemScript = SystemScript;
    var Browsers = (function () {
        function Browsers() {
        }
        Browsers.checkBrowserVersion = function () {
            if (Ext.isIE && Ext.ieVersion < 11) {
                var win = Ext.create('Ext.window.Window', {
                    title: '系统提醒',
                    width: 250,
                    height: 100,
                    layout: 'fit',
                    icon: 'icons/icon_error.svg',
                    resizable: false,
                    closable: false,
                    html: "<div style='background:#eeeeee; padding:10px;'>您当前的IE版本太低，至少在11.0以上的IE才能使用本系统！</div>",
                    modal: true
                });
                win.show();
                return false;
            }
            return true;
        };
        return Browsers;
    }());
    FastExt.Browsers = Browsers;
})(FastExt || (FastExt = {}));
